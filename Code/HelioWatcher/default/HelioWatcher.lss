
HelioWatcher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000010a2  00800200  0000e016  0000e0aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000493  008012a2  008012a2  0000f14c  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  0000f14c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000114c  00000000  00000000  0000f28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005ce1  00000000  00000000  000103d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ef9  00000000  00000000  000160b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003ff3  00000000  00000000  00016fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000af0  00000000  00000000  0001afa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001755  00000000  00000000  0001ba98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003e30  00000000  00000000  0001d1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  0002101d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__ctors_end>
       4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
       8:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
       c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      10:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      14:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      18:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      1c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      20:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      24:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      28:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      2c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      30:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      34:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      38:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      3c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      40:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      44:	0c 94 52 3f 	jmp	0x7ea4	; 0x7ea4 <__vector_17>
      48:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      4c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      50:	0c 94 1e 40 	jmp	0x803c	; 0x803c <__vector_20>
      54:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      58:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      5c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      60:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      64:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      68:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      6c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      70:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      74:	0c 94 ef 3f 	jmp	0x7fde	; 0x7fde <__vector_29>
      78:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      7c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      80:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      84:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      88:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      8c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      90:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      94:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      98:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      9c:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      a0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      a4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      a8:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      ac:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      b0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      b4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      b8:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      bc:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      c0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      c4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      c8:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      cc:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      d0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      d4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      d8:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      dc:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      e0:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__bad_interrupt>
      e4:	03 6e       	ori	r16, 0xE3	; 227
      e6:	db 36       	cpi	r29, 0x6B	; 107
      e8:	3d 9a       	sbi	0x07, 5	; 7
      ea:	99 99       	sbic	0x13, 1	; 19
      ec:	99 3d       	cpi	r25, 0xD9	; 217
      ee:	ab aa       	std	Y+51, r10	; 0x33
      f0:	aa 2a       	or	r10, r26
      f2:	3e 00       	.word	0x003e	; ????
      f4:	00 00       	nop
      f6:	80 3f       	cpi	r24, 0xF0	; 240
      f8:	08 4a       	sbci	r16, 0xA8	; 168
      fa:	d7 3b       	cpi	r29, 0xB7	; 183
      fc:	3b ce       	rjmp	.-906    	; 0xfffffd74 <__eeprom_end+0xff7efd74>
      fe:	01 6e       	ori	r16, 0xE1	; 225
     100:	84 bc       	out	0x24, r8	; 36
     102:	bf fd       	.word	0xfdbf	; ????
     104:	c1 2f       	mov	r28, r17
     106:	3d 6c       	ori	r19, 0xCD	; 205
     108:	74 31       	cpi	r23, 0x14	; 20
     10a:	9a bd       	out	0x2a, r25	; 42
     10c:	56 83       	std	Z+6, r21	; 0x06
     10e:	3d da       	rcall	.-2950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
     110:	3d 00       	.word	0x003d	; ????
     112:	c7 7f       	andi	r28, 0xF7	; 247
     114:	11 be       	out	0x31, r1	; 49
     116:	d9 e4       	ldi	r29, 0x49	; 73
     118:	bb 4c       	sbci	r27, 0xCB	; 203
     11a:	3e 91       	ld	r19, -X
     11c:	6b aa       	std	Y+51, r6	; 0x33
     11e:	aa be       	out	0x3a, r10	; 58
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	3f 07       	cpc	r19, r31
     126:	2c 7a       	andi	r18, 0xAC	; 172
     128:	a5 ba       	out	0x15, r10	; 21
     12a:	6c c5       	rjmp	.+2776   	; 0xc04 <L_TERMS+0x920>
     12c:	90 da       	rcall	.-2784   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     12e:	3b 93       	.word	0x933b	; ????
     130:	65 fc       	sbrc	r6, 5
     132:	8b bc       	out	0x2b, r8	; 43
     134:	53 f8       	bld	r5, 3
     136:	10 fd       	sbrc	r17, 0
     138:	3c 56       	subi	r19, 0x6C	; 108
     13a:	92 83       	std	Z+2, r25	; 0x02
     13c:	4d bd       	out	0x2d, r20	; 45
     13e:	87 9d       	mul	r24, r7
     140:	3a b6       	in	r3, 0x3a	; 58
     142:	3d cb       	rjmp	.-2438   	; 0xfffff7be <__eeprom_end+0xff7ef7be>
     144:	c9 bf       	out	0x39, r28	; 57
     146:	5b be       	out	0x3b, r5	; 59
     148:	73 da       	rcall	.-2842   	; 0xfffff630 <__eeprom_end+0xff7ef630>
     14a:	0f c9       	rjmp	.-3554   	; 0xfffff36a <__eeprom_end+0xff7ef36a>
     14c:	3f 05       	cpc	r19, r15
     14e:	a8 4c       	sbci	r26, 0xC8	; 200
     150:	cd b2       	in	r12, 0x1d	; 29
     152:	d4 4e       	sbci	r29, 0xE4	; 228
     154:	b9 38       	cpi	r27, 0x89	; 137
     156:	36 a9       	ldd	r19, Z+54	; 0x36
     158:	02 0c       	add	r0, r2
     15a:	50 b9       	out	0x00, r21	; 0
     15c:	91 86       	std	Z+9, r9	; 0x09
     15e:	88 08       	sbc	r8, r8
     160:	3c a6       	std	Y+44, r3	; 0x2c
     162:	aa aa       	std	Y+50, r10	; 0x32
     164:	2a be       	out	0x3a, r2	; 58
     166:	00 00       	nop
     168:	00 80       	ld	r0, Z
     16a:	3f 06       	cpc	r3, r31
     16c:	64 ec       	ldi	r22, 0xC4	; 196
     16e:	1b 3c       	cpi	r17, 0xCB	; 203
     170:	04 bc       	out	0x24, r0	; 36
     172:	16 3e       	cpi	r17, 0xE6	; 230
     174:	3b e5       	ldi	r19, 0x5B	; 91
     176:	b9 3c       	cpi	r27, 0xC9	; 201
     178:	c9 3c       	cpi	r28, 0xC9	; 201
     17a:	37 c2       	rjmp	.+1134   	; 0x5ea <L_TERMS+0x306>
     17c:	9e 5a       	subi	r25, 0xAE	; 174
     17e:	3d 66       	ori	r19, 0x6D	; 109
     180:	04 98       	cbi	0x00, 4	; 0
     182:	08 3e       	cpi	r16, 0xE8	; 232
     184:	ea 69       	ori	r30, 0x9A	; 154
     186:	aa aa       	std	Y+50, r10	; 0x32
     188:	3e 00       	.word	0x003e	; ????
     18a:	00 00       	nop
     18c:	80 3f       	cpi	r24, 0xF0	; 240
     18e:	07 63       	ori	r16, 0x37	; 55
     190:	42 36       	cpi	r20, 0x62	; 98
     192:	b7 9b       	sbis	0x16, 7	; 22
     194:	d8 a7       	std	Y+40, r29	; 0x28
     196:	1a 39       	cpi	r17, 0x9A	; 154
     198:	68 56       	subi	r22, 0x68	; 104
     19a:	18 ae       	std	Y+56, r1	; 0x38
     19c:	ba ab       	std	Y+50, r27	; 0x32
     19e:	55 8c       	ldd	r5, Z+29	; 0x1d
     1a0:	1d 3c       	cpi	r17, 0xCD	; 205
     1a2:	b7 cc       	rjmp	.-1682   	; 0xfffffb12 <__eeprom_end+0xff7efb12>
     1a4:	57 63       	ori	r21, 0x37	; 55
     1a6:	bd 6d       	ori	r27, 0xDD	; 221
     1a8:	ed fd       	.word	0xfded	; ????
     1aa:	75 3e       	cpi	r23, 0xE5	; 229
     1ac:	f6 17       	cp	r31, r22
     1ae:	72 31       	cpi	r23, 0x12	; 18
     1b0:	bf 00       	.word	0x00bf	; ????
     1b2:	00 00       	nop
     1b4:	80 3f       	cpi	r24, 0xF0	; 240
     1b6:	08 00       	.word	0x0008	; ????
     1b8:	00 00       	nop
     1ba:	be 92       	st	-X, r11
     1bc:	24 49       	sbci	r18, 0x94	; 148
     1be:	12 3e       	cpi	r17, 0xE2	; 226
     1c0:	ab aa       	std	Y+51, r10	; 0x33
     1c2:	aa 2a       	or	r10, r26
     1c4:	be cd       	rjmp	.-1156   	; 0xfffffd42 <__eeprom_end+0xff7efd42>
     1c6:	cc cc       	rjmp	.-1640   	; 0xfffffb60 <__eeprom_end+0xff7efb60>
     1c8:	4c 3e       	cpi	r20, 0xEC	; 236
     1ca:	00 00       	nop
     1cc:	00 80       	ld	r0, Z
     1ce:	be ab       	std	Y+54, r27	; 0x36
     1d0:	aa aa       	std	Y+50, r10	; 0x32
     1d2:	aa 3e       	cpi	r26, 0xEA	; 234
     1d4:	00 00       	nop
     1d6:	00 00       	nop
     1d8:	bf 00       	.word	0x00bf	; ????
     1da:	00 00       	nop
     1dc:	80 3f       	cpi	r24, 0xF0	; 240
     1de:	00 00       	nop
     1e0:	00 00       	nop
     1e2:	00 08       	sbc	r0, r0
     1e4:	41 78       	andi	r20, 0x81	; 129
     1e6:	d3 bb       	out	0x13, r29	; 19
     1e8:	43 87       	std	Z+11, r20	; 0x0b
     1ea:	d1 13       	cpse	r29, r17
     1ec:	3d 19       	sub	r19, r13
     1ee:	0e 3c       	cpi	r16, 0xCE	; 206
     1f0:	c3 bd       	out	0x23, r28	; 35
     1f2:	42 82       	std	Z+2, r4	; 0x02
     1f4:	ad 2b       	or	r26, r29
     1f6:	3e 68       	ori	r19, 0x8E	; 142
     1f8:	ec 82       	std	Y+4, r14	; 0x04
     1fa:	76 be       	out	0x36, r7	; 54
     1fc:	d9 8f       	std	Y+25, r29	; 0x19
     1fe:	e1 a9       	ldd	r30, Z+49	; 0x31
     200:	3e 4c       	sbci	r19, 0xCE	; 206
     202:	80 ef       	ldi	r24, 0xF0	; 240
     204:	ff be       	out	0x3f, r15	; 63
     206:	01 c4       	rjmp	.+2050   	; 0xa0a <L_TERMS+0x726>
     208:	ff 7f       	andi	r31, 0xFF	; 255
     20a:	3f 00       	.word	0x003f	; ????
     20c:	00 00       	nop
	...

00000210 <__c.1790>:
     210:	6e 61 6e 00                                         nan.

00000214 <__c.1788>:
     214:	69 6e 66 00                                         inf.

00000218 <HexChars>:
     218:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

00000229 <__c.1415>:
     229:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000232 <__c.1409>:
     232:	1b 5b 3f 32 35 6c 00                                .[?25l.

00000239 <__c.1407>:
     239:	1b 5b 3f 32 35 68 00                                .[?25h.

00000240 <__c.1401>:
     240:	1b 5b 25 64 6d 00                                   .[%dm.

00000246 <__c.1396>:
     246:	1b 5b 32 4a 00                                      .[2J.

0000024b <__c.1391>:
     24b:	1b 63 00                                            .c.

0000024e <__c.1392>:
     24e:	20 20 20 00                                            .

00000252 <__c.1390>:
     252:	20 20 20 20 20 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d          -----------
     262:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     272:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     282:	2d 2d 2d 2d 20 20 2d 2d 2d 2d 20 41 53 43 49 49     ----  ---- ASCII
     292:	20 2d 2d 2d 2d 2d 0d 0a 00                           -----...

0000029b <__c.1388>:
     29b:	20 20 20 20 20 30 30 20 30 31 20 30 32 20 30 33          00 01 02 03
     2ab:	20 30 34 20 30 35 20 30 36 20 30 37 20 30 38 20      04 05 06 07 08 
     2bb:	30 39 20 30 41 20 30 42 20 30 43 20 30 44 20 30     09 0A 0B 0C 0D 0
     2cb:	45 20 30 46 20 20 30 31 32 33 34 35 36 37 38 39     E 0F  0123456789
     2db:	41 42 43 44 45 46 0d 0a 00                          ABCDEF...

000002e4 <L_TERMS>:
     2e4:	56 39 27 4d 00 00 00 00 00 00 00 00 60 f5 4b 4a     V9'M........`.KJ
     2f4:	8d 6a 95 40 9b 58 c4 45 00 4e 08 47 03 09 94 40     .j.@.X.E.N.G...@
     304:	9b 58 44 46 00 90 5a 45 56 9f 2f 40 14 cb b3 45     .XDF..ZEV./@...E
     314:	00 a0 55 45 b3 0c 35 40 78 7a 61 40 00 00 44 45     ..UE..5@xza@..DE
     324:	3d 2c 68 40 e3 c8 97 47 00 40 27 45 13 61 8d 40     =,h@...G.@'E.a.@
     334:	5b a3 f5 45 00 70 12 45 8f 53 c4 40 5b a3 75 45     [..E.p.E.S.@[.uE
     344:	00 80 a5 44 7b 14 3e 3f 14 cb 33 46 00 20 9f 44     ...D{.>?..3F. .D
     354:	d9 5f 02 40 39 6c 04 44 00 e0 95 44 5f 07 8e 3f     ._.@9l.D...D_..?
     364:	fe 2a c5 44 00 80 77 44 bc 74 a7 40 6a e7 b7 45     .*.D..wD.t.@j..E
     374:	00 80 61 44 48 e1 02 40 4e 62 d2 41 00 40 56 44     ..aDH..@Nb.A.@VD
     384:	12 83 60 40 12 13 c7 43 00 00 43 44 79 e9 96 3f     ..`@...C..CDy..?
     394:	8d 3d a3 45 00 40 3c 44 ac 1c 22 40 6d 1c ac 45     .=.E.@<D.."@m..E
     3a4:	00 80 fc 43 f0 a7 92 40 75 42 93 46 00 00 f6 43     ...C...@uB.F...C
     3b4:	5c 8f 86 40 79 e1 41 44 00 80 b2 43 48 e1 3a 40     \..@y.AD...CH.:@
     3c4:	4c 37 89 3d 00 80 9e 43 02 2b bb 40 84 3a 38 46     L7.=...C.+.@.:8F
     3d4:	00 00 8e 43 6f 12 f3 3f 12 13 47 44 00 80 87 43     ...Co..?..GD...C
     3e4:	ae 47 a1 3e 51 84 2b 46 00 00 73 43 d7 a3 b0 3e     .G.>Q.+F..sC...>
     3f4:	39 76 ab 45 00 00 4e 43 c1 ca 99 40 06 05 1f 45     9v.E..NC...@...E
     404:	00 00 4d 43 64 3b ef 3f 25 29 ae 45 00 00 4a 43     ..MCd;.?%).E..JC
     414:	df 4f 1d 40 37 ae bd 45 00 00 1c 43 7d 3f 55 3f     .O.@7..E...C}?U?
     424:	8b 4c 55 43 00 00 04 43 d3 4d 5a 40 68 e7 37 45     .LUC...C.MZ@h.7E
     434:	00 00 fc 42 be 9f 8a 3f 33 33 a6 41 00 00 e6 42     ...B...?33.A...B
     444:	b8 1e 25 3f 48 e1 7a 3f 00 00 ce 42 e5 d0 22 3f     ..%?H.z?...B.."?
     454:	06 b0 92 45 00 00 cc 42 23 db 79 3f 5b a3 75 46     ...E...B#.y?[.uF
     464:	00 00 cc 42 44 8b 88 40 e3 a5 e3 40 00 00 c6 42     ...BD..@...@...B
     474:	52 b8 c6 40 b8 22 06 45 00 00 c4 42 7b 14 2e 3f     R..@.".E...B{..?
     484:	85 6b 1b 43 00 00 ac 42 29 5c bf 40 2c 3a 1d 48     .k.C...B)\.@,:.H
     494:	00 00 aa 42 66 66 a6 3f ae 1f c4 45 00 00 aa 42     ...Bff.?...E...B
     4a4:	48 e1 6a 40 5a 83 8b 47 00 00 a0 42 14 ae e7 3f     H.j@Z..G...B...?
     4b4:	4d d8 86 46 00 00 9e 42 5c 8f 42 40 d7 11 3c 46     M..F...B\.B@..<F
     4c4:	00 00 96 42 ae 47 e1 3f 0a 05 9f 45 00 00 94 42     ...B.G.?...E...B
     4d4:	00 00 60 40 0a 2b 45 45 00 00 94 42 8f c2 95 40     ..`@.+EE...B...@
     4e4:	7b 74 48 44 00 00 8c 42 e1 7a 54 3f 0a 77 13 46     {tHD...B.zT?.w.F
     4f4:	00 00 78 42 52 b8 7e 40 8f ed 09 46 00 00 74 42     ..xBR.~@...F..tB
     504:	c3 f5 e8 3f 33 67 dd 45 00 00 64 42 85 eb 31 40     ...?3g.E..dB..1@
     514:	cd 74 c4 45 00 00 60 42 e1 7a 8c 40 00 fe 5c 46     .t.E..`B.z.@..\F
     524:	00 00 60 42 7b 14 5e 40 66 3c c4 45 00 00 50 42     ..`B{.^@f<.E..PB
     534:	5c 8f 42 3e 33 ae 3d 46 00 00 50 42 71 3d aa 3f     \.B>3.=F..PBq=.?
     544:	a4 80 da 44 00 00 4c 42 29 5c 8f 3e d7 03 b7 45     ...D..LB)\.>...E
     554:	00 00 44 42 48 e1 fa 3e 66 4e 95 44 00 00 24 42     ..DBH..>fN.D..$B
     564:	0a d7 ab 40 f6 b4 03 46 00 00 24 42 9a 99 19 40     ...@...F..$B...@
     574:	1a 86 99 46 00 00 1c 42 a4 70 c5 40 8f 3d 23 46     ...F...B.p.@.=#F
     584:	00 00 14 42 ae 47 c1 40 29 95 1f 46 00 00 14 42     ...B.G.@)..F...B
     594:	e1 7a 24 40 29 6c 84 44 00 00 10 42 48 e1 da 3f     .z$@)l.D...BH..?
     5a4:	ec 0d 13 45 00 00 10 42 0a d7 e3 3f 29 e6 d4 45     ...E...B...?)..E
     5b4:	00 00 04 42 3d 0a 17 3f b3 fb 8a 46 00 00 f0 41     ...B=..?...F...A
     5c4:	ae 47 e1 3e 6d 0e a4 47 00 00 f0 41 29 5c 2f 40     .G.>m..G...A)\/@
     5d4:	d7 bb a8 44 00 00 c8 41 71 3d 4a 40 d7 93 92 45     ...D...Aq=J@...E
     5e4:	81 4b 12 53 00 00 00 00 00 00 00 00 c0 3a 49 48     .K.S.........:IH
     5f4:	34 68 2b 40 9b 58 c4 45 00 78 86 45 7a a5 28 40     4h+@.X.E.x.Ez.(@
     604:	9b 58 44 46 00 80 d4 43 1f 85 cb 3f d5 78 61 40     .XDF...C...?.xa@
     614:	00 00 ee 42 d5 78 b9 40 4e 62 d2 41 00 00 da 42     ...B.x.@Nb.A...B
     624:	f2 d2 3d 40 02 2b c5 44 00 00 ba 42 8f c2 25 40     ..=@.+.D...B..%@
     634:	76 42 93 46 00 00 90 42 85 eb 91 3f 29 6c 04 44     vB.F...B...?)l.D
     644:	00 00 88 42 29 5c ef 3f 33 13 c7 43 00 00 86 42     ...B)\.?3..C...B
     654:	b8 1e 8d 40 66 1c ac 45 00 00 6c 42 c3 f5 38 40     ...@f..E..lB..8@
     664:	85 3d a3 45 00 00 60 42 48 e1 0a 40 85 6b 1b 43     .=.E..`BH..@.k.C
     674:	00 00 34 42 cd cc cc 3e 33 13 47 44 00 00 10 42     ..4B...>3.GD...B
     684:	d7 a3 f0 3e 48 e1 41 44 00 00 e8 41 9a 99 29 40     ...>H.AD...A..)@
     694:	1f 85 e3 40 00 00 a8 41 48 e1 aa 40 48 e1 7a 3f     ...@...AH..@H.z?
     6a4:	00 00 98 41 cd cc ec 3f 3d 76 ab 45 00 00 98 41     ...A...?=v.E...A
     6b4:	3d 0a 9f 40 cd 4c 55 43 00 00 88 41 29 5c 3f 40     =..@.LUC...A)\?@
     6c4:	ae 1f c4 45 00 00 80 41 8f c2 f5 3c f6 04 1f 45     ...E...A...<...E
     6d4:	00 00 80 41 3d 0a b7 3f b8 22 06 45 00 00 70 41     ...A=..?.".E..pA
     6e4:	48 e1 9a 3f 52 84 2b 46 00 00 40 41 b8 1e 35 40     H..?R.+F..@A..5@
     6f4:	a4 80 da 44 00 00 40 41 d7 a3 50 40 0a 05 9f 45     ...D..@A..P@...E
     704:	00 00 40 41 d7 a3 a8 40 66 4e 95 44 00 00 40 41     ..@A...@fN.D..@A
     714:	b8 1e 05 40 00 b0 92 45 00 00 30 41 b8 1e 45 3f     ...@...E..0A..E?
     724:	7b 64 0a 44 00 00 20 41 66 66 a6 3f cd 74 c4 45     {d.D.. Aff.?.t.E
     734:	00 00 20 41 14 ae 87 40 d7 bb a8 44 00 00 10 41     .. A...@...D...A
     744:	cd cc 2c 40 e1 ba 72 43 00 00 10 41 e1 7a b4 40     ..,@..rC...A.z.@
     754:	14 ee 6d 44 00 00 00 41 9a 99 a9 40 ec 0d 13 45     ..mD...A...@...E
     764:	00 00 c0 40 9a 99 29 40 0a 77 13 46 00 00 c0 40     ...@..)@.w.F...@
     774:	a4 70 95 40 d7 93 92 45 00 00 00 00 00 00 00 00     .p.@...E........
	...
     8e4:	00 b7 4e 47 00 00 00 00 00 00 00 00 00 40 08 46     ..NG.........@.F
     8f4:	93 3a 89 3f 9b 58 c4 45 00 80 9a 43 b6 f3 5d 3f     .:.?.X.E...C..]?
     904:	9c 58 44 46 00 00 d8 41 cd cc 4c 3d ae 47 61 40     .XDF...A..L=.Ga@
     914:	00 00 80 41 7b 14 a6 40 66 66 d2 41 00 00 80 41     ...A{..@ff.A...A
     924:	1f 85 6b 40 85 6b 1b 43 00 00 20 41 5c 8f 42 3f     ..k@.k.C.. A\.B?
     934:	76 42 93 46 00 00 10 41 0a d7 03 40 e3 c8 97 47     vB.F...A...@...G
     944:	00 00 e0 40 e1 7a 54 3f 48 e1 41 44 00 00 a0 40     ...@.zT?H.AD...@
     954:	b8 1e 95 40 e1 2a c5 44 00 00 80 40 0a d7 83 3f     ...@.*.D...@...?
     964:	1f 85 e3 40 00 00 80 40 f6 28 5c 40 1f 29 ae 45     ...@...@.(\@.).E
     974:	00 00 40 40 e1 7a a4 40 33 13 47 44 00 00 40 40     ..@@.z.@3.GD..@@
     984:	9a 99 c1 40 66 1c ac 45 00 00 40 40 ec 51 98 3f     ...@f..E..@@.Q.?
     994:	e1 ba 72 43 00 00 40 40 0a d7 c3 40 29 6c 04 44     ..rC..@@...@)l.D
     9a4:	00 00 40 40 52 b8 9e 3e 33 13 c7 43 00 00 40 40     ..@@R..>3..C..@@
     9b4:	85 eb 11 40 7b 64 0a 44 00 00 00 40 f6 28 8c 40     ...@{d.D...@.(.@
     9c4:	85 3d a3 45 00 00 00 40 00 00 70 40 48 e1 7a 3f     .=.E...@..p@H.z?
	...
     be4:	00 80 90 43 0c 02 bb 40 9c 58 c4 45 00 00 0c 42     ...C...@.X.E...B
	...
     bfc:	00 00 88 41 14 ae af 40 9a 58 44 46 00 00 40 40     ...A...@.XDF..@@
     c0c:	66 66 a6 40 85 6b 1b 43 00 00 80 3f 3d 0a 97 40     ff.@.k.C...?=..@
     c1c:	ae 47 61 40 00 00 80 3f 9a 99 a9 40 76 42 93 46     .Ga@...?...@vB.F
     c2c:	00 00 80 3f 3d 0a bf 40 e1 ba 72 43 00 00 00 00     ...?=..@..rC....
	...
     ee4:	00 00 e4 42 87 16 49 40 00 00 00 00 00 00 00 41     ...B..I@.......A
     ef4:	f6 28 84 40 a4 58 c4 45 00 00 80 3f 8f c2 75 40     .(.@.X.E...?..u@
     f04:	9a 58 44 46 00 00 00 00 00 00 00 00 00 00 00 00     .XDF............
	...
    11e4:	00 00 80 3f c3 f5 48 40 00 00 00 00 00 00 00 00     ...?..H@........
	...

000014e4 <B_TERMS>:
    14e4:	00 00 8c 43 6a bc 4c 40 55 b7 a4 47 00 00 cc 42     ...Cj.L@U..G...B
    14f4:	06 81 ad 40 6d 1c ac 45 00 00 a0 42 ec 51 78 40     ...@m..E...B.Qx@
    1504:	85 3d a3 45 00 00 30 42 cd cc 6c 40 ec 0d 13 45     .=.E..0B..l@...E
    1514:	00 00 00 42 00 00 80 40 e1 2a c5 44 00 00 10 41     ...B...@.*.D...A
    1524:	9a 99 79 40 66 1c ac 45 00 00 c0 40 a4 70 dd 3f     ..y@f..E...@.p.?
    1534:	85 3d a3 45 00 00 00 00 00 00 00 00 00 00 00 00     .=.E............
	...

0000155c <R_TERMS>:
    155c:	f5 c2 be 4c 00 00 00 00 00 00 00 00 60 f1 cb 49     ...L........`..I
    156c:	3a 4d 46 40 9b 58 c4 45 00 10 5a 46 37 89 43 40     :MF@.X.E..ZF7.C@
    157c:	9b 58 44 46 00 c0 40 45 1d 5a a6 40 e3 c8 97 47     .XDF..@E.Z.@...G
    158c:	00 80 cb 44 5b 42 96 3f 14 cb b3 45 00 00 c5 44     ...D[B.?...E...D
    159c:	9c 33 36 40 5b a3 f5 45 00 40 67 44 fa 7e ae 40     .36@[..E.@gD.~.@
    15ac:	14 cb 33 46 00 80 07 44 4a 0c 92 40 5c a3 75 45     ..3F...DJ..@\.uE
    15bc:	00 00 ec 43 d3 4d 6a 40 6a e7 b7 45 00 00 ad 43     ...C.Mj@j..E...C
    15cc:	b4 c8 76 3f 6d 1c ac 45 00 80 a4 43 cd cc bc 40     ..v?m..E...C...@
    15dc:	8d 3d a3 45 00 80 99 43 87 16 99 3e 25 29 ae 45     .=.E...C...>%).E
    15ec:	00 00 73 43 6a bc 88 40 84 3a 38 46 00 00 54 43     ..sCj..@.:8F..TC
    15fc:	a0 1a bb 40 02 2b c5 44 00 00 3a 43 39 b4 a0 40     ...@.+.D..:C9..@
    160c:	51 84 2b 46 00 00 2f 43 9c c4 40 40 75 42 93 46     Q.+F../C..@@uB.F
    161c:	00 00 dc 42 8f c2 a1 40 39 76 ab 45 00 00 c4 42     ...B...@9v.E...B
    162c:	0a d7 63 3f 3d ae bd 45 00 00 ac 42 7b 14 b6 40     ..c?=..E...B{..@
    163c:	5c a3 75 46 00 00 ac 42 5c 8f a2 3f 2c 3a 1d 48     \.uF...B\..?,:.H
    164c:	00 00 82 42 71 3d 8a 3e 4d d8 86 46 00 00 7c 42     ...Bq=.>M..F..|B
    165c:	1f 85 6b 3f 29 6c 04 44 00 00 64 42 d7 a3 00 40     ..k?)l.D..dB...@
    166c:	6d 0e a4 47 00 00 60 42 14 ae a7 40 5a 83 8b 47     m..G..`B...@Z..G
    167c:	00 00 44 42 00 00 50 40 f6 04 1f 45 00 00 3c 42     ..DB..P@...E..<B
    168c:	b8 1e 25 40 48 e1 41 44 00 00 34 42 ae 47 b1 40     ..%@H.AD..4B.G.@
    169c:	0a 77 13 46 00 00 2c 42 ec 51 c0 40 ae 1f c4 45     .w.F..,B.Q.@...E
    16ac:	00 00 1c 42 1f 85 ab 40 00 b0 92 45 00 00 18 42     ...B...@...E...B
    16bc:	c3 f5 18 40 8f ed 09 46 00 00 14 42 e1 7a 54 3f     ...@...F...B.zT?
    16cc:	1a 86 99 46 00 00 14 42 cd cc 9c 40 33 ae 3d 46     ...F...B...@3.=F
    16dc:	00 00 10 42 8f c2 d5 3f d7 11 3c 46 00 00 0c 42     ...B...?..<F...B
    16ec:	1f 85 eb 3f 5c e7 37 45 00 00 04 42 8f c2 75 3e     ...?\.7E...B..u>
    16fc:	33 67 dd 45 00 00 00 42 ec 51 38 3e 0a 05 9f 45     3g.E...B.Q8>...E
    170c:	00 00 00 42 0a d7 e3 3f 33 13 c7 43 00 00 e0 41     ...B...?3..C...A
    171c:	48 e1 9a 3f cd 74 c4 45 00 00 e0 41 33 33 f3 3f     H..?.t.E...A33.?
    172c:	66 3c c4 45 00 00 d0 41 48 e1 92 40 8f 3d 23 46     f<.E...AH..@.=#F
    173c:	80 35 c9 47 3b c2 8d 3f 9b 58 c4 45 00 20 d7 44     .5.G;..?.X.E. .D
    174c:	42 3e 88 3f 9b 58 44 46 00 80 2f 44 87 16 49 40     B>.?.XDF../D..I@
    175c:	00 00 00 00 00 00 00 42 5c 8f 82 3f 76 42 93 46     .......B\..?vB.F
    176c:	00 00 f8 41 8f c2 35 40 66 1c ac 45 00 00 c8 41     ...A..5@f..E...A
    177c:	c3 f5 a8 3f 85 3d a3 45 00 00 90 41 8f c2 b5 3f     ...?.=.E...A...?
    178c:	e1 2a c5 44 00 00 20 41 b8 1e bd 40 52 84 2b 46     .*.D.. A...@R.+F
    179c:	00 00 10 41 8f c2 b5 3f ae 1f c4 45 00 00 10 41     ...A...?...E...A
    17ac:	71 3d 8a 3e 3d 76 ab 45 00 00 00 00 00 00 00 00     q=.>=v.E........
	...
    191c:	00 38 88 45 71 1b b9 40 9b 58 c4 45 00 00 f8 42     .8.Eq..@.X.E...B
    192c:	2b 87 b2 40 9c 58 44 46 00 00 40 41 c3 f5 48 40     +..@.XDF..@A..H@
    193c:	00 00 00 00 00 00 10 41 ec 51 68 40 e3 c8 97 47     .......A.Qh@...G
    194c:	00 00 c0 40 29 5c ef 3f 1f 29 ae 45 00 00 40 40     ...@)\.?.).E..@@
    195c:	3d 0a af 40 76 42 93 46 00 00 00 00 00 00 00 00     =..@vB.F........
	...
    1afc:	00 00 11 43 6a bc 88 40 9c 58 c4 45 00 00 e0 40     ...Cj..@.X.E...@
    1b0c:	48 e1 7a 40 9a 58 44 46 00 00 00 00 00 00 00 00     H.z@.XDF........
	...
    1cdc:	00 00 80 40 0a d7 23 40 a4 58 c4 45 00 00 00 00     ...@..#@.X.E....
	...

00001ebc <Y_TERMS>:
	...
    1ec4:	01 00 fe ff 00 00 00 00 02 00 02 00 00 00 00 00     ................
    1ed4:	00 00 02 00 02 00 00 00 00 00 00 00 00 00 02 00     ................
    1ee4:	00 00 01 00 00 00 00 00 00 00 00 00 00 00 01 00     ................
    1ef4:	00 00 00 00 fe ff 01 00 00 00 02 00 02 00 00 00     ................
    1f04:	00 00 00 00 02 00 01 00 00 00 00 00 01 00 02 00     ................
    1f14:	02 00 fe ff ff ff 00 00 02 00 02 00 fe ff 00 00     ................
    1f24:	01 00 00 00 00 00 fe ff 00 00 00 00 02 00 01 00     ................
    1f34:	00 00 00 00 ff ff 02 00 02 00 02 00 00 00 00 00     ................
	...
    1f4c:	01 00 00 00 01 00 02 00 00 00 ff ff 02 00 02 00     ................
    1f5c:	00 00 00 00 ff ff 00 00 01 00 00 00 00 00 01 00     ................
    1f6c:	02 00 01 00 fe ff 00 00 02 00 00 00 00 00 00 00     ................
    1f7c:	00 00 fe ff 02 00 01 00 02 00 00 00 00 00 02 00     ................
    1f8c:	02 00 00 00 00 00 02 00 02 00 02 00 00 00 00 00     ................
    1f9c:	02 00 00 00 00 00 fe ff 00 00 01 00 02 00 02 00     ................
    1fac:	00 00 00 00 00 00 02 00 00 00 fe ff 00 00 00 00     ................
    1fbc:	02 00 00 00 00 00 00 00 ff ff 02 00 01 00 00 00     ................
    1fcc:	02 00 00 00 00 00 00 00 02 00 00 00 ff ff 00 00     ................
    1fdc:	01 00 fe ff 02 00 00 00 02 00 02 00 00 00 01 00     ................
    1fec:	00 00 00 00 01 00 fe ff 00 00 01 00 00 00 01 00     ................
    1ffc:	00 00 ff ff 00 00 00 00 01 00 00 00 00 00 02 00     ................
    200c:	fe ff 00 00 02 00 00 00 ff ff 02 00 01 00 02 00     ................
    201c:	00 00 01 00 02 00 02 00 00 00 01 00 00 00 02 00     ................
    202c:	02 00 fe ff 01 00 01 00 00 00 00 00 00 00 ff ff     ................
    203c:	00 00 02 00 02 00 02 00 00 00 00 00 02 00 01 00     ................
    204c:	02 00 00 00 01 00 00 00 00 00 fe ff 00 00 02 00     ................
    205c:	02 00 02 00 fe ff 00 00 01 00 02 00 01 00 02 00     ................
    206c:	00 00 fe ff 00 00 01 00 02 00 00 00 00 00 00 00     ................
    207c:	01 00 00 00 ff ff 01 00 00 00 00 00 fe ff ff ff     ................
    208c:	00 00 02 00 01 00 fe ff 00 00 00 00 00 00 01 00     ................
    209c:	00 00 00 00 02 00 02 00 01 00 fe ff 00 00 02 00     ................
    20ac:	00 00 01 00 fe ff 01 00 00 00 02 00 01 00 00 00     ................
    20bc:	00 00 01 00 fe ff 00 00 ff ff 00 00 01 00 00 00     ................
    20cc:	00 00 fe ff 01 00 00 00 00 00 00 00 01 00 00 00     ................
	...
    20e4:	00 00 01 00 02 00 00 00 00 00 00 00 fe ff 02 00     ................
    20f4:	02 00 ff ff ff ff 01 00 00 00 00 00 00 00 01 00     ................
    2104:	01 00 00 00 00 00 00 00 ff ff 01 00 02 00 02 00     ................
    2114:	02 00 ff ff ff ff 02 00 02 00 00 00 00 00 03 00     ................
    2124:	02 00 02 00 02 00 ff ff 00 00 02 00 02 00           ..............

00002132 <PE_TERMS>:
    2132:	00 f7 27 c8 33 33 2e c3 80 bc b3 47 66 66 0e 41     ..'.33.....Gff.A
    2142:	00 0c 4e c6 cd cc cc bf 00 40 b3 45 66 66 46 c0     ..N......@.EffF.
    2152:	00 20 0e c5 cd cc 4c be 00 40 74 44 00 00 00 bf     . ....L..@tD....
    2162:	00 e0 00 45 cd cc 4c 3e 00 c0 5f c4 00 00 00 3f     ...E..L>.._....?
    2172:	00 40 b2 44 9a 99 59 c0 00 00 58 42 cd cc cc bd     .@.D..Y...XB....
    2182:	00 00 32 44 cd cc cc 3d 00 00 e0 c0 00 00 00 00     ..2D...=........
    2192:	00 40 01 c4 9a 99 99 3f 00 00 60 43 9a 99 19 bf     .@.....?..`C....
    21a2:	00 00 c1 c3 cd cc cc be 00 00 48 43 00 00 00 00     ..........HC....
    21b2:	00 80 96 c3 00 00 00 00 00 00 01 43 cd cc cc bd     ...........C....
    21c2:	00 00 59 43 00 00 00 bf 00 00 be c2 9a 99 99 3e     ..YC...........>
    21d2:	00 00 1e c3 00 00 00 00 00 00 00 00 00 00 00 00     ................
    21e2:	00 00 01 43 cd cc cc 3d 00 00 8c c2 00 00 00 00     ...C...=........
    21f2:	00 00 f6 42 00 00 00 00 00 00 54 c2 00 00 00 00     ...B......T.....
    2202:	00 00 7c 42 00 00 00 00 00 00 00 00 00 00 00 00     ..|B............
    2212:	00 00 7c 42 cd cc cc 3d 00 00 04 c2 00 00 00 00     ..|B...=........
    2222:	00 00 6c c2 00 00 00 00 00 00 d0 41 00 00 00 00     ..l........A....
    2232:	00 00 68 c2 cd cc cc bd 00 00 00 42 00 00 00 00     ..h........B....
    2242:	00 00 4c c2 00 00 00 00 00 00 d8 41 00 00 00 00     ..L........A....
    2252:	00 00 40 42 00 00 00 00 00 00 00 00 00 00 00 00     ..@B............
    2262:	00 00 38 42 00 00 00 00 00 00 c0 c1 00 00 00 00     ..8B............
    2272:	00 00 18 c2 00 00 00 00 00 00 80 41 00 00 00 00     ...........A....
    2282:	00 00 f8 c1 00 00 00 00 00 00 50 41 00 00 00 00     ..........PA....
    2292:	00 00 e8 41 00 00 00 00 00 00 00 00 00 00 00 00     ...A............
    22a2:	00 00 e8 41 00 00 00 00 00 00 40 c1 00 00 00 00     ...A......@.....
    22b2:	00 00 d0 41 00 00 00 00 00 00 00 00 00 00 00 00     ...A............
    22c2:	00 00 b0 c1 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22d2:	00 00 a8 41 00 00 00 00 00 00 20 c1 00 00 00 00     ...A...... .....
    22e2:	00 00 88 41 cd cc cc bd 00 00 00 00 00 00 00 00     ...A............
    22f2:	00 00 80 41 00 00 00 00 00 00 00 c1 00 00 00 00     ...A............
    2302:	00 00 80 c1 cd cc cc 3d 00 00 e0 40 00 00 00 00     .......=...@....
    2312:	00 00 70 c1 00 00 00 00 00 00 10 41 00 00 00 00     ..p........A....
    2322:	00 00 50 c1 00 00 00 00 00 00 e0 40 00 00 00 00     ..P........@....
    2332:	00 00 40 c1 00 00 00 00 00 00 c0 40 00 00 00 00     ..@........@....
    2342:	00 00 30 41 00 00 00 00 00 00 00 00 00 00 00 00     ..0A............
    2352:	00 00 20 c1 00 00 00 00 00 00 a0 40 00 00 00 00     .. ........@....
    2362:	00 00 00 c1 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    2372:	00 00 e0 40 00 00 00 00 00 00 40 c0 00 00 00 00     ...@......@.....
    2382:	00 00 e0 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2392:	00 00 e0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    23a2:	00 00 e0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    23b2:	00 00 c0 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
    23c2:	00 00 c0 40 00 00 00 00 00 00 40 c0 00 00 00 00     ...@......@.....
    23d2:	00 00 c0 40 00 00 00 00 00 00 40 c0 00 00 00 00     ...@......@.....
    23e2:	00 00 c0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    23f2:	00 00 c0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    2402:	00 00 a0 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
    2412:	00 00 a0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    2422:	00 00 a0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    2432:	00 00 a0 c0 00 00 00 00 00 00 40 40 00 00 00 00     ..........@@....
    2442:	00 00 80 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
    2452:	00 00 80 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
    2462:	00 00 80 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
    2472:	00 00 80 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2482:	00 00 80 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2492:	00 00 80 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    24a2:	00 00 40 40 00 00 00 00 00 00 00 00 00 00 00 00     ..@@............
    24b2:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    24c2:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    24d2:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    24e2:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    24f2:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    2502:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    2512:	00 00 40 c0 00 00 00 00 00 00 00 00 00 00 00 00     ..@.............
    2522:	00 40 7a 10 f3 5a 00 a0 72 4e 18 09 00 10 a5 d4     .@z..Z..rN......
    2532:	e8 00 00 e8 76 48 17 00 00 e4 0b 54 02 00 00 ca     ....vH.....T....
    2542:	9a 3b 00 00 00 e1 f5 05 00 00 80 96 98 00 00 00     .;..............
    2552:	40 42 0f 00 00 00 a0 86 01 00 00 00 10 27 00 00     @B...........'..
    2562:	00 00 e8 03 00 00 00 00 64 00 00 00 00 00 0a 00     ........d.......
    2572:	00 00 00 00 01 00 00 00 00 00 2c 76 d8 88 dc 67     ..........,v...g
    2582:	4f 08 23 df c1 df ae 59 e1 b1 b7 96 e5 e3 e4 53     O.#....Y.......S
    2592:	c6 3a e6 51 99 76 96 e8 e6 c2 84 26 eb 89 8c 9b     .:.Q.v.....&....
    25a2:	62 ed 40 7c 6f fc ef bc 9c 9f 40 f2 ba a5 6f a5     b.@|o.....@...o.
    25b2:	f4 90 05 5a 2a f7 5c 93 6b 6c f9 67 6d c1 1b fc     ...Z*.\.kl.gm...
    25c2:	e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed 90 2e 03 00     ...G.. .........
    25d2:	94 35 77 05 00 80 84 1e 08 00 00 20 4e 0a 00 00     .5w........ N...
    25e2:	00 c8 0c 33 33 33 33 0f 98 6e 12 83 11 41 ef 8d     ...3333..n...A..
    25f2:	21 14 89 3b e6 55 16 cf fe e6 db 18 d1 84 4b 38     !..;.U........K8
    2602:	1b f7 7c 1d 90 1d a4 bb e4 24 20 32 84 72 5e 22     ..|......$ 2.r^"
    2612:	81 00 c9 f1 24 ec a1 e5 3d 27                       ....$...='

0000261c <__c.1988>:
    261c:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00002628 <pstr_inf>:
    2628:	49 4e 46                                            INF

0000262b <pstr_inity>:
    262b:	49 4e 49 54 59                                      INITY

00002630 <pstr_nan>:
    2630:	4e 41 4e                                            NAN

00002633 <pwr_m10>:
    2633:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
    2643:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000264b <pwr_p10>:
    264b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
    265b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00002664 <__ctors_end>:
    2664:	11 24       	eor	r1, r1
    2666:	1f be       	out	0x3f, r1	; 63
    2668:	cf ef       	ldi	r28, 0xFF	; 255
    266a:	d1 e2       	ldi	r29, 0x21	; 33
    266c:	de bf       	out	0x3e, r29	; 62
    266e:	cd bf       	out	0x3d, r28	; 61

00002670 <__do_copy_data>:
    2670:	12 e1       	ldi	r17, 0x12	; 18
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b2 e0       	ldi	r27, 0x02	; 2
    2676:	e6 e1       	ldi	r30, 0x16	; 22
    2678:	f0 ee       	ldi	r31, 0xE0	; 224
    267a:	00 e0       	ldi	r16, 0x00	; 0
    267c:	0b bf       	out	0x3b, r16	; 59
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <__do_copy_data+0x14>
    2680:	07 90       	elpm	r0, Z+
    2682:	0d 92       	st	X+, r0
    2684:	a2 3a       	cpi	r26, 0xA2	; 162
    2686:	b1 07       	cpc	r27, r17
    2688:	d9 f7       	brne	.-10     	; 0x2680 <__do_copy_data+0x10>

0000268a <__do_clear_bss>:
    268a:	17 e1       	ldi	r17, 0x17	; 23
    268c:	a2 ea       	ldi	r26, 0xA2	; 162
    268e:	b2 e1       	ldi	r27, 0x12	; 18
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <.do_clear_bss_start>

00002692 <.do_clear_bss_loop>:
    2692:	1d 92       	st	X+, r1

00002694 <.do_clear_bss_start>:
    2694:	a5 33       	cpi	r26, 0x35	; 53
    2696:	b1 07       	cpc	r27, r17
    2698:	e1 f7       	brne	.-8      	; 0x2692 <.do_clear_bss_loop>
    269a:	0e 94 bd 54 	call	0xa97a	; 0xa97a <main>
    269e:	0c 94 09 70 	jmp	0xe012	; 0xe012 <_exit>

000026a2 <__bad_interrupt>:
    26a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000026a6 <rprintfInit>:
// *** rprintf initialization ***
// you must call this function once and supply the character output
// routine before using other functions in this library
void rprintfInit(void (*putchar_func)(unsigned char c))
{
	rputchar = putchar_func;
    26a6:	90 93 a3 12 	sts	0x12A3, r25
    26aa:	80 93 a2 12 	sts	0x12A2, r24
}
    26ae:	08 95       	ret

000026b0 <rprintfChar>:

// *** rprintfChar ***
// send a character/byte to the current output device
void rprintfChar(unsigned char c)
{
    26b0:	1f 93       	push	r17
    26b2:	18 2f       	mov	r17, r24
	// do LF -> CR/LF translation
	if(c == '\n')
    26b4:	8a 30       	cpi	r24, 0x0A	; 10
    26b6:	31 f4       	brne	.+12     	; 0x26c4 <rprintfChar+0x14>
		rputchar('\r');
    26b8:	e0 91 a2 12 	lds	r30, 0x12A2
    26bc:	f0 91 a3 12 	lds	r31, 0x12A3
    26c0:	8d e0       	ldi	r24, 0x0D	; 13
    26c2:	09 95       	icall
	// send character
	rputchar(c);
    26c4:	e0 91 a2 12 	lds	r30, 0x12A2
    26c8:	f0 91 a3 12 	lds	r31, 0x12A3
    26cc:	81 2f       	mov	r24, r17
    26ce:	09 95       	icall
}
    26d0:	1f 91       	pop	r17
    26d2:	08 95       	ret

000026d4 <rprintfStr>:

// *** rprintfStr ***
// prints a null-terminated string stored in RAM
void rprintfStr(char str[])
{
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	ec 01       	movw	r28, r24
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	21 f4       	brne	.+8      	; 0x26e6 <rprintfStr+0x12>
    26de:	06 c0       	rjmp	.+12     	; 0x26ec <rprintfStr+0x18>

	// print the string until a null-terminator
	while (*str)
		rprintfChar(*str++);
    26e0:	21 96       	adiw	r28, 0x01	; 1
    26e2:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
	// send a string stored in RAM
	// check to make sure we have a good pointer
	if (!str) return;

	// print the string until a null-terminator
	while (*str)
    26e6:	88 81       	ld	r24, Y
    26e8:	88 23       	and	r24, r24
    26ea:	d1 f7       	brne	.-12     	; 0x26e0 <rprintfStr+0xc>
		rprintfChar(*str++);
}
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <rprintfStrLen>:
// *** rprintfStrLen ***
// prints a section of a string stored in RAM
// begins printing at position indicated by <start>
// prints number of characters indicated by <len>
void rprintfStrLen(char str[], unsigned int start, unsigned int len)
{
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	8c 01       	movw	r16, r24
    2700:	7a 01       	movw	r14, r20
	register int i=0;

	// check to make sure we have a good pointer
	if (!str) return;
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	e9 f0       	breq	.+58     	; 0x2740 <rprintfStrLen+0x4e>
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
	// spin through characters up to requested start
	// keep going as long as there's no null
	while((i++<start) && (*str++));
    270a:	26 17       	cp	r18, r22
    270c:	37 07       	cpc	r19, r23
    270e:	38 f4       	brcc	.+14     	; 0x271e <rprintfStrLen+0x2c>
    2710:	f8 01       	movw	r30, r16
    2712:	81 91       	ld	r24, Z+
    2714:	8f 01       	movw	r16, r30
    2716:	2f 5f       	subi	r18, 0xFF	; 255
    2718:	3f 4f       	sbci	r19, 0xFF	; 255
    271a:	88 23       	and	r24, r24
    271c:	b1 f7       	brne	.-20     	; 0x270a <rprintfStrLen+0x18>
    271e:	c0 e0       	ldi	r28, 0x00	; 0
    2720:	d0 e0       	ldi	r29, 0x00	; 0
    2722:	0b c0       	rjmp	.+22     	; 0x273a <rprintfStrLen+0x48>
	// then print exactly len characters
	for(i=0; i<len; i++)
	{
		// print data out of the string as long as we haven't reached a null yet
		// at the null, start printing spaces
		if(*str)
    2724:	f8 01       	movw	r30, r16
    2726:	80 81       	ld	r24, Z
    2728:	88 23       	and	r24, r24
    272a:	19 f0       	breq	.+6      	; 0x2732 <rprintfStrLen+0x40>
			rprintfChar(*str++);
    272c:	0f 5f       	subi	r16, 0xFF	; 255
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	01 c0       	rjmp	.+2      	; 0x2734 <rprintfStrLen+0x42>
		else
			rprintfChar(' ');
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
//		// keep steping through string as long as there's no null
//		if(*str) str++;
//	}

	// then print exactly len characters
	for(i=0; i<len; i++)
    2738:	21 96       	adiw	r28, 0x01	; 1
    273a:	ce 15       	cp	r28, r14
    273c:	df 05       	cpc	r29, r15
    273e:	90 f3       	brcs	.-28     	; 0x2724 <rprintfStrLen+0x32>
			rprintfChar(*str++);
		else
			rprintfChar(' ');
	}

}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	0f 91       	pop	r16
    2748:	ff 90       	pop	r15
    274a:	ef 90       	pop	r14
    274c:	08 95       	ret

0000274e <rprintfProgStr>:

// *** rprintfProgStr ***
// prints a null-terminated string stored in program ROM
void rprintfProgStr(const prog_char str[])
{
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	ec 01       	movw	r28, r24
	// print a string stored in program memory
	register char c;

	// check to make sure we have a good pointer
	if (!str) return;
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	19 f4       	brne	.+6      	; 0x275e <rprintfProgStr+0x10>
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <rprintfProgStr+0x1a>
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
		rprintfChar(c);
    275a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    275e:	fe 01       	movw	r30, r28

	// check to make sure we have a good pointer
	if (!str) return;
	
	// print the string until the null-terminator
	while((c = pgm_read_byte(str++)))
    2760:	21 96       	adiw	r28, 0x01	; 1
    2762:	84 91       	lpm	r24, Z+
    2764:	88 23       	and	r24, r24
    2766:	c9 f7       	brne	.-14     	; 0x275a <rprintfProgStr+0xc>
		rprintfChar(c);
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <rprintfCRLF>:
void rprintfCRLF(void)
{
	// print CR/LF
	//rprintfChar('\r');
	// LF -> CR/LF translation built-in to rprintfChar()
	rprintfChar('\n');
    276e:	8a e0       	ldi	r24, 0x0A	; 10
    2770:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
}
    2774:	08 95       	ret

00002776 <rprintfu04>:
//	char Character = data&0x0f;
//	if (Character>9)
//		Character+='A'-10;
//	else
//		Character+='0';
	rprintfChar(hexchar(data));
    2776:	e8 2f       	mov	r30, r24
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	ef 70       	andi	r30, 0x0F	; 15
    277c:	f0 70       	andi	r31, 0x00	; 0
    277e:	e8 5e       	subi	r30, 0xE8	; 232
    2780:	fd 4f       	sbci	r31, 0xFD	; 253
    2782:	e4 91       	lpm	r30, Z+
    2784:	8e 2f       	mov	r24, r30
    2786:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
}
    278a:	08 95       	ret

0000278c <rprintfu08>:

// *** rprintfu08 ***
// prints an unsigned 8-bit number in hex (2 digits)
void rprintfu08(unsigned char data)
{
    278c:	1f 93       	push	r17
    278e:	18 2f       	mov	r17, r24
	// print 8-bit hex value
	rprintfu04(data>>4);
    2790:	82 95       	swap	r24
    2792:	8f 70       	andi	r24, 0x0F	; 15
    2794:	0e 94 bb 13 	call	0x2776	; 0x2776 <rprintfu04>
	rprintfu04(data);
    2798:	81 2f       	mov	r24, r17
    279a:	0e 94 bb 13 	call	0x2776	; 0x2776 <rprintfu04>
}
    279e:	1f 91       	pop	r17
    27a0:	08 95       	ret

000027a2 <rprintfu16>:

// *** rprintfu16 ***
// prints an unsigned 16-bit number in hex (4 digits)
void rprintfu16(unsigned short data)
{
    27a2:	1f 93       	push	r17
    27a4:	18 2f       	mov	r17, r24
	// print 16-bit hex value
	rprintfu08(data>>8);
    27a6:	89 2f       	mov	r24, r25
    27a8:	0e 94 c6 13 	call	0x278c	; 0x278c <rprintfu08>
	rprintfu08(data);
    27ac:	81 2f       	mov	r24, r17
    27ae:	0e 94 c6 13 	call	0x278c	; 0x278c <rprintfu08>
}
    27b2:	1f 91       	pop	r17
    27b4:	08 95       	ret

000027b6 <rprintfu32>:

// *** rprintfu32 ***
// prints an unsigned 32-bit number in hex (8 digits)
void rprintfu32(unsigned long data)
{
    27b6:	ef 92       	push	r14
    27b8:	ff 92       	push	r15
    27ba:	0f 93       	push	r16
    27bc:	1f 93       	push	r17
    27be:	7b 01       	movw	r14, r22
    27c0:	8c 01       	movw	r16, r24
	// print 32-bit hex value
	rprintfu16(data>>16);
    27c2:	c8 01       	movw	r24, r16
    27c4:	aa 27       	eor	r26, r26
    27c6:	bb 27       	eor	r27, r27
    27c8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <rprintfu16>
	rprintfu16(data);
    27cc:	c7 01       	movw	r24, r14
    27ce:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <rprintfu16>
}
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	08 95       	ret

000027dc <rprintfNum>:
//	Examples:
//	uartPrintfNum(10, 6,  TRUE, ' ',   1234);  -->  " +1234"
//	uartPrintfNum(10, 6, FALSE, '0',   1234);  -->  "001234"
//	uartPrintfNum(16, 6, FALSE, '.', 0x5AA5);  -->  "..5AA5"
void rprintfNum(char base, char numDigits, char isSigned, char padchar, long n)
{
    27dc:	2f 92       	push	r2
    27de:	3f 92       	push	r3
    27e0:	4f 92       	push	r4
    27e2:	5f 92       	push	r5
    27e4:	6f 92       	push	r6
    27e6:	7f 92       	push	r7
    27e8:	8f 92       	push	r8
    27ea:	9f 92       	push	r9
    27ec:	af 92       	push	r10
    27ee:	bf 92       	push	r11
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	a3 97       	sbiw	r28, 0x23	; 35
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	6a a3       	std	Y+34, r22	; 0x22
    2812:	24 2e       	mov	r2, r20
    2814:	2b a3       	std	Y+35, r18	; 0x23
    2816:	37 01       	movw	r6, r14
    2818:	48 01       	movw	r8, r16
	char *p, buf[32];
	unsigned long x;
	unsigned char count;

	// prepare negative number
	if( isSigned && (n < 0) )
    281a:	44 23       	and	r20, r20
    281c:	51 f0       	breq	.+20     	; 0x2832 <rprintfNum+0x56>
    281e:	17 ff       	sbrs	r17, 7
    2820:	08 c0       	rjmp	.+16     	; 0x2832 <rprintfNum+0x56>
	{
		x = -n;
    2822:	ee 24       	eor	r14, r14
    2824:	ff 24       	eor	r15, r15
    2826:	87 01       	movw	r16, r14
    2828:	e6 18       	sub	r14, r6
    282a:	f7 08       	sbc	r15, r7
    282c:	08 09       	sbc	r16, r8
    282e:	19 09       	sbc	r17, r9
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <rprintfNum+0x5a>
	}
	else
	{
	 	x = n;
    2832:	84 01       	movw	r16, r8
    2834:	73 01       	movw	r14, r6
	}

	// setup little string buffer
	count = (numDigits-1)-(isSigned?1:0);
    2836:	2a a1       	ldd	r18, Y+34	; 0x22
    2838:	21 50       	subi	r18, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	21 10       	cpse	r2, r1
    283e:	91 e0       	ldi	r25, 0x01	; 1
    2840:	29 1b       	sub	r18, r25
    2842:	29 a3       	std	Y+33, r18	; 0x21
  	p = buf + sizeof (buf);
  	*--p = '\0';
    2844:	18 a2       	std	Y+32, r1	; 0x20
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
    2846:	a8 2e       	mov	r10, r24
    2848:	bb 24       	eor	r11, r11
    284a:	cc 24       	eor	r12, r12
    284c:	dd 24       	eor	r13, r13
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	a6 01       	movw	r20, r12
    2854:	95 01       	movw	r18, r10
    2856:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <__udivmodsi4>
    285a:	fb 01       	movw	r30, r22
    285c:	ef 70       	andi	r30, 0x0F	; 15
    285e:	f0 70       	andi	r31, 0x00	; 0
    2860:	e8 5e       	subi	r30, 0xE8	; 232
    2862:	fd 4f       	sbci	r31, 0xFD	; 253
    2864:	64 91       	lpm	r22, Z+
    2866:	6f 8f       	std	Y+31, r22	; 0x1f
    2868:	c8 01       	movw	r24, r16
    286a:	b7 01       	movw	r22, r14
    286c:	a6 01       	movw	r20, r12
    286e:	95 01       	movw	r18, r10
    2870:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <__udivmodsi4>
    2874:	c9 01       	movw	r24, r18
    2876:	da 01       	movw	r26, r20
    2878:	7c 01       	movw	r14, r24
    287a:	8d 01       	movw	r16, r26
    287c:	9e e1       	ldi	r25, 0x1E	; 30
    287e:	49 2e       	mov	r4, r25
    2880:	51 2c       	mov	r5, r1
    2882:	4c 0e       	add	r4, r28
    2884:	5d 1e       	adc	r5, r29
    2886:	39 a0       	ldd	r3, Y+33	; 0x21
    2888:	25 c0       	rjmp	.+74     	; 0x28d4 <rprintfNum+0xf8>
	// calculate remaining digits
	while(count--)
	{
		if(x != 0)
    288a:	e1 14       	cp	r14, r1
    288c:	f1 04       	cpc	r15, r1
    288e:	01 05       	cpc	r16, r1
    2890:	11 05       	cpc	r17, r1
    2892:	c9 f0       	breq	.+50     	; 0x28c6 <rprintfNum+0xea>
		{
			// calculate next digit
			*--p = hexchar(x%base); x /= base;
    2894:	c8 01       	movw	r24, r16
    2896:	b7 01       	movw	r22, r14
    2898:	a6 01       	movw	r20, r12
    289a:	95 01       	movw	r18, r10
    289c:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <__udivmodsi4>
    28a0:	fb 01       	movw	r30, r22
    28a2:	ef 70       	andi	r30, 0x0F	; 15
    28a4:	f0 70       	andi	r31, 0x00	; 0
    28a6:	e8 5e       	subi	r30, 0xE8	; 232
    28a8:	fd 4f       	sbci	r31, 0xFD	; 253
    28aa:	64 91       	lpm	r22, Z+
    28ac:	f2 01       	movw	r30, r4
    28ae:	60 83       	st	Z, r22
    28b0:	c8 01       	movw	r24, r16
    28b2:	b7 01       	movw	r22, r14
    28b4:	a6 01       	movw	r20, r12
    28b6:	95 01       	movw	r18, r10
    28b8:	0e 94 2f 66 	call	0xcc5e	; 0xcc5e <__udivmodsi4>
    28bc:	c9 01       	movw	r24, r18
    28be:	da 01       	movw	r26, r20
    28c0:	7c 01       	movw	r14, r24
    28c2:	8d 01       	movw	r16, r26
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <rprintfNum+0xf0>
		}
		else
		{
			// no more digits left, pad out to desired length
			*--p = padchar;
    28c6:	2b a1       	ldd	r18, Y+35	; 0x23
    28c8:	f2 01       	movw	r30, r4
    28ca:	20 83       	st	Z, r18
    28cc:	3a 94       	dec	r3
    28ce:	08 94       	sec
    28d0:	41 08       	sbc	r4, r1
    28d2:	51 08       	sbc	r5, r1
	
	// force calculation of first digit
	// (to prevent zero from not printing at all!!!)
	*--p = hexchar(x%base); x /= base;
	// calculate remaining digits
	while(count--)
    28d4:	33 20       	and	r3, r3
    28d6:	c9 f6       	brne	.-78     	; 0x288a <rprintfNum+0xae>
    28d8:	ce 01       	movw	r24, r28
    28da:	4f 96       	adiw	r24, 0x1f	; 31
    28dc:	8c 01       	movw	r16, r24
    28de:	e9 a1       	ldd	r30, Y+33	; 0x21
    28e0:	0e 1b       	sub	r16, r30
    28e2:	11 09       	sbc	r17, r1
			*--p = padchar;
		}
	}

	// apply signed notation if requested
	if( isSigned )
    28e4:	22 20       	and	r2, r2
    28e6:	f1 f0       	breq	.+60     	; 0x2924 <rprintfNum+0x148>
	{
		if(n < 0)
    28e8:	97 fe       	sbrs	r9, 7
    28ea:	05 c0       	rjmp	.+10     	; 0x28f6 <rprintfNum+0x11a>
		{
   			*--p = '-';
    28ec:	8d e2       	ldi	r24, 0x2D	; 45
    28ee:	f8 01       	movw	r30, r16
    28f0:	82 93       	st	-Z, r24
    28f2:	8f 01       	movw	r16, r30
    28f4:	17 c0       	rjmp	.+46     	; 0x2924 <rprintfNum+0x148>
    28f6:	c8 01       	movw	r24, r16
    28f8:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if(n > 0)
    28fa:	61 14       	cp	r6, r1
    28fc:	71 04       	cpc	r7, r1
    28fe:	81 04       	cpc	r8, r1
    2900:	91 04       	cpc	r9, r1
    2902:	19 f0       	breq	.+6      	; 0x290a <rprintfNum+0x12e>
		{
	   		*--p = '+';
    2904:	8c 01       	movw	r16, r24
    2906:	8b e2       	ldi	r24, 0x2B	; 43
    2908:	02 c0       	rjmp	.+4      	; 0x290e <rprintfNum+0x132>
		}
		else
		{
	   		*--p = ' ';
    290a:	8c 01       	movw	r16, r24
    290c:	80 e2       	ldi	r24, 0x20	; 32
    290e:	f8 01       	movw	r30, r16
    2910:	80 83       	st	Z, r24
    2912:	08 c0       	rjmp	.+16     	; 0x2924 <rprintfNum+0x148>

	// print the string right-justified
	count = numDigits;
	while(count--)
	{
		rprintfChar(*p++);
    2914:	f8 01       	movw	r30, r16
    2916:	81 91       	ld	r24, Z+
    2918:	8f 01       	movw	r16, r30
    291a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    291e:	fa a1       	ldd	r31, Y+34	; 0x22
    2920:	f1 50       	subi	r31, 0x01	; 1
    2922:	fa a3       	std	Y+34, r31	; 0x22
		}
	}

	// print the string right-justified
	count = numDigits;
	while(count--)
    2924:	2a a1       	ldd	r18, Y+34	; 0x22
    2926:	22 23       	and	r18, r18
    2928:	a9 f7       	brne	.-22     	; 0x2914 <rprintfNum+0x138>
	{
		rprintfChar(*p++);
	}
}
    292a:	a3 96       	adiw	r28, 0x23	; 35
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	ff 90       	pop	r15
    2940:	ef 90       	pop	r14
    2942:	df 90       	pop	r13
    2944:	cf 90       	pop	r12
    2946:	bf 90       	pop	r11
    2948:	af 90       	pop	r10
    294a:	9f 90       	pop	r9
    294c:	8f 90       	pop	r8
    294e:	7f 90       	pop	r7
    2950:	6f 90       	pop	r6
    2952:	5f 90       	pop	r5
    2954:	4f 90       	pop	r4
    2956:	3f 90       	pop	r3
    2958:	2f 90       	pop	r2
    295a:	08 95       	ret

0000295c <rprintf1RamRom>:
// Supports:
// %d - decimal
// %x - hex
// %c - character
int rprintf1RamRom(unsigned char stringInRom, const char *format, ...)
{
    295c:	7f 92       	push	r7
    295e:	8f 92       	push	r8
    2960:	9f 92       	push	r9
    2962:	af 92       	push	r10
    2964:	bf 92       	push	r11
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	0f 93       	push	r16
    2970:	1f 93       	push	r17
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	78 88       	ldd	r7, Y+16	; 0x10
    297c:	c9 88       	ldd	r12, Y+17	; 0x11
    297e:	da 88       	ldd	r13, Y+18	; 0x12
    2980:	53 e1       	ldi	r21, 0x13	; 19
    2982:	e5 2e       	mov	r14, r21
    2984:	f1 2c       	mov	r15, r1
    2986:	ec 0e       	add	r14, r28
    2988:	fd 1e       	adc	r15, r29
    298a:	14 c0       	rjmp	.+40     	; 0x29b4 <rprintf1RamRom+0x58>
	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
		{	// Until '%' or '\0'
			if (!format_flag)
    298c:	88 23       	and	r24, r24
    298e:	81 f4       	brne	.+32     	; 0x29b0 <rprintf1RamRom+0x54>
				div_val /= base;
			} while (div_val);
		}
	}
	va_end(ap);
}
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12
    29a4:	bf 90       	pop	r11
    29a6:	af 90       	pop	r10
    29a8:	9f 90       	pop	r9
    29aa:	8f 90       	pop	r8
    29ac:	7f 90       	pop	r7
    29ae:	08 95       	ret
			if (!format_flag)
			{
				va_end(ap);
				return(0);
			}
			rprintfChar(format_flag);
    29b0:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    29b4:	96 01       	movw	r18, r12
    29b6:	2f 5f       	subi	r18, 0xFF	; 255
    29b8:	3f 4f       	sbci	r19, 0xFF	; 255
	va_list ap;

	va_start(ap, format);
	for (;;)
	{
		while ((format_flag = READMEMBYTE(stringInRom,format++) ) != '%')
    29ba:	77 20       	and	r7, r7
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <rprintf1RamRom+0x6a>
    29be:	f6 01       	movw	r30, r12
    29c0:	69 01       	movw	r12, r18
    29c2:	84 91       	lpm	r24, Z+
    29c4:	03 c0       	rjmp	.+6      	; 0x29cc <rprintf1RamRom+0x70>
    29c6:	f6 01       	movw	r30, r12
    29c8:	80 81       	ld	r24, Z
    29ca:	69 01       	movw	r12, r18
    29cc:	85 32       	cpi	r24, 0x25	; 37
    29ce:	f1 f6       	brne	.-68     	; 0x298c <rprintf1RamRom+0x30>
    29d0:	2f 5f       	subi	r18, 0xFF	; 255
    29d2:	3f 4f       	sbci	r19, 0xFF	; 255
				return(0);
			}
			rprintfChar(format_flag);
		}

		switch (format_flag = READMEMBYTE(stringInRom,format++) )
    29d4:	77 20       	and	r7, r7
    29d6:	21 f0       	breq	.+8      	; 0x29e0 <rprintf1RamRom+0x84>
    29d8:	f6 01       	movw	r30, r12
    29da:	69 01       	movw	r12, r18
    29dc:	84 91       	lpm	r24, Z+
    29de:	03 c0       	rjmp	.+6      	; 0x29e6 <rprintf1RamRom+0x8a>
    29e0:	f6 01       	movw	r30, r12
    29e2:	80 81       	ld	r24, Z
    29e4:	69 01       	movw	r12, r18
    29e6:	84 36       	cpi	r24, 0x64	; 100
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <rprintf1RamRom+0x98>
    29ea:	88 37       	cpi	r24, 0x78	; 120
    29ec:	81 f0       	breq	.+32     	; 0x2a0e <rprintf1RamRom+0xb2>
    29ee:	83 36       	cpi	r24, 0x63	; 99
    29f0:	f9 f6       	brne	.-66     	; 0x29b0 <rprintf1RamRom+0x54>
    29f2:	06 c0       	rjmp	.+12     	; 0x2a00 <rprintf1RamRom+0xa4>
    29f4:	00 e1       	ldi	r16, 0x10	; 16
    29f6:	17 e2       	ldi	r17, 0x27	; 39
    29f8:	4a e0       	ldi	r20, 0x0A	; 10
    29fa:	a4 2e       	mov	r10, r20
    29fc:	b1 2c       	mov	r11, r1
    29fe:	0c c0       	rjmp	.+24     	; 0x2a18 <rprintf1RamRom+0xbc>
		{
			case 'c': format_flag = va_arg(ap,int);
    2a00:	f7 01       	movw	r30, r14
    2a02:	80 81       	ld	r24, Z
    2a04:	22 e0       	ldi	r18, 0x02	; 2
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	e2 0e       	add	r14, r18
    2a0a:	f3 1e       	adc	r15, r19
    2a0c:	d1 cf       	rjmp	.-94     	; 0x29b0 <rprintf1RamRom+0x54>
			default:  rprintfChar(format_flag); continue;
    2a0e:	00 e0       	ldi	r16, 0x00	; 0
    2a10:	10 e1       	ldi	r17, 0x10	; 16
    2a12:	30 e1       	ldi	r19, 0x10	; 16
    2a14:	a3 2e       	mov	r10, r19
    2a16:	b1 2c       	mov	r11, r1
			case 'd': base = 10; div_val = 10000; goto CONVERSION_LOOP;
//			case 'x': base = 16; div_val = 0x10;
			case 'x': base = 16; div_val = 0x1000;

			CONVERSION_LOOP:
			u_val = va_arg(ap,int);
    2a18:	22 e0       	ldi	r18, 0x02	; 2
    2a1a:	82 2e       	mov	r8, r18
    2a1c:	91 2c       	mov	r9, r1
    2a1e:	8e 0c       	add	r8, r14
    2a20:	9f 1c       	adc	r9, r15
    2a22:	f7 01       	movw	r30, r14
    2a24:	e0 80       	ld	r14, Z
    2a26:	f1 80       	ldd	r15, Z+1	; 0x01
			if (format_flag == 'd')
    2a28:	84 36       	cpi	r24, 0x64	; 100
    2a2a:	b1 f4       	brne	.+44     	; 0x2a58 <rprintf1RamRom+0xfc>
			{
				if (((int)u_val) < 0)
    2a2c:	f7 fe       	sbrs	r15, 7
    2a2e:	11 c0       	rjmp	.+34     	; 0x2a52 <rprintf1RamRom+0xf6>
				{
					u_val = - u_val;
    2a30:	f0 94       	com	r15
    2a32:	e1 94       	neg	r14
    2a34:	f1 08       	sbc	r15, r1
    2a36:	f3 94       	inc	r15
					rprintfChar('-');
    2a38:	8d e2       	ldi	r24, 0x2D	; 45
    2a3a:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    2a3e:	09 c0       	rjmp	.+18     	; 0x2a52 <rprintf1RamRom+0xf6>
				}
				while (div_val > 1 && div_val > u_val) div_val /= 10;
    2a40:	c8 01       	movw	r24, r16
    2a42:	6a e0       	ldi	r22, 0x0A	; 10
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2a4a:	8b 01       	movw	r16, r22
    2a4c:	62 30       	cpi	r22, 0x02	; 2
    2a4e:	71 05       	cpc	r23, r1
    2a50:	18 f0       	brcs	.+6      	; 0x2a58 <rprintf1RamRom+0xfc>
    2a52:	e0 16       	cp	r14, r16
    2a54:	f1 06       	cpc	r15, r17
    2a56:	a0 f3       	brcs	.-24     	; 0x2a40 <rprintf1RamRom+0xe4>
			}
			do
			{
				//rprintfChar(pgm_read_byte(HexChars+(u_val/div_val)));
				rprintfu04(u_val/div_val);
    2a58:	c7 01       	movw	r24, r14
    2a5a:	b8 01       	movw	r22, r16
    2a5c:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2a60:	86 2f       	mov	r24, r22
    2a62:	0e 94 bb 13 	call	0x2776	; 0x2776 <rprintfu04>
				u_val %= div_val;
    2a66:	c7 01       	movw	r24, r14
    2a68:	b8 01       	movw	r22, r16
    2a6a:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2a6e:	7c 01       	movw	r14, r24
				div_val /= base;
    2a70:	c8 01       	movw	r24, r16
    2a72:	b5 01       	movw	r22, r10
    2a74:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2a78:	8b 01       	movw	r16, r22
			} while (div_val);
    2a7a:	61 15       	cp	r22, r1
    2a7c:	71 05       	cpc	r23, r1
    2a7e:	61 f7       	brne	.-40     	; 0x2a58 <rprintf1RamRom+0xfc>
    2a80:	74 01       	movw	r14, r8
    2a82:	98 cf       	rjmp	.-208    	; 0x29b4 <rprintf1RamRom+0x58>

00002a84 <vt100SetCursorPos>:
}

void vt100SetCursorPos(u08 line, u08 col)
{
	// ESC [ Pl ; Pc H
	rprintf("\x1B[%d;%dH",line,col);
    2a84:	2d b7       	in	r18, 0x3d	; 61
    2a86:	3e b7       	in	r19, 0x3e	; 62
    2a88:	27 50       	subi	r18, 0x07	; 7
    2a8a:	30 40       	sbci	r19, 0x00	; 0
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	3e bf       	out	0x3e, r19	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	2d bf       	out	0x3d, r18	; 61
    2a96:	ed b7       	in	r30, 0x3d	; 61
    2a98:	fe b7       	in	r31, 0x3e	; 62
    2a9a:	31 96       	adiw	r30, 0x01	; 1
    2a9c:	91 e0       	ldi	r25, 0x01	; 1
    2a9e:	ad b7       	in	r26, 0x3d	; 61
    2aa0:	be b7       	in	r27, 0x3e	; 62
    2aa2:	11 96       	adiw	r26, 0x01	; 1
    2aa4:	9c 93       	st	X, r25
    2aa6:	29 e2       	ldi	r18, 0x29	; 41
    2aa8:	32 e0       	ldi	r19, 0x02	; 2
    2aaa:	32 83       	std	Z+2, r19	; 0x02
    2aac:	21 83       	std	Z+1, r18	; 0x01
    2aae:	83 83       	std	Z+3, r24	; 0x03
    2ab0:	14 82       	std	Z+4, r1	; 0x04
    2ab2:	65 83       	std	Z+5, r22	; 0x05
    2ab4:	16 82       	std	Z+6, r1	; 0x06
    2ab6:	0e 94 ae 14 	call	0x295c	; 0x295c <rprintf1RamRom>
    2aba:	2d b7       	in	r18, 0x3d	; 61
    2abc:	3e b7       	in	r19, 0x3e	; 62
    2abe:	29 5f       	subi	r18, 0xF9	; 249
    2ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	3e bf       	out	0x3e, r19	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	2d bf       	out	0x3d, r18	; 61
}
    2acc:	08 95       	ret

00002ace <vt100SetCursorMode>:
	rprintf("\x1B[%dm",attr);
}

void vt100SetCursorMode(u08 visible)
{
	if(visible)
    2ace:	88 23       	and	r24, r24
    2ad0:	49 f0       	breq	.+18     	; 0x2ae4 <vt100SetCursorMode+0x16>
		// ESC [ ? 25 h
		rprintf("\x1B[?25h");
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <vt100SetCursorMode+0x6>
    2ad4:	0f 92       	push	r0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	ed b7       	in	r30, 0x3d	; 61
    2ada:	fe b7       	in	r31, 0x3e	; 62
    2adc:	81 83       	std	Z+1, r24	; 0x01
    2ade:	89 e3       	ldi	r24, 0x39	; 57
    2ae0:	92 e0       	ldi	r25, 0x02	; 2
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <vt100SetCursorMode+0x26>
	else
		// ESC [ ? 25 l
		rprintf("\x1B[?25l");
    2ae4:	00 d0       	rcall	.+0      	; 0x2ae6 <vt100SetCursorMode+0x18>
    2ae6:	0f 92       	push	r0
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	ed b7       	in	r30, 0x3d	; 61
    2aec:	fe b7       	in	r31, 0x3e	; 62
    2aee:	81 83       	std	Z+1, r24	; 0x01
    2af0:	82 e3       	ldi	r24, 0x32	; 50
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	93 83       	std	Z+3, r25	; 0x03
    2af6:	82 83       	std	Z+2, r24	; 0x02
    2af8:	0e 94 ae 14 	call	0x295c	; 0x295c <rprintf1RamRom>
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	08 95       	ret

00002b04 <vt100SetAttr>:
}

void vt100SetAttr(u08 attr)
{
	// ESC [ Ps m
	rprintf("\x1B[%dm",attr);
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <vt100SetAttr+0x2>
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <vt100SetAttr+0x4>
    2b08:	0f 92       	push	r0
    2b0a:	ed b7       	in	r30, 0x3d	; 61
    2b0c:	fe b7       	in	r31, 0x3e	; 62
    2b0e:	31 96       	adiw	r30, 0x01	; 1
    2b10:	91 e0       	ldi	r25, 0x01	; 1
    2b12:	ad b7       	in	r26, 0x3d	; 61
    2b14:	be b7       	in	r27, 0x3e	; 62
    2b16:	11 96       	adiw	r26, 0x01	; 1
    2b18:	9c 93       	st	X, r25
    2b1a:	20 e4       	ldi	r18, 0x40	; 64
    2b1c:	32 e0       	ldi	r19, 0x02	; 2
    2b1e:	32 83       	std	Z+2, r19	; 0x02
    2b20:	21 83       	std	Z+1, r18	; 0x01
    2b22:	83 83       	std	Z+3, r24	; 0x03
    2b24:	14 82       	std	Z+4, r1	; 0x04
    2b26:	0e 94 ae 14 	call	0x295c	; 0x295c <rprintf1RamRom>
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
}
    2b34:	08 95       	ret

00002b36 <vt100ClearScreen>:
}

void vt100ClearScreen(void)
{
	// ESC [ 2 J
	rprintfProgStrM("\x1B[2J");
    2b36:	86 e4       	ldi	r24, 0x46	; 70
    2b38:	92 e0       	ldi	r25, 0x02	; 2
    2b3a:	0e 94 a7 13 	call	0x274e	; 0x274e <rprintfProgStr>
}
    2b3e:	08 95       	ret

00002b40 <vt100Init>:
// Functions
void vt100Init(void)
{
	// initializes terminal to "power-on" settings
	// ESC c
	rprintfProgStrM("\x1B\x63");
    2b40:	8b e4       	ldi	r24, 0x4B	; 75
    2b42:	92 e0       	ldi	r25, 0x02	; 2
    2b44:	0e 94 a7 13 	call	0x274e	; 0x274e <rprintfProgStr>
}
    2b48:	08 95       	ret

00002b4a <debugPrintHexTable>:

// functions

// Print a part of memory as a formatted hex table with ascii translation
void debugPrintHexTable(u16 length, u08 *buffer)
{
    2b4a:	4f 92       	push	r4
    2b4c:	5f 92       	push	r5
    2b4e:	6f 92       	push	r6
    2b50:	7f 92       	push	r7
    2b52:	8f 92       	push	r8
    2b54:	9f 92       	push	r9
    2b56:	af 92       	push	r10
    2b58:	bf 92       	push	r11
    2b5a:	cf 92       	push	r12
    2b5c:	df 92       	push	r13
    2b5e:	ef 92       	push	r14
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
    2b64:	1f 93       	push	r17
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29
    2b6a:	7c 01       	movw	r14, r24
    2b6c:	2b 01       	movw	r4, r22
	u08 s;

	buf = buffer;
	
	// print the low order address indicies and ASCII header
	rprintfProgStrM("     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF\r\n");
    2b6e:	8b e9       	ldi	r24, 0x9B	; 155
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	0e 94 a7 13 	call	0x274e	; 0x274e <rprintfProgStr>
	rprintfProgStrM("     -----------------------------------------------  ---- ASCII -----\r\n");
    2b76:	82 e5       	ldi	r24, 0x52	; 82
    2b78:	92 e0       	ldi	r25, 0x02	; 2
    2b7a:	0e 94 a7 13 	call	0x274e	; 0x274e <rprintfProgStr>
	
	// print the data
	for(j=0; j<((length+15)>>4); j++)
    2b7e:	8f e0       	ldi	r24, 0x0F	; 15
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	e8 0e       	add	r14, r24
    2b84:	f9 1e       	adc	r15, r25
    2b86:	37 01       	movw	r6, r14
    2b88:	94 e0       	ldi	r25, 0x04	; 4
    2b8a:	76 94       	lsr	r7
    2b8c:	67 94       	ror	r6
    2b8e:	9a 95       	dec	r25
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <debugPrintHexTable+0x40>
    2b92:	e1 ef       	ldi	r30, 0xF1	; 241
    2b94:	ff ef       	ldi	r31, 0xFF	; 255
    2b96:	ee 0e       	add	r14, r30
    2b98:	ff 1e       	adc	r15, r31
    2b9a:	88 24       	eor	r8, r8
    2b9c:	99 24       	eor	r9, r9
    2b9e:	4a c0       	rjmp	.+148    	; 0x2c34 <debugPrintHexTable+0xea>
	{
		// print the high order address index for this line
		rprintfu16(j<<4);
    2ba0:	54 01       	movw	r10, r8
    2ba2:	84 e0       	ldi	r24, 0x04	; 4
    2ba4:	aa 0c       	add	r10, r10
    2ba6:	bb 1c       	adc	r11, r11
    2ba8:	8a 95       	dec	r24
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <debugPrintHexTable+0x5a>
    2bac:	c5 01       	movw	r24, r10
    2bae:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <rprintfu16>
		rprintfChar(' ');
    2bb2:	80 e2       	ldi	r24, 0x20	; 32
    2bb4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    2bb8:	62 01       	movw	r12, r4
    2bba:	ca 0c       	add	r12, r10
    2bbc:	db 1c       	adc	r13, r11
    2bbe:	86 01       	movw	r16, r12
    2bc0:	c0 e0       	ldi	r28, 0x00	; 0
    2bc2:	d0 e0       	ldi	r29, 0x00	; 0

		// print the hex data
		for(i=0; i<0x10; i++)
		{
			// be nice and print only up to the exact end of the data
			if( ((j<<4)+i) < length)
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	8a 0d       	add	r24, r10
    2bc8:	9b 1d       	adc	r25, r11
    2bca:	8e 15       	cp	r24, r14
    2bcc:	9f 05       	cpc	r25, r15
    2bce:	40 f4       	brcc	.+16     	; 0x2be0 <debugPrintHexTable+0x96>
			{
				// print hex byte
				rprintfu08(buf[(j<<4)+i]);
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	80 81       	ld	r24, Z
    2bd4:	0e 94 c6 13 	call	0x278c	; 0x278c <rprintfu08>
				rprintfChar(' ');
    2bd8:	80 e2       	ldi	r24, 0x20	; 32
    2bda:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <debugPrintHexTable+0x9e>
			}
			else
			{
				// we're past the end of the data's length
				// print spaces
				rprintfProgStrM("   ");
    2be0:	8e e4       	ldi	r24, 0x4E	; 78
    2be2:	92 e0       	ldi	r25, 0x02	; 2
    2be4:	0e 94 a7 13 	call	0x274e	; 0x274e <rprintfProgStr>
    2be8:	21 96       	adiw	r28, 0x01	; 1
    2bea:	0f 5f       	subi	r16, 0xFF	; 255
    2bec:	1f 4f       	sbci	r17, 0xFF	; 255
		// print the high order address index for this line
		rprintfu16(j<<4);
		rprintfChar(' ');

		// print the hex data
		for(i=0; i<0x10; i++)
    2bee:	c0 31       	cpi	r28, 0x10	; 16
    2bf0:	d1 05       	cpc	r29, r1
    2bf2:	41 f7       	brne	.-48     	; 0x2bc4 <debugPrintHexTable+0x7a>
				rprintfProgStrM("   ");
			}
		}
		
		// leave some space
		rprintfChar(' ');
    2bf4:	80 e2       	ldi	r24, 0x20	; 32
    2bf6:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    2bfa:	c0 e0       	ldi	r28, 0x00	; 0
    2bfc:	d0 e0       	ldi	r29, 0x00	; 0

		// print the ascii data
		for(i=0; i<0x10; i++)
		{
			// be nice and print only up to the exact end of the data
			if( ((j<<4)+i) < length)
    2bfe:	ce 01       	movw	r24, r28
    2c00:	8a 0d       	add	r24, r10
    2c02:	9b 1d       	adc	r25, r11
    2c04:	8e 15       	cp	r24, r14
    2c06:	9f 05       	cpc	r25, r15
    2c08:	30 f4       	brcc	.+12     	; 0x2c16 <debugPrintHexTable+0xcc>
			{
				// get the character
				s = buf[(j<<4)+i]; 
    2c0a:	f6 01       	movw	r30, r12
    2c0c:	80 81       	ld	r24, Z
				// make sure character is printable
				if(s >= 0x20)
    2c0e:	80 32       	cpi	r24, 0x20	; 32
    2c10:	18 f4       	brcc	.+6      	; 0x2c18 <debugPrintHexTable+0xce>
					rprintfChar(s);
				else
					rprintfChar('.');
    2c12:	8e e2       	ldi	r24, 0x2E	; 46
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <debugPrintHexTable+0xce>
			}
			else
			{
				// we're past the end of the data's length
				// print a space
				rprintfChar(' ');
    2c16:	80 e2       	ldi	r24, 0x20	; 32
    2c18:	0e 94 58 13 	call	0x26b0	; 0x26b0 <rprintfChar>
    2c1c:	21 96       	adiw	r28, 0x01	; 1
    2c1e:	08 94       	sec
    2c20:	c1 1c       	adc	r12, r1
    2c22:	d1 1c       	adc	r13, r1
		
		// leave some space
		rprintfChar(' ');

		// print the ascii data
		for(i=0; i<0x10; i++)
    2c24:	c0 31       	cpi	r28, 0x10	; 16
    2c26:	d1 05       	cpc	r29, r1
    2c28:	51 f7       	brne	.-44     	; 0x2bfe <debugPrintHexTable+0xb4>
				// we're past the end of the data's length
				// print a space
				rprintfChar(' ');
			}
		}
		rprintfCRLF();
    2c2a:	0e 94 b7 13 	call	0x276e	; 0x276e <rprintfCRLF>
	// print the low order address indicies and ASCII header
	rprintfProgStrM("     00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F  0123456789ABCDEF\r\n");
	rprintfProgStrM("     -----------------------------------------------  ---- ASCII -----\r\n");
	
	// print the data
	for(j=0; j<((length+15)>>4); j++)
    2c2e:	08 94       	sec
    2c30:	81 1c       	adc	r8, r1
    2c32:	91 1c       	adc	r9, r1
    2c34:	86 14       	cp	r8, r6
    2c36:	97 04       	cpc	r9, r7
    2c38:	08 f4       	brcc	.+2      	; 0x2c3c <debugPrintHexTable+0xf2>
    2c3a:	b2 cf       	rjmp	.-156    	; 0x2ba0 <debugPrintHexTable+0x56>
				rprintfChar(' ');
			}
		}
		rprintfCRLF();
	}
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
    2c4c:	bf 90       	pop	r11
    2c4e:	af 90       	pop	r10
    2c50:	9f 90       	pop	r9
    2c52:	8f 90       	pop	r8
    2c54:	7f 90       	pop	r7
    2c56:	6f 90       	pop	r6
    2c58:	5f 90       	pop	r5
    2c5a:	4f 90       	pop	r4
    2c5c:	08 95       	ret

00002c5e <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
    2c5e:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2c60:	8f b7       	in	r24, 0x3f	; 63
    2c62:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
    2c64:	71 83       	std	Z+1, r23	; 0x01
    2c66:	60 83       	st	Z, r22
	buffer->size = size;
    2c68:	53 83       	std	Z+3, r21	; 0x03
    2c6a:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
    2c6c:	17 82       	std	Z+7, r1	; 0x07
    2c6e:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
    2c70:	15 82       	std	Z+5, r1	; 0x05
    2c72:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    2c74:	8f bf       	out	0x3f, r24	; 63
}
    2c76:	08 95       	ret

00002c78 <bufferGetFromFront>:

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
    2c78:	dc 01       	movw	r26, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
    2c7a:	4f b7       	in	r20, 0x3f	; 63
    2c7c:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
    2c7e:	14 96       	adiw	r26, 0x04	; 4
    2c80:	8d 91       	ld	r24, X+
    2c82:	9c 91       	ld	r25, X
    2c84:	15 97       	sbiw	r26, 0x05	; 5
    2c86:	89 2b       	or	r24, r25
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <bufferGetFromFront+0x16>
    2c8a:	e0 e0       	ldi	r30, 0x00	; 0
    2c8c:	25 c0       	rjmp	.+74     	; 0x2cd8 <bufferGetFromFront+0x60>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
    2c8e:	16 96       	adiw	r26, 0x06	; 6
    2c90:	8d 91       	ld	r24, X+
    2c92:	9c 91       	ld	r25, X
    2c94:	17 97       	sbiw	r26, 0x07	; 7
    2c96:	ed 91       	ld	r30, X+
    2c98:	fc 91       	ld	r31, X
    2c9a:	11 97       	sbiw	r26, 0x01	; 1
    2c9c:	e8 0f       	add	r30, r24
    2c9e:	f9 1f       	adc	r31, r25
    2ca0:	e0 81       	ld	r30, Z
		// move index down and decrement length
		buffer->dataindex++;
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	17 96       	adiw	r26, 0x07	; 7
    2ca6:	9c 93       	st	X, r25
    2ca8:	8e 93       	st	-X, r24
    2caa:	16 97       	sbiw	r26, 0x06	; 6
		if(buffer->dataindex >= buffer->size)
    2cac:	12 96       	adiw	r26, 0x02	; 2
    2cae:	2d 91       	ld	r18, X+
    2cb0:	3c 91       	ld	r19, X
    2cb2:	13 97       	sbiw	r26, 0x03	; 3
    2cb4:	82 17       	cp	r24, r18
    2cb6:	93 07       	cpc	r25, r19
    2cb8:	30 f0       	brcs	.+12     	; 0x2cc6 <bufferGetFromFront+0x4e>
		{
			buffer->dataindex -= buffer->size;
    2cba:	82 1b       	sub	r24, r18
    2cbc:	93 0b       	sbc	r25, r19
    2cbe:	17 96       	adiw	r26, 0x07	; 7
    2cc0:	9c 93       	st	X, r25
    2cc2:	8e 93       	st	-X, r24
    2cc4:	16 97       	sbiw	r26, 0x06	; 6
		}
		buffer->datalength--;
    2cc6:	14 96       	adiw	r26, 0x04	; 4
    2cc8:	8d 91       	ld	r24, X+
    2cca:	9c 91       	ld	r25, X
    2ccc:	15 97       	sbiw	r26, 0x05	; 5
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	15 96       	adiw	r26, 0x05	; 5
    2cd2:	9c 93       	st	X, r25
    2cd4:	8e 93       	st	-X, r24
    2cd6:	14 97       	sbiw	r26, 0x04	; 4
	}
	// end critical section
	CRITICAL_SECTION_END;
    2cd8:	4f bf       	out	0x3f, r20	; 63
	// return
	return data;
}
    2cda:	8e 2f       	mov	r24, r30
    2cdc:	08 95       	ret

00002cde <bufferDumpFromFront>:

void bufferDumpFromFront(cBuffer* buffer, unsigned short numbytes)
{
    2cde:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2ce0:	4f b7       	in	r20, 0x3f	; 63
    2ce2:	f8 94       	cli
	// dump numbytes from the front of the buffer
	// are we dumping less than the entire buffer?
	if(numbytes < buffer->datalength)
    2ce4:	84 81       	ldd	r24, Z+4	; 0x04
    2ce6:	95 81       	ldd	r25, Z+5	; 0x05
    2ce8:	68 17       	cp	r22, r24
    2cea:	79 07       	cpc	r23, r25
    2cec:	b0 f4       	brcc	.+44     	; 0x2d1a <bufferDumpFromFront+0x3c>
	{
		// move index down by numbytes and decrement length by numbytes
		buffer->dataindex += numbytes;
    2cee:	86 81       	ldd	r24, Z+6	; 0x06
    2cf0:	97 81       	ldd	r25, Z+7	; 0x07
    2cf2:	86 0f       	add	r24, r22
    2cf4:	97 1f       	adc	r25, r23
    2cf6:	97 83       	std	Z+7, r25	; 0x07
    2cf8:	86 83       	std	Z+6, r24	; 0x06
		if(buffer->dataindex >= buffer->size)
    2cfa:	22 81       	ldd	r18, Z+2	; 0x02
    2cfc:	33 81       	ldd	r19, Z+3	; 0x03
    2cfe:	82 17       	cp	r24, r18
    2d00:	93 07       	cpc	r25, r19
    2d02:	20 f0       	brcs	.+8      	; 0x2d0c <bufferDumpFromFront+0x2e>
		{
			buffer->dataindex -= buffer->size;
    2d04:	82 1b       	sub	r24, r18
    2d06:	93 0b       	sbc	r25, r19
    2d08:	97 83       	std	Z+7, r25	; 0x07
    2d0a:	86 83       	std	Z+6, r24	; 0x06
		}
		buffer->datalength -= numbytes;
    2d0c:	84 81       	ldd	r24, Z+4	; 0x04
    2d0e:	95 81       	ldd	r25, Z+5	; 0x05
    2d10:	86 1b       	sub	r24, r22
    2d12:	97 0b       	sbc	r25, r23
    2d14:	95 83       	std	Z+5, r25	; 0x05
    2d16:	84 83       	std	Z+4, r24	; 0x04
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <bufferDumpFromFront+0x40>
	}
	else
	{
		// flush the whole buffer
		buffer->datalength = 0;
    2d1a:	15 82       	std	Z+5, r1	; 0x05
    2d1c:	14 82       	std	Z+4, r1	; 0x04
	}
	// end critical section
	CRITICAL_SECTION_END;
    2d1e:	4f bf       	out	0x3f, r20	; 63
}
    2d20:	08 95       	ret

00002d22 <bufferGetAtIndex>:

unsigned char bufferGetAtIndex(cBuffer* buffer, unsigned short index)
{
    2d22:	fc 01       	movw	r30, r24
    2d24:	cb 01       	movw	r24, r22
	// begin critical section
	CRITICAL_SECTION_START;
    2d26:	2f b7       	in	r18, 0x3f	; 63
    2d28:	f8 94       	cli
	// return character at index in buffer
	unsigned char data = buffer->dataptr[(buffer->dataindex+index)%(buffer->size)];
	// end critical section
	CRITICAL_SECTION_END;
    2d2a:	2f bf       	out	0x3f, r18	; 63
    2d2c:	26 81       	ldd	r18, Z+6	; 0x06
    2d2e:	37 81       	ldd	r19, Z+7	; 0x07
    2d30:	62 81       	ldd	r22, Z+2	; 0x02
    2d32:	73 81       	ldd	r23, Z+3	; 0x03
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2d3c:	01 90       	ld	r0, Z+
    2d3e:	f0 81       	ld	r31, Z
    2d40:	e0 2d       	mov	r30, r0
    2d42:	e8 0f       	add	r30, r24
    2d44:	f9 1f       	adc	r31, r25
	return data;
}
    2d46:	80 81       	ld	r24, Z
    2d48:	08 95       	ret

00002d4a <bufferAddToEnd>:

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
    2d4a:	1f 93       	push	r17
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	ec 01       	movw	r28, r24
    2d52:	16 2f       	mov	r17, r22
	// begin critical section
	CRITICAL_SECTION_START;
    2d54:	4f b7       	in	r20, 0x3f	; 63
    2d56:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
    2d58:	2c 81       	ldd	r18, Y+4	; 0x04
    2d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    2d5c:	6a 81       	ldd	r22, Y+2	; 0x02
    2d5e:	7b 81       	ldd	r23, Y+3	; 0x03
    2d60:	26 17       	cp	r18, r22
    2d62:	37 07       	cpc	r19, r23
    2d64:	98 f4       	brcc	.+38     	; 0x2d8c <bufferAddToEnd+0x42>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
    2d66:	8e 81       	ldd	r24, Y+6	; 0x06
    2d68:	9f 81       	ldd	r25, Y+7	; 0x07
    2d6a:	82 0f       	add	r24, r18
    2d6c:	93 1f       	adc	r25, r19
    2d6e:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    2d72:	e8 81       	ld	r30, Y
    2d74:	f9 81       	ldd	r31, Y+1	; 0x01
    2d76:	e8 0f       	add	r30, r24
    2d78:	f9 1f       	adc	r31, r25
    2d7a:	10 83       	st	Z, r17
		// increment the length
		buffer->datalength++;
    2d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d80:	01 96       	adiw	r24, 0x01	; 1
    2d82:	9d 83       	std	Y+5, r25	; 0x05
    2d84:	8c 83       	std	Y+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
    2d86:	4f bf       	out	0x3f, r20	; 63
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <bufferAddToEnd+0x46>
		// return success
		return -1;
	}
	// end critical section
	CRITICAL_SECTION_END;
    2d8c:	4f bf       	out	0x3f, r20	; 63
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
	// return failure
	return 0;
}
    2d90:	df 91       	pop	r29
    2d92:	cf 91       	pop	r28
    2d94:	1f 91       	pop	r17
    2d96:	08 95       	ret

00002d98 <bufferIsNotFull>:

unsigned short bufferIsNotFull(cBuffer* buffer)
{
    2d98:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2d9a:	8f b7       	in	r24, 0x3f	; 63
    2d9c:	f8 94       	cli
	// check to see if the buffer has room
	// return true if there is room
	unsigned short bytesleft = (buffer->size - buffer->datalength);
	// end critical section
	CRITICAL_SECTION_END;
    2d9e:	8f bf       	out	0x3f, r24	; 63
    2da0:	22 81       	ldd	r18, Z+2	; 0x02
    2da2:	33 81       	ldd	r19, Z+3	; 0x03
    2da4:	84 81       	ldd	r24, Z+4	; 0x04
    2da6:	95 81       	ldd	r25, Z+5	; 0x05
    2da8:	28 1b       	sub	r18, r24
    2daa:	39 0b       	sbc	r19, r25
	return bytesleft;
}
    2dac:	c9 01       	movw	r24, r18
    2dae:	08 95       	ret

00002db0 <bufferFlush>:

void bufferFlush(cBuffer* buffer)
{
    2db0:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
    2db2:	8f b7       	in	r24, 0x3f	; 63
    2db4:	f8 94       	cli
	// flush contents of the buffer
	buffer->datalength = 0;
    2db6:	15 82       	std	Z+5, r1	; 0x05
    2db8:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
    2dba:	8f bf       	out	0x3f, r24	; 63
}
    2dbc:	08 95       	ret

00002dbe <uart_init_0>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR0A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR0L = (F_CPU / (8UL * UART_BAUD_0)) - 1;
#else
  UBRR0L = (F_CPU / (16UL * UART_BAUD_0)) - 1;
    2dbe:	87 e6       	ldi	r24, 0x67	; 103
    2dc0:	80 93 c4 00 	sts	0x00C4, r24
#endif
  UCSR0B = _BV(TXEN0) | _BV(RXEN0); /* tx/rx enable */
    2dc4:	88 e1       	ldi	r24, 0x18	; 24
    2dc6:	80 93 c1 00 	sts	0x00C1, r24
}
    2dca:	08 95       	ret

00002dcc <uart_init_1>:
{
#if F_CPU < 2000000UL && defined(U2X)
  UCSR1A = _BV(U2X);             /* improve baud rate error by using 2x clk */
  UBRR1L = (F_CPU / (8UL * UART_BAUD_1)) - 1;
#else
  UBRR1L = (F_CPU / (16UL * UART_BAUD_1)) - 1;
    2dcc:	8f ec       	ldi	r24, 0xCF	; 207
    2dce:	80 93 cc 00 	sts	0x00CC, r24
#endif
  UCSR1B = _BV(TXEN1) | _BV(RXEN1); /* tx/rx enable */
    2dd2:	88 e1       	ldi	r24, 0x18	; 24
    2dd4:	80 93 c9 00 	sts	0x00C9, r24
}
    2dd8:	08 95       	ret

00002dda <uart_putchar_1>:
  return 0;
}

int
uart_putchar_1(char c, FILE *stream)
{
    2dda:	1f 93       	push	r17
    2ddc:	18 2f       	mov	r17, r24

  if (c == '\a')
    2dde:	87 30       	cpi	r24, 0x07	; 7
    2de0:	49 f4       	brne	.+18     	; 0x2df4 <uart_putchar_1+0x1a>
    {
      fputs("*ring*\n", stderr);
    2de2:	60 91 31 17 	lds	r22, 0x1731
    2de6:	70 91 32 17 	lds	r23, 0x1732
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	92 e0       	ldi	r25, 0x02	; 2
    2dee:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
    2df2:	0b c0       	rjmp	.+22     	; 0x2e0a <uart_putchar_1+0x30>
      return 0;
    }

  if (c == '\n')
    2df4:	8a 30       	cpi	r24, 0x0A	; 10
    2df6:	19 f4       	brne	.+6      	; 0x2dfe <uart_putchar_1+0x24>
    uart_putchar_1('\r', stream);
    2df8:	8d e0       	ldi	r24, 0x0D	; 13
    2dfa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
  loop_until_bit_is_set(UCSR1A, UDRE1);
    2dfe:	80 91 c8 00 	lds	r24, 0x00C8
    2e02:	85 ff       	sbrs	r24, 5
    2e04:	fc cf       	rjmp	.-8      	; 0x2dfe <uart_putchar_1+0x24>
  UDR1 = c;
    2e06:	10 93 ce 00 	sts	0x00CE, r17

  return 0;
}
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	1f 91       	pop	r17
    2e10:	08 95       	ret

00002e12 <uart_getchar_1>:
  return c;
}

int
uart_getchar_1(FILE *stream)
{
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    2e20:	80 91 a4 12 	lds	r24, 0x12A4
    2e24:	90 91 a5 12 	lds	r25, 0x12A5
    2e28:	89 2b       	or	r24, r25
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <uart_getchar_1+0x1c>
    2e2c:	9f c0       	rjmp	.+318    	; 0x2f6c <uart_getchar_1+0x15a>
    2e2e:	06 ea       	ldi	r16, 0xA6	; 166
    2e30:	12 e1       	ldi	r17, 0x12	; 18
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR1A, RXC1);
    2e32:	80 91 c8 00 	lds	r24, 0x00C8
    2e36:	87 ff       	sbrs	r24, 7
    2e38:	fc cf       	rjmp	.-8      	; 0x2e32 <uart_getchar_1+0x20>
	if (UCSR1A & _BV(FE1))
    2e3a:	80 91 c8 00 	lds	r24, 0x00C8
    2e3e:	84 ff       	sbrs	r24, 4
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <uart_getchar_1+0x36>
    2e42:	2e ef       	ldi	r18, 0xFE	; 254
    2e44:	3f ef       	ldi	r19, 0xFF	; 255
    2e46:	a6 c0       	rjmp	.+332    	; 0x2f94 <uart_getchar_1+0x182>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
    2e48:	80 91 c8 00 	lds	r24, 0x00C8
    2e4c:	83 fd       	sbrc	r24, 3
    2e4e:	a0 c0       	rjmp	.+320    	; 0x2f90 <uart_getchar_1+0x17e>
	  return _FDEV_ERR;
	c = UDR1;
    2e50:	90 91 ce 00 	lds	r25, 0x00CE
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    2e54:	9d 30       	cpi	r25, 0x0D	; 13
    2e56:	11 f0       	breq	.+4      	; 0x2e5c <uart_getchar_1+0x4a>
	  c = '\n';
	if (c == '\n')
    2e58:	9a 30       	cpi	r25, 0x0A	; 10
    2e5a:	69 f4       	brne	.+26     	; 0x2e76 <uart_getchar_1+0x64>
	  {
	    *cp = c;
    2e5c:	8a e0       	ldi	r24, 0x0A	; 10
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 83       	st	Z, r24
	    uart_putchar_1(c, stream);
    2e62:	b7 01       	movw	r22, r14
    2e64:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
	    rxp = b;
    2e68:	86 ea       	ldi	r24, 0xA6	; 166
    2e6a:	92 e1       	ldi	r25, 0x12	; 18
    2e6c:	90 93 a5 12 	sts	0x12A5, r25
    2e70:	80 93 a4 12 	sts	0x12A4, r24
    2e74:	7b c0       	rjmp	.+246    	; 0x2f6c <uart_getchar_1+0x15a>
	    break;
	  }
	else if (c == '\t')
    2e76:	99 30       	cpi	r25, 0x09	; 9
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <uart_getchar_1+0x6a>
    2e7a:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    2e7c:	89 2f       	mov	r24, r25
    2e7e:	80 52       	subi	r24, 0x20	; 32
    2e80:	8f 35       	cpi	r24, 0x5F	; 95
    2e82:	10 f0       	brcs	.+4      	; 0x2e88 <uart_getchar_1+0x76>
    2e84:	90 3a       	cpi	r25, 0xA0	; 160
    2e86:	70 f0       	brcs	.+28     	; 0x2ea4 <uart_getchar_1+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    2e88:	f2 e1       	ldi	r31, 0x12	; 18
    2e8a:	05 3f       	cpi	r16, 0xF5	; 245
    2e8c:	1f 07       	cpc	r17, r31
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <uart_getchar_1+0x82>
	      uart_putchar_1('\a', stream);
    2e90:	87 e0       	ldi	r24, 0x07	; 7
    2e92:	04 c0       	rjmp	.+8      	; 0x2e9c <uart_getchar_1+0x8a>
	    else
	      {
		*cp++ = c;
    2e94:	f8 01       	movw	r30, r16
    2e96:	91 93       	st	Z+, r25
    2e98:	8f 01       	movw	r16, r30
		uart_putchar_1(c, stream);
    2e9a:	89 2f       	mov	r24, r25
    2e9c:	b7 01       	movw	r22, r14
    2e9e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
    2ea2:	c7 cf       	rjmp	.-114    	; 0x2e32 <uart_getchar_1+0x20>
	      }
	    continue;
	  }

	switch (c)
    2ea4:	92 31       	cpi	r25, 0x12	; 18
    2ea6:	39 f1       	breq	.+78     	; 0x2ef6 <uart_getchar_1+0xe4>
    2ea8:	93 31       	cpi	r25, 0x13	; 19
    2eaa:	38 f4       	brcc	.+14     	; 0x2eba <uart_getchar_1+0xa8>
    2eac:	93 30       	cpi	r25, 0x03	; 3
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <uart_getchar_1+0xa0>
    2eb0:	6f c0       	rjmp	.+222    	; 0x2f90 <uart_getchar_1+0x17e>
    2eb2:	98 30       	cpi	r25, 0x08	; 8
    2eb4:	09 f0       	breq	.+2      	; 0x2eb8 <uart_getchar_1+0xa6>
    2eb6:	bd cf       	rjmp	.-134    	; 0x2e32 <uart_getchar_1+0x20>
    2eb8:	09 c0       	rjmp	.+18     	; 0x2ecc <uart_getchar_1+0xba>
    2eba:	97 31       	cpi	r25, 0x17	; 23
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <uart_getchar_1+0xae>
    2ebe:	4b c0       	rjmp	.+150    	; 0x2f56 <uart_getchar_1+0x144>
    2ec0:	9f 37       	cpi	r25, 0x7F	; 127
    2ec2:	21 f0       	breq	.+8      	; 0x2ecc <uart_getchar_1+0xba>
    2ec4:	95 31       	cpi	r25, 0x15	; 21
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <uart_getchar_1+0xb8>
    2ec8:	b4 cf       	rjmp	.-152    	; 0x2e32 <uart_getchar_1+0x20>
    2eca:	32 c0       	rjmp	.+100    	; 0x2f30 <uart_getchar_1+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    2ecc:	f2 e1       	ldi	r31, 0x12	; 18
    2ece:	06 3a       	cpi	r16, 0xA6	; 166
    2ed0:	1f 07       	cpc	r17, r31
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <uart_getchar_1+0xc4>
    2ed4:	08 f4       	brcc	.+2      	; 0x2ed8 <uart_getchar_1+0xc6>
    2ed6:	ad cf       	rjmp	.-166    	; 0x2e32 <uart_getchar_1+0x20>
	      {
		uart_putchar_1('\b', stream);
    2ed8:	88 e0       	ldi	r24, 0x08	; 8
    2eda:	b7 01       	movw	r22, r14
    2edc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1(' ', stream);
    2ee0:	80 e2       	ldi	r24, 0x20	; 32
    2ee2:	b7 01       	movw	r22, r14
    2ee4:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1('\b', stream);
    2ee8:	88 e0       	ldi	r24, 0x08	; 8
    2eea:	b7 01       	movw	r22, r14
    2eec:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		cp--;
    2ef0:	01 50       	subi	r16, 0x01	; 1
    2ef2:	10 40       	sbci	r17, 0x00	; 0
    2ef4:	9e cf       	rjmp	.-196    	; 0x2e32 <uart_getchar_1+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar_1('\r', stream);
    2ef6:	8d e0       	ldi	r24, 0x0D	; 13
    2ef8:	b7 01       	movw	r22, r14
    2efa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
    2efe:	c6 ea       	ldi	r28, 0xA6	; 166
    2f00:	d2 e1       	ldi	r29, 0x12	; 18
    2f02:	04 c0       	rjmp	.+8      	; 0x2f0c <uart_getchar_1+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar_1(*cp2, stream);
    2f04:	89 91       	ld	r24, Y+
    2f06:	b7 01       	movw	r22, r14
    2f08:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar_1('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    2f0c:	c0 17       	cp	r28, r16
    2f0e:	d1 07       	cpc	r29, r17
    2f10:	c8 f3       	brcs	.-14     	; 0x2f04 <uart_getchar_1+0xf2>
    2f12:	8f cf       	rjmp	.-226    	; 0x2e32 <uart_getchar_1+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar_1('\b', stream);
    2f14:	88 e0       	ldi	r24, 0x08	; 8
    2f16:	b7 01       	movw	r22, r14
    2f18:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1(' ', stream);
    2f1c:	80 e2       	ldi	r24, 0x20	; 32
    2f1e:	b7 01       	movw	r22, r14
    2f20:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1('\b', stream);
    2f24:	88 e0       	ldi	r24, 0x08	; 8
    2f26:	b7 01       	movw	r22, r14
    2f28:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		cp--;
    2f2c:	01 50       	subi	r16, 0x01	; 1
    2f2e:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar_1(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    2f30:	82 e1       	ldi	r24, 0x12	; 18
    2f32:	06 3a       	cpi	r16, 0xA6	; 166
    2f34:	18 07       	cpc	r17, r24
    2f36:	09 f0       	breq	.+2      	; 0x2f3a <uart_getchar_1+0x128>
    2f38:	68 f7       	brcc	.-38     	; 0x2f14 <uart_getchar_1+0x102>
    2f3a:	7b cf       	rjmp	.-266    	; 0x2e32 <uart_getchar_1+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar_1('\b', stream);
    2f3c:	88 e0       	ldi	r24, 0x08	; 8
    2f3e:	b7 01       	movw	r22, r14
    2f40:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1(' ', stream);
    2f44:	80 e2       	ldi	r24, 0x20	; 32
    2f46:	b7 01       	movw	r22, r14
    2f48:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
		uart_putchar_1('\b', stream);
    2f4c:	88 e0       	ldi	r24, 0x08	; 8
    2f4e:	b7 01       	movw	r22, r14
    2f50:	0e 94 ed 16 	call	0x2dda	; 0x2dda <uart_putchar_1>
    2f54:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    2f56:	e2 e1       	ldi	r30, 0x12	; 18
    2f58:	06 3a       	cpi	r16, 0xA6	; 166
    2f5a:	1e 07       	cpc	r17, r30
    2f5c:	09 f0       	breq	.+2      	; 0x2f60 <uart_getchar_1+0x14e>
    2f5e:	08 f4       	brcc	.+2      	; 0x2f62 <uart_getchar_1+0x150>
    2f60:	68 cf       	rjmp	.-304    	; 0x2e32 <uart_getchar_1+0x20>
    2f62:	e8 01       	movw	r28, r16
    2f64:	8a 91       	ld	r24, -Y
    2f66:	80 32       	cpi	r24, 0x20	; 32
    2f68:	49 f7       	brne	.-46     	; 0x2f3c <uart_getchar_1+0x12a>
    2f6a:	63 cf       	rjmp	.-314    	; 0x2e32 <uart_getchar_1+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    2f6c:	e0 91 a4 12 	lds	r30, 0x12A4
    2f70:	f0 91 a5 12 	lds	r31, 0x12A5
    2f74:	81 91       	ld	r24, Z+
    2f76:	f0 93 a5 12 	sts	0x12A5, r31
    2f7a:	e0 93 a4 12 	sts	0x12A4, r30
  if (c == '\n')
    2f7e:	8a 30       	cpi	r24, 0x0A	; 10
    2f80:	21 f4       	brne	.+8      	; 0x2f8a <uart_getchar_1+0x178>
    rxp = 0;
    2f82:	10 92 a5 12 	sts	0x12A5, r1
    2f86:	10 92 a4 12 	sts	0x12A4, r1

  return c;
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <uart_getchar_1+0x182>
    2f90:	2f ef       	ldi	r18, 0xFF	; 255
    2f92:	3f ef       	ldi	r19, 0xFF	; 255
}
    2f94:	c9 01       	movw	r24, r18
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	08 95       	ret

00002fa4 <uart_putchar_0>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar_0(char c, FILE *stream)
{
    2fa4:	1f 93       	push	r17
    2fa6:	18 2f       	mov	r17, r24

  if (c == '\a')
    2fa8:	87 30       	cpi	r24, 0x07	; 7
    2faa:	49 f4       	brne	.+18     	; 0x2fbe <uart_putchar_0+0x1a>
    {
      fputs("*ring*\n", stderr);
    2fac:	60 91 31 17 	lds	r22, 0x1731
    2fb0:	70 91 32 17 	lds	r23, 0x1732
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	92 e0       	ldi	r25, 0x02	; 2
    2fb8:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
    2fbc:	0b c0       	rjmp	.+22     	; 0x2fd4 <uart_putchar_0+0x30>
      return 0;
    }

  if (c == '\n')
    2fbe:	8a 30       	cpi	r24, 0x0A	; 10
    2fc0:	19 f4       	brne	.+6      	; 0x2fc8 <uart_putchar_0+0x24>
    uart_putchar_0('\r', stream);
    2fc2:	8d e0       	ldi	r24, 0x0D	; 13
    2fc4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
  loop_until_bit_is_set(UCSR0A, UDRE0);
    2fc8:	80 91 c0 00 	lds	r24, 0x00C0
    2fcc:	85 ff       	sbrs	r24, 5
    2fce:	fc cf       	rjmp	.-8      	; 0x2fc8 <uart_putchar_0+0x24>
  UDR0 = c;
    2fd0:	10 93 c6 00 	sts	0x00C6, r17

  return 0;
}
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	1f 91       	pop	r17
    2fda:	08 95       	ret

00002fdc <uart_getchar_0>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar_0(FILE *stream)
{
    2fdc:	ef 92       	push	r14
    2fde:	ff 92       	push	r15
    2fe0:	0f 93       	push	r16
    2fe2:	1f 93       	push	r17
    2fe4:	cf 93       	push	r28
    2fe6:	df 93       	push	r29
    2fe8:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    2fea:	80 91 f6 12 	lds	r24, 0x12F6
    2fee:	90 91 f7 12 	lds	r25, 0x12F7
    2ff2:	89 2b       	or	r24, r25
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <uart_getchar_0+0x1c>
    2ff6:	9f c0       	rjmp	.+318    	; 0x3136 <uart_getchar_0+0x15a>
    2ff8:	08 ef       	ldi	r16, 0xF8	; 248
    2ffa:	12 e1       	ldi	r17, 0x12	; 18
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR0A, RXC0);
    2ffc:	80 91 c0 00 	lds	r24, 0x00C0
    3000:	87 ff       	sbrs	r24, 7
    3002:	fc cf       	rjmp	.-8      	; 0x2ffc <uart_getchar_0+0x20>
	if (UCSR0A & _BV(FE0))
    3004:	80 91 c0 00 	lds	r24, 0x00C0
    3008:	84 ff       	sbrs	r24, 4
    300a:	03 c0       	rjmp	.+6      	; 0x3012 <uart_getchar_0+0x36>
    300c:	2e ef       	ldi	r18, 0xFE	; 254
    300e:	3f ef       	ldi	r19, 0xFF	; 255
    3010:	a6 c0       	rjmp	.+332    	; 0x315e <uart_getchar_0+0x182>
	  return _FDEV_EOF;
	if (UCSR0A & _BV(DOR0))
    3012:	80 91 c0 00 	lds	r24, 0x00C0
    3016:	83 fd       	sbrc	r24, 3
    3018:	a0 c0       	rjmp	.+320    	; 0x315a <uart_getchar_0+0x17e>
	  return _FDEV_ERR;
	c = UDR0;
    301a:	90 91 c6 00 	lds	r25, 0x00C6
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    301e:	9d 30       	cpi	r25, 0x0D	; 13
    3020:	11 f0       	breq	.+4      	; 0x3026 <uart_getchar_0+0x4a>
	  c = '\n';
	if (c == '\n')
    3022:	9a 30       	cpi	r25, 0x0A	; 10
    3024:	69 f4       	brne	.+26     	; 0x3040 <uart_getchar_0+0x64>
	  {
	    *cp = c;
    3026:	8a e0       	ldi	r24, 0x0A	; 10
    3028:	f8 01       	movw	r30, r16
    302a:	80 83       	st	Z, r24
	    uart_putchar_0(c, stream);
    302c:	b7 01       	movw	r22, r14
    302e:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
	    rxp = b;
    3032:	88 ef       	ldi	r24, 0xF8	; 248
    3034:	92 e1       	ldi	r25, 0x12	; 18
    3036:	90 93 f7 12 	sts	0x12F7, r25
    303a:	80 93 f6 12 	sts	0x12F6, r24
    303e:	7b c0       	rjmp	.+246    	; 0x3136 <uart_getchar_0+0x15a>
	    break;
	  }
	else if (c == '\t')
    3040:	99 30       	cpi	r25, 0x09	; 9
    3042:	09 f4       	brne	.+2      	; 0x3046 <uart_getchar_0+0x6a>
    3044:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    3046:	89 2f       	mov	r24, r25
    3048:	80 52       	subi	r24, 0x20	; 32
    304a:	8f 35       	cpi	r24, 0x5F	; 95
    304c:	10 f0       	brcs	.+4      	; 0x3052 <uart_getchar_0+0x76>
    304e:	90 3a       	cpi	r25, 0xA0	; 160
    3050:	70 f0       	brcs	.+28     	; 0x306e <uart_getchar_0+0x92>
	    c >= (uint8_t)'\xa0')
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    3052:	f3 e1       	ldi	r31, 0x13	; 19
    3054:	07 34       	cpi	r16, 0x47	; 71
    3056:	1f 07       	cpc	r17, r31
    3058:	11 f4       	brne	.+4      	; 0x305e <uart_getchar_0+0x82>
	      uart_putchar_0('\a', stream);
    305a:	87 e0       	ldi	r24, 0x07	; 7
    305c:	04 c0       	rjmp	.+8      	; 0x3066 <uart_getchar_0+0x8a>
	    else
	      {
		*cp++ = c;
    305e:	f8 01       	movw	r30, r16
    3060:	91 93       	st	Z+, r25
    3062:	8f 01       	movw	r16, r30
		uart_putchar_0(c, stream);
    3064:	89 2f       	mov	r24, r25
    3066:	b7 01       	movw	r22, r14
    3068:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
    306c:	c7 cf       	rjmp	.-114    	; 0x2ffc <uart_getchar_0+0x20>
	      }
	    continue;
	  }

	switch (c)
    306e:	92 31       	cpi	r25, 0x12	; 18
    3070:	39 f1       	breq	.+78     	; 0x30c0 <uart_getchar_0+0xe4>
    3072:	93 31       	cpi	r25, 0x13	; 19
    3074:	38 f4       	brcc	.+14     	; 0x3084 <uart_getchar_0+0xa8>
    3076:	93 30       	cpi	r25, 0x03	; 3
    3078:	09 f4       	brne	.+2      	; 0x307c <uart_getchar_0+0xa0>
    307a:	6f c0       	rjmp	.+222    	; 0x315a <uart_getchar_0+0x17e>
    307c:	98 30       	cpi	r25, 0x08	; 8
    307e:	09 f0       	breq	.+2      	; 0x3082 <uart_getchar_0+0xa6>
    3080:	bd cf       	rjmp	.-134    	; 0x2ffc <uart_getchar_0+0x20>
    3082:	09 c0       	rjmp	.+18     	; 0x3096 <uart_getchar_0+0xba>
    3084:	97 31       	cpi	r25, 0x17	; 23
    3086:	09 f4       	brne	.+2      	; 0x308a <uart_getchar_0+0xae>
    3088:	4b c0       	rjmp	.+150    	; 0x3120 <uart_getchar_0+0x144>
    308a:	9f 37       	cpi	r25, 0x7F	; 127
    308c:	21 f0       	breq	.+8      	; 0x3096 <uart_getchar_0+0xba>
    308e:	95 31       	cpi	r25, 0x15	; 21
    3090:	09 f0       	breq	.+2      	; 0x3094 <uart_getchar_0+0xb8>
    3092:	b4 cf       	rjmp	.-152    	; 0x2ffc <uart_getchar_0+0x20>
    3094:	32 c0       	rjmp	.+100    	; 0x30fa <uart_getchar_0+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    3096:	f2 e1       	ldi	r31, 0x12	; 18
    3098:	08 3f       	cpi	r16, 0xF8	; 248
    309a:	1f 07       	cpc	r17, r31
    309c:	09 f0       	breq	.+2      	; 0x30a0 <uart_getchar_0+0xc4>
    309e:	08 f4       	brcc	.+2      	; 0x30a2 <uart_getchar_0+0xc6>
    30a0:	ad cf       	rjmp	.-166    	; 0x2ffc <uart_getchar_0+0x20>
	      {
		uart_putchar_0('\b', stream);
    30a2:	88 e0       	ldi	r24, 0x08	; 8
    30a4:	b7 01       	movw	r22, r14
    30a6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0(' ', stream);
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	b7 01       	movw	r22, r14
    30ae:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0('\b', stream);
    30b2:	88 e0       	ldi	r24, 0x08	; 8
    30b4:	b7 01       	movw	r22, r14
    30b6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		cp--;
    30ba:	01 50       	subi	r16, 0x01	; 1
    30bc:	10 40       	sbci	r17, 0x00	; 0
    30be:	9e cf       	rjmp	.-196    	; 0x2ffc <uart_getchar_0+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar_0('\r', stream);
    30c0:	8d e0       	ldi	r24, 0x0D	; 13
    30c2:	b7 01       	movw	r22, r14
    30c4:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
    30c8:	c8 ef       	ldi	r28, 0xF8	; 248
    30ca:	d2 e1       	ldi	r29, 0x12	; 18
    30cc:	04 c0       	rjmp	.+8      	; 0x30d6 <uart_getchar_0+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar_0(*cp2, stream);
    30ce:	89 91       	ld	r24, Y+
    30d0:	b7 01       	movw	r22, r14
    30d2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar_0('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    30d6:	c0 17       	cp	r28, r16
    30d8:	d1 07       	cpc	r29, r17
    30da:	c8 f3       	brcs	.-14     	; 0x30ce <uart_getchar_0+0xf2>
    30dc:	8f cf       	rjmp	.-226    	; 0x2ffc <uart_getchar_0+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar_0('\b', stream);
    30de:	88 e0       	ldi	r24, 0x08	; 8
    30e0:	b7 01       	movw	r22, r14
    30e2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0(' ', stream);
    30e6:	80 e2       	ldi	r24, 0x20	; 32
    30e8:	b7 01       	movw	r22, r14
    30ea:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0('\b', stream);
    30ee:	88 e0       	ldi	r24, 0x08	; 8
    30f0:	b7 01       	movw	r22, r14
    30f2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		cp--;
    30f6:	01 50       	subi	r16, 0x01	; 1
    30f8:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar_0(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    30fa:	82 e1       	ldi	r24, 0x12	; 18
    30fc:	08 3f       	cpi	r16, 0xF8	; 248
    30fe:	18 07       	cpc	r17, r24
    3100:	09 f0       	breq	.+2      	; 0x3104 <uart_getchar_0+0x128>
    3102:	68 f7       	brcc	.-38     	; 0x30de <uart_getchar_0+0x102>
    3104:	7b cf       	rjmp	.-266    	; 0x2ffc <uart_getchar_0+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar_0('\b', stream);
    3106:	88 e0       	ldi	r24, 0x08	; 8
    3108:	b7 01       	movw	r22, r14
    310a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0(' ', stream);
    310e:	80 e2       	ldi	r24, 0x20	; 32
    3110:	b7 01       	movw	r22, r14
    3112:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
		uart_putchar_0('\b', stream);
    3116:	88 e0       	ldi	r24, 0x08	; 8
    3118:	b7 01       	movw	r22, r14
    311a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <uart_putchar_0>
    311e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    3120:	e2 e1       	ldi	r30, 0x12	; 18
    3122:	08 3f       	cpi	r16, 0xF8	; 248
    3124:	1e 07       	cpc	r17, r30
    3126:	09 f0       	breq	.+2      	; 0x312a <uart_getchar_0+0x14e>
    3128:	08 f4       	brcc	.+2      	; 0x312c <uart_getchar_0+0x150>
    312a:	68 cf       	rjmp	.-304    	; 0x2ffc <uart_getchar_0+0x20>
    312c:	e8 01       	movw	r28, r16
    312e:	8a 91       	ld	r24, -Y
    3130:	80 32       	cpi	r24, 0x20	; 32
    3132:	49 f7       	brne	.-46     	; 0x3106 <uart_getchar_0+0x12a>
    3134:	63 cf       	rjmp	.-314    	; 0x2ffc <uart_getchar_0+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    3136:	e0 91 f6 12 	lds	r30, 0x12F6
    313a:	f0 91 f7 12 	lds	r31, 0x12F7
    313e:	81 91       	ld	r24, Z+
    3140:	f0 93 f7 12 	sts	0x12F7, r31
    3144:	e0 93 f6 12 	sts	0x12F6, r30
  if (c == '\n')
    3148:	8a 30       	cpi	r24, 0x0A	; 10
    314a:	21 f4       	brne	.+8      	; 0x3154 <uart_getchar_0+0x178>
    rxp = 0;
    314c:	10 92 f7 12 	sts	0x12F7, r1
    3150:	10 92 f6 12 	sts	0x12F6, r1

  return c;
    3154:	28 2f       	mov	r18, r24
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	02 c0       	rjmp	.+4      	; 0x315e <uart_getchar_0+0x182>
    315a:	2f ef       	ldi	r18, 0xFF	; 255
    315c:	3f ef       	ldi	r19, 0xFF	; 255
}
    315e:	c9 01       	movw	r24, r18
    3160:	df 91       	pop	r29
    3162:	cf 91       	pop	r28
    3164:	1f 91       	pop	r17
    3166:	0f 91       	pop	r16
    3168:	ff 90       	pop	r15
    316a:	ef 90       	pop	r14
    316c:	08 95       	ret

0000316e <i2cPutbyteA>:
#define I2C_START       i2cstart();
#define I2C_STOP        i2cstop();	
*/

UINT_AVRLIB i2cPutbyteA(u08 b)
{
    316e:	27 e0       	ldi	r18, 0x07	; 7
    3170:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=7;i>=0;i--)
	{
		if ( b & (1<<i) )
    3172:	48 2f       	mov	r20, r24
    3174:	50 e0       	ldi	r21, 0x00	; 0
    3176:	ca 01       	movw	r24, r20
    3178:	02 2e       	mov	r0, r18
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <i2cPutbyteA+0x12>
    317c:	95 95       	asr	r25
    317e:	87 95       	ror	r24
    3180:	0a 94       	dec	r0
    3182:	e2 f7       	brpl	.-8      	; 0x317c <i2cPutbyteA+0xe>
    3184:	80 ff       	sbrs	r24, 0
    3186:	02 c0       	rjmp	.+4      	; 0x318c <i2cPutbyteA+0x1e>
			I2C_SDL_A_HI;
    3188:	15 9a       	sbi	0x02, 5	; 2
    318a:	01 c0       	rjmp	.+2      	; 0x318e <i2cPutbyteA+0x20>
		else
			I2C_SDL_A_LO;			// address bit
    318c:	15 98       	cbi	0x02, 5	; 2
	...
			I2C_SCL_TOGGLE;		// clock HI, delay, then LO
    31a2:	80 91 05 01 	lds	r24, 0x0105
    31a6:	80 62       	ori	r24, 0x20	; 32
    31a8:	80 93 05 01 	sts	0x0105, r24
	...
    31c0:	80 91 05 01 	lds	r24, 0x0105
    31c4:	8f 7d       	andi	r24, 0xDF	; 223
    31c6:	80 93 05 01 	sts	0x0105, r24

UINT_AVRLIB i2cPutbyteA(u08 b)
{
	int i;
	
	for (i=7;i>=0;i--)
    31ca:	21 50       	subi	r18, 0x01	; 1
    31cc:	30 40       	sbci	r19, 0x00	; 0
    31ce:	8f ef       	ldi	r24, 0xFF	; 255
    31d0:	2f 3f       	cpi	r18, 0xFF	; 255
    31d2:	38 07       	cpc	r19, r24
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <i2cPutbyteA+0x6a>
    31d6:	cf cf       	rjmp	.-98     	; 0x3176 <i2cPutbyteA+0x8>
		else
			I2C_SDL_A_LO;			// address bit
			I2C_SCL_TOGGLE;		// clock HI, delay, then LO
	}

	I2C_SDL_A_HI;					// leave SDL HI
    31d8:	15 9a       	sbi	0x02, 5	; 2
	// added    
	cbi(SDA_A_DDR, SDA_A);			// change direction to input on SDA line (may not be needed)
    31da:	0d 98       	cbi	0x01, 5	; 1
	...
	HDEL;
	I2C_SCL_HI;					// clock back up
    31f0:	80 91 05 01 	lds	r24, 0x0105
    31f4:	80 62       	ori	r24, 0x20	; 32
    31f6:	80 93 05 01 	sts	0x0105, r24
  	b = inb(SDA_A_PIN) & (1<<SDA_A);	// get the ACK bit
    31fa:	20 b1       	in	r18, 0x00	; 0
	...

	HDEL;
	I2C_SCL_LO;					// not really ??
    3210:	80 91 05 01 	lds	r24, 0x0105
    3214:	8f 7d       	andi	r24, 0xDF	; 223
    3216:	80 93 05 01 	sts	0x0105, r24
	sbi(SDA_A_DDR, SDA_A);			// change direction back to output
    321a:	0d 9a       	sbi	0x01, 5	; 1
	...
	HDEL;
    3230:	22 95       	swap	r18
    3232:	26 95       	lsr	r18
    3234:	27 70       	andi	r18, 0x07	; 7
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	28 27       	eor	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	21 70       	andi	r18, 0x01	; 1
    323e:	30 70       	andi	r19, 0x00	; 0
	return (b == 0);			// return ACK value
}
    3240:	c9 01       	movw	r24, r18
    3242:	08 95       	ret

00003244 <i2cPutbyteB>:

UINT_AVRLIB i2cPutbyteB(u08 b)
{
    3244:	27 e0       	ldi	r18, 0x07	; 7
    3246:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	
	for (i=7;i>=0;i--)
	{
		if ( b & (1<<i) )
    3248:	48 2f       	mov	r20, r24
    324a:	50 e0       	ldi	r21, 0x00	; 0
    324c:	ca 01       	movw	r24, r20
    324e:	02 2e       	mov	r0, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <i2cPutbyteB+0x12>
    3252:	95 95       	asr	r25
    3254:	87 95       	ror	r24
    3256:	0a 94       	dec	r0
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <i2cPutbyteB+0xe>
    325a:	80 ff       	sbrs	r24, 0
    325c:	04 c0       	rjmp	.+8      	; 0x3266 <i2cPutbyteB+0x22>
			I2C_SDL_B_HI;
    325e:	80 91 05 01 	lds	r24, 0x0105
    3262:	80 64       	ori	r24, 0x40	; 64
    3264:	03 c0       	rjmp	.+6      	; 0x326c <i2cPutbyteB+0x28>
		else
			I2C_SDL_B_LO;			// address bit
    3266:	80 91 05 01 	lds	r24, 0x0105
    326a:	8f 7b       	andi	r24, 0xBF	; 191
    326c:	80 93 05 01 	sts	0x0105, r24
	...
			I2C_SCL_TOGGLE;		// clock HI, delay, then LO
    3284:	80 91 05 01 	lds	r24, 0x0105
    3288:	80 62       	ori	r24, 0x20	; 32
    328a:	80 93 05 01 	sts	0x0105, r24
	...
    32a2:	80 91 05 01 	lds	r24, 0x0105
    32a6:	8f 7d       	andi	r24, 0xDF	; 223
    32a8:	80 93 05 01 	sts	0x0105, r24

UINT_AVRLIB i2cPutbyteB(u08 b)
{
	int i;
	
	for (i=7;i>=0;i--)
    32ac:	21 50       	subi	r18, 0x01	; 1
    32ae:	30 40       	sbci	r19, 0x00	; 0
    32b0:	8f ef       	ldi	r24, 0xFF	; 255
    32b2:	2f 3f       	cpi	r18, 0xFF	; 255
    32b4:	38 07       	cpc	r19, r24
    32b6:	09 f0       	breq	.+2      	; 0x32ba <i2cPutbyteB+0x76>
    32b8:	c9 cf       	rjmp	.-110    	; 0x324c <i2cPutbyteB+0x8>
		else
			I2C_SDL_B_LO;			// address bit
			I2C_SCL_TOGGLE;		// clock HI, delay, then LO
	}

	I2C_SDL_B_HI;					// leave SDL HI
    32ba:	80 91 05 01 	lds	r24, 0x0105
    32be:	80 64       	ori	r24, 0x40	; 64
    32c0:	80 93 05 01 	sts	0x0105, r24
	// added    
	cbi(SDA_B_DDR, SDA_B);			// change direction to input on SDA line (may not be needed)
    32c4:	80 91 04 01 	lds	r24, 0x0104
    32c8:	8f 7b       	andi	r24, 0xBF	; 191
    32ca:	80 93 04 01 	sts	0x0104, r24
	...
	HDEL;
	I2C_SCL_HI;					// clock back up
    32e2:	80 91 05 01 	lds	r24, 0x0105
    32e6:	80 62       	ori	r24, 0x20	; 32
    32e8:	80 93 05 01 	sts	0x0105, r24
  	b = inb(SDA_B_PIN) & (1<<SDA_B);	// get the ACK bit
    32ec:	20 91 03 01 	lds	r18, 0x0103
	...

	HDEL;
	I2C_SCL_LO;					// not really ??
    3304:	80 91 05 01 	lds	r24, 0x0105
    3308:	8f 7d       	andi	r24, 0xDF	; 223
    330a:	80 93 05 01 	sts	0x0105, r24
	sbi(SDA_B_DDR, SDA_B);			// change direction back to output
    330e:	80 91 04 01 	lds	r24, 0x0104
    3312:	80 64       	ori	r24, 0x40	; 64
    3314:	80 93 04 01 	sts	0x0104, r24
	...
	HDEL;
    332c:	22 95       	swap	r18
    332e:	26 95       	lsr	r18
    3330:	26 95       	lsr	r18
    3332:	23 70       	andi	r18, 0x03	; 3
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	28 27       	eor	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	21 70       	andi	r18, 0x01	; 1
    333c:	30 70       	andi	r19, 0x00	; 0
	return (b == 0);			// return ACK value
}
    333e:	c9 01       	movw	r24, r18
    3340:	08 95       	ret

00003342 <i2cGetbyteA>:


u08 i2cGetbyteA(UINT_AVRLIB last)
{
    3342:	bc 01       	movw	r22, r24
	int i;
	u08 c,b = 0;
		
	I2C_SDL_A_HI;					// make sure pullups are ativated
    3344:	15 9a       	sbi	0x02, 5	; 2
	cbi(SDA_A_DDR, SDA_A);			// change direction to input on SDA line (may not be needed)
    3346:	0d 98       	cbi	0x01, 5	; 1
    3348:	27 e0       	ldi	r18, 0x07	; 7
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e0       	ldi	r20, 0x00	; 0
	...

	for(i=7;i>=0;i--)
	{
		HDEL;
		I2C_SCL_HI;				// clock HI
    3362:	80 91 05 01 	lds	r24, 0x0105
    3366:	80 62       	ori	r24, 0x20	; 32
    3368:	80 93 05 01 	sts	0x0105, r24
	  	c = inb(SDA_A_PIN) & (1<<SDA_A);  
		b <<= 1;
    336c:	44 0f       	add	r20, r20
		if(c) b |= 1;
    336e:	05 99       	sbic	0x00, 5	; 0
    3370:	41 60       	ori	r20, 0x01	; 1
	...
		HDEL;
    	I2C_SCL_LO;				// clock LO
    3386:	80 91 05 01 	lds	r24, 0x0105
    338a:	8f 7d       	andi	r24, 0xDF	; 223
    338c:	80 93 05 01 	sts	0x0105, r24
	u08 c,b = 0;
		
	I2C_SDL_A_HI;					// make sure pullups are ativated
	cbi(SDA_A_DDR, SDA_A);			// change direction to input on SDA line (may not be needed)

	for(i=7;i>=0;i--)
    3390:	21 50       	subi	r18, 0x01	; 1
    3392:	30 40       	sbci	r19, 0x00	; 0
    3394:	8f ef       	ldi	r24, 0xFF	; 255
    3396:	2f 3f       	cpi	r18, 0xFF	; 255
    3398:	38 07       	cpc	r19, r24
    339a:	c9 f6       	brne	.-78     	; 0x334e <i2cGetbyteA+0xc>
		if(c) b |= 1;
		HDEL;
    	I2C_SCL_LO;				// clock LO
	}

	sbi(SDA_A_DDR, SDA_A);			// change direction to output on SDA line
    339c:	0d 9a       	sbi	0x01, 5	; 1
  
	if (last)
    339e:	67 2b       	or	r22, r23
    33a0:	11 f0       	breq	.+4      	; 0x33a6 <i2cGetbyteA+0x64>
		I2C_SDL_A_HI;				// set NAK
    33a2:	15 9a       	sbi	0x02, 5	; 2
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <i2cGetbyteA+0x66>
	else
		I2C_SDL_A_LO;				// set ACK
    33a6:	15 98       	cbi	0x02, 5	; 2
	...

	I2C_SCL_TOGGLE;				// clock pulse
    33bc:	80 91 05 01 	lds	r24, 0x0105
    33c0:	80 62       	ori	r24, 0x20	; 32
    33c2:	80 93 05 01 	sts	0x0105, r24
	...
    33da:	80 91 05 01 	lds	r24, 0x0105
    33de:	8f 7d       	andi	r24, 0xDF	; 223
    33e0:	80 93 05 01 	sts	0x0105, r24
	I2C_SDL_A_HI;					// leave with SDL HI
    33e4:	15 9a       	sbi	0x02, 5	; 2
	return b;					// return received byte
}
    33e6:	84 2f       	mov	r24, r20
    33e8:	08 95       	ret

000033ea <i2cGetbyteB>:

u08 i2cGetbyteB(UINT_AVRLIB last)
{
    33ea:	bc 01       	movw	r22, r24
	int i;
	u08 c,b = 0;
		
	I2C_SDL_B_HI;					// make sure pullups are ativated
    33ec:	80 91 05 01 	lds	r24, 0x0105
    33f0:	80 64       	ori	r24, 0x40	; 64
    33f2:	80 93 05 01 	sts	0x0105, r24
	cbi(SDA_B_DDR, SDA_B);			// change direction to input on SDA line (may not be needed)
    33f6:	80 91 04 01 	lds	r24, 0x0104
    33fa:	8f 7b       	andi	r24, 0xBF	; 191
    33fc:	80 93 04 01 	sts	0x0104, r24
    3400:	27 e0       	ldi	r18, 0x07	; 7
    3402:	30 e0       	ldi	r19, 0x00	; 0
    3404:	40 e0       	ldi	r20, 0x00	; 0
	...

	for(i=7;i>=0;i--)
	{
		HDEL;
		I2C_SCL_HI;				// clock HI
    341a:	80 91 05 01 	lds	r24, 0x0105
    341e:	80 62       	ori	r24, 0x20	; 32
    3420:	80 93 05 01 	sts	0x0105, r24
	  	c = inb(SDA_B_PIN) & (1<<SDA_B);  
    3424:	80 91 03 01 	lds	r24, 0x0103
		b <<= 1;
    3428:	44 0f       	add	r20, r20
		if(c) b |= 1;
    342a:	86 fd       	sbrc	r24, 6
    342c:	41 60       	ori	r20, 0x01	; 1
	...
		HDEL;
    	I2C_SCL_LO;				// clock LO
    3442:	80 91 05 01 	lds	r24, 0x0105
    3446:	8f 7d       	andi	r24, 0xDF	; 223
    3448:	80 93 05 01 	sts	0x0105, r24
	u08 c,b = 0;
		
	I2C_SDL_B_HI;					// make sure pullups are ativated
	cbi(SDA_B_DDR, SDA_B);			// change direction to input on SDA line (may not be needed)

	for(i=7;i>=0;i--)
    344c:	21 50       	subi	r18, 0x01	; 1
    344e:	30 40       	sbci	r19, 0x00	; 0
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	2f 3f       	cpi	r18, 0xFF	; 255
    3454:	38 07       	cpc	r19, r24
    3456:	b9 f6       	brne	.-82     	; 0x3406 <i2cGetbyteB+0x1c>
		if(c) b |= 1;
		HDEL;
    	I2C_SCL_LO;				// clock LO
	}

	sbi(SDA_B_DDR, SDA_B);			// change direction to output on SDA line
    3458:	80 91 04 01 	lds	r24, 0x0104
    345c:	80 64       	ori	r24, 0x40	; 64
    345e:	80 93 04 01 	sts	0x0104, r24
  
	if (last)
    3462:	67 2b       	or	r22, r23
    3464:	21 f0       	breq	.+8      	; 0x346e <i2cGetbyteB+0x84>
		I2C_SDL_B_HI;				// set NAK
    3466:	80 91 05 01 	lds	r24, 0x0105
    346a:	80 64       	ori	r24, 0x40	; 64
    346c:	03 c0       	rjmp	.+6      	; 0x3474 <i2cGetbyteB+0x8a>
	else
		I2C_SDL_B_LO;				// set ACK
    346e:	80 91 05 01 	lds	r24, 0x0105
    3472:	8f 7b       	andi	r24, 0xBF	; 191
    3474:	80 93 05 01 	sts	0x0105, r24
	...

	I2C_SCL_TOGGLE;				// clock pulse
    348c:	80 91 05 01 	lds	r24, 0x0105
    3490:	80 62       	ori	r24, 0x20	; 32
    3492:	80 93 05 01 	sts	0x0105, r24
	...
    34aa:	80 91 05 01 	lds	r24, 0x0105
    34ae:	8f 7d       	andi	r24, 0xDF	; 223
    34b0:	80 93 05 01 	sts	0x0105, r24
	I2C_SDL_B_HI;					// leave with SDL HI
    34b4:	80 91 05 01 	lds	r24, 0x0105
    34b8:	80 64       	ori	r24, 0x40	; 64
    34ba:	80 93 05 01 	sts	0x0105, r24
	return b;					// return received byte
}
    34be:	84 2f       	mov	r24, r20
    34c0:	08 95       	ret

000034c2 <i2cInitA>:
//************************

//! Initialize I2C communication
void i2cInitA(void)
{
	sbi( SDA_A_DDR, SDA_A);			// set SDA as output
    34c2:	0d 9a       	sbi	0x01, 5	; 1
	sbi( SCLDDR, SCL);			// set SCL as output
    34c4:	e4 e0       	ldi	r30, 0x04	; 4
    34c6:	f1 e0       	ldi	r31, 0x01	; 1
    34c8:	80 81       	ld	r24, Z
    34ca:	80 62       	ori	r24, 0x20	; 32
    34cc:	80 83       	st	Z, r24
	I2C_SDL_A_HI;					// set I/O state and pull-ups
    34ce:	15 9a       	sbi	0x02, 5	; 2
	I2C_SCL_HI;					// set I/O state and pull-ups
    34d0:	e5 e0       	ldi	r30, 0x05	; 5
    34d2:	f1 e0       	ldi	r31, 0x01	; 1
    34d4:	80 81       	ld	r24, Z
    34d6:	80 62       	ori	r24, 0x20	; 32
    34d8:	80 83       	st	Z, r24
}
    34da:	08 95       	ret

000034dc <i2cInitB>:

void i2cInitB(void)
{
	sbi( SDA_B_DDR, SDA_B);			// set SDA as output
    34dc:	e4 e0       	ldi	r30, 0x04	; 4
    34de:	f1 e0       	ldi	r31, 0x01	; 1
    34e0:	80 81       	ld	r24, Z
    34e2:	80 64       	ori	r24, 0x40	; 64
    34e4:	80 83       	st	Z, r24
	sbi( SCLDDR, SCL);			// set SCL as output
    34e6:	80 81       	ld	r24, Z
    34e8:	80 62       	ori	r24, 0x20	; 32
    34ea:	80 83       	st	Z, r24
	I2C_SDL_B_HI;					// set I/O state and pull-ups
    34ec:	e5 e0       	ldi	r30, 0x05	; 5
    34ee:	f1 e0       	ldi	r31, 0x01	; 1
    34f0:	80 81       	ld	r24, Z
    34f2:	80 64       	ori	r24, 0x40	; 64
    34f4:	80 83       	st	Z, r24
	I2C_SCL_HI;					// set I/O state and pull-ups
    34f6:	80 81       	ld	r24, Z
    34f8:	80 62       	ori	r24, 0x20	; 32
    34fa:	80 83       	st	Z, r24
}
    34fc:	08 95       	ret

000034fe <i2cSendA>:

//! Send a byte sequence on the I2C bus
void i2cSendA(u08 device, u08 subAddr, u08 length, u08 *data)
{
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	16 2f       	mov	r17, r22
    3508:	04 2f       	mov	r16, r20
    350a:	e9 01       	movw	r28, r18
	I2C_START_A;      			// do start transition
    350c:	15 98       	cbi	0x02, 5	; 2
	...
    3516:	00 00       	nop
    3518:	90 91 05 01 	lds	r25, 0x0105
    351c:	9f 7d       	andi	r25, 0xDF	; 223
    351e:	90 93 05 01 	sts	0x0105, r25
	i2cPutbyteA(device); 		// send DEVICE address
    3522:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
	i2cPutbyteA(subAddr);		// and the subaddress
    3526:	81 2f       	mov	r24, r17
    3528:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
    352c:	04 c0       	rjmp	.+8      	; 0x3536 <i2cSendA+0x38>

	// send the data
	while (length--)
		i2cPutbyteA(*data++);
    352e:	89 91       	ld	r24, Y+
    3530:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
    3534:	01 50       	subi	r16, 0x01	; 1
	I2C_START_A;      			// do start transition
	i2cPutbyteA(device); 		// send DEVICE address
	i2cPutbyteA(subAddr);		// and the subaddress

	// send the data
	while (length--)
    3536:	00 23       	and	r16, r16
    3538:	d1 f7       	brne	.-12     	; 0x352e <i2cSendA+0x30>
		i2cPutbyteA(*data++);

	I2C_SDL_A_LO;					// clear data line and
    353a:	15 98       	cbi	0x02, 5	; 2
	...
	I2C_STOP_A;					// send STOP transition
    3550:	80 91 05 01 	lds	r24, 0x0105
    3554:	80 62       	ori	r24, 0x20	; 32
    3556:	80 93 05 01 	sts	0x0105, r24
	...
    3562:	00 00       	nop
    3564:	15 9a       	sbi	0x02, 5	; 2
	...
}
    357a:	df 91       	pop	r29
    357c:	cf 91       	pop	r28
    357e:	1f 91       	pop	r17
    3580:	0f 91       	pop	r16
    3582:	08 95       	ret

00003584 <i2cSendB>:

//! Send a byte sequence on the I2C bus
void i2cSendB(u08 device, u08 subAddr, u08 length, u08 *data)
{
    3584:	0f 93       	push	r16
    3586:	1f 93       	push	r17
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	16 2f       	mov	r17, r22
    358e:	04 2f       	mov	r16, r20
    3590:	e9 01       	movw	r28, r18
	I2C_START_B;      			// do start transition
    3592:	90 91 05 01 	lds	r25, 0x0105
    3596:	9f 7b       	andi	r25, 0xBF	; 191
    3598:	90 93 05 01 	sts	0x0105, r25
	...
    35a4:	00 00       	nop
    35a6:	90 91 05 01 	lds	r25, 0x0105
    35aa:	9f 7d       	andi	r25, 0xDF	; 223
    35ac:	90 93 05 01 	sts	0x0105, r25
	i2cPutbyteB(device); 		// send DEVICE address
    35b0:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
	i2cPutbyteB(subAddr);		// and the subaddress
    35b4:	81 2f       	mov	r24, r17
    35b6:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
    35ba:	04 c0       	rjmp	.+8      	; 0x35c4 <i2cSendB+0x40>

	// send the data
	while (length--)
		i2cPutbyteB(*data++);
    35bc:	89 91       	ld	r24, Y+
    35be:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
    35c2:	01 50       	subi	r16, 0x01	; 1
	I2C_START_B;      			// do start transition
	i2cPutbyteB(device); 		// send DEVICE address
	i2cPutbyteB(subAddr);		// and the subaddress

	// send the data
	while (length--)
    35c4:	00 23       	and	r16, r16
    35c6:	d1 f7       	brne	.-12     	; 0x35bc <i2cSendB+0x38>
		i2cPutbyteB(*data++);

	I2C_SDL_B_LO;					// clear data line and
    35c8:	80 91 05 01 	lds	r24, 0x0105
    35cc:	8f 7b       	andi	r24, 0xBF	; 191
    35ce:	80 93 05 01 	sts	0x0105, r24
	...
	I2C_STOP_B;					// send STOP transition
    35e6:	80 91 05 01 	lds	r24, 0x0105
    35ea:	80 62       	ori	r24, 0x20	; 32
    35ec:	80 93 05 01 	sts	0x0105, r24
	...
    35f8:	00 00       	nop
    35fa:	80 91 05 01 	lds	r24, 0x0105
    35fe:	80 64       	ori	r24, 0x40	; 64
    3600:	80 93 05 01 	sts	0x0105, r24
	...
}
    3618:	df 91       	pop	r29
    361a:	cf 91       	pop	r28
    361c:	1f 91       	pop	r17
    361e:	0f 91       	pop	r16
    3620:	08 95       	ret

00003622 <i2cReceiveA>:

//! Retrieve a byte sequence on the I2C bus
void i2cReceiveA(u08 device, u08 subAddr, u08 length, u08 *data)
{
    3622:	cf 92       	push	r12
    3624:	df 92       	push	r13
    3626:	ef 92       	push	r14
    3628:	ff 92       	push	r15
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	08 2f       	mov	r16, r24
    3634:	16 2f       	mov	r17, r22
    3636:	d4 2e       	mov	r13, r20
    3638:	f2 2e       	mov	r15, r18
    363a:	e3 2e       	mov	r14, r19
	int j = length;
	u08 *p = data;

	I2C_START_A;					// do start transition
    363c:	15 98       	cbi	0x02, 5	; 2
	...
    3646:	00 00       	nop
    3648:	80 91 05 01 	lds	r24, 0x0105
    364c:	8f 7d       	andi	r24, 0xDF	; 223
    364e:	80 93 05 01 	sts	0x0105, r24
	i2cPutbyteA(device);			// send DEVICE address
    3652:	80 2f       	mov	r24, r16
    3654:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
	i2cPutbyteA(subAddr);   		// and the subaddress
    3658:	81 2f       	mov	r24, r17
    365a:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
	...
	HDEL;
	I2C_SCL_HI;      			// do a repeated START
    3672:	80 91 05 01 	lds	r24, 0x0105
    3676:	80 62       	ori	r24, 0x20	; 32
    3678:	80 93 05 01 	sts	0x0105, r24
	I2C_START_A;					// transition
    367c:	15 98       	cbi	0x02, 5	; 2
	...
    3686:	00 00       	nop
    3688:	80 91 05 01 	lds	r24, 0x0105
    368c:	8f 7d       	andi	r24, 0xDF	; 223
    368e:	80 93 05 01 	sts	0x0105, r24

	i2cPutbyteA(device | READ);	// resend DEVICE, with READ bit set
    3692:	80 2f       	mov	r24, r16
    3694:	81 60       	ori	r24, 0x01	; 1
    3696:	0e 94 b7 18 	call	0x316e	; 0x316e <i2cPutbyteA>
    369a:	2f 2d       	mov	r18, r15
    369c:	3e 2d       	mov	r19, r14
    369e:	c9 01       	movw	r24, r18
    36a0:	ec 01       	movw	r28, r24
    36a2:	00 e0       	ldi	r16, 0x00	; 0
    36a4:	10 e0       	ldi	r17, 0x00	; 0
	I2C_STOP_B;					// send STOP transition
}

//! Retrieve a byte sequence on the I2C bus
void i2cReceiveA(u08 device, u08 subAddr, u08 length, u08 *data)
{
    36a6:	ed 2c       	mov	r14, r13
    36a8:	ff 24       	eor	r15, r15
	I2C_START_A;					// transition

	i2cPutbyteA(device | READ);	// resend DEVICE, with READ bit set

	// receive data bytes
	while (j--)
    36aa:	67 01       	movw	r12, r14
    36ac:	08 94       	sec
    36ae:	c1 1c       	adc	r12, r1
    36b0:	d1 1c       	adc	r13, r1
    36b2:	0a c0       	rjmp	.+20     	; 0x36c8 <i2cReceiveA+0xa6>
		*p++ = i2cGetbyteA(j == 0);
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	e0 16       	cp	r14, r16
    36ba:	f1 06       	cpc	r15, r17
    36bc:	11 f4       	brne	.+4      	; 0x36c2 <i2cReceiveA+0xa0>
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 a1 19 	call	0x3342	; 0x3342 <i2cGetbyteA>
    36c6:	89 93       	st	Y+, r24
    36c8:	0f 5f       	subi	r16, 0xFF	; 255
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
	I2C_START_A;					// transition

	i2cPutbyteA(device | READ);	// resend DEVICE, with READ bit set

	// receive data bytes
	while (j--)
    36cc:	0c 15       	cp	r16, r12
    36ce:	1d 05       	cpc	r17, r13
    36d0:	89 f7       	brne	.-30     	; 0x36b4 <i2cReceiveA+0x92>
		*p++ = i2cGetbyteA(j == 0);

	I2C_SDL_A_LO;					// clear data line and
    36d2:	15 98       	cbi	0x02, 5	; 2
	...
	I2C_STOP_A;					// send STOP transition
    36e8:	80 91 05 01 	lds	r24, 0x0105
    36ec:	80 62       	ori	r24, 0x20	; 32
    36ee:	80 93 05 01 	sts	0x0105, r24
	...
    36fa:	00 00       	nop
    36fc:	15 9a       	sbi	0x02, 5	; 2
	...
}
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	1f 91       	pop	r17
    3718:	0f 91       	pop	r16
    371a:	ff 90       	pop	r15
    371c:	ef 90       	pop	r14
    371e:	df 90       	pop	r13
    3720:	cf 90       	pop	r12
    3722:	08 95       	ret

00003724 <i2cReceiveB>:

//! Retrieve a byte sequence on the I2C bus
void i2cReceiveB(u08 device, u08 subAddr, u08 length, u08 *data)
{
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	08 2f       	mov	r16, r24
    3736:	16 2f       	mov	r17, r22
    3738:	d4 2e       	mov	r13, r20
    373a:	f2 2e       	mov	r15, r18
    373c:	e3 2e       	mov	r14, r19
	int j = length;
	u08 *p = data;

	I2C_START_B;					// do start transition
    373e:	80 91 05 01 	lds	r24, 0x0105
    3742:	8f 7b       	andi	r24, 0xBF	; 191
    3744:	80 93 05 01 	sts	0x0105, r24
	...
    3750:	00 00       	nop
    3752:	80 91 05 01 	lds	r24, 0x0105
    3756:	8f 7d       	andi	r24, 0xDF	; 223
    3758:	80 93 05 01 	sts	0x0105, r24
	i2cPutbyteB(device);			// send DEVICE address
    375c:	80 2f       	mov	r24, r16
    375e:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
	i2cPutbyteB(subAddr);   		// and the subaddress
    3762:	81 2f       	mov	r24, r17
    3764:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
	...
	HDEL;
	I2C_SCL_HI;      			// do a repeated START
    377c:	80 91 05 01 	lds	r24, 0x0105
    3780:	80 62       	ori	r24, 0x20	; 32
    3782:	80 93 05 01 	sts	0x0105, r24
	I2C_START_B;					// transition
    3786:	80 91 05 01 	lds	r24, 0x0105
    378a:	8f 7b       	andi	r24, 0xBF	; 191
    378c:	80 93 05 01 	sts	0x0105, r24
	...
    3798:	00 00       	nop
    379a:	80 91 05 01 	lds	r24, 0x0105
    379e:	8f 7d       	andi	r24, 0xDF	; 223
    37a0:	80 93 05 01 	sts	0x0105, r24

	i2cPutbyteB(device | READ);	// resend DEVICE, with READ bit set
    37a4:	80 2f       	mov	r24, r16
    37a6:	81 60       	ori	r24, 0x01	; 1
    37a8:	0e 94 22 19 	call	0x3244	; 0x3244 <i2cPutbyteB>
    37ac:	2f 2d       	mov	r18, r15
    37ae:	3e 2d       	mov	r19, r14
    37b0:	c9 01       	movw	r24, r18
    37b2:	ec 01       	movw	r28, r24
    37b4:	00 e0       	ldi	r16, 0x00	; 0
    37b6:	10 e0       	ldi	r17, 0x00	; 0
	I2C_STOP_A;					// send STOP transition
}

//! Retrieve a byte sequence on the I2C bus
void i2cReceiveB(u08 device, u08 subAddr, u08 length, u08 *data)
{
    37b8:	ed 2c       	mov	r14, r13
    37ba:	ff 24       	eor	r15, r15
	I2C_START_B;					// transition

	i2cPutbyteB(device | READ);	// resend DEVICE, with READ bit set

	// receive data bytes
	while (j--)
    37bc:	67 01       	movw	r12, r14
    37be:	08 94       	sec
    37c0:	c1 1c       	adc	r12, r1
    37c2:	d1 1c       	adc	r13, r1
    37c4:	0a c0       	rjmp	.+20     	; 0x37da <i2cReceiveB+0xb6>
		*p++ = i2cGetbyteB(j == 0);
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	e0 16       	cp	r14, r16
    37cc:	f1 06       	cpc	r15, r17
    37ce:	11 f4       	brne	.+4      	; 0x37d4 <i2cReceiveB+0xb0>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	0e 94 f5 19 	call	0x33ea	; 0x33ea <i2cGetbyteB>
    37d8:	89 93       	st	Y+, r24
    37da:	0f 5f       	subi	r16, 0xFF	; 255
    37dc:	1f 4f       	sbci	r17, 0xFF	; 255
	I2C_START_B;					// transition

	i2cPutbyteB(device | READ);	// resend DEVICE, with READ bit set

	// receive data bytes
	while (j--)
    37de:	0c 15       	cp	r16, r12
    37e0:	1d 05       	cpc	r17, r13
    37e2:	89 f7       	brne	.-30     	; 0x37c6 <i2cReceiveB+0xa2>
		*p++ = i2cGetbyteB(j == 0);

	I2C_SDL_B_LO;					// clear data line and
    37e4:	80 91 05 01 	lds	r24, 0x0105
    37e8:	8f 7b       	andi	r24, 0xBF	; 191
    37ea:	80 93 05 01 	sts	0x0105, r24
	...
	I2C_STOP_B;					// send STOP transition
    3802:	80 91 05 01 	lds	r24, 0x0105
    3806:	80 62       	ori	r24, 0x20	; 32
    3808:	80 93 05 01 	sts	0x0105, r24
	...
    3814:	00 00       	nop
    3816:	80 91 05 01 	lds	r24, 0x0105
    381a:	80 64       	ori	r24, 0x40	; 64
    381c:	80 93 05 01 	sts	0x0105, r24
	...
}
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	ff 90       	pop	r15
    383e:	ef 90       	pop	r14
    3840:	df 90       	pop	r13
    3842:	cf 90       	pop	r12
    3844:	08 95       	ret

00003846 <nmeap_tokenize>:

/** 
 * tokenize a buffer
 */
int nmeap_tokenize(nmeap_context_t *context)
{
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	ec 01       	movw	r28, r24
    int   tokens;
    int   state;
    
    /* first token is header. assume it is there */
    tokens = 0;
    s = context->input;
    384c:	dc 01       	movw	r26, r24
    384e:	ae 58       	subi	r26, 0x8E	; 142
    3850:	bf 4f       	sbci	r27, 0xFF	; 255
    context->token[tokens] = s;
    3852:	c2 58       	subi	r28, 0x82	; 130
    3854:	de 4f       	sbci	r29, 0xFE	; 254
    3856:	b9 83       	std	Y+1, r27	; 0x01
    3858:	a8 83       	st	Y, r26
    385a:	ce 57       	subi	r28, 0x7E	; 126
    385c:	d1 40       	sbci	r29, 0x01	; 1
    385e:	21 e0       	ldi	r18, 0x01	; 1
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e0       	ldi	r20, 0x00	; 0
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	20 c0       	rjmp	.+64     	; 0x38a8 <nmeap_tokenize+0x62>
    
    /* get rest of tokens */
    tokens = 1;
    state = 0;
    while((*s != 0)&&(tokens < NMEAP_MAX_TOKENS)) {
        switch(state) {
    3868:	41 15       	cp	r20, r1
    386a:	51 05       	cpc	r21, r1
    386c:	21 f0       	breq	.+8      	; 0x3876 <nmeap_tokenize+0x30>
    386e:	41 30       	cpi	r20, 0x01	; 1
    3870:	51 05       	cpc	r21, r1
    3872:	b9 f4       	brne	.+46     	; 0x38a2 <nmeap_tokenize+0x5c>
    3874:	06 c0       	rjmp	.+12     	; 0x3882 <nmeap_tokenize+0x3c>
        case 0:
            /* looking for end of a token */
            if (*s == ',') {
    3876:	8c 32       	cpi	r24, 0x2C	; 44
    3878:	b1 f4       	brne	.+44     	; 0x38a6 <nmeap_tokenize+0x60>
                /* delimit at the comma */
                *s    = 0;
    387a:	1c 92       	st	X, r1
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	50 e0       	ldi	r21, 0x00	; 0
    3880:	12 c0       	rjmp	.+36     	; 0x38a6 <nmeap_tokenize+0x60>
                state = 1;
            }
            break;
        case 1:
            /* start of next token, might be another comma */
            context->token[tokens++] = s;
    3882:	21 54       	subi	r18, 0x41	; 65
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
    3886:	f9 01       	movw	r30, r18
    3888:	ee 0f       	add	r30, r30
    388a:	ff 1f       	adc	r31, r31
    388c:	ec 0f       	add	r30, r28
    388e:	fd 1f       	adc	r31, r29
    3890:	b1 83       	std	Z+1, r27	; 0x01
    3892:	a0 83       	st	Z, r26
    3894:	2e 5b       	subi	r18, 0xBE	; 190
    3896:	30 40       	sbci	r19, 0x00	; 0
            if (*s == ',') {
    3898:	8c 91       	ld	r24, X
    389a:	8c 32       	cpi	r24, 0x2C	; 44
    389c:	11 f4       	brne	.+4      	; 0x38a2 <nmeap_tokenize+0x5c>
                /* delimit at the comma */
                *s    = 0;
    389e:	1c 92       	st	X, r1
    38a0:	02 c0       	rjmp	.+4      	; 0x38a6 <nmeap_tokenize+0x60>
    38a2:	40 e0       	ldi	r20, 0x00	; 0
    38a4:	50 e0       	ldi	r21, 0x00	; 0
            state = 0;
            break;
        }
        
        // next character
        s++;
    38a6:	11 96       	adiw	r26, 0x01	; 1
    context->token[tokens] = s;
    
    /* get rest of tokens */
    tokens = 1;
    state = 0;
    while((*s != 0)&&(tokens < NMEAP_MAX_TOKENS)) {
    38a8:	8c 91       	ld	r24, X
    38aa:	88 23       	and	r24, r24
    38ac:	19 f0       	breq	.+6      	; 0x38b4 <nmeap_tokenize+0x6e>
    38ae:	28 31       	cpi	r18, 0x18	; 24
    38b0:	31 05       	cpc	r19, r1
    38b2:	d4 f2       	brlt	.-76     	; 0x3868 <nmeap_tokenize+0x22>
        
        // next character
        s++;
    }
    return tokens;
}
    38b4:	c9 01       	movw	r24, r18
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	08 95       	ret

000038bc <nmeap_altitude>:
/**
 * get an altitude longitude out of a pair of nmea tokens
 * ALTITUDE is returned in METERS 
 */
double nmeap_altitude(const char *palt,const char *punits)
{
    38bc:	cf 93       	push	r28
    38be:	df 93       	push	r29
    38c0:	fc 01       	movw	r30, r24
    38c2:	eb 01       	movw	r28, r22
    double alt;
    
    if (*palt == 0) {
    38c4:	80 81       	ld	r24, Z
    38c6:	88 23       	and	r24, r24
    38c8:	29 f4       	brne	.+10     	; 0x38d4 <nmeap_altitude+0x18>
    38ca:	60 e0       	ldi	r22, 0x00	; 0
    38cc:	70 e0       	ldi	r23, 0x00	; 0
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e c0       	rjmp	.+28     	; 0x38f0 <nmeap_altitude+0x34>
        return 0.0;
    }
    
    /* convert with no error checking */
    alt = atof(palt);
    38d4:	cf 01       	movw	r24, r30
    38d6:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    
    if (*punits == 'M') {
    38da:	28 81       	ld	r18, Y
    38dc:	2d 34       	cpi	r18, 0x4D	; 77
    38de:	41 f0       	breq	.+16     	; 0x38f0 <nmeap_altitude+0x34>
        /* already in meters */ 
    }
    else if (*punits == 'F') {
    38e0:	26 34       	cpi	r18, 0x46	; 70
    38e2:	31 f4       	brne	.+12     	; 0x38f0 <nmeap_altitude+0x34>
        /* convert to feet */
        alt = alt * 3.2808399;
    38e4:	28 e4       	ldi	r18, 0x48	; 72
    38e6:	39 ef       	ldi	r19, 0xF9	; 249
    38e8:	41 e5       	ldi	r20, 0x51	; 81
    38ea:	50 e4       	ldi	r21, 0x40	; 64
    38ec:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    }
    
    return alt;
}
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	08 95       	ret

000038f6 <nmeap_longitude>:

/**
 * get a longitude out of a pair of nmea tokens 
 */
double nmeap_longitude(const char *plon,const char *phem)
{
    38f6:	af 92       	push	r10
    38f8:	bf 92       	push	r11
    38fa:	cf 92       	push	r12
    38fc:	df 92       	push	r13
    38fe:	ef 92       	push	r14
    3900:	ff 92       	push	r15
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    3906:	cf 93       	push	r28
    3908:	df 93       	push	r29
    390a:	fc 01       	movw	r30, r24
    390c:	db 01       	movw	r26, r22
    double lon;
    int    deg;
    double min;
    int    ew;
    
    assert(plon != 0);
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	19 f0       	breq	.+6      	; 0x3918 <nmeap_longitude+0x22>
    assert(phem != 0);
    3912:	61 15       	cp	r22, r1
    3914:	71 05       	cpc	r23, r1
    3916:	11 f4       	brne	.+4      	; 0x391c <nmeap_longitude+0x26>
    3918:	0e 94 72 66 	call	0xcce4	; 0xcce4 <abort>
    
    if (*plon == 0) {
    391c:	80 81       	ld	r24, Z
    391e:	88 23       	and	r24, r24
    3920:	21 f4       	brne	.+8      	; 0x392a <nmeap_longitude+0x34>
    3922:	e0 e0       	ldi	r30, 0x00	; 0
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	60 e0       	ldi	r22, 0x00	; 0
    3928:	4c c0       	rjmp	.+152    	; 0x39c2 <nmeap_longitude+0xcc>
        return 0.0;
    }
    if (*phem == 0) {
    392a:	6c 91       	ld	r22, X
    392c:	66 23       	and	r22, r22
    392e:	21 f4       	brne	.+8      	; 0x3938 <nmeap_longitude+0x42>
    3930:	e0 e0       	ldi	r30, 0x00	; 0
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	45 c0       	rjmp	.+138    	; 0x39c2 <nmeap_longitude+0xcc>
        return 0.0;
    }
    
    /* west long is negative, east long is positive */
    if (*phem == 'E') {
    3938:	65 34       	cpi	r22, 0x45	; 69
    393a:	19 f0       	breq	.+6      	; 0x3942 <nmeap_longitude+0x4c>
    393c:	cf ef       	ldi	r28, 0xFF	; 255
    393e:	df ef       	ldi	r29, 0xFF	; 255
    3940:	02 c0       	rjmp	.+4      	; 0x3946 <nmeap_longitude+0x50>
    3942:	c1 e0       	ldi	r28, 0x01	; 1
    3944:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    /* longitude is degrees, minutes, fractional minutes */
    /* no validation is performed on the token. it better be good.*/
    /* if it comes back 0.0 then probably the token was bad */
    lon = atof(plon);
    3946:	cf 01       	movw	r24, r30
    3948:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    394c:	5b 01       	movw	r10, r22
    394e:	6c 01       	movw	r12, r24
    
    /* extract the degree part */
    deg = (int)(lon / 100.0);
    
    /* mask out the degrees */
    min = lon - (deg * 100.0);
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	48 ec       	ldi	r20, 0xC8	; 200
    3956:	52 e4       	ldi	r21, 0x42	; 66
    3958:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    395c:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    3960:	88 27       	eor	r24, r24
    3962:	77 fd       	sbrc	r23, 7
    3964:	80 95       	com	r24
    3966:	98 2f       	mov	r25, r24
    3968:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    396c:	7b 01       	movw	r14, r22
    396e:	8c 01       	movw	r16, r24
    
    /* compute the actual lonitude in degrees.decimal-degrees */
    lon = (deg + (min / 60.0)) * ew;
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	48 ec       	ldi	r20, 0xC8	; 200
    3976:	52 ec       	ldi	r21, 0xC2	; 194
    3978:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	c6 01       	movw	r24, r12
    3982:	b5 01       	movw	r22, r10
    3984:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e7       	ldi	r20, 0x70	; 112
    398e:	52 e4       	ldi	r21, 0x42	; 66
    3990:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    3994:	9b 01       	movw	r18, r22
    3996:	ac 01       	movw	r20, r24
    3998:	c8 01       	movw	r24, r16
    399a:	b7 01       	movw	r22, r14
    399c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    39a0:	7b 01       	movw	r14, r22
    39a2:	8c 01       	movw	r16, r24
    39a4:	be 01       	movw	r22, r28
    39a6:	88 27       	eor	r24, r24
    39a8:	77 fd       	sbrc	r23, 7
    39aa:	80 95       	com	r24
    39ac:	98 2f       	mov	r25, r24
    39ae:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    39b2:	9b 01       	movw	r18, r22
    39b4:	ac 01       	movw	r20, r24
    39b6:	c8 01       	movw	r24, r16
    39b8:	b7 01       	movw	r22, r14
    39ba:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    39be:	e6 2f       	mov	r30, r22
    39c0:	69 2f       	mov	r22, r25

    
    return lon;
}
    39c2:	2e 2f       	mov	r18, r30
    39c4:	37 2f       	mov	r19, r23
    39c6:	48 2f       	mov	r20, r24
    39c8:	56 2f       	mov	r21, r22
    39ca:	b9 01       	movw	r22, r18
    39cc:	ca 01       	movw	r24, r20
    39ce:	df 91       	pop	r29
    39d0:	cf 91       	pop	r28
    39d2:	1f 91       	pop	r17
    39d4:	0f 91       	pop	r16
    39d6:	ff 90       	pop	r15
    39d8:	ef 90       	pop	r14
    39da:	df 90       	pop	r13
    39dc:	cf 90       	pop	r12
    39de:	bf 90       	pop	r11
    39e0:	af 90       	pop	r10
    39e2:	08 95       	ret

000039e4 <nmeap_latitude>:

/**
 * get a latitude out of a pair of nmea tokens 
 */
double nmeap_latitude(const char *plat,const char *phem)
{
    39e4:	af 92       	push	r10
    39e6:	bf 92       	push	r11
    39e8:	cf 92       	push	r12
    39ea:	df 92       	push	r13
    39ec:	ef 92       	push	r14
    39ee:	ff 92       	push	r15
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	fc 01       	movw	r30, r24
    39fa:	db 01       	movw	r26, r22
    double lat;
    int    deg;
    double min;
    int    ns;
    
    assert(plat != 0);
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	19 f0       	breq	.+6      	; 0x3a06 <nmeap_latitude+0x22>
    assert(phem != 0);
    3a00:	61 15       	cp	r22, r1
    3a02:	71 05       	cpc	r23, r1
    3a04:	11 f4       	brne	.+4      	; 0x3a0a <nmeap_latitude+0x26>
    3a06:	0e 94 72 66 	call	0xcce4	; 0xcce4 <abort>
    
    if (*plat == 0) {
    3a0a:	80 81       	ld	r24, Z
    3a0c:	88 23       	and	r24, r24
    3a0e:	21 f4       	brne	.+8      	; 0x3a18 <nmeap_latitude+0x34>
    3a10:	e0 e0       	ldi	r30, 0x00	; 0
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	4c c0       	rjmp	.+152    	; 0x3ab0 <nmeap_latitude+0xcc>
        return 0.0;
    }
    if (*phem == 0) {
    3a18:	6c 91       	ld	r22, X
    3a1a:	66 23       	and	r22, r22
    3a1c:	21 f4       	brne	.+8      	; 0x3a26 <nmeap_latitude+0x42>
    3a1e:	e0 e0       	ldi	r30, 0x00	; 0
    3a20:	70 e0       	ldi	r23, 0x00	; 0
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	45 c0       	rjmp	.+138    	; 0x3ab0 <nmeap_latitude+0xcc>
        return 0.0;
    }
    
    /* north lat is +, south lat is - */
    if (*phem == 'N') {
    3a26:	6e 34       	cpi	r22, 0x4E	; 78
    3a28:	19 f0       	breq	.+6      	; 0x3a30 <nmeap_latitude+0x4c>
    3a2a:	cf ef       	ldi	r28, 0xFF	; 255
    3a2c:	df ef       	ldi	r29, 0xFF	; 255
    3a2e:	02 c0       	rjmp	.+4      	; 0x3a34 <nmeap_latitude+0x50>
    3a30:	c1 e0       	ldi	r28, 0x01	; 1
    3a32:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    /* latitude is degrees, minutes, fractional minutes */
    /* no validation is performed on the token. it better be good.*/
    /* if it comes back 0.0 then probably the token was bad */
    lat = atof(plat);
    3a34:	cf 01       	movw	r24, r30
    3a36:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    3a3a:	5b 01       	movw	r10, r22
    3a3c:	6c 01       	movw	r12, r24
    
    /* extract the degree part */
    deg = (int)(lat / 100.0);
    
    /* mask out the degrees */
    min = lat - (deg * 100.0);
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	48 ec       	ldi	r20, 0xC8	; 200
    3a44:	52 e4       	ldi	r21, 0x42	; 66
    3a46:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    3a4a:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    3a4e:	88 27       	eor	r24, r24
    3a50:	77 fd       	sbrc	r23, 7
    3a52:	80 95       	com	r24
    3a54:	98 2f       	mov	r25, r24
    3a56:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    3a5a:	7b 01       	movw	r14, r22
    3a5c:	8c 01       	movw	r16, r24
    
    /* compute the actual latitude in degrees.decimal-degrees */
    lat = (deg + (min / 60.0)) * ns;
    3a5e:	20 e0       	ldi	r18, 0x00	; 0
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	48 ec       	ldi	r20, 0xC8	; 200
    3a64:	52 ec       	ldi	r21, 0xC2	; 194
    3a66:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    3a6a:	9b 01       	movw	r18, r22
    3a6c:	ac 01       	movw	r20, r24
    3a6e:	c6 01       	movw	r24, r12
    3a70:	b5 01       	movw	r22, r10
    3a72:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    3a76:	20 e0       	ldi	r18, 0x00	; 0
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e7       	ldi	r20, 0x70	; 112
    3a7c:	52 e4       	ldi	r21, 0x42	; 66
    3a7e:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    3a82:	9b 01       	movw	r18, r22
    3a84:	ac 01       	movw	r20, r24
    3a86:	c8 01       	movw	r24, r16
    3a88:	b7 01       	movw	r22, r14
    3a8a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    3a8e:	7b 01       	movw	r14, r22
    3a90:	8c 01       	movw	r16, r24
    3a92:	be 01       	movw	r22, r28
    3a94:	88 27       	eor	r24, r24
    3a96:	77 fd       	sbrc	r23, 7
    3a98:	80 95       	com	r24
    3a9a:	98 2f       	mov	r25, r24
    3a9c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    3aa0:	9b 01       	movw	r18, r22
    3aa2:	ac 01       	movw	r20, r24
    3aa4:	c8 01       	movw	r24, r16
    3aa6:	b7 01       	movw	r22, r14
    3aa8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    3aac:	e6 2f       	mov	r30, r22
    3aae:	69 2f       	mov	r22, r25
    
    return lat;
}
    3ab0:	2e 2f       	mov	r18, r30
    3ab2:	37 2f       	mov	r19, r23
    3ab4:	48 2f       	mov	r20, r24
    3ab6:	56 2f       	mov	r21, r22
    3ab8:	b9 01       	movw	r22, r18
    3aba:	ca 01       	movw	r24, r20
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	df 90       	pop	r13
    3aca:	cf 90       	pop	r12
    3acc:	bf 90       	pop	r11
    3ace:	af 90       	pop	r10
    3ad0:	08 95       	ret

00003ad2 <nmeap_gprmc>:

/** 
 * standard GPRMCntence parser 
 */
int nmeap_gprmc(nmeap_context_t *context,nmeap_sentence_t *sentence)
{
    3ad2:	ef 92       	push	r14
    3ad4:	ff 92       	push	r15
    3ad6:	0f 93       	push	r16
    3ad8:	1f 93       	push	r17
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
    3ade:	ec 01       	movw	r28, r24
    3ae0:	7b 01       	movw	r14, r22
#ifndef NDEBUG	
    int i;
#endif

    /* get pointer to sentence data */
    nmeap_rmc_t *rmc = (nmeap_rmc_t *)sentence->data;
    3ae2:	db 01       	movw	r26, r22
    3ae4:	1c 96       	adiw	r26, 0x0c	; 12
    3ae6:	0d 91       	ld	r16, X+
    3ae8:	1c 91       	ld	r17, X
    3aea:	1d 97       	sbiw	r26, 0x0d	; 13
    
	/* if there is a data element, use it */
	if (rmc != 0) {
    3aec:	01 15       	cp	r16, r1
    3aee:	11 05       	cpc	r17, r1
    3af0:	09 f4       	brne	.+2      	; 0x3af4 <nmeap_gprmc+0x22>
    3af2:	75 c0       	rjmp	.+234    	; 0x3bde <nmeap_gprmc+0x10c>
		/* extract data from the tokens */
		rmc->time       = atoi(context->token[1]);
    3af4:	c0 58       	subi	r28, 0x80	; 128
    3af6:	de 4f       	sbci	r29, 0xFE	; 254
    3af8:	89 91       	ld	r24, Y+
    3afa:	99 91       	ld	r25, Y+
    3afc:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    3b00:	aa 27       	eor	r26, r26
    3b02:	97 fd       	sbrc	r25, 7
    3b04:	a0 95       	com	r26
    3b06:	ba 2f       	mov	r27, r26
    3b08:	f8 01       	movw	r30, r16
    3b0a:	80 83       	st	Z, r24
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	a2 83       	std	Z+2, r26	; 0x02
    3b10:	b3 83       	std	Z+3, r27	; 0x03
		rmc->warn       = *context->token[2];
    3b12:	e8 81       	ld	r30, Y
    3b14:	f9 81       	ldd	r31, Y+1	; 0x01
    3b16:	c2 58       	subi	r28, 0x82	; 130
    3b18:	d1 40       	sbci	r29, 0x01	; 1
    3b1a:	80 81       	ld	r24, Z
    3b1c:	d8 01       	movw	r26, r16
    3b1e:	14 96       	adiw	r26, 0x04	; 4
    3b20:	8c 93       	st	X, r24
		rmc->latitude  = nmeap_latitude(context->token[3],context->token[4]);
    3b22:	fe 01       	movw	r30, r28
    3b24:	ec 57       	subi	r30, 0x7C	; 124
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	ca 57       	subi	r28, 0x7A	; 122
    3b2a:	de 4f       	sbci	r29, 0xFE	; 254
    3b2c:	68 81       	ld	r22, Y
    3b2e:	79 81       	ldd	r23, Y+1	; 0x01
    3b30:	c6 58       	subi	r28, 0x86	; 134
    3b32:	d1 40       	sbci	r29, 0x01	; 1
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <nmeap_latitude>
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	65 83       	std	Z+5, r22	; 0x05
    3b40:	76 83       	std	Z+6, r23	; 0x06
    3b42:	87 83       	std	Z+7, r24	; 0x07
    3b44:	90 87       	std	Z+8, r25	; 0x08
		rmc->longitude = nmeap_longitude(context->token[5],context->token[6]);
    3b46:	fe 01       	movw	r30, r28
    3b48:	e8 57       	subi	r30, 0x78	; 120
    3b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b4c:	c6 57       	subi	r28, 0x76	; 118
    3b4e:	de 4f       	sbci	r29, 0xFE	; 254
    3b50:	68 81       	ld	r22, Y
    3b52:	79 81       	ldd	r23, Y+1	; 0x01
    3b54:	ca 58       	subi	r28, 0x8A	; 138
    3b56:	d1 40       	sbci	r29, 0x01	; 1
    3b58:	80 81       	ld	r24, Z
    3b5a:	91 81       	ldd	r25, Z+1	; 0x01
    3b5c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <nmeap_longitude>
    3b60:	d8 01       	movw	r26, r16
    3b62:	19 96       	adiw	r26, 0x09	; 9
    3b64:	6d 93       	st	X+, r22
    3b66:	7d 93       	st	X+, r23
    3b68:	8d 93       	st	X+, r24
    3b6a:	9c 93       	st	X, r25
    3b6c:	1c 97       	sbiw	r26, 0x0c	; 12
		rmc->speed      = atof(context->token[7]);
    3b6e:	fe 01       	movw	r30, r28
    3b70:	e4 57       	subi	r30, 0x74	; 116
    3b72:	fe 4f       	sbci	r31, 0xFE	; 254
    3b74:	80 81       	ld	r24, Z
    3b76:	91 81       	ldd	r25, Z+1	; 0x01
    3b78:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	65 87       	std	Z+13, r22	; 0x0d
    3b80:	76 87       	std	Z+14, r23	; 0x0e
    3b82:	87 87       	std	Z+15, r24	; 0x0f
    3b84:	90 8b       	std	Z+16, r25	; 0x10
		rmc->course     = atof(context->token[8]);
    3b86:	fe 01       	movw	r30, r28
    3b88:	e2 57       	subi	r30, 0x72	; 114
    3b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    3b94:	d8 01       	movw	r26, r16
    3b96:	51 96       	adiw	r26, 0x11	; 17
    3b98:	6d 93       	st	X+, r22
    3b9a:	7d 93       	st	X+, r23
    3b9c:	8d 93       	st	X+, r24
    3b9e:	9c 93       	st	X, r25
    3ba0:	54 97       	sbiw	r26, 0x14	; 20
		rmc->date       = atoi(context->token[9]);
    3ba2:	fe 01       	movw	r30, r28
    3ba4:	e0 57       	subi	r30, 0x70	; 112
    3ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    3bb0:	aa 27       	eor	r26, r26
    3bb2:	97 fd       	sbrc	r25, 7
    3bb4:	a0 95       	com	r26
    3bb6:	ba 2f       	mov	r27, r26
    3bb8:	f8 01       	movw	r30, r16
    3bba:	85 8b       	std	Z+21, r24	; 0x15
    3bbc:	96 8b       	std	Z+22, r25	; 0x16
    3bbe:	a7 8b       	std	Z+23, r26	; 0x17
    3bc0:	b0 8f       	std	Z+24, r27	; 0x18
		rmc->magvar     = atof(context->token[10]);
    3bc2:	fe 01       	movw	r30, r28
    3bc4:	ee 56       	subi	r30, 0x6E	; 110
    3bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    3bc8:	80 81       	ld	r24, Z
    3bca:	91 81       	ldd	r25, Z+1	; 0x01
    3bcc:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    3bd0:	d8 01       	movw	r26, r16
    3bd2:	59 96       	adiw	r26, 0x19	; 25
    3bd4:	6d 93       	st	X+, r22
    3bd6:	7d 93       	st	X+, r23
    3bd8:	8d 93       	st	X+, r24
    3bda:	9c 93       	st	X, r25
    3bdc:	5c 97       	sbiw	r26, 0x1c	; 28
        //printf("%d:%s\n",i,context->token[i]);
    }
#endif   

    /* if the sentence has a callout, call it */
    if (sentence->callout != 0) {
    3bde:	d7 01       	movw	r26, r14
    3be0:	1a 96       	adiw	r26, 0x0a	; 10
    3be2:	ed 91       	ld	r30, X+
    3be4:	fc 91       	ld	r31, X
    3be6:	1b 97       	sbiw	r26, 0x0b	; 11
    3be8:	30 97       	sbiw	r30, 0x00	; 0
    3bea:	49 f0       	breq	.+18     	; 0x3bfe <nmeap_gprmc+0x12c>
        (*sentence->callout)(context,rmc,context->user_data);
    3bec:	c4 53       	subi	r28, 0x34	; 52
    3bee:	dd 4f       	sbci	r29, 0xFD	; 253
    3bf0:	48 81       	ld	r20, Y
    3bf2:	59 81       	ldd	r21, Y+1	; 0x01
    3bf4:	cc 5c       	subi	r28, 0xCC	; 204
    3bf6:	d2 40       	sbci	r29, 0x02	; 2
    3bf8:	ce 01       	movw	r24, r28
    3bfa:	b8 01       	movw	r22, r16
    3bfc:	09 95       	icall
    }
    
    return NMEAP_GPRMC;
}
    3bfe:	82 e0       	ldi	r24, 0x02	; 2
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	ff 90       	pop	r15
    3c0c:	ef 90       	pop	r14
    3c0e:	08 95       	ret

00003c10 <nmeap_gpgga>:

/** 
 * standard GPGGA sentence parser 
 */
int nmeap_gpgga(nmeap_context_t *context,nmeap_sentence_t *sentence)
{
    3c10:	ef 92       	push	r14
    3c12:	ff 92       	push	r15
    3c14:	0f 93       	push	r16
    3c16:	1f 93       	push	r17
    3c18:	cf 93       	push	r28
    3c1a:	df 93       	push	r29
    3c1c:	ec 01       	movw	r28, r24
    3c1e:	7b 01       	movw	r14, r22
#ifndef NDEBUG	
    int i;
#endif
    
    /* get pointer to sentence data */
    nmeap_gga_t *gga = (nmeap_gga_t *)sentence->data;
    3c20:	db 01       	movw	r26, r22
    3c22:	1c 96       	adiw	r26, 0x0c	; 12
    3c24:	0d 91       	ld	r16, X+
    3c26:	1c 91       	ld	r17, X
    3c28:	1d 97       	sbiw	r26, 0x0d	; 13
    
    /* if there is a data element, extract data from the tokens */
	if (gga != 0) {
    3c2a:	01 15       	cp	r16, r1
    3c2c:	11 05       	cpc	r17, r1
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <nmeap_gpgga+0x22>
    3c30:	91 c0       	rjmp	.+290    	; 0x3d54 <nmeap_gpgga+0x144>
		gga->latitude  = nmeap_latitude(context->token[2],context->token[3]);
    3c32:	fc 01       	movw	r30, r24
    3c34:	ee 57       	subi	r30, 0x7E	; 126
    3c36:	fe 4f       	sbci	r31, 0xFE	; 254
    3c38:	cc 57       	subi	r28, 0x7C	; 124
    3c3a:	de 4f       	sbci	r29, 0xFE	; 254
    3c3c:	68 81       	ld	r22, Y
    3c3e:	79 81       	ldd	r23, Y+1	; 0x01
    3c40:	c4 58       	subi	r28, 0x84	; 132
    3c42:	d1 40       	sbci	r29, 0x01	; 1
    3c44:	80 81       	ld	r24, Z
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <nmeap_latitude>
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	60 83       	st	Z, r22
    3c50:	71 83       	std	Z+1, r23	; 0x01
    3c52:	82 83       	std	Z+2, r24	; 0x02
    3c54:	93 83       	std	Z+3, r25	; 0x03
		gga->longitude = nmeap_longitude(context->token[4],context->token[5]);
    3c56:	fe 01       	movw	r30, r28
    3c58:	ea 57       	subi	r30, 0x7A	; 122
    3c5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5c:	c8 57       	subi	r28, 0x78	; 120
    3c5e:	de 4f       	sbci	r29, 0xFE	; 254
    3c60:	68 81       	ld	r22, Y
    3c62:	79 81       	ldd	r23, Y+1	; 0x01
    3c64:	c8 58       	subi	r28, 0x88	; 136
    3c66:	d1 40       	sbci	r29, 0x01	; 1
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <nmeap_longitude>
    3c70:	d8 01       	movw	r26, r16
    3c72:	14 96       	adiw	r26, 0x04	; 4
    3c74:	6d 93       	st	X+, r22
    3c76:	7d 93       	st	X+, r23
    3c78:	8d 93       	st	X+, r24
    3c7a:	9c 93       	st	X, r25
    3c7c:	17 97       	sbiw	r26, 0x07	; 7
		gga->altitude  = nmeap_altitude(context->token[9],context->token[10]);
    3c7e:	fe 01       	movw	r30, r28
    3c80:	e0 57       	subi	r30, 0x70	; 112
    3c82:	fe 4f       	sbci	r31, 0xFE	; 254
    3c84:	ce 56       	subi	r28, 0x6E	; 110
    3c86:	de 4f       	sbci	r29, 0xFE	; 254
    3c88:	68 81       	ld	r22, Y
    3c8a:	79 81       	ldd	r23, Y+1	; 0x01
    3c8c:	80 81       	ld	r24, Z
    3c8e:	91 81       	ldd	r25, Z+1	; 0x01
    3c90:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <nmeap_altitude>
    3c94:	f8 01       	movw	r30, r16
    3c96:	60 87       	std	Z+8, r22	; 0x08
    3c98:	71 87       	std	Z+9, r23	; 0x09
    3c9a:	82 87       	std	Z+10, r24	; 0x0a
    3c9c:	93 87       	std	Z+11, r25	; 0x0b
		//gga->time       = atoi(context->token[1]);
		sscanf(context->token[1], "%"SCNu32, &gga->time);
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <nmeap_gpgga+0x90>
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <nmeap_gpgga+0x92>
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <nmeap_gpgga+0x94>
    3ca4:	ed b7       	in	r30, 0x3d	; 61
    3ca6:	fe b7       	in	r31, 0x3e	; 62
    3ca8:	31 96       	adiw	r30, 0x01	; 1
    3caa:	62 97       	sbiw	r28, 0x12	; 18
    3cac:	88 81       	ld	r24, Y
    3cae:	99 81       	ldd	r25, Y+1	; 0x01
    3cb0:	c0 58       	subi	r28, 0x80	; 128
    3cb2:	d1 40       	sbci	r29, 0x01	; 1
    3cb4:	ad b7       	in	r26, 0x3d	; 61
    3cb6:	be b7       	in	r27, 0x3e	; 62
    3cb8:	12 96       	adiw	r26, 0x02	; 2
    3cba:	9c 93       	st	X, r25
    3cbc:	8e 93       	st	-X, r24
    3cbe:	11 97       	sbiw	r26, 0x01	; 1
    3cc0:	88 e0       	ldi	r24, 0x08	; 8
    3cc2:	92 e0       	ldi	r25, 0x02	; 2
    3cc4:	93 83       	std	Z+3, r25	; 0x03
    3cc6:	82 83       	std	Z+2, r24	; 0x02
    3cc8:	04 5f       	subi	r16, 0xF4	; 244
    3cca:	1f 4f       	sbci	r17, 0xFF	; 255
    3ccc:	15 83       	std	Z+5, r17	; 0x05
    3cce:	04 83       	std	Z+4, r16	; 0x04
    3cd0:	0c 50       	subi	r16, 0x0C	; 12
    3cd2:	10 40       	sbci	r17, 0x00	; 0
    3cd4:	0e 94 37 69 	call	0xd26e	; 0xd26e <sscanf>
		gga->satellites = atoi(context->token[7]);
    3cd8:	ed b7       	in	r30, 0x3d	; 61
    3cda:	fe b7       	in	r31, 0x3e	; 62
    3cdc:	36 96       	adiw	r30, 0x06	; 6
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	fe bf       	out	0x3e, r31	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	ed bf       	out	0x3d, r30	; 61
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e4 57       	subi	r30, 0x74	; 116
    3cec:	fe 4f       	sbci	r31, 0xFE	; 254
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    3cf6:	d8 01       	movw	r26, r16
    3cf8:	51 96       	adiw	r26, 0x11	; 17
    3cfa:	9c 93       	st	X, r25
    3cfc:	8e 93       	st	-X, r24
    3cfe:	50 97       	sbiw	r26, 0x10	; 16
		gga->quality    = atoi(context->token[6]);
    3d00:	fe 01       	movw	r30, r28
    3d02:	e6 57       	subi	r30, 0x76	; 118
    3d04:	fe 4f       	sbci	r31, 0xFE	; 254
    3d06:	80 81       	ld	r24, Z
    3d08:	91 81       	ldd	r25, Z+1	; 0x01
    3d0a:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    3d0e:	f8 01       	movw	r30, r16
    3d10:	93 8b       	std	Z+19, r25	; 0x13
    3d12:	82 8b       	std	Z+18, r24	; 0x12
		gga->hdop       = atof(context->token[8]);
    3d14:	fe 01       	movw	r30, r28
    3d16:	e2 57       	subi	r30, 0x72	; 114
    3d18:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    3d22:	d8 01       	movw	r26, r16
    3d24:	54 96       	adiw	r26, 0x14	; 20
    3d26:	6d 93       	st	X+, r22
    3d28:	7d 93       	st	X+, r23
    3d2a:	8d 93       	st	X+, r24
    3d2c:	9c 93       	st	X, r25
    3d2e:	57 97       	sbiw	r26, 0x17	; 23
		gga->geoid      = nmeap_altitude(context->token[11],context->token[12]);
    3d30:	fe 01       	movw	r30, r28
    3d32:	ec 56       	subi	r30, 0x6C	; 108
    3d34:	fe 4f       	sbci	r31, 0xFE	; 254
    3d36:	ca 56       	subi	r28, 0x6A	; 106
    3d38:	de 4f       	sbci	r29, 0xFE	; 254
    3d3a:	68 81       	ld	r22, Y
    3d3c:	79 81       	ldd	r23, Y+1	; 0x01
    3d3e:	c6 59       	subi	r28, 0x96	; 150
    3d40:	d1 40       	sbci	r29, 0x01	; 1
    3d42:	80 81       	ld	r24, Z
    3d44:	91 81       	ldd	r25, Z+1	; 0x01
    3d46:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <nmeap_altitude>
    3d4a:	f8 01       	movw	r30, r16
    3d4c:	60 8f       	std	Z+24, r22	; 0x18
    3d4e:	71 8f       	std	Z+25, r23	; 0x19
    3d50:	82 8f       	std	Z+26, r24	; 0x1a
    3d52:	93 8f       	std	Z+27, r25	; 0x1b
        //printf("%d:%s\n",i,context->token[i]);
    }
#endif   

    /* if the sentence has a callout, call it */
    if (sentence->callout != 0) {
    3d54:	d7 01       	movw	r26, r14
    3d56:	1a 96       	adiw	r26, 0x0a	; 10
    3d58:	ed 91       	ld	r30, X+
    3d5a:	fc 91       	ld	r31, X
    3d5c:	1b 97       	sbiw	r26, 0x0b	; 11
    3d5e:	30 97       	sbiw	r30, 0x00	; 0
    3d60:	49 f0       	breq	.+18     	; 0x3d74 <nmeap_gpgga+0x164>
        (*sentence->callout)(context,gga,context->user_data);
    3d62:	c4 53       	subi	r28, 0x34	; 52
    3d64:	dd 4f       	sbci	r29, 0xFD	; 253
    3d66:	48 81       	ld	r20, Y
    3d68:	59 81       	ldd	r21, Y+1	; 0x01
    3d6a:	cc 5c       	subi	r28, 0xCC	; 204
    3d6c:	d2 40       	sbci	r29, 0x02	; 2
    3d6e:	ce 01       	movw	r24, r28
    3d70:	b8 01       	movw	r22, r16
    3d72:	09 95       	icall
    }
    
    return NMEAP_GPGGA;
}
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	df 91       	pop	r29
    3d7a:	cf 91       	pop	r28
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	ff 90       	pop	r15
    3d82:	ef 90       	pop	r14
    3d84:	08 95       	ret

00003d86 <nmeap_process>:

/**
 * process a sentence 
 */
int nmeap_process(nmeap_context_t *context)
{
    3d86:	6f 92       	push	r6
    3d88:	7f 92       	push	r7
    3d8a:	8f 92       	push	r8
    3d8c:	9f 92       	push	r9
    3d8e:	af 92       	push	r10
    3d90:	bf 92       	push	r11
    3d92:	cf 92       	push	r12
    3d94:	df 92       	push	r13
    3d96:	ef 92       	push	r14
    3d98:	ff 92       	push	r15
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	ec 01       	movw	r28, r24
    int i;
    nmeap_sentence_t *s;
	
    /* copy the input to a debug buffer */
    /* remove debug_input when everything is working. */
    strncpy(context->debug_input,context->input,sizeof(context->debug_input));
    3da4:	bc 01       	movw	r22, r24
    3da6:	6e 58       	subi	r22, 0x8E	; 142
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	84 53       	subi	r24, 0x34	; 52
    3dac:	9e 4f       	sbci	r25, 0xFE	; 254
    3dae:	40 e0       	ldi	r20, 0x00	; 0
    3db0:	51 e0       	ldi	r21, 0x01	; 1
    3db2:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <strncpy>
    
    /* tokenize the input */
    context->tokens = nmeap_tokenize(context);
    3db6:	ce 01       	movw	r24, r28
    3db8:	0e 94 23 1c 	call	0x3846	; 0x3846 <nmeap_tokenize>
    3dbc:	c2 55       	subi	r28, 0x52	; 82
    3dbe:	de 4f       	sbci	r29, 0xFE	; 254
    3dc0:	99 83       	std	Y+1, r25	; 0x01
    3dc2:	88 83       	st	Y, r24
    3dc4:	ce 5a       	subi	r28, 0xAE	; 174
    3dc6:	d1 40       	sbci	r29, 0x01	; 1
    /* binary search instead of linear (have to keep sentences in sorted order) O(NlogN) */
    /* OR, when sentences are added, create a TRIE structure to find the names with a constant time search O(5) */
    for(i=0;i<context->sentence_count;i++) {
        s = &context->sentence[i];
        assert(s != 0);
        if (strncmp(context->input_name,s->name,5) == 0) {
    3dc8:	76 e7       	ldi	r23, 0x76	; 118
    3dca:	67 2e       	mov	r6, r23
    3dcc:	71 e0       	ldi	r23, 0x01	; 1
    3dce:	77 2e       	mov	r7, r23
    3dd0:	6c 0e       	add	r6, r28
    3dd2:	7d 1e       	adc	r7, r29
    3dd4:	5e 01       	movw	r10, r28
    3dd6:	00 e0       	ldi	r16, 0x00	; 0
    3dd8:	10 e0       	ldi	r17, 0x00	; 0
    
    /* try to find a matching sentence parser */
    /* this search is O(n). it has a lot of potential for optimization, at the expense of complexity, if you have a lot of sentences */
    /* binary search instead of linear (have to keep sentences in sorted order) O(NlogN) */
    /* OR, when sentences are added, create a TRIE structure to find the names with a constant time search O(5) */
    for(i=0;i<context->sentence_count;i++) {
    3dda:	60 e7       	ldi	r22, 0x70	; 112
    3ddc:	86 2e       	mov	r8, r22
    3dde:	91 2c       	mov	r9, r1
    3de0:	8c 0e       	add	r8, r28
    3de2:	9d 1e       	adc	r9, r29
    3de4:	38 c0       	rjmp	.+112    	; 0x3e56 <nmeap_process+0xd0>
        s = &context->sentence[i];
    3de6:	c8 01       	movw	r24, r16
    3de8:	88 0f       	add	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	7c 01       	movw	r14, r24
    3dee:	43 e0       	ldi	r20, 0x03	; 3
    3df0:	ee 0c       	add	r14, r14
    3df2:	ff 1c       	adc	r15, r15
    3df4:	4a 95       	dec	r20
    3df6:	e1 f7       	brne	.-8      	; 0x3df0 <nmeap_process+0x6a>
    3df8:	e8 1a       	sub	r14, r24
    3dfa:	f9 0a       	sbc	r15, r25
    3dfc:	ec 0e       	add	r14, r28
    3dfe:	fd 1e       	adc	r15, r29
        assert(s != 0);
    3e00:	e1 14       	cp	r14, r1
    3e02:	f1 04       	cpc	r15, r1
    3e04:	11 f4       	brne	.+4      	; 0x3e0a <nmeap_process+0x84>
    3e06:	0e 94 72 66 	call	0xcce4	; 0xcce4 <abort>
        if (strncmp(context->input_name,s->name,5) == 0) {
    3e0a:	c8 01       	movw	r24, r16
    3e0c:	88 0f       	add	r24, r24
    3e0e:	99 1f       	adc	r25, r25
    3e10:	bc 01       	movw	r22, r24
    3e12:	23 e0       	ldi	r18, 0x03	; 3
    3e14:	66 0f       	add	r22, r22
    3e16:	77 1f       	adc	r23, r23
    3e18:	2a 95       	dec	r18
    3e1a:	e1 f7       	brne	.-8      	; 0x3e14 <nmeap_process+0x8e>
    3e1c:	68 1b       	sub	r22, r24
    3e1e:	79 0b       	sbc	r23, r25
    3e20:	6c 0f       	add	r22, r28
    3e22:	7d 1f       	adc	r23, r29
    3e24:	c3 01       	movw	r24, r6
    3e26:	45 e0       	ldi	r20, 0x05	; 5
    3e28:	50 e0       	ldi	r21, 0x00	; 0
    3e2a:	0e 94 c2 67 	call	0xcf84	; 0xcf84 <strncmp>
    3e2e:	00 97       	sbiw	r24, 0x00	; 0
    3e30:	61 f4       	brne	.+24     	; 0x3e4a <nmeap_process+0xc4>
            /* found a match, call its parser */
            id = (*context->sentence[i].parser)(context,s);
    3e32:	d5 01       	movw	r26, r10
    3e34:	18 96       	adiw	r26, 0x08	; 8
    3e36:	ed 91       	ld	r30, X+
    3e38:	fc 91       	ld	r31, X
    3e3a:	19 97       	sbiw	r26, 0x09	; 9
    3e3c:	ce 01       	movw	r24, r28
    3e3e:	b7 01       	movw	r22, r14
    3e40:	09 95       	icall
    3e42:	6c 01       	movw	r12, r24
            if (id > 0) {
    3e44:	18 16       	cp	r1, r24
    3e46:	19 06       	cpc	r1, r25
    3e48:	64 f0       	brlt	.+24     	; 0x3e62 <nmeap_process+0xdc>
    
    /* try to find a matching sentence parser */
    /* this search is O(n). it has a lot of potential for optimization, at the expense of complexity, if you have a lot of sentences */
    /* binary search instead of linear (have to keep sentences in sorted order) O(NlogN) */
    /* OR, when sentences are added, create a TRIE structure to find the names with a constant time search O(5) */
    for(i=0;i<context->sentence_count;i++) {
    3e4a:	0f 5f       	subi	r16, 0xFF	; 255
    3e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4e:	ee e0       	ldi	r30, 0x0E	; 14
    3e50:	f0 e0       	ldi	r31, 0x00	; 0
    3e52:	ae 0e       	add	r10, r30
    3e54:	bf 1e       	adc	r11, r31
    3e56:	d4 01       	movw	r26, r8
    3e58:	8d 91       	ld	r24, X+
    3e5a:	9c 91       	ld	r25, X
    3e5c:	08 17       	cp	r16, r24
    3e5e:	19 07       	cpc	r17, r25
    3e60:	14 f2       	brlt	.-124    	; 0x3de6 <nmeap_process+0x60>
            }
        }
    }
        
    return id;
}
    3e62:	c6 01       	movw	r24, r12
    3e64:	df 91       	pop	r29
    3e66:	cf 91       	pop	r28
    3e68:	1f 91       	pop	r17
    3e6a:	0f 91       	pop	r16
    3e6c:	ff 90       	pop	r15
    3e6e:	ef 90       	pop	r14
    3e70:	df 90       	pop	r13
    3e72:	cf 90       	pop	r12
    3e74:	bf 90       	pop	r11
    3e76:	af 90       	pop	r10
    3e78:	9f 90       	pop	r9
    3e7a:	8f 90       	pop	r8
    3e7c:	7f 90       	pop	r7
    3e7e:	6f 90       	pop	r6
    3e80:	08 95       	ret

00003e82 <nmeap_parse>:
including, the "$" and "*".  A checksum is required on some
sentences.

*/
int nmeap_parse(nmeap_context_t *context,char ch)
{
    3e82:	af 92       	push	r10
    3e84:	bf 92       	push	r11
    3e86:	cf 92       	push	r12
    3e88:	df 92       	push	r13
    3e8a:	ff 92       	push	r15
    3e8c:	0f 93       	push	r16
    3e8e:	1f 93       	push	r17
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	ec 01       	movw	r28, r24
    3e96:	f6 2e       	mov	r15, r22
    int status = 0;
    
    /* check for input buffer overrun first to avoid duplicating code in the
    individual states
    */
    if (context->input_count >= (sizeof(context->input)-1)) {
    3e98:	fc 01       	movw	r30, r24
    3e9a:	ee 58       	subi	r30, 0x8E	; 142
    3e9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9e:	80 81       	ld	r24, Z
    3ea0:	91 81       	ldd	r25, Z+1	; 0x01
    3ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ea4:	91 05       	cpc	r25, r1
    3ea6:	40 f0       	brcs	.+16     	; 0x3eb8 <nmeap_parse+0x36>
        /* input buffer overrun, restart state machine */
        context->input_state = 0;
    3ea8:	cc 58       	subi	r28, 0x8C	; 140
    3eaa:	de 4f       	sbci	r29, 0xFE	; 254
    3eac:	19 82       	std	Y+1, r1	; 0x01
    3eae:	18 82       	st	Y, r1
    3eb0:	c4 57       	subi	r28, 0x74	; 116
    3eb2:	d1 40       	sbci	r29, 0x01	; 1
        /* reset input count */
        context->input_count = 0;
    3eb4:	11 82       	std	Z+1, r1	; 0x01
    3eb6:	10 82       	st	Z, r1
    }
    
    /* store the byte */
    context->input[context->input_count] = ch;
    3eb8:	f2 e7       	ldi	r31, 0x72	; 114
    3eba:	af 2e       	mov	r10, r31
    3ebc:	f1 e0       	ldi	r31, 0x01	; 1
    3ebe:	bf 2e       	mov	r11, r31
    3ec0:	ac 0e       	add	r10, r28
    3ec2:	bd 1e       	adc	r11, r29
    3ec4:	f5 01       	movw	r30, r10
    3ec6:	80 81       	ld	r24, Z
    3ec8:	91 81       	ldd	r25, Z+1	; 0x01
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e8 0f       	add	r30, r24
    3ece:	f9 1f       	adc	r31, r25
    3ed0:	ee 58       	subi	r30, 0x8E	; 142
    3ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed4:	f0 82       	st	Z, r15
    
    /* next buffer position */
    context->input_count++;
    3ed6:	8c 01       	movw	r16, r24
    3ed8:	0f 5f       	subi	r16, 0xFF	; 255
    3eda:	1f 4f       	sbci	r17, 0xFF	; 255
    3edc:	f5 01       	movw	r30, r10
    3ede:	11 83       	std	Z+1, r17	; 0x01
    3ee0:	00 83       	st	Z, r16
    
    /* run it through the lexical scanner */
    switch(context->input_state) {
    3ee2:	e4 e7       	ldi	r30, 0x74	; 116
    3ee4:	ce 2e       	mov	r12, r30
    3ee6:	e1 e0       	ldi	r30, 0x01	; 1
    3ee8:	de 2e       	mov	r13, r30
    3eea:	cc 0e       	add	r12, r28
    3eec:	dd 1e       	adc	r13, r29
    3eee:	f6 01       	movw	r30, r12
    3ef0:	80 81       	ld	r24, Z
    3ef2:	91 81       	ldd	r25, Z+1	; 0x01
    3ef4:	83 30       	cpi	r24, 0x03	; 3
    3ef6:	91 05       	cpc	r25, r1
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <nmeap_parse+0x7a>
    3efa:	5d c0       	rjmp	.+186    	; 0x3fb6 <nmeap_parse+0x134>
    3efc:	84 30       	cpi	r24, 0x04	; 4
    3efe:	91 05       	cpc	r25, r1
    3f00:	54 f4       	brge	.+20     	; 0x3f16 <nmeap_parse+0x94>
    3f02:	81 30       	cpi	r24, 0x01	; 1
    3f04:	91 05       	cpc	r25, r1
    3f06:	29 f1       	breq	.+74     	; 0x3f52 <nmeap_parse+0xd0>
    3f08:	82 30       	cpi	r24, 0x02	; 2
    3f0a:	91 05       	cpc	r25, r1
    3f0c:	0c f0       	brlt	.+2      	; 0x3f10 <nmeap_parse+0x8e>
    3f0e:	3e c0       	rjmp	.+124    	; 0x3f8c <nmeap_parse+0x10a>
    3f10:	89 2b       	or	r24, r25
    3f12:	69 f0       	breq	.+26     	; 0x3f2e <nmeap_parse+0xac>
    3f14:	fe c0       	rjmp	.+508    	; 0x4112 <nmeap_parse+0x290>
    3f16:	85 30       	cpi	r24, 0x05	; 5
    3f18:	91 05       	cpc	r25, r1
    3f1a:	09 f4       	brne	.+2      	; 0x3f1e <nmeap_parse+0x9c>
    3f1c:	9c c0       	rjmp	.+312    	; 0x4056 <nmeap_parse+0x1d4>
    3f1e:	85 30       	cpi	r24, 0x05	; 5
    3f20:	91 05       	cpc	r25, r1
    3f22:	0c f4       	brge	.+2      	; 0x3f26 <nmeap_parse+0xa4>
    3f24:	63 c0       	rjmp	.+198    	; 0x3fec <nmeap_parse+0x16a>
    3f26:	06 97       	sbiw	r24, 0x06	; 6
    3f28:	09 f0       	breq	.+2      	; 0x3f2c <nmeap_parse+0xaa>
    3f2a:	f3 c0       	rjmp	.+486    	; 0x4112 <nmeap_parse+0x290>
    3f2c:	9e c0       	rjmp	.+316    	; 0x406a <nmeap_parse+0x1e8>
    /* LOOKING FOR $ */
    case 0:
        if (ch == '$') {
    3f2e:	f4 e2       	ldi	r31, 0x24	; 36
    3f30:	ff 16       	cp	r15, r31
    3f32:	59 f4       	brne	.+22     	; 0x3f4a <nmeap_parse+0xc8>
            /*look for id */
            context->input_state = 1;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	f6 01       	movw	r30, r12
    3f3a:	91 83       	std	Z+1, r25	; 0x01
    3f3c:	80 83       	st	Z, r24
            context->ccks        = 0;
    3f3e:	c3 58       	subi	r28, 0x83	; 131
    3f40:	de 4f       	sbci	r29, 0xFE	; 254
    3f42:	18 82       	st	Y, r1
			context->icks        = 0;
    3f44:	fe 01       	movw	r30, r28
    3f46:	12 92       	st	-Z, r1
    3f48:	f6 c0       	rjmp	.+492    	; 0x4136 <nmeap_parse+0x2b4>
        }
        else {
            /* header error, start over */
            context->err_hdr++;
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ec 54       	subi	r30, 0x4C	; 76
    3f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f50:	ce c0       	rjmp	.+412    	; 0x40ee <nmeap_parse+0x26c>
        break;
    /* LOOKING FOR 5 CHARACTER SENTENCE ID */
    case 1:
        /* allow numbers even though it isn't usually done */
        /* a proprietary id might have a numeral */
        if (isalnum(ch)) {
    3f52:	8f 2d       	mov	r24, r15
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	0e 94 71 67 	call	0xcee2	; 0xcee2 <isalnum>
    3f5a:	89 2b       	or	r24, r25
    3f5c:	99 f0       	breq	.+38     	; 0x3f84 <nmeap_parse+0x102>
            /* store name separately */
            context->input_name[context->input_count - 2] = ch;
    3f5e:	fe 01       	movw	r30, r28
    3f60:	e0 0f       	add	r30, r16
    3f62:	f1 1f       	adc	r31, r17
    3f64:	ec 58       	subi	r30, 0x8C	; 140
    3f66:	fe 4f       	sbci	r31, 0xFE	; 254
    3f68:	f0 82       	st	Z, r15
            /* checksum */
            context->ccks ^= ch;
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e3 58       	subi	r30, 0x83	; 131
    3f6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f70:	80 81       	ld	r24, Z
    3f72:	8f 25       	eor	r24, r15
    3f74:	80 83       	st	Z, r24
            /* end of header? */
            if (context->input_count >= 6) {
    3f76:	06 30       	cpi	r16, 0x06	; 6
    3f78:	11 05       	cpc	r17, r1
    3f7a:	0c f4       	brge	.+2      	; 0x3f7e <nmeap_parse+0xfc>
    3f7c:	dc c0       	rjmp	.+440    	; 0x4136 <nmeap_parse+0x2b4>
                /* yes, get body */
                context->input_state = 2;
    3f7e:	82 e0       	ldi	r24, 0x02	; 2
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	6f c0       	rjmp	.+222    	; 0x4062 <nmeap_parse+0x1e0>
            }
        }
        else {
            /* bad character, start over */
            context->err_id++;
    3f84:	fe 01       	movw	r30, r28
    3f86:	e0 54       	subi	r30, 0x40	; 64
    3f88:	fe 4f       	sbci	r31, 0xFE	; 254
    3f8a:	b1 c0       	rjmp	.+354    	; 0x40ee <nmeap_parse+0x26c>
            context->input_count = 0;
        }
        break;
    /* LOOKING FOR CR OR CHECKSUM INDICATOR */
    case 2:
        if (ch == '*') {
    3f8c:	fa e2       	ldi	r31, 0x2A	; 42
    3f8e:	ff 16       	cp	r15, r31
    3f90:	19 f4       	brne	.+6      	; 0x3f98 <nmeap_parse+0x116>
            /* this sentence has a checksum */
            context->input_state = 3;
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	65 c0       	rjmp	.+202    	; 0x4062 <nmeap_parse+0x1e0>
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e3 58       	subi	r30, 0x83	; 131
    3f9c:	fe 4f       	sbci	r31, 0xFE	; 254
        }
        else if (ch == '\r') {
    3f9e:	8d e0       	ldi	r24, 0x0D	; 13
    3fa0:	f8 16       	cp	r15, r24
    3fa2:	29 f4       	brne	.+10     	; 0x3fae <nmeap_parse+0x12c>
            /* carriage return, no checksum, force a match */
			context->icks = 0;
    3fa4:	c4 58       	subi	r28, 0x84	; 132
    3fa6:	de 4f       	sbci	r29, 0xFE	; 254
    3fa8:	18 82       	st	Y, r1
			context->ccks = 0;
    3faa:	10 82       	st	Z, r1
    3fac:	58 c0       	rjmp	.+176    	; 0x405e <nmeap_parse+0x1dc>
            context->input_state = 6;
        }
        else {
            /* continue accumulating data */
            /* checksum */
            context->ccks ^= ch;
    3fae:	80 81       	ld	r24, Z
    3fb0:	8f 25       	eor	r24, r15
    3fb2:	80 83       	st	Z, r24
    3fb4:	c0 c0       	rjmp	.+384    	; 0x4136 <nmeap_parse+0x2b4>
        }
        break;
    /* LOOKING FOR FIRST CHECKSUM CHARACTER */
    case 3:
        /* must be upper case hex digit */
        if (isxdigit(ch) && (ch <= 'F')) {
    3fb6:	8f 2d       	mov	r24, r15
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 85 67 	call	0xcf0a	; 0xcf0a <isxdigit>
    3fbe:	89 2b       	or	r24, r25
    3fc0:	a1 f1       	breq	.+104    	; 0x402a <nmeap_parse+0x1a8>
    3fc2:	f6 e4       	ldi	r31, 0x46	; 70
    3fc4:	ff 15       	cp	r31, r15
    3fc6:	88 f1       	brcs	.+98     	; 0x402a <nmeap_parse+0x1a8>
            /* got first checksum byte */
            context->input_state = 4;
    3fc8:	84 e0       	ldi	r24, 0x04	; 4
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	f6 01       	movw	r30, r12
    3fce:	91 83       	std	Z+1, r25	; 0x01
    3fd0:	80 83       	st	Z, r24
            context->icks = HEXTOBIN(ch) << 4;
    3fd2:	f9 e3       	ldi	r31, 0x39	; 57
    3fd4:	ff 15       	cp	r31, r15
    3fd6:	10 f0       	brcs	.+4      	; 0x3fdc <nmeap_parse+0x15a>
    3fd8:	6f 2d       	mov	r22, r15
    3fda:	02 c0       	rjmp	.+4      	; 0x3fe0 <nmeap_parse+0x15e>
    3fdc:	6f 2d       	mov	r22, r15
    3fde:	67 53       	subi	r22, 0x37	; 55
    3fe0:	62 95       	swap	r22
    3fe2:	60 7f       	andi	r22, 0xF0	; 240
    3fe4:	c4 58       	subi	r28, 0x84	; 132
    3fe6:	de 4f       	sbci	r29, 0xFE	; 254
    3fe8:	68 83       	st	Y, r22
    3fea:	a5 c0       	rjmp	.+330    	; 0x4136 <nmeap_parse+0x2b4>
        }
        break;
        /* LOOKING FOR SECOND CHECKSUM CHARACTER */
    case 4:
        /* must be upper case hex digit */
        if (isxdigit(ch) && (ch <= 'F')) {
    3fec:	8f 2d       	mov	r24, r15
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 85 67 	call	0xcf0a	; 0xcf0a <isxdigit>
    3ff4:	89 2b       	or	r24, r25
    3ff6:	c9 f0       	breq	.+50     	; 0x402a <nmeap_parse+0x1a8>
    3ff8:	86 e4       	ldi	r24, 0x46	; 70
    3ffa:	8f 15       	cp	r24, r15
    3ffc:	b0 f0       	brcs	.+44     	; 0x402a <nmeap_parse+0x1a8>
            /* got second checksum byte */
            context->input_state = 5;
    3ffe:	85 e0       	ldi	r24, 0x05	; 5
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	f6 01       	movw	r30, r12
    4004:	91 83       	std	Z+1, r25	; 0x01
    4006:	80 83       	st	Z, r24
            context->icks += HEXTOBIN(ch);
    4008:	c4 58       	subi	r28, 0x84	; 132
    400a:	de 4f       	sbci	r29, 0xFE	; 254
    400c:	88 81       	ld	r24, Y
    400e:	cc 57       	subi	r28, 0x7C	; 124
    4010:	d1 40       	sbci	r29, 0x01	; 1
    4012:	f9 e3       	ldi	r31, 0x39	; 57
    4014:	ff 15       	cp	r31, r15
    4016:	18 f0       	brcs	.+6      	; 0x401e <nmeap_parse+0x19c>
    4018:	6f 2d       	mov	r22, r15
    401a:	60 53       	subi	r22, 0x30	; 48
    401c:	02 c0       	rjmp	.+4      	; 0x4022 <nmeap_parse+0x1a0>
    401e:	6f 2d       	mov	r22, r15
    4020:	67 53       	subi	r22, 0x37	; 55
    4022:	c4 58       	subi	r28, 0x84	; 132
    4024:	de 4f       	sbci	r29, 0xFE	; 254
    4026:	68 0f       	add	r22, r24
    4028:	df cf       	rjmp	.-66     	; 0x3fe8 <nmeap_parse+0x166>
        }
        else {
            /* input error, restart */
            context->err_cks++;
    402a:	fe 01       	movw	r30, r28
    402c:	ec 53       	subi	r30, 0x3C	; 60
    402e:	fe 4f       	sbci	r31, 0xFE	; 254
    4030:	80 81       	ld	r24, Z
    4032:	91 81       	ldd	r25, Z+1	; 0x01
    4034:	a2 81       	ldd	r26, Z+2	; 0x02
    4036:	b3 81       	ldd	r27, Z+3	; 0x03
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	a1 1d       	adc	r26, r1
    403c:	b1 1d       	adc	r27, r1
    403e:	80 83       	st	Z, r24
    4040:	91 83       	std	Z+1, r25	; 0x01
    4042:	a2 83       	std	Z+2, r26	; 0x02
    4044:	b3 83       	std	Z+3, r27	; 0x03
            context->input_state = 0;
    4046:	cc 58       	subi	r28, 0x8C	; 140
    4048:	de 4f       	sbci	r29, 0xFE	; 254
    404a:	19 82       	std	Y+1, r1	; 0x01
    404c:	18 82       	st	Y, r1
            context->input_count = 0;
    404e:	fe 01       	movw	r30, r28
    4050:	12 92       	st	-Z, r1
    4052:	12 92       	st	-Z, r1
    4054:	70 c0       	rjmp	.+224    	; 0x4136 <nmeap_parse+0x2b4>
        }
        break;
    /* LOOKING FOR CR */
    case 5:
        if (ch == '\r') {
    4056:	8d e0       	ldi	r24, 0x0D	; 13
    4058:	f8 16       	cp	r15, r24
    405a:	09 f0       	breq	.+2      	; 0x405e <nmeap_parse+0x1dc>
    405c:	45 c0       	rjmp	.+138    	; 0x40e8 <nmeap_parse+0x266>
            /* carriage return */
            context->input_state = 6;
    405e:	86 e0       	ldi	r24, 0x06	; 6
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	f6 01       	movw	r30, r12
    4064:	91 83       	std	Z+1, r25	; 0x01
    4066:	80 83       	st	Z, r24
    4068:	66 c0       	rjmp	.+204    	; 0x4136 <nmeap_parse+0x2b4>
            context->input_count = 0;
        }
        break;
    /* LOOKING FOR LINE FEED */
    case 6:
        if (ch == '\n') {
    406a:	fa e0       	ldi	r31, 0x0A	; 10
    406c:	ff 16       	cp	r15, r31
    406e:	e1 f5       	brne	.+120    	; 0x40e8 <nmeap_parse+0x266>
            /* linefeed, line complete */
            
            /* delimit buffer */
            context->input[context->input_count] = 0;
    4070:	0c 0f       	add	r16, r28
    4072:	1d 1f       	adc	r17, r29
    4074:	0e 58       	subi	r16, 0x8E	; 142
    4076:	1f 4f       	sbci	r17, 0xFF	; 255
    4078:	f8 01       	movw	r30, r16
    407a:	10 82       	st	Z, r1
            
            /* if the checksums match, process the sentence */
			if (context->ccks == context->icks) {
    407c:	fe 01       	movw	r30, r28
    407e:	e3 58       	subi	r30, 0x83	; 131
    4080:	fe 4f       	sbci	r31, 0xFE	; 254
    4082:	c4 58       	subi	r28, 0x84	; 132
    4084:	de 4f       	sbci	r29, 0xFE	; 254
    4086:	90 81       	ld	r25, Z
    4088:	88 81       	ld	r24, Y
    408a:	cc 57       	subi	r28, 0x7C	; 124
    408c:	d1 40       	sbci	r29, 0x01	; 1
    408e:	98 17       	cp	r25, r24
    4090:	99 f4       	brne	.+38     	; 0x40b8 <nmeap_parse+0x236>
				/* process */
				status = nmeap_process(context);
    4092:	ce 01       	movw	r24, r28
    4094:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <nmeap_process>
    4098:	9c 01       	movw	r18, r24
				
				/* count good messages */
				context->msgs++;
    409a:	fe 01       	movw	r30, r28
    409c:	e0 55       	subi	r30, 0x50	; 80
    409e:	fe 4f       	sbci	r31, 0xFE	; 254
    40a0:	80 81       	ld	r24, Z
    40a2:	91 81       	ldd	r25, Z+1	; 0x01
    40a4:	a2 81       	ldd	r26, Z+2	; 0x02
    40a6:	b3 81       	ldd	r27, Z+3	; 0x03
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	a1 1d       	adc	r26, r1
    40ac:	b1 1d       	adc	r27, r1
    40ae:	80 83       	st	Z, r24
    40b0:	91 83       	std	Z+1, r25	; 0x01
    40b2:	a2 83       	std	Z+2, r26	; 0x02
    40b4:	b3 83       	std	Z+3, r27	; 0x03
    40b6:	10 c0       	rjmp	.+32     	; 0x40d8 <nmeap_parse+0x256>
			}
			else {
				/* count checksum errors */
				context->err_cks++;
    40b8:	fe 01       	movw	r30, r28
    40ba:	ec 53       	subi	r30, 0x3C	; 60
    40bc:	fe 4f       	sbci	r31, 0xFE	; 254
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
    40c2:	a2 81       	ldd	r26, Z+2	; 0x02
    40c4:	b3 81       	ldd	r27, Z+3	; 0x03
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	a1 1d       	adc	r26, r1
    40ca:	b1 1d       	adc	r27, r1
    40cc:	80 83       	st	Z, r24
    40ce:	91 83       	std	Z+1, r25	; 0x01
    40d0:	a2 83       	std	Z+2, r26	; 0x02
    40d2:	b3 83       	std	Z+3, r27	; 0x03
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	30 e0       	ldi	r19, 0x00	; 0
			}
            
            /* restart next time */
            context->input_state = 0;
    40d8:	cc 58       	subi	r28, 0x8C	; 140
    40da:	de 4f       	sbci	r29, 0xFE	; 254
    40dc:	19 82       	std	Y+1, r1	; 0x01
    40de:	18 82       	st	Y, r1
            context->input_count = 0;
    40e0:	fe 01       	movw	r30, r28
    40e2:	12 92       	st	-Z, r1
    40e4:	12 92       	st	-Z, r1
    40e6:	29 c0       	rjmp	.+82     	; 0x413a <nmeap_parse+0x2b8>
        }
        else {
            /* input error, restart */
            context->err_crl++;
    40e8:	fe 01       	movw	r30, r28
    40ea:	e8 53       	subi	r30, 0x38	; 56
    40ec:	fe 4f       	sbci	r31, 0xFE	; 254
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	a2 81       	ldd	r26, Z+2	; 0x02
    40f4:	b3 81       	ldd	r27, Z+3	; 0x03
    40f6:	01 96       	adiw	r24, 0x01	; 1
    40f8:	a1 1d       	adc	r26, r1
    40fa:	b1 1d       	adc	r27, r1
    40fc:	80 83       	st	Z, r24
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	a2 83       	std	Z+2, r26	; 0x02
    4102:	b3 83       	std	Z+3, r27	; 0x03
            context->input_state = 0;
    4104:	f6 01       	movw	r30, r12
    4106:	11 82       	std	Z+1, r1	; 0x01
    4108:	10 82       	st	Z, r1
            context->input_count = 0;
    410a:	f5 01       	movw	r30, r10
    410c:	11 82       	std	Z+1, r1	; 0x01
    410e:	10 82       	st	Z, r1
    4110:	12 c0       	rjmp	.+36     	; 0x4136 <nmeap_parse+0x2b4>
        }
        break;
    default:
        context->err_unk++;
    4112:	fe 01       	movw	r30, r28
    4114:	e4 54       	subi	r30, 0x44	; 68
    4116:	fe 4f       	sbci	r31, 0xFE	; 254
    4118:	80 81       	ld	r24, Z
    411a:	91 81       	ldd	r25, Z+1	; 0x01
    411c:	a2 81       	ldd	r26, Z+2	; 0x02
    411e:	b3 81       	ldd	r27, Z+3	; 0x03
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	a1 1d       	adc	r26, r1
    4124:	b1 1d       	adc	r27, r1
    4126:	80 83       	st	Z, r24
    4128:	91 83       	std	Z+1, r25	; 0x01
    412a:	a2 83       	std	Z+2, r26	; 0x02
    412c:	b3 83       	std	Z+3, r27	; 0x03
        context->input_state = 0;
    412e:	cc 58       	subi	r28, 0x8C	; 140
    4130:	de 4f       	sbci	r29, 0xFE	; 254
    4132:	19 82       	std	Y+1, r1	; 0x01
    4134:	18 82       	st	Y, r1
    4136:	20 e0       	ldi	r18, 0x00	; 0
    4138:	30 e0       	ldi	r19, 0x00	; 0
        break;
    }
            
	return status;
}
    413a:	c9 01       	movw	r24, r18
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	ff 90       	pop	r15
    4146:	df 90       	pop	r13
    4148:	cf 90       	pop	r12
    414a:	bf 90       	pop	r11
    414c:	af 90       	pop	r10
    414e:	08 95       	ret

00004150 <nmeap_parseBuffer>:

/** 
 * parse a buffer of nmea data
 */
int nmeap_parseBuffer(nmeap_context_t *context,const char *buffer,int *length)
{
    4150:	8f 92       	push	r8
    4152:	9f 92       	push	r9
    4154:	af 92       	push	r10
    4156:	bf 92       	push	r11
    4158:	cf 92       	push	r12
    415a:	df 92       	push	r13
    415c:	ef 92       	push	r14
    415e:	ff 92       	push	r15
    4160:	0f 93       	push	r16
    4162:	1f 93       	push	r17
    4164:	cf 93       	push	r28
    4166:	df 93       	push	r29
    4168:	4c 01       	movw	r8, r24
    416a:	5b 01       	movw	r10, r22
    416c:	6a 01       	movw	r12, r20
    int  i;
    int  status;
    int  rem;
    int  tlen;
    
    tlen   = *length;
    416e:	fa 01       	movw	r30, r20
    4170:	e0 80       	ld	r14, Z
    4172:	f1 80       	ldd	r15, Z+1	; 0x01
    4174:	87 01       	movw	r16, r14
    4176:	c0 e0       	ldi	r28, 0x00	; 0
    4178:	d0 e0       	ldi	r29, 0x00	; 0
    417a:	0d c0       	rjmp	.+26     	; 0x4196 <nmeap_parseBuffer+0x46>
    rem    = *length;
    status = 0;
    /* for each byte in the buffer */
    for(i=0;i<tlen;i++) {
        /* decrement remaining byte count */
        rem--;
    417c:	01 50       	subi	r16, 0x01	; 1
    417e:	10 40       	sbci	r17, 0x00	; 0
        /* parse the byte */
        status = nmeap_parse(context,buffer[i]);
    4180:	f5 01       	movw	r30, r10
    4182:	ec 0f       	add	r30, r28
    4184:	fd 1f       	adc	r31, r29
    4186:	c4 01       	movw	r24, r8
    4188:	60 81       	ld	r22, Z
    418a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <nmeap_parse>
    418e:	9c 01       	movw	r18, r24
        if (status != 0) {
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	31 f4       	brne	.+12     	; 0x41a0 <nmeap_parseBuffer+0x50>
    
    tlen   = *length;
    rem    = *length;
    status = 0;
    /* for each byte in the buffer */
    for(i=0;i<tlen;i++) {
    4194:	21 96       	adiw	r28, 0x01	; 1
    4196:	ce 15       	cp	r28, r14
    4198:	df 05       	cpc	r29, r15
    419a:	84 f3       	brlt	.-32     	; 0x417c <nmeap_parseBuffer+0x2c>
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
            break;
        }
    }
	
    /* return remaining byte count */
    *length = rem;
    41a0:	f6 01       	movw	r30, r12
    41a2:	11 83       	std	Z+1, r17	; 0x01
    41a4:	00 83       	st	Z, r16
	
    return status;
}
    41a6:	c9 01       	movw	r24, r18
    41a8:	df 91       	pop	r29
    41aa:	cf 91       	pop	r28
    41ac:	1f 91       	pop	r17
    41ae:	0f 91       	pop	r16
    41b0:	ff 90       	pop	r15
    41b2:	ef 90       	pop	r14
    41b4:	df 90       	pop	r13
    41b6:	cf 90       	pop	r12
    41b8:	bf 90       	pop	r11
    41ba:	af 90       	pop	r10
    41bc:	9f 90       	pop	r9
    41be:	8f 90       	pop	r8
    41c0:	08 95       	ret

000041c2 <nmeap_addParser>:
					 const char             *sentence_name,
					 nmeap_sentence_parser_t sentence_parser,
					 nmeap_callout_t         sentence_callout,
                     void                  *sentence_data
					 )
{
    41c2:	af 92       	push	r10
    41c4:	bf 92       	push	r11
    41c6:	cf 92       	push	r12
    41c8:	df 92       	push	r13
    41ca:	ef 92       	push	r14
    41cc:	ff 92       	push	r15
    41ce:	0f 93       	push	r16
    41d0:	1f 93       	push	r17
    41d2:	cf 93       	push	r28
    41d4:	df 93       	push	r29
    41d6:	7c 01       	movw	r14, r24
    41d8:	6a 01       	movw	r12, r20
    41da:	59 01       	movw	r10, r18
    nmeap_sentence_t *s = 0;
    
    /* runtime error */
    assert(context != 0);
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	11 f4       	brne	.+4      	; 0x41e4 <nmeap_addParser+0x22>
    41e0:	0e 94 72 66 	call	0xcce4	; 0xcce4 <abort>
    
    /* sentence capacity overflow */
    if (context->sentence_count >= NMEAP_MAX_SENTENCES) {
    41e4:	fc 01       	movw	r30, r24
    41e6:	e0 59       	subi	r30, 0x90	; 144
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	c0 81       	ld	r28, Z
    41ec:	d1 81       	ldd	r29, Z+1	; 0x01
    41ee:	c8 30       	cpi	r28, 0x08	; 8
    41f0:	d1 05       	cpc	r29, r1
    41f2:	1c f0       	brlt	.+6      	; 0x41fa <nmeap_addParser+0x38>
    41f4:	2f ef       	ldi	r18, 0xFF	; 255
    41f6:	3f ef       	ldi	r19, 0xFF	; 255
    41f8:	57 c0       	rjmp	.+174    	; 0x42a8 <nmeap_addParser+0xe6>
    
    /* point at next empty sentence buffer */
    s = &context->sentence[context->sentence_count];
    
    /* advance sentence data count */
    context->sentence_count++;
    41fa:	21 96       	adiw	r28, 0x01	; 1
    41fc:	d1 83       	std	Z+1, r29	; 0x01
    41fe:	c0 83       	st	Z, r28
    4200:	21 97       	sbiw	r28, 0x01	; 1
    
    /* clear the sentence data */
    memset(s,0,sizeof(*s));
    4202:	ce 01       	movw	r24, r28
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	9c 01       	movw	r18, r24
    420a:	a3 e0       	ldi	r26, 0x03	; 3
    420c:	22 0f       	add	r18, r18
    420e:	33 1f       	adc	r19, r19
    4210:	aa 95       	dec	r26
    4212:	e1 f7       	brne	.-8      	; 0x420c <nmeap_addParser+0x4a>
    4214:	28 1b       	sub	r18, r24
    4216:	39 0b       	sbc	r19, r25
    4218:	2e 0d       	add	r18, r14
    421a:	3f 1d       	adc	r19, r15
    421c:	8e e0       	ldi	r24, 0x0E	; 14
    421e:	d9 01       	movw	r26, r18
    4220:	1d 92       	st	X+, r1
    4222:	8a 95       	dec	r24
    4224:	e9 f7       	brne	.-6      	; 0x4220 <nmeap_addParser+0x5e>
    
    /* name */
    strncpy(s->name,sentence_name,NMEAP_MAX_SENTENCE_NAME_LENGTH);
    4226:	ce 01       	movw	r24, r28
    4228:	88 0f       	add	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	9c 01       	movw	r18, r24
    422e:	e3 e0       	ldi	r30, 0x03	; 3
    4230:	22 0f       	add	r18, r18
    4232:	33 1f       	adc	r19, r19
    4234:	ea 95       	dec	r30
    4236:	e1 f7       	brne	.-8      	; 0x4230 <nmeap_addParser+0x6e>
    4238:	28 1b       	sub	r18, r24
    423a:	39 0b       	sbc	r19, r25
    423c:	c7 01       	movw	r24, r14
    423e:	82 0f       	add	r24, r18
    4240:	93 1f       	adc	r25, r19
    4242:	45 e0       	ldi	r20, 0x05	; 5
    4244:	50 e0       	ldi	r21, 0x00	; 0
    4246:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <strncpy>
    
    /* parser */
    s->parser = sentence_parser;
    424a:	ce 01       	movw	r24, r28
    424c:	88 0f       	add	r24, r24
    424e:	99 1f       	adc	r25, r25
    4250:	fc 01       	movw	r30, r24
    4252:	43 e0       	ldi	r20, 0x03	; 3
    4254:	ee 0f       	add	r30, r30
    4256:	ff 1f       	adc	r31, r31
    4258:	4a 95       	dec	r20
    425a:	e1 f7       	brne	.-8      	; 0x4254 <nmeap_addParser+0x92>
    425c:	e8 1b       	sub	r30, r24
    425e:	f9 0b       	sbc	r31, r25
    4260:	ee 0d       	add	r30, r14
    4262:	ff 1d       	adc	r31, r15
    4264:	d1 86       	std	Z+9, r13	; 0x09
    4266:	c0 86       	std	Z+8, r12	; 0x08
    
    /* callout */
    s->callout = sentence_callout;
    4268:	ce 01       	movw	r24, r28
    426a:	88 0f       	add	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	fc 01       	movw	r30, r24
    4270:	23 e0       	ldi	r18, 0x03	; 3
    4272:	ee 0f       	add	r30, r30
    4274:	ff 1f       	adc	r31, r31
    4276:	2a 95       	dec	r18
    4278:	e1 f7       	brne	.-8      	; 0x4272 <nmeap_addParser+0xb0>
    427a:	e8 1b       	sub	r30, r24
    427c:	f9 0b       	sbc	r31, r25
    427e:	ee 0d       	add	r30, r14
    4280:	ff 1d       	adc	r31, r15
    4282:	b3 86       	std	Z+11, r11	; 0x0b
    4284:	a2 86       	std	Z+10, r10	; 0x0a
    
    /* data */
    s->data    = sentence_data;
    4286:	ce 01       	movw	r24, r28
    4288:	88 0f       	add	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	fc 01       	movw	r30, r24
    428e:	a3 e0       	ldi	r26, 0x03	; 3
    4290:	ee 0f       	add	r30, r30
    4292:	ff 1f       	adc	r31, r31
    4294:	aa 95       	dec	r26
    4296:	e1 f7       	brne	.-8      	; 0x4290 <nmeap_addParser+0xce>
    4298:	e8 1b       	sub	r30, r24
    429a:	f9 0b       	sbc	r31, r25
    429c:	ee 0d       	add	r30, r14
    429e:	ff 1d       	adc	r31, r15
    42a0:	15 87       	std	Z+13, r17	; 0x0d
    42a2:	04 87       	std	Z+12, r16	; 0x0c
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0

    return 0;
}
    42a8:	c9 01       	movw	r24, r18
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	1f 91       	pop	r17
    42b0:	0f 91       	pop	r16
    42b2:	ff 90       	pop	r15
    42b4:	ef 90       	pop	r14
    42b6:	df 90       	pop	r13
    42b8:	cf 90       	pop	r12
    42ba:	bf 90       	pop	r11
    42bc:	af 90       	pop	r10
    42be:	08 95       	ret

000042c0 <nmeap_init>:

/**
 * initialize an NMEA parser
 */
int nmeap_init(nmeap_context_t *context,void *user_data)
{
    42c0:	fc 01       	movw	r30, r24
    assert(context != 0);
    42c2:	00 97       	sbiw	r24, 0x00	; 0
    42c4:	11 f4       	brne	.+4      	; 0x42ca <nmeap_init+0xa>
    42c6:	0e 94 72 66 	call	0xcce4	; 0xcce4 <abort>

    memset(context,0,sizeof(*context));
    42ca:	8e ec       	ldi	r24, 0xCE	; 206
    42cc:	92 e0       	ldi	r25, 0x02	; 2
    42ce:	df 01       	movw	r26, r30
    42d0:	9c 01       	movw	r18, r24
    42d2:	1d 92       	st	X+, r1
    42d4:	21 50       	subi	r18, 0x01	; 1
    42d6:	30 40       	sbci	r19, 0x00	; 0
    42d8:	e1 f7       	brne	.-8      	; 0x42d2 <nmeap_init+0x12>

    context->user_data = user_data;
    42da:	e4 53       	subi	r30, 0x34	; 52
    42dc:	fd 4f       	sbci	r31, 0xFD	; 253
    42de:	71 83       	std	Z+1, r23	; 0x01
    42e0:	60 83       	st	Z, r22

    return 0;    
}
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	08 95       	ret

000042e8 <i2c_init_HW>:
*************************************************************************/
void i2c_init_HW(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    42e8:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    42ec:	88 e4       	ldi	r24, 0x48	; 72
    42ee:	80 93 b8 00 	sts	0x00B8, r24

}/* i2c_init_HW */
    42f2:	08 95       	ret

000042f4 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
    42f4:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    42f6:	84 ea       	ldi	r24, 0xA4	; 164
    42f8:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    42fc:	80 91 bc 00 	lds	r24, 0x00BC
    4300:	87 ff       	sbrs	r24, 7
    4302:	fc cf       	rjmp	.-8      	; 0x42fc <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    4304:	80 91 b9 00 	lds	r24, 0x00B9
    4308:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    430a:	88 30       	cpi	r24, 0x08	; 8
    430c:	21 f0       	breq	.+8      	; 0x4316 <i2c_start+0x22>
    430e:	80 31       	cpi	r24, 0x10	; 16
    4310:	11 f0       	breq	.+4      	; 0x4316 <i2c_start+0x22>
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	08 95       	ret

	// send device address
	TWDR = address;
    4316:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    431a:	84 e8       	ldi	r24, 0x84	; 132
    431c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    4320:	80 91 bc 00 	lds	r24, 0x00BC
    4324:	87 ff       	sbrs	r24, 7
    4326:	fc cf       	rjmp	.-8      	; 0x4320 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    4328:	90 91 b9 00 	lds	r25, 0x00B9
    432c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    432e:	98 31       	cpi	r25, 0x18	; 24
    4330:	11 f4       	brne	.+4      	; 0x4336 <i2c_start+0x42>
    4332:	80 e0       	ldi	r24, 0x00	; 0
    4334:	08 95       	ret
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	90 34       	cpi	r25, 0x40	; 64
    433a:	09 f0       	breq	.+2      	; 0x433e <i2c_start+0x4a>
    433c:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    433e:	08 95       	ret

00004340 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
    4340:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4342:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    4344:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4346:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4348:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    434c:	80 91 bc 00 	lds	r24, 0x00BC
    4350:	87 ff       	sbrs	r24, 7
    4352:	fc cf       	rjmp	.-8      	; 0x434c <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    4354:	80 91 b9 00 	lds	r24, 0x00B9
    4358:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    435a:	88 30       	cpi	r24, 0x08	; 8
    435c:	11 f0       	breq	.+4      	; 0x4362 <i2c_start_wait+0x22>
    435e:	80 31       	cpi	r24, 0x10	; 16
    4360:	99 f7       	brne	.-26     	; 0x4348 <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
    4362:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
    4366:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    436a:	80 91 bc 00 	lds	r24, 0x00BC
    436e:	87 ff       	sbrs	r24, 7
    4370:	fc cf       	rjmp	.-8      	; 0x436a <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    4372:	80 91 b9 00 	lds	r24, 0x00B9
    4376:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    4378:	80 32       	cpi	r24, 0x20	; 32
    437a:	11 f0       	breq	.+4      	; 0x4380 <i2c_start_wait+0x40>
    437c:	88 35       	cpi	r24, 0x58	; 88
    437e:	39 f4       	brne	.+14     	; 0x438e <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4380:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    4384:	80 91 bc 00 	lds	r24, 0x00BC
    4388:	84 fd       	sbrc	r24, 4
    438a:	fc cf       	rjmp	.-8      	; 0x4384 <i2c_start_wait+0x44>
    438c:	dd cf       	rjmp	.-70     	; 0x4348 <i2c_start_wait+0x8>
    438e:	08 95       	ret

00004390 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    4390:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <i2c_start>

}/* i2c_rep_start */
    4394:	08 95       	ret

00004396 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4396:	84 e9       	ldi	r24, 0x94	; 148
    4398:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    439c:	80 91 bc 00 	lds	r24, 0x00BC
    43a0:	84 fd       	sbrc	r24, 4
    43a2:	fc cf       	rjmp	.-8      	; 0x439c <i2c_stop+0x6>

}/* i2c_stop */
    43a4:	08 95       	ret

000043a6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    43a6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    43aa:	84 e8       	ldi	r24, 0x84	; 132
    43ac:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    43b0:	80 91 bc 00 	lds	r24, 0x00BC
    43b4:	87 ff       	sbrs	r24, 7
    43b6:	fc cf       	rjmp	.-8      	; 0x43b0 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    43b8:	80 91 b9 00 	lds	r24, 0x00B9
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	88 7f       	andi	r24, 0xF8	; 248
    43c0:	88 32       	cpi	r24, 0x28	; 40
    43c2:	09 f0       	breq	.+2      	; 0x43c6 <i2c_write+0x20>
    43c4:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    43c6:	89 2f       	mov	r24, r25
    43c8:	08 95       	ret

000043ca <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    43ca:	84 ec       	ldi	r24, 0xC4	; 196
    43cc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    43d0:	80 91 bc 00 	lds	r24, 0x00BC
    43d4:	87 ff       	sbrs	r24, 7
    43d6:	fc cf       	rjmp	.-8      	; 0x43d0 <i2c_readAck+0x6>

    return TWDR;
    43d8:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    43dc:	08 95       	ret

000043de <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    43de:	84 e8       	ldi	r24, 0x84	; 132
    43e0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    43e4:	80 91 bc 00 	lds	r24, 0x00BC
    43e8:	87 ff       	sbrs	r24, 7
    43ea:	fc cf       	rjmp	.-8      	; 0x43e4 <i2c_readNak+0x6>
	
    return TWDR;
    43ec:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    43f0:	08 95       	ret

000043f2 <rad2deg>:
};

///////////////////////////////////////////////

double rad2deg(double radians)
{
    43f2:	20 ee       	ldi	r18, 0xE0	; 224
    43f4:	3e e2       	ldi	r19, 0x2E	; 46
    43f6:	45 e6       	ldi	r20, 0x65	; 101
    43f8:	52 e4       	ldi	r21, 0x42	; 66
    43fa:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    return (180.0/PI)*radians;
}
    43fe:	08 95       	ret

00004400 <deg2rad>:

double deg2rad(double degrees)
{
    4400:	25 e3       	ldi	r18, 0x35	; 53
    4402:	3a ef       	ldi	r19, 0xFA	; 250
    4404:	4e e8       	ldi	r20, 0x8E	; 142
    4406:	5c e3       	ldi	r21, 0x3C	; 60
    4408:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    return (PI/180.0)*degrees;
}
    440c:	08 95       	ret

0000440e <limit_minutes>:

    return limited;
}

double limit_minutes(double minutes)
{
    440e:	ef 92       	push	r14
    4410:	ff 92       	push	r15
    4412:	0f 93       	push	r16
    4414:	1f 93       	push	r17
    4416:	7b 01       	movw	r14, r22
    4418:	8c 01       	movw	r16, r24
    double limited=minutes;

    if      (limited < -20.0) limited += 1440.0;
    441a:	20 e0       	ldi	r18, 0x00	; 0
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	40 ea       	ldi	r20, 0xA0	; 160
    4420:	51 ec       	ldi	r21, 0xC1	; 193
    4422:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    4426:	88 23       	and	r24, r24
    4428:	4c f4       	brge	.+18     	; 0x443c <limit_minutes+0x2e>
    442a:	c8 01       	movw	r24, r16
    442c:	b7 01       	movw	r22, r14
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	44 eb       	ldi	r20, 0xB4	; 180
    4434:	54 e4       	ldi	r21, 0x44	; 68
    4436:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    443a:	17 c0       	rjmp	.+46     	; 0x446a <limit_minutes+0x5c>
    else if (limited >  20.0) limited -= 1440.0;
    443c:	c8 01       	movw	r24, r16
    443e:	b7 01       	movw	r22, r14
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 ea       	ldi	r20, 0xA0	; 160
    4446:	51 e4       	ldi	r21, 0x41	; 65
    4448:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    444c:	18 16       	cp	r1, r24
    444e:	2c f0       	brlt	.+10     	; 0x445a <limit_minutes+0x4c>
    4450:	ee 2d       	mov	r30, r14
    4452:	7f 2d       	mov	r23, r15
    4454:	80 2f       	mov	r24, r16
    4456:	61 2f       	mov	r22, r17
    4458:	0a c0       	rjmp	.+20     	; 0x446e <limit_minutes+0x60>
    445a:	c8 01       	movw	r24, r16
    445c:	b7 01       	movw	r22, r14
    445e:	20 e0       	ldi	r18, 0x00	; 0
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	44 eb       	ldi	r20, 0xB4	; 180
    4464:	54 e4       	ldi	r21, 0x44	; 68
    4466:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    446a:	e6 2f       	mov	r30, r22
    446c:	69 2f       	mov	r22, r25

    return limited;
}
    446e:	2e 2f       	mov	r18, r30
    4470:	37 2f       	mov	r19, r23
    4472:	48 2f       	mov	r20, r24
    4474:	56 2f       	mov	r21, r22
    4476:	b9 01       	movw	r22, r18
    4478:	ca 01       	movw	r24, r20
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	ff 90       	pop	r15
    4480:	ef 90       	pop	r14
    4482:	08 95       	ret

00004484 <third_order_polynomial>:
{
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    4484:	2f 92       	push	r2
    4486:	3f 92       	push	r3
    4488:	4f 92       	push	r4
    448a:	5f 92       	push	r5
    448c:	6f 92       	push	r6
    448e:	7f 92       	push	r7
    4490:	8f 92       	push	r8
    4492:	9f 92       	push	r9
    4494:	af 92       	push	r10
    4496:	bf 92       	push	r11
    4498:	cf 92       	push	r12
    449a:	df 92       	push	r13
    449c:	ef 92       	push	r14
    449e:	ff 92       	push	r15
    44a0:	0f 93       	push	r16
    44a2:	1f 93       	push	r17
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    44ac:	19 01       	movw	r2, r18
    44ae:	2a 01       	movw	r4, r20
    44b0:	6d 88       	ldd	r6, Y+21	; 0x15
    44b2:	7e 88       	ldd	r7, Y+22	; 0x16
    44b4:	8f 88       	ldd	r8, Y+23	; 0x17
    44b6:	98 8c       	ldd	r9, Y+24	; 0x18
    44b8:	a4 01       	movw	r20, r8
    44ba:	93 01       	movw	r18, r6
    44bc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    44c0:	a2 01       	movw	r20, r4
    44c2:	91 01       	movw	r18, r2
    44c4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    44c8:	a4 01       	movw	r20, r8
    44ca:	93 01       	movw	r18, r6
    44cc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    44d0:	a8 01       	movw	r20, r16
    44d2:	97 01       	movw	r18, r14
    44d4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    44d8:	a4 01       	movw	r20, r8
    44da:	93 01       	movw	r18, r6
    44dc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    44e0:	a6 01       	movw	r20, r12
    44e2:	95 01       	movw	r18, r10
    44e4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return ((a*x + b)*x + c)*x + d;
}
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	1f 91       	pop	r17
    44ee:	0f 91       	pop	r16
    44f0:	ff 90       	pop	r15
    44f2:	ef 90       	pop	r14
    44f4:	df 90       	pop	r13
    44f6:	cf 90       	pop	r12
    44f8:	bf 90       	pop	r11
    44fa:	af 90       	pop	r10
    44fc:	9f 90       	pop	r9
    44fe:	8f 90       	pop	r8
    4500:	7f 90       	pop	r7
    4502:	6f 90       	pop	r6
    4504:	5f 90       	pop	r5
    4506:	4f 90       	pop	r4
    4508:	3f 90       	pop	r3
    450a:	2f 90       	pop	r2
    450c:	08 95       	ret

0000450e <validate_inputs>:

///////////////////////////////////////////////////////////////////////////////////////////////
int validate_inputs(spa_data *spa)
{
    450e:	8f 92       	push	r8
    4510:	9f 92       	push	r9
    4512:	af 92       	push	r10
    4514:	bf 92       	push	r11
    4516:	cf 92       	push	r12
    4518:	df 92       	push	r13
    451a:	ef 92       	push	r14
    451c:	ff 92       	push	r15
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	ec 01       	movw	r28, r24
    if ((spa->year        < -2000) || (spa->year        > 6000)) return 1;
    4528:	88 81       	ld	r24, Y
    452a:	99 81       	ldd	r25, Y+1	; 0x01
    452c:	80 53       	subi	r24, 0x30	; 48
    452e:	98 4f       	sbci	r25, 0xF8	; 248
    4530:	81 54       	subi	r24, 0x41	; 65
    4532:	9f 41       	sbci	r25, 0x1F	; 31
    4534:	18 f0       	brcs	.+6      	; 0x453c <validate_inputs+0x2e>
    4536:	21 e0       	ldi	r18, 0x01	; 1
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	fa c0       	rjmp	.+500    	; 0x4730 <validate_inputs+0x222>
    if ((spa->month       < 1    ) || (spa->month       > 12  )) return 2;
    453c:	8a 81       	ldd	r24, Y+2	; 0x02
    453e:	9b 81       	ldd	r25, Y+3	; 0x03
    4540:	01 97       	sbiw	r24, 0x01	; 1
    4542:	0c 97       	sbiw	r24, 0x0c	; 12
    4544:	18 f0       	brcs	.+6      	; 0x454c <validate_inputs+0x3e>
    4546:	22 e0       	ldi	r18, 0x02	; 2
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	f2 c0       	rjmp	.+484    	; 0x4730 <validate_inputs+0x222>
    if ((spa->day         < 1    ) || (spa->day         > 31  )) return 3;
    454c:	8c 81       	ldd	r24, Y+4	; 0x04
    454e:	9d 81       	ldd	r25, Y+5	; 0x05
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	4f 97       	sbiw	r24, 0x1f	; 31
    4554:	18 f0       	brcs	.+6      	; 0x455c <validate_inputs+0x4e>
    4556:	23 e0       	ldi	r18, 0x03	; 3
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	ea c0       	rjmp	.+468    	; 0x4730 <validate_inputs+0x222>
    if ((spa->hour        < 0    ) || (spa->hour        > 24  )) return 4;
    455c:	8e 80       	ldd	r8, Y+6	; 0x06
    455e:	9f 80       	ldd	r9, Y+7	; 0x07
    4560:	89 e1       	ldi	r24, 0x19	; 25
    4562:	88 16       	cp	r8, r24
    4564:	91 04       	cpc	r9, r1
    4566:	18 f0       	brcs	.+6      	; 0x456e <validate_inputs+0x60>
    4568:	24 e0       	ldi	r18, 0x04	; 4
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	e1 c0       	rjmp	.+450    	; 0x4730 <validate_inputs+0x222>
    if ((spa->minute      < 0    ) || (spa->minute      > 59  )) return 5;
    456e:	a8 84       	ldd	r10, Y+8	; 0x08
    4570:	b9 84       	ldd	r11, Y+9	; 0x09
    4572:	2c e3       	ldi	r18, 0x3C	; 60
    4574:	a2 16       	cp	r10, r18
    4576:	b1 04       	cpc	r11, r1
    4578:	08 f0       	brcs	.+2      	; 0x457c <validate_inputs+0x6e>
    457a:	cc c0       	rjmp	.+408    	; 0x4714 <validate_inputs+0x206>
    if ((spa->second      < 0    ) || (spa->second      > 59  )) return 6;
    457c:	ca 84       	ldd	r12, Y+10	; 0x0a
    457e:	db 84       	ldd	r13, Y+11	; 0x0b
    4580:	8c e3       	ldi	r24, 0x3C	; 60
    4582:	c8 16       	cp	r12, r24
    4584:	d1 04       	cpc	r13, r1
    4586:	08 f0       	brcs	.+2      	; 0x458a <validate_inputs+0x7c>
    4588:	c8 c0       	rjmp	.+400    	; 0x471a <validate_inputs+0x20c>
    if ((spa->pressure    < 0    ) || (spa->pressure    > 5000)) return 12;
    458a:	e8 a0       	ldd	r14, Y+32	; 0x20
    458c:	f9 a0       	ldd	r15, Y+33	; 0x21
    458e:	0a a1       	ldd	r16, Y+34	; 0x22
    4590:	1b a1       	ldd	r17, Y+35	; 0x23
    4592:	c8 01       	movw	r24, r16
    4594:	b7 01       	movw	r22, r14
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	40 e0       	ldi	r20, 0x00	; 0
    459c:	50 e0       	ldi	r21, 0x00	; 0
    459e:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    45a2:	87 fd       	sbrc	r24, 7
    45a4:	bd c0       	rjmp	.+378    	; 0x4720 <validate_inputs+0x212>
    45a6:	c8 01       	movw	r24, r16
    45a8:	b7 01       	movw	r22, r14
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	30 e4       	ldi	r19, 0x40	; 64
    45ae:	4c e9       	ldi	r20, 0x9C	; 156
    45b0:	55 e4       	ldi	r21, 0x45	; 69
    45b2:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	0c f4       	brge	.+2      	; 0x45bc <validate_inputs+0xae>
    45ba:	b2 c0       	rjmp	.+356    	; 0x4720 <validate_inputs+0x212>
    if ((spa->temperature <= -273) || (spa->temperature > 6000)) return 13;
    45bc:	ec a0       	ldd	r14, Y+36	; 0x24
    45be:	fd a0       	ldd	r15, Y+37	; 0x25
    45c0:	0e a1       	ldd	r16, Y+38	; 0x26
    45c2:	1f a1       	ldd	r17, Y+39	; 0x27
    45c4:	c8 01       	movw	r24, r16
    45c6:	b7 01       	movw	r22, r14
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e8       	ldi	r19, 0x80	; 128
    45cc:	48 e8       	ldi	r20, 0x88	; 136
    45ce:	53 ec       	ldi	r21, 0xC3	; 195
    45d0:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    45d4:	18 16       	cp	r1, r24
    45d6:	0c f0       	brlt	.+2      	; 0x45da <validate_inputs+0xcc>
    45d8:	a6 c0       	rjmp	.+332    	; 0x4726 <validate_inputs+0x218>
    45da:	c8 01       	movw	r24, r16
    45dc:	b7 01       	movw	r22, r14
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e8       	ldi	r19, 0x80	; 128
    45e2:	4b eb       	ldi	r20, 0xBB	; 187
    45e4:	55 e4       	ldi	r21, 0x45	; 69
    45e6:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    45ea:	18 16       	cp	r1, r24
    45ec:	0c f4       	brge	.+2      	; 0x45f0 <validate_inputs+0xe2>
    45ee:	9b c0       	rjmp	.+310    	; 0x4726 <validate_inputs+0x218>
    if ((spa->hour        == 24  ) && (spa->minute      > 0   )) return 5;
    45f0:	28 e1       	ldi	r18, 0x18	; 24
    45f2:	82 16       	cp	r8, r18
    45f4:	91 04       	cpc	r9, r1
    45f6:	41 f4       	brne	.+16     	; 0x4608 <validate_inputs+0xfa>
    45f8:	1a 14       	cp	r1, r10
    45fa:	1b 04       	cpc	r1, r11
    45fc:	0c f4       	brge	.+2      	; 0x4600 <validate_inputs+0xf2>
    45fe:	8a c0       	rjmp	.+276    	; 0x4714 <validate_inputs+0x206>
    if ((spa->hour        == 24  ) && (spa->second      > 0   )) return 6;
    4600:	1c 14       	cp	r1, r12
    4602:	1d 04       	cpc	r1, r13
    4604:	0c f4       	brge	.+2      	; 0x4608 <validate_inputs+0xfa>
    4606:	89 c0       	rjmp	.+274    	; 0x471a <validate_inputs+0x20c>

    if (fabs(spa->delta_t)       > 8000    ) return 7;
    4608:	6c 85       	ldd	r22, Y+12	; 0x0c
    460a:	7d 85       	ldd	r23, Y+13	; 0x0d
    460c:	8e 85       	ldd	r24, Y+14	; 0x0e
    460e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4610:	9f 77       	andi	r25, 0x7F	; 127
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	4a ef       	ldi	r20, 0xFA	; 250
    4618:	55 e4       	ldi	r21, 0x45	; 69
    461a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    461e:	18 16       	cp	r1, r24
    4620:	1c f4       	brge	.+6      	; 0x4628 <validate_inputs+0x11a>
    4622:	27 e0       	ldi	r18, 0x07	; 7
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	84 c0       	rjmp	.+264    	; 0x4730 <validate_inputs+0x222>
    if (fabs(spa->timezone)      > 18      ) return 8;
    4628:	68 89       	ldd	r22, Y+16	; 0x10
    462a:	79 89       	ldd	r23, Y+17	; 0x11
    462c:	8a 89       	ldd	r24, Y+18	; 0x12
    462e:	9b 89       	ldd	r25, Y+19	; 0x13
    4630:	9f 77       	andi	r25, 0x7F	; 127
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e9       	ldi	r20, 0x90	; 144
    4638:	51 e4       	ldi	r21, 0x41	; 65
    463a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    463e:	18 16       	cp	r1, r24
    4640:	1c f4       	brge	.+6      	; 0x4648 <validate_inputs+0x13a>
    4642:	28 e0       	ldi	r18, 0x08	; 8
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	74 c0       	rjmp	.+232    	; 0x4730 <validate_inputs+0x222>
    if (fabs(spa->longitude)     > 180     ) return 9;
    4648:	6c 89       	ldd	r22, Y+20	; 0x14
    464a:	7d 89       	ldd	r23, Y+21	; 0x15
    464c:	8e 89       	ldd	r24, Y+22	; 0x16
    464e:	9f 89       	ldd	r25, Y+23	; 0x17
    4650:	9f 77       	andi	r25, 0x7F	; 127
    4652:	20 e0       	ldi	r18, 0x00	; 0
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	44 e3       	ldi	r20, 0x34	; 52
    4658:	53 e4       	ldi	r21, 0x43	; 67
    465a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    465e:	18 16       	cp	r1, r24
    4660:	1c f4       	brge	.+6      	; 0x4668 <validate_inputs+0x15a>
    4662:	29 e0       	ldi	r18, 0x09	; 9
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	64 c0       	rjmp	.+200    	; 0x4730 <validate_inputs+0x222>
    if (fabs(spa->latitude)      > 90      ) return 10;
    4668:	68 8d       	ldd	r22, Y+24	; 0x18
    466a:	79 8d       	ldd	r23, Y+25	; 0x19
    466c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    466e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4670:	9f 77       	andi	r25, 0x7F	; 127
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	44 eb       	ldi	r20, 0xB4	; 180
    4678:	52 e4       	ldi	r21, 0x42	; 66
    467a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    467e:	18 16       	cp	r1, r24
    4680:	1c f4       	brge	.+6      	; 0x4688 <validate_inputs+0x17a>
    4682:	2a e0       	ldi	r18, 0x0A	; 10
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	54 c0       	rjmp	.+168    	; 0x4730 <validate_inputs+0x222>
    if (fabs(spa->atmos_refract) > 5       ) return 16;
    4688:	68 a9       	ldd	r22, Y+48	; 0x30
    468a:	79 a9       	ldd	r23, Y+49	; 0x31
    468c:	8a a9       	ldd	r24, Y+50	; 0x32
    468e:	9b a9       	ldd	r25, Y+51	; 0x33
    4690:	9f 77       	andi	r25, 0x7F	; 127
    4692:	20 e0       	ldi	r18, 0x00	; 0
    4694:	30 e0       	ldi	r19, 0x00	; 0
    4696:	40 ea       	ldi	r20, 0xA0	; 160
    4698:	50 e4       	ldi	r21, 0x40	; 64
    469a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    469e:	18 16       	cp	r1, r24
    46a0:	1c f4       	brge	.+6      	; 0x46a8 <validate_inputs+0x19a>
    46a2:	20 e1       	ldi	r18, 0x10	; 16
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	44 c0       	rjmp	.+136    	; 0x4730 <validate_inputs+0x222>
    if (     spa->elevation      < -6500000) return 11;
    46a8:	6c 8d       	ldd	r22, Y+28	; 0x1c
    46aa:	7d 8d       	ldd	r23, Y+29	; 0x1d
    46ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    46b0:	20 e4       	ldi	r18, 0x40	; 64
    46b2:	3d e5       	ldi	r19, 0x5D	; 93
    46b4:	46 ec       	ldi	r20, 0xC6	; 198
    46b6:	5a ec       	ldi	r21, 0xCA	; 202
    46b8:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    46bc:	88 23       	and	r24, r24
    46be:	1c f4       	brge	.+6      	; 0x46c6 <validate_inputs+0x1b8>
    46c0:	2b e0       	ldi	r18, 0x0B	; 11
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	35 c0       	rjmp	.+106    	; 0x4730 <validate_inputs+0x222>

    if ((spa->function == SPA_ZA_INC) || (spa->function == SPA_ALL))
    46c6:	8c a9       	ldd	r24, Y+52	; 0x34
    46c8:	9d a9       	ldd	r25, Y+53	; 0x35
    46ca:	81 30       	cpi	r24, 0x01	; 1
    46cc:	91 05       	cpc	r25, r1
    46ce:	11 f0       	breq	.+4      	; 0x46d4 <validate_inputs+0x1c6>
    46d0:	03 97       	sbiw	r24, 0x03	; 3
    46d2:	61 f5       	brne	.+88     	; 0x472c <validate_inputs+0x21e>
    {
        if (fabs(spa->slope)         > 360) return 14;
    46d4:	68 a5       	ldd	r22, Y+40	; 0x28
    46d6:	79 a5       	ldd	r23, Y+41	; 0x29
    46d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    46da:	9b a5       	ldd	r25, Y+43	; 0x2b
    46dc:	9f 77       	andi	r25, 0x7F	; 127
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	44 eb       	ldi	r20, 0xB4	; 180
    46e4:	53 e4       	ldi	r21, 0x43	; 67
    46e6:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    46ea:	18 16       	cp	r1, r24
    46ec:	1c f4       	brge	.+6      	; 0x46f4 <validate_inputs+0x1e6>
    46ee:	2e e0       	ldi	r18, 0x0E	; 14
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	1e c0       	rjmp	.+60     	; 0x4730 <validate_inputs+0x222>
        if (fabs(spa->azm_rotation)  > 360) return 15;
    46f4:	6c a5       	ldd	r22, Y+44	; 0x2c
    46f6:	7d a5       	ldd	r23, Y+45	; 0x2d
    46f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    46fa:	9f a5       	ldd	r25, Y+47	; 0x2f
    46fc:	9f 77       	andi	r25, 0x7F	; 127
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	44 eb       	ldi	r20, 0xB4	; 180
    4704:	53 e4       	ldi	r21, 0x43	; 67
    4706:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    470a:	18 16       	cp	r1, r24
    470c:	7c f4       	brge	.+30     	; 0x472c <validate_inputs+0x21e>
    470e:	2f e0       	ldi	r18, 0x0F	; 15
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	0e c0       	rjmp	.+28     	; 0x4730 <validate_inputs+0x222>
    4714:	25 e0       	ldi	r18, 0x05	; 5
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	0b c0       	rjmp	.+22     	; 0x4730 <validate_inputs+0x222>
    471a:	26 e0       	ldi	r18, 0x06	; 6
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	08 c0       	rjmp	.+16     	; 0x4730 <validate_inputs+0x222>
    4720:	2c e0       	ldi	r18, 0x0C	; 12
    4722:	30 e0       	ldi	r19, 0x00	; 0
    4724:	05 c0       	rjmp	.+10     	; 0x4730 <validate_inputs+0x222>
    4726:	2d e0       	ldi	r18, 0x0D	; 13
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <validate_inputs+0x222>
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    }

    return 0;
}
    4730:	c9 01       	movw	r24, r18
    4732:	df 91       	pop	r29
    4734:	cf 91       	pop	r28
    4736:	1f 91       	pop	r17
    4738:	0f 91       	pop	r16
    473a:	ff 90       	pop	r15
    473c:	ef 90       	pop	r14
    473e:	df 90       	pop	r13
    4740:	cf 90       	pop	r12
    4742:	bf 90       	pop	r11
    4744:	af 90       	pop	r10
    4746:	9f 90       	pop	r9
    4748:	8f 90       	pop	r8
    474a:	08 95       	ret

0000474c <julian_century>:

    return julian_day;
}

double julian_century(double jd)
{
    474c:	24 e6       	ldi	r18, 0x64	; 100
    474e:	31 ea       	ldi	r19, 0xA1	; 161
    4750:	45 e1       	ldi	r20, 0x15	; 21
    4752:	5a e4       	ldi	r21, 0x4A	; 74
    4754:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4758:	20 e0       	ldi	r18, 0x00	; 0
    475a:	3d ea       	ldi	r19, 0xAD	; 173
    475c:	4e e0       	ldi	r20, 0x0E	; 14
    475e:	57 e4       	ldi	r21, 0x47	; 71
    4760:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return (jd-2451545.0)/36525.0;
}
    4764:	08 95       	ret

00004766 <julian_ephemeris_day>:

double julian_ephemeris_day(double jd, double delta_t)
{
    4766:	ef 92       	push	r14
    4768:	ff 92       	push	r15
    476a:	0f 93       	push	r16
    476c:	1f 93       	push	r17
    476e:	7b 01       	movw	r14, r22
    4770:	8c 01       	movw	r16, r24
    4772:	ca 01       	movw	r24, r20
    4774:	b9 01       	movw	r22, r18
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 ec       	ldi	r19, 0xC0	; 192
    477a:	48 ea       	ldi	r20, 0xA8	; 168
    477c:	57 e4       	ldi	r21, 0x47	; 71
    477e:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    4782:	9b 01       	movw	r18, r22
    4784:	ac 01       	movw	r20, r24
    4786:	c8 01       	movw	r24, r16
    4788:	b7 01       	movw	r22, r14
    478a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return jd+delta_t/86400.0;
}
    478e:	1f 91       	pop	r17
    4790:	0f 91       	pop	r16
    4792:	ff 90       	pop	r15
    4794:	ef 90       	pop	r14
    4796:	08 95       	ret

00004798 <julian_ephemeris_century>:

double julian_ephemeris_century(double jde)
{
    4798:	24 e6       	ldi	r18, 0x64	; 100
    479a:	31 ea       	ldi	r19, 0xA1	; 161
    479c:	45 e1       	ldi	r20, 0x15	; 21
    479e:	5a e4       	ldi	r21, 0x4A	; 74
    47a0:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	3d ea       	ldi	r19, 0xAD	; 173
    47a8:	4e e0       	ldi	r20, 0x0E	; 14
    47aa:	57 e4       	ldi	r21, 0x47	; 71
    47ac:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return (jde - 2451545.0)/36525.0;
}
    47b0:	08 95       	ret

000047b2 <julian_ephemeris_millennium>:

double julian_ephemeris_millennium(double jce)
{
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	40 e2       	ldi	r20, 0x20	; 32
    47b8:	51 e4       	ldi	r21, 0x41	; 65
    47ba:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return (jce/10.0);
}
    47be:	08 95       	ret

000047c0 <geocentric_longitude>:
    return earth_values(sum, R_COUNT, jme);

}

double geocentric_longitude(double l)
{
    47c0:	ef 92       	push	r14
    47c2:	ff 92       	push	r15
    47c4:	0f 93       	push	r16
    47c6:	1f 93       	push	r17
    double theta = l + 180.0;
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	44 e3       	ldi	r20, 0x34	; 52
    47ce:	53 e4       	ldi	r21, 0x43	; 67
    47d0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    47d4:	7b 01       	movw	r14, r22
    47d6:	8c 01       	movw	r16, r24

    if (theta >= 360.0) theta -= 360.0;
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	44 eb       	ldi	r20, 0xB4	; 180
    47de:	53 e4       	ldi	r21, 0x43	; 67
    47e0:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    47e4:	88 23       	and	r24, r24
    47e6:	54 f0       	brlt	.+20     	; 0x47fc <geocentric_longitude+0x3c>
    47e8:	c8 01       	movw	r24, r16
    47ea:	b7 01       	movw	r22, r14
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	44 eb       	ldi	r20, 0xB4	; 180
    47f2:	53 e4       	ldi	r21, 0x43	; 67
    47f4:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    47f8:	7b 01       	movw	r14, r22
    47fa:	8c 01       	movw	r16, r24

    return theta;
}
    47fc:	b7 01       	movw	r22, r14
    47fe:	c8 01       	movw	r24, r16
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	ff 90       	pop	r15
    4806:	ef 90       	pop	r14
    4808:	08 95       	ret

0000480a <geocentric_latitude>:

double geocentric_latitude(double b)
{
    480a:	90 58       	subi	r25, 0x80	; 128
    return -b;
}
    480c:	08 95       	ret

0000480e <mean_elongation_moon_sun>:

double mean_elongation_moon_sun(double jce)
{
    480e:	ef 92       	push	r14
    4810:	ff 92       	push	r15
    4812:	0f 93       	push	r16
    4814:	1f 93       	push	r17
    4816:	7b 01       	movw	r14, r22
    4818:	8c 01       	movw	r16, r24
    481a:	21 eb       	ldi	r18, 0xB1	; 177
    481c:	37 e1       	ldi	r19, 0x17	; 23
    481e:	41 eb       	ldi	r20, 0xB1	; 177
    4820:	56 e3       	ldi	r21, 0x36	; 54
    4822:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4826:	25 ee       	ldi	r18, 0xE5	; 229
    4828:	35 ee       	ldi	r19, 0xE5	; 229
    482a:	4a ef       	ldi	r20, 0xFA	; 250
    482c:	5a e3       	ldi	r21, 0x3A	; 58
    482e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4832:	a8 01       	movw	r20, r16
    4834:	97 01       	movw	r18, r14
    4836:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    483a:	24 e6       	ldi	r18, 0x64	; 100
    483c:	3a e6       	ldi	r19, 0x6A	; 106
    483e:	49 ed       	ldi	r20, 0xD9	; 217
    4840:	58 e4       	ldi	r21, 0x48	; 72
    4842:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4846:	a8 01       	movw	r20, r16
    4848:	97 01       	movw	r18, r14
    484a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    484e:	29 ed       	ldi	r18, 0xD9	; 217
    4850:	3c ee       	ldi	r19, 0xEC	; 236
    4852:	44 e9       	ldi	r20, 0x94	; 148
    4854:	53 e4       	ldi	r21, 0x43	; 67
    4856:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return third_order_polynomial(1.0/189474.0, -0.0019142, 445267.11148, 297.85036, jce);
}
    485a:	1f 91       	pop	r17
    485c:	0f 91       	pop	r16
    485e:	ff 90       	pop	r15
    4860:	ef 90       	pop	r14
    4862:	08 95       	ret

00004864 <mean_anomaly_sun>:

double mean_anomaly_sun(double jce)
{
    4864:	ef 92       	push	r14
    4866:	ff 92       	push	r15
    4868:	0f 93       	push	r16
    486a:	1f 93       	push	r17
    486c:	7b 01       	movw	r14, r22
    486e:	8c 01       	movw	r16, r24
    4870:	2b e3       	ldi	r18, 0x3B	; 59
    4872:	32 eb       	ldi	r19, 0xB2	; 178
    4874:	4f e5       	ldi	r20, 0x5F	; 95
    4876:	56 eb       	ldi	r21, 0xB6	; 182
    4878:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    487c:	24 e3       	ldi	r18, 0x34	; 52
    487e:	36 e1       	ldi	r19, 0x16	; 22
    4880:	48 e2       	ldi	r20, 0x28	; 40
    4882:	59 e3       	ldi	r21, 0x39	; 57
    4884:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4888:	a8 01       	movw	r20, r16
    488a:	97 01       	movw	r18, r14
    488c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4890:	2d e0       	ldi	r18, 0x0D	; 13
    4892:	3f e9       	ldi	r19, 0x9F	; 159
    4894:	4c e0       	ldi	r20, 0x0C	; 12
    4896:	57 e4       	ldi	r21, 0x47	; 71
    4898:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    489c:	a8 01       	movw	r20, r16
    489e:	97 01       	movw	r18, r14
    48a0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    48a4:	2c e8       	ldi	r18, 0x8C	; 140
    48a6:	33 ec       	ldi	r19, 0xC3	; 195
    48a8:	42 eb       	ldi	r20, 0xB2	; 178
    48aa:	53 e4       	ldi	r21, 0x43	; 67
    48ac:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return third_order_polynomial(-1.0/300000.0, -0.0001603, 35999.05034, 357.52772, jce);
}
    48b0:	1f 91       	pop	r17
    48b2:	0f 91       	pop	r16
    48b4:	ff 90       	pop	r15
    48b6:	ef 90       	pop	r14
    48b8:	08 95       	ret

000048ba <mean_anomaly_moon>:

double mean_anomaly_moon(double jce)
{
    48ba:	ef 92       	push	r14
    48bc:	ff 92       	push	r15
    48be:	0f 93       	push	r16
    48c0:	1f 93       	push	r17
    48c2:	7b 01       	movw	r14, r22
    48c4:	8c 01       	movw	r16, r24
    48c6:	2d e7       	ldi	r18, 0x7D	; 125
    48c8:	31 e2       	ldi	r19, 0x21	; 33
    48ca:	45 e9       	ldi	r20, 0x95	; 149
    48cc:	57 e3       	ldi	r21, 0x37	; 55
    48ce:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    48d2:	23 eb       	ldi	r18, 0xB3	; 179
    48d4:	3e e7       	ldi	r19, 0x7E	; 126
    48d6:	4e e0       	ldi	r20, 0x0E	; 14
    48d8:	5c e3       	ldi	r21, 0x3C	; 60
    48da:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    48de:	a8 01       	movw	r20, r16
    48e0:	97 01       	movw	r18, r14
    48e2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    48e6:	2c ed       	ldi	r18, 0xDC	; 220
    48e8:	31 e0       	ldi	r19, 0x01	; 1
    48ea:	49 ee       	ldi	r20, 0xE9	; 233
    48ec:	58 e4       	ldi	r21, 0x48	; 72
    48ee:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    48f2:	a8 01       	movw	r20, r16
    48f4:	97 01       	movw	r18, r14
    48f6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    48fa:	26 e8       	ldi	r18, 0x86	; 134
    48fc:	36 ef       	ldi	r19, 0xF6	; 246
    48fe:	46 e0       	ldi	r20, 0x06	; 6
    4900:	53 e4       	ldi	r21, 0x43	; 67
    4902:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return third_order_polynomial(1.0/56250.0, 0.0086972, 477198.867398, 134.96298, jce);
}
    4906:	1f 91       	pop	r17
    4908:	0f 91       	pop	r16
    490a:	ff 90       	pop	r15
    490c:	ef 90       	pop	r14
    490e:	08 95       	ret

00004910 <argument_latitude_moon>:

double argument_latitude_moon(double jce)
{
    4910:	ef 92       	push	r14
    4912:	ff 92       	push	r15
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	7b 01       	movw	r14, r22
    491a:	8c 01       	movw	r16, r24
    491c:	2b e7       	ldi	r18, 0x7B	; 123
    491e:	3e e0       	ldi	r19, 0x0E	; 14
    4920:	4d e4       	ldi	r20, 0x4D	; 77
    4922:	56 e3       	ldi	r21, 0x36	; 54
    4924:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4928:	29 e1       	ldi	r18, 0x19	; 25
    492a:	36 e5       	ldi	r19, 0x56	; 86
    492c:	41 e7       	ldi	r20, 0x71	; 113
    492e:	5b e3       	ldi	r21, 0x3B	; 59
    4930:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4934:	a8 01       	movw	r20, r16
    4936:	97 01       	movw	r18, r14
    4938:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    493c:	21 e4       	ldi	r18, 0x41	; 65
    493e:	30 ef       	ldi	r19, 0xF0	; 240
    4940:	4b ee       	ldi	r20, 0xEB	; 235
    4942:	58 e4       	ldi	r21, 0x48	; 72
    4944:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4948:	a8 01       	movw	r20, r16
    494a:	97 01       	movw	r18, r14
    494c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4950:	28 e3       	ldi	r18, 0x38	; 56
    4952:	3b e8       	ldi	r19, 0x8B	; 139
    4954:	4a eb       	ldi	r20, 0xBA	; 186
    4956:	52 e4       	ldi	r21, 0x42	; 66
    4958:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return third_order_polynomial(1.0/327270.0, -0.0036825, 483202.017538, 93.27191, jce);
}
    495c:	1f 91       	pop	r17
    495e:	0f 91       	pop	r16
    4960:	ff 90       	pop	r15
    4962:	ef 90       	pop	r14
    4964:	08 95       	ret

00004966 <ascending_longitude_moon>:

double ascending_longitude_moon(double jce)
{
    4966:	ef 92       	push	r14
    4968:	ff 92       	push	r15
    496a:	0f 93       	push	r16
    496c:	1f 93       	push	r17
    496e:	7b 01       	movw	r14, r22
    4970:	8c 01       	movw	r16, r24
    4972:	2d e7       	ldi	r18, 0x7D	; 125
    4974:	31 e2       	ldi	r19, 0x21	; 33
    4976:	45 e1       	ldi	r20, 0x15	; 21
    4978:	56 e3       	ldi	r21, 0x36	; 54
    497a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    497e:	22 e4       	ldi	r18, 0x42	; 66
    4980:	36 eb       	ldi	r19, 0xB6	; 182
    4982:	47 e0       	ldi	r20, 0x07	; 7
    4984:	5b e3       	ldi	r21, 0x3B	; 59
    4986:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    498a:	a8 01       	movw	r20, r16
    498c:	97 01       	movw	r18, r14
    498e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4992:	2c e5       	ldi	r18, 0x5C	; 92
    4994:	34 ec       	ldi	r19, 0xC4	; 196
    4996:	41 ef       	ldi	r20, 0xF1	; 241
    4998:	54 e4       	ldi	r21, 0x44	; 68
    499a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    499e:	a8 01       	movw	r20, r16
    49a0:	97 01       	movw	r18, r14
    49a2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    49a6:	2b ec       	ldi	r18, 0xCB	; 203
    49a8:	36 e1       	ldi	r19, 0x16	; 22
    49aa:	4a ef       	ldi	r20, 0xFA	; 250
    49ac:	52 e4       	ldi	r21, 0x42	; 66
    49ae:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return third_order_polynomial(1.0/450000.0, 0.0020708, -1934.136261, 125.04452, jce);
}
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	ff 90       	pop	r15
    49b8:	ef 90       	pop	r14
    49ba:	08 95       	ret

000049bc <xy_term_summation>:

double xy_term_summation(int i, double x[TERM_X_COUNT])
{
    49bc:	8f 92       	push	r8
    49be:	9f 92       	push	r9
    49c0:	af 92       	push	r10
    49c2:	bf 92       	push	r11
    49c4:	cf 92       	push	r12
    49c6:	df 92       	push	r13
    49c8:	ef 92       	push	r14
    49ca:	ff 92       	push	r15
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	4b 01       	movw	r8, r22
    49d6:	9c 01       	movw	r18, r24
    49d8:	ec 01       	movw	r28, r24
    49da:	93 e0       	ldi	r25, 0x03	; 3
    49dc:	cc 0f       	add	r28, r28
    49de:	dd 1f       	adc	r29, r29
    49e0:	9a 95       	dec	r25
    49e2:	e1 f7       	brne	.-8      	; 0x49dc <xy_term_summation+0x20>
    49e4:	22 0f       	add	r18, r18
    49e6:	33 1f       	adc	r19, r19
    49e8:	c2 0f       	add	r28, r18
    49ea:	d3 1f       	adc	r29, r19
    49ec:	c4 54       	subi	r28, 0x44	; 68
    49ee:	d1 4e       	sbci	r29, 0xE1	; 225
    49f0:	0f 2e       	mov	r0, r31
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	cf 2e       	mov	r12, r31
    49f6:	f0 e0       	ldi	r31, 0x00	; 0
    49f8:	df 2e       	mov	r13, r31
    49fa:	f0 e0       	ldi	r31, 0x00	; 0
    49fc:	ef 2e       	mov	r14, r31
    49fe:	f0 e0       	ldi	r31, 0x00	; 0
    4a00:	ff 2e       	mov	r15, r31
    4a02:	f0 2d       	mov	r31, r0
    4a04:	aa 24       	eor	r10, r10
    4a06:	bb 24       	eor	r11, r11
    int j;
    double sum=0;

    for (j = 0; j < TERM_Y_COUNT; j++)
        sum += x[j]*pgm_read_byte(&(Y_TERMS[i][j]));
    4a08:	fe 01       	movw	r30, r28
    4a0a:	64 91       	lpm	r22, Z+
    4a0c:	84 01       	movw	r16, r8
    4a0e:	0a 0d       	add	r16, r10
    4a10:	1b 1d       	adc	r17, r11
    4a12:	70 e0       	ldi	r23, 0x00	; 0
    4a14:	88 27       	eor	r24, r24
    4a16:	77 fd       	sbrc	r23, 7
    4a18:	80 95       	com	r24
    4a1a:	98 2f       	mov	r25, r24
    4a1c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    4a20:	f8 01       	movw	r30, r16
    4a22:	20 81       	ld	r18, Z
    4a24:	31 81       	ldd	r19, Z+1	; 0x01
    4a26:	42 81       	ldd	r20, Z+2	; 0x02
    4a28:	53 81       	ldd	r21, Z+3	; 0x03
    4a2a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4a2e:	9b 01       	movw	r18, r22
    4a30:	ac 01       	movw	r20, r24
    4a32:	c7 01       	movw	r24, r14
    4a34:	b6 01       	movw	r22, r12
    4a36:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4a3a:	6b 01       	movw	r12, r22
    4a3c:	7c 01       	movw	r14, r24
    4a3e:	84 e0       	ldi	r24, 0x04	; 4
    4a40:	90 e0       	ldi	r25, 0x00	; 0
    4a42:	a8 0e       	add	r10, r24
    4a44:	b9 1e       	adc	r11, r25
    4a46:	22 96       	adiw	r28, 0x02	; 2
double xy_term_summation(int i, double x[TERM_X_COUNT])
{
    int j;
    double sum=0;

    for (j = 0; j < TERM_Y_COUNT; j++)
    4a48:	94 e1       	ldi	r25, 0x14	; 20
    4a4a:	a9 16       	cp	r10, r25
    4a4c:	b1 04       	cpc	r11, r1
    4a4e:	e1 f6       	brne	.-72     	; 0x4a08 <xy_term_summation+0x4c>
        sum += x[j]*pgm_read_byte(&(Y_TERMS[i][j]));

    return sum;
}
    4a50:	b6 01       	movw	r22, r12
    4a52:	c7 01       	movw	r24, r14
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	ff 90       	pop	r15
    4a5e:	ef 90       	pop	r14
    4a60:	df 90       	pop	r13
    4a62:	cf 90       	pop	r12
    4a64:	bf 90       	pop	r11
    4a66:	af 90       	pop	r10
    4a68:	9f 90       	pop	r9
    4a6a:	8f 90       	pop	r8
    4a6c:	08 95       	ret

00004a6e <ecliptic_mean_obliquity>:
    *del_psi     = sum_psi     / 36000000.0;
    *del_epsilon = sum_epsilon / 36000000.0;
}

double ecliptic_mean_obliquity(double jme)
{
    4a6e:	ef 92       	push	r14
    4a70:	ff 92       	push	r15
    4a72:	0f 93       	push	r16
    4a74:	1f 93       	push	r17
    double u = jme/10.0;
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	40 e2       	ldi	r20, 0x20	; 32
    4a7c:	51 e4       	ldi	r21, 0x41	; 65
    4a7e:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    4a82:	7b 01       	movw	r14, r22
    4a84:	8c 01       	movw	r16, r24
    4a86:	2d ec       	ldi	r18, 0xCD	; 205
    4a88:	3c ec       	ldi	r19, 0xCC	; 204
    4a8a:	4c e1       	ldi	r20, 0x1C	; 28
    4a8c:	50 e4       	ldi	r21, 0x40	; 64
    4a8e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4a92:	2e ea       	ldi	r18, 0xAE	; 174
    4a94:	37 e4       	ldi	r19, 0x47	; 71
    4a96:	49 eb       	ldi	r20, 0xB9	; 185
    4a98:	50 e4       	ldi	r21, 0x40	; 64
    4a9a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4a9e:	9b 01       	movw	r18, r22
    4aa0:	ac 01       	movw	r20, r24
    4aa2:	c8 01       	movw	r24, r16
    4aa4:	b7 01       	movw	r22, r14
    4aa6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4aaa:	23 ec       	ldi	r18, 0xC3	; 195
    4aac:	35 ef       	ldi	r19, 0xF5	; 245
    4aae:	4e ed       	ldi	r20, 0xDE	; 222
    4ab0:	51 e4       	ldi	r21, 0x41	; 65
    4ab2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4ab6:	9b 01       	movw	r18, r22
    4ab8:	ac 01       	movw	r20, r24
    4aba:	c8 01       	movw	r24, r16
    4abc:	b7 01       	movw	r22, r14
    4abe:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4ac2:	2a e0       	ldi	r18, 0x0A	; 10
    4ac4:	37 ed       	ldi	r19, 0xD7	; 215
    4ac6:	43 ee       	ldi	r20, 0xE3	; 227
    4ac8:	50 e4       	ldi	r21, 0x40	; 64
    4aca:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4ace:	9b 01       	movw	r18, r22
    4ad0:	ac 01       	movw	r20, r24
    4ad2:	c8 01       	movw	r24, r16
    4ad4:	b7 01       	movw	r22, r14
    4ad6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4ada:	23 e3       	ldi	r18, 0x33	; 51
    4adc:	33 e3       	ldi	r19, 0x33	; 51
    4ade:	4c e1       	ldi	r20, 0x1C	; 28
    4ae0:	52 e4       	ldi	r21, 0x42	; 66
    4ae2:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4ae6:	9b 01       	movw	r18, r22
    4ae8:	ac 01       	movw	r20, r24
    4aea:	c8 01       	movw	r24, r16
    4aec:	b7 01       	movw	r22, r14
    4aee:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4af2:	25 e8       	ldi	r18, 0x85	; 133
    4af4:	3b ea       	ldi	r19, 0xAB	; 171
    4af6:	49 e7       	ldi	r20, 0x79	; 121
    4af8:	53 e4       	ldi	r21, 0x43	; 67
    4afa:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4afe:	9b 01       	movw	r18, r22
    4b00:	ac 01       	movw	r20, r24
    4b02:	c8 01       	movw	r24, r16
    4b04:	b7 01       	movw	r22, r14
    4b06:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4b0a:	2f e1       	ldi	r18, 0x1F	; 31
    4b0c:	35 e8       	ldi	r19, 0x85	; 133
    4b0e:	4d e4       	ldi	r20, 0x4D	; 77
    4b10:	52 e4       	ldi	r21, 0x42	; 66
    4b12:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4b16:	9b 01       	movw	r18, r22
    4b18:	ac 01       	movw	r20, r24
    4b1a:	c8 01       	movw	r24, r16
    4b1c:	b7 01       	movw	r22, r14
    4b1e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4b22:	20 e0       	ldi	r18, 0x00	; 0
    4b24:	38 ee       	ldi	r19, 0xE8	; 232
    4b26:	49 ef       	ldi	r20, 0xF9	; 249
    4b28:	54 e4       	ldi	r21, 0x44	; 68
    4b2a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4b2e:	9b 01       	movw	r18, r22
    4b30:	ac 01       	movw	r20, r24
    4b32:	c8 01       	movw	r24, r16
    4b34:	b7 01       	movw	r22, r14
    4b36:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4b3a:	26 e6       	ldi	r18, 0x66	; 102
    4b3c:	36 e6       	ldi	r19, 0x66	; 102
    4b3e:	46 ec       	ldi	r20, 0xC6	; 198
    4b40:	5f e3       	ldi	r21, 0x3F	; 63
    4b42:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4b46:	9b 01       	movw	r18, r22
    4b48:	ac 01       	movw	r20, r24
    4b4a:	c8 01       	movw	r24, r16
    4b4c:	b7 01       	movw	r22, r14
    4b4e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4b52:	21 e7       	ldi	r18, 0x71	; 113
    4b54:	37 e4       	ldi	r19, 0x47	; 71
    4b56:	42 e9       	ldi	r20, 0x92	; 146
    4b58:	55 e4       	ldi	r21, 0x45	; 69
    4b5a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4b5e:	9b 01       	movw	r18, r22
    4b60:	ac 01       	movw	r20, r24
    4b62:	c8 01       	movw	r24, r16
    4b64:	b7 01       	movw	r22, r14
    4b66:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4b6a:	29 eb       	ldi	r18, 0xB9	; 185
    4b6c:	3e ec       	ldi	r19, 0xCE	; 206
    4b6e:	44 ea       	ldi	r20, 0xA4	; 164
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>

    return 84381.448 + u*(-4680.93 + u*(-1.55 + u*(1999.25 + u*(-51.38 + u*(-249.67 +
                       u*(  -39.05 + u*( 7.12 + u*(  27.87 + u*(  5.79 + u*2.45)))))))));
}
    4b76:	1f 91       	pop	r17
    4b78:	0f 91       	pop	r16
    4b7a:	ff 90       	pop	r15
    4b7c:	ef 90       	pop	r14
    4b7e:	08 95       	ret

00004b80 <ecliptic_true_obliquity>:

double ecliptic_true_obliquity(double delta_epsilon, double epsilon0)
{
    4b80:	ef 92       	push	r14
    4b82:	ff 92       	push	r15
    4b84:	0f 93       	push	r16
    4b86:	1f 93       	push	r17
    4b88:	7b 01       	movw	r14, r22
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	ca 01       	movw	r24, r20
    4b8e:	b9 01       	movw	r22, r18
    4b90:	20 e0       	ldi	r18, 0x00	; 0
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	41 e6       	ldi	r20, 0x61	; 97
    4b96:	55 e4       	ldi	r21, 0x45	; 69
    4b98:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    4b9c:	9b 01       	movw	r18, r22
    4b9e:	ac 01       	movw	r20, r24
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	b7 01       	movw	r22, r14
    4ba4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return delta_epsilon + epsilon0/3600.0;
}
    4ba8:	1f 91       	pop	r17
    4baa:	0f 91       	pop	r16
    4bac:	ff 90       	pop	r15
    4bae:	ef 90       	pop	r14
    4bb0:	08 95       	ret

00004bb2 <aberration_correction>:

double aberration_correction(double r)
{
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	41 e6       	ldi	r20, 0x61	; 97
    4bb8:	55 e4       	ldi	r21, 0x45	; 69
    4bba:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4bbe:	9b 01       	movw	r18, r22
    4bc0:	ac 01       	movw	r20, r24
    4bc2:	6c e1       	ldi	r22, 0x1C	; 28
    4bc4:	7b ee       	ldi	r23, 0xEB	; 235
    4bc6:	83 ea       	ldi	r24, 0xA3	; 163
    4bc8:	91 ec       	ldi	r25, 0xC1	; 193
    4bca:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return -20.4898 / (3600.0*r);
}
    4bce:	08 95       	ret

00004bd0 <apparent_sun_longitude>:

double apparent_sun_longitude(double theta, double delta_psi, double delta_tau)
{
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	0f 93       	push	r16
    4bd6:	1f 93       	push	r17
    4bd8:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4bdc:	a8 01       	movw	r20, r16
    4bde:	97 01       	movw	r18, r14
    4be0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return theta + delta_psi + delta_tau;
}
    4be4:	1f 91       	pop	r17
    4be6:	0f 91       	pop	r16
    4be8:	ff 90       	pop	r15
    4bea:	ef 90       	pop	r14
    4bec:	08 95       	ret

00004bee <sun_equatorial_horizontal_parallax>:
{
    return limit_degrees(nu + longitude - alpha_deg);
}

double sun_equatorial_horizontal_parallax(double r)
{
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	41 e6       	ldi	r20, 0x61	; 97
    4bf4:	55 e4       	ldi	r21, 0x45	; 69
    4bf6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4bfa:	9b 01       	movw	r18, r22
    4bfc:	ac 01       	movw	r20, r24
    4bfe:	69 e3       	ldi	r22, 0x39	; 57
    4c00:	74 eb       	ldi	r23, 0xB4	; 180
    4c02:	8c e0       	ldi	r24, 0x0C	; 12
    4c04:	91 e4       	ldi	r25, 0x41	; 65
    4c06:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return 8.794 / (3600.0 * r);
}
    4c0a:	08 95       	ret

00004c0c <topocentric_sun_right_ascension>:

    *delta_alpha = rad2deg(delta_alpha_rad);
}

double topocentric_sun_right_ascension(double alpha_deg, double delta_alpha)
{
    4c0c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return alpha_deg + delta_alpha;
}
    4c10:	08 95       	ret

00004c12 <topocentric_local_hour_angle>:

double topocentric_local_hour_angle(double h, double delta_alpha)
{
    4c12:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    return h - delta_alpha;
}
    4c16:	08 95       	ret

00004c18 <topocentric_elevation_angle_corrected>:

    return del_e;
}

double topocentric_elevation_angle_corrected(double e0, double delta_e)
{
    4c18:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return e0 + delta_e;
}
    4c1c:	08 95       	ret

00004c1e <topocentric_zenith_angle>:

double topocentric_zenith_angle(double e)
{
    4c1e:	9b 01       	movw	r18, r22
    4c20:	ac 01       	movw	r20, r24
    4c22:	60 e0       	ldi	r22, 0x00	; 0
    4c24:	70 e0       	ldi	r23, 0x00	; 0
    4c26:	84 eb       	ldi	r24, 0xB4	; 180
    4c28:	92 e4       	ldi	r25, 0x42	; 66
    4c2a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    return 90.0 - e;
}
    4c2e:	08 95       	ret

00004c30 <topocentric_azimuth_angle_zero_360>:
    return rad2deg(atan2(sin(h_prime_rad),
                         cos(h_prime_rad)*sin(lat_rad) - tan(deg2rad(delta_prime))*cos(lat_rad)));
}

double topocentric_azimuth_angle_zero_360(double azimuth180)
{
    4c30:	20 e0       	ldi	r18, 0x00	; 0
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	44 e3       	ldi	r20, 0x34	; 52
    4c36:	53 e4       	ldi	r21, 0x43	; 67
    4c38:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    return azimuth180 + 180.0;
}
    4c3c:	08 95       	ret

00004c3e <approx_sun_transit_time>:
{
    return limit_minutes(4.0*(m - 0.0057183 - alpha + del_psi*cos(deg2rad(epsilon))));
}

double approx_sun_transit_time(double alpha_zero, double longitude, double nu)
{
    4c3e:	ef 92       	push	r14
    4c40:	ff 92       	push	r15
    4c42:	0f 93       	push	r16
    4c44:	1f 93       	push	r17
    4c46:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4c4a:	a8 01       	movw	r20, r16
    4c4c:	97 01       	movw	r18, r14
    4c4e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4c52:	20 e0       	ldi	r18, 0x00	; 0
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	44 eb       	ldi	r20, 0xB4	; 180
    4c58:	53 e4       	ldi	r21, 0x43	; 67
    4c5a:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    return (alpha_zero - longitude - nu) / 360.0;
}
    4c5e:	1f 91       	pop	r17
    4c60:	0f 91       	pop	r16
    4c62:	ff 90       	pop	r15
    4c64:	ef 90       	pop	r14
    4c66:	08 95       	ret

00004c68 <eot>:
    return limit_degrees(280.4664567 + jme*(360007.6982779 + jme*(0.03032028 +
                    jme*(1/49931.0   + jme*(-1/15300.0     + jme*(-1/2000000.0))))));
}

double eot(double m, double alpha, double del_psi, double epsilon)
{
    4c68:	2f 92       	push	r2
    4c6a:	3f 92       	push	r3
    4c6c:	4f 92       	push	r4
    4c6e:	5f 92       	push	r5
    4c70:	6f 92       	push	r6
    4c72:	7f 92       	push	r7
    4c74:	8f 92       	push	r8
    4c76:	9f 92       	push	r9
    4c78:	af 92       	push	r10
    4c7a:	bf 92       	push	r11
    4c7c:	cf 92       	push	r12
    4c7e:	df 92       	push	r13
    4c80:	ef 92       	push	r14
    4c82:	ff 92       	push	r15
    4c84:	0f 93       	push	r16
    4c86:	1f 93       	push	r17
    4c88:	df 93       	push	r29
    4c8a:	cf 93       	push	r28
    4c8c:	00 d0       	rcall	.+0      	; 0x4c8e <eot+0x26>
    4c8e:	00 d0       	rcall	.+0      	; 0x4c90 <eot+0x28>
    4c90:	cd b7       	in	r28, 0x3d	; 61
    4c92:	de b7       	in	r29, 0x3e	; 62
    4c94:	1b 01       	movw	r2, r22
    4c96:	2c 01       	movw	r4, r24
    4c98:	29 83       	std	Y+1, r18	; 0x01
    4c9a:	3a 83       	std	Y+2, r19	; 0x02
    4c9c:	4b 83       	std	Y+3, r20	; 0x03
    4c9e:	5c 83       	std	Y+4, r21	; 0x04
    4ca0:	c6 01       	movw	r24, r12
    4ca2:	b5 01       	movw	r22, r10
    return limit_minutes(4.0*(m - 0.0057183 - alpha + del_psi*cos(deg2rad(epsilon))));
    4ca4:	25 e3       	ldi	r18, 0x35	; 53
    4ca6:	3a ef       	ldi	r19, 0xFA	; 250
    4ca8:	4e e8       	ldi	r20, 0x8E	; 142
    4caa:	5c e3       	ldi	r21, 0x3C	; 60
    4cac:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4cb0:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    4cb4:	3b 01       	movw	r6, r22
    4cb6:	4c 01       	movw	r8, r24
    4cb8:	c2 01       	movw	r24, r4
    4cba:	b1 01       	movw	r22, r2
    4cbc:	24 e9       	ldi	r18, 0x94	; 148
    4cbe:	30 e6       	ldi	r19, 0x60	; 96
    4cc0:	4b eb       	ldi	r20, 0xBB	; 187
    4cc2:	5b e3       	ldi	r21, 0x3B	; 59
    4cc4:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4cc8:	29 81       	ldd	r18, Y+1	; 0x01
    4cca:	3a 81       	ldd	r19, Y+2	; 0x02
    4ccc:	4b 81       	ldd	r20, Y+3	; 0x03
    4cce:	5c 81       	ldd	r21, Y+4	; 0x04
    4cd0:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4cd4:	5b 01       	movw	r10, r22
    4cd6:	6c 01       	movw	r12, r24
    4cd8:	c8 01       	movw	r24, r16
    4cda:	b7 01       	movw	r22, r14
    4cdc:	a4 01       	movw	r20, r8
    4cde:	93 01       	movw	r18, r6
    4ce0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4ce4:	9b 01       	movw	r18, r22
    4ce6:	ac 01       	movw	r20, r24
    4ce8:	c6 01       	movw	r24, r12
    4cea:	b5 01       	movw	r22, r10
    4cec:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	50 e4       	ldi	r21, 0x40	; 64
    4cf8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4cfc:	7b 01       	movw	r14, r22
    4cfe:	8c 01       	movw	r16, r24

double limit_minutes(double minutes)
{
    double limited=minutes;

    if      (limited < -20.0) limited += 1440.0;
    4d00:	20 e0       	ldi	r18, 0x00	; 0
    4d02:	30 e0       	ldi	r19, 0x00	; 0
    4d04:	40 ea       	ldi	r20, 0xA0	; 160
    4d06:	51 ec       	ldi	r21, 0xC1	; 193
    4d08:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    4d0c:	88 23       	and	r24, r24
    4d0e:	4c f4       	brge	.+18     	; 0x4d22 <eot+0xba>
    4d10:	c8 01       	movw	r24, r16
    4d12:	b7 01       	movw	r22, r14
    4d14:	20 e0       	ldi	r18, 0x00	; 0
    4d16:	30 e0       	ldi	r19, 0x00	; 0
    4d18:	44 eb       	ldi	r20, 0xB4	; 180
    4d1a:	54 e4       	ldi	r21, 0x44	; 68
    4d1c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4d20:	12 c0       	rjmp	.+36     	; 0x4d46 <eot+0xde>
    else if (limited >  20.0) limited -= 1440.0;
    4d22:	c8 01       	movw	r24, r16
    4d24:	b7 01       	movw	r22, r14
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 ea       	ldi	r20, 0xA0	; 160
    4d2c:	51 e4       	ldi	r21, 0x41	; 65
    4d2e:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    4d32:	18 16       	cp	r1, r24
    4d34:	54 f4       	brge	.+20     	; 0x4d4a <eot+0xe2>
    4d36:	c8 01       	movw	r24, r16
    4d38:	b7 01       	movw	r22, r14
    4d3a:	20 e0       	ldi	r18, 0x00	; 0
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	44 eb       	ldi	r20, 0xB4	; 180
    4d40:	54 e4       	ldi	r21, 0x44	; 68
    4d42:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4d46:	7b 01       	movw	r14, r22
    4d48:	8c 01       	movw	r16, r24
}

double eot(double m, double alpha, double del_psi, double epsilon)
{
    return limit_minutes(4.0*(m - 0.0057183 - alpha + del_psi*cos(deg2rad(epsilon))));
}
    4d4a:	b7 01       	movw	r22, r14
    4d4c:	c8 01       	movw	r24, r16
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	cf 91       	pop	r28
    4d58:	df 91       	pop	r29
    4d5a:	1f 91       	pop	r17
    4d5c:	0f 91       	pop	r16
    4d5e:	ff 90       	pop	r15
    4d60:	ef 90       	pop	r14
    4d62:	df 90       	pop	r13
    4d64:	cf 90       	pop	r12
    4d66:	bf 90       	pop	r11
    4d68:	af 90       	pop	r10
    4d6a:	9f 90       	pop	r9
    4d6c:	8f 90       	pop	r8
    4d6e:	7f 90       	pop	r7
    4d70:	6f 90       	pop	r6
    4d72:	5f 90       	pop	r5
    4d74:	4f 90       	pop	r4
    4d76:	3f 90       	pop	r3
    4d78:	2f 90       	pop	r2
    4d7a:	08 95       	ret

00004d7c <greenwich_sidereal_time>:
    return limit_degrees(280.46061837 + 360.98564736629 * (jd - 2451545.0) +
                                       jc*jc*(0.000387933 - jc/38710000.0));
}

double greenwich_sidereal_time (double nu0, double delta_psi, double epsilon)
{
    4d7c:	6f 92       	push	r6
    4d7e:	7f 92       	push	r7
    4d80:	8f 92       	push	r8
    4d82:	9f 92       	push	r9
    4d84:	af 92       	push	r10
    4d86:	bf 92       	push	r11
    4d88:	cf 92       	push	r12
    4d8a:	df 92       	push	r13
    4d8c:	ef 92       	push	r14
    4d8e:	ff 92       	push	r15
    4d90:	0f 93       	push	r16
    4d92:	1f 93       	push	r17
    4d94:	3b 01       	movw	r6, r22
    4d96:	4c 01       	movw	r8, r24
    4d98:	59 01       	movw	r10, r18
    4d9a:	6a 01       	movw	r12, r20
    4d9c:	c8 01       	movw	r24, r16
    4d9e:	b7 01       	movw	r22, r14
    return nu0 + delta_psi*cos(deg2rad(epsilon));
    4da0:	25 e3       	ldi	r18, 0x35	; 53
    4da2:	3a ef       	ldi	r19, 0xFA	; 250
    4da4:	4e e8       	ldi	r20, 0x8E	; 142
    4da6:	5c e3       	ldi	r21, 0x3C	; 60
    4da8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4dac:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    4db0:	9b 01       	movw	r18, r22
    4db2:	ac 01       	movw	r20, r24
    4db4:	c6 01       	movw	r24, r12
    4db6:	b5 01       	movw	r22, r10
    4db8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4dbc:	9b 01       	movw	r18, r22
    4dbe:	ac 01       	movw	r20, r24
    4dc0:	c4 01       	movw	r24, r8
    4dc2:	b3 01       	movw	r22, r6
    4dc4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
}
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	af 90       	pop	r10
    4dd8:	9f 90       	pop	r9
    4dda:	8f 90       	pop	r8
    4ddc:	7f 90       	pop	r7
    4dde:	6f 90       	pop	r6
    4de0:	08 95       	ret

00004de2 <earth_periodic_term_summation>:
{
    return (jce/10.0);
}

double earth_periodic_term_summation(const double terms[][TERM_COUNT], int count, double jme)
{
    4de2:	6f 92       	push	r6
    4de4:	7f 92       	push	r7
    4de6:	8f 92       	push	r8
    4de8:	9f 92       	push	r9
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	3b 01       	movw	r6, r22
    4e00:	49 01       	movw	r8, r18
    4e02:	5a 01       	movw	r10, r20
    4e04:	ec 01       	movw	r28, r24
    4e06:	cc 24       	eor	r12, r12
    4e08:	dd 24       	eor	r13, r13
    4e0a:	0f 2e       	mov	r0, r31
    4e0c:	f0 e0       	ldi	r31, 0x00	; 0
    4e0e:	ef 2e       	mov	r14, r31
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	ff 2e       	mov	r15, r31
    4e14:	f0 e0       	ldi	r31, 0x00	; 0
    4e16:	0f 2f       	mov	r16, r31
    4e18:	f0 e0       	ldi	r31, 0x00	; 0
    4e1a:	1f 2f       	mov	r17, r31
    4e1c:	f0 2d       	mov	r31, r0
    4e1e:	22 c0       	rjmp	.+68     	; 0x4e64 <earth_periodic_term_summation+0x82>
    int i;
    double sum=0;

    for (i = 0; i < count; i++)
        sum += terms[i][TERM_A]*cos(terms[i][TERM_B]+terms[i][TERM_C]*jme);
    4e20:	c5 01       	movw	r24, r10
    4e22:	b4 01       	movw	r22, r8
    4e24:	28 85       	ldd	r18, Y+8	; 0x08
    4e26:	39 85       	ldd	r19, Y+9	; 0x09
    4e28:	4a 85       	ldd	r20, Y+10	; 0x0a
    4e2a:	5b 85       	ldd	r21, Y+11	; 0x0b
    4e2c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4e30:	2c 81       	ldd	r18, Y+4	; 0x04
    4e32:	3d 81       	ldd	r19, Y+5	; 0x05
    4e34:	4e 81       	ldd	r20, Y+6	; 0x06
    4e36:	5f 81       	ldd	r21, Y+7	; 0x07
    4e38:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4e3c:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    4e40:	28 81       	ld	r18, Y
    4e42:	39 81       	ldd	r19, Y+1	; 0x01
    4e44:	4a 81       	ldd	r20, Y+2	; 0x02
    4e46:	5b 81       	ldd	r21, Y+3	; 0x03
    4e48:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4e4c:	9b 01       	movw	r18, r22
    4e4e:	ac 01       	movw	r20, r24
    4e50:	c8 01       	movw	r24, r16
    4e52:	b7 01       	movw	r22, r14
    4e54:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    4e58:	7b 01       	movw	r14, r22
    4e5a:	8c 01       	movw	r16, r24
double earth_periodic_term_summation(const double terms[][TERM_COUNT], int count, double jme)
{
    int i;
    double sum=0;

    for (i = 0; i < count; i++)
    4e5c:	08 94       	sec
    4e5e:	c1 1c       	adc	r12, r1
    4e60:	d1 1c       	adc	r13, r1
    4e62:	2c 96       	adiw	r28, 0x0c	; 12
    4e64:	c6 14       	cp	r12, r6
    4e66:	d7 04       	cpc	r13, r7
    4e68:	dc f2       	brlt	.-74     	; 0x4e20 <earth_periodic_term_summation+0x3e>
        sum += terms[i][TERM_A]*cos(terms[i][TERM_B]+terms[i][TERM_C]*jme);

    return sum;
}
    4e6a:	b7 01       	movw	r22, r14
    4e6c:	c8 01       	movw	r24, r16
    4e6e:	df 91       	pop	r29
    4e70:	cf 91       	pop	r28
    4e72:	1f 91       	pop	r17
    4e74:	0f 91       	pop	r16
    4e76:	ff 90       	pop	r15
    4e78:	ef 90       	pop	r14
    4e7a:	df 90       	pop	r13
    4e7c:	cf 90       	pop	r12
    4e7e:	bf 90       	pop	r11
    4e80:	af 90       	pop	r10
    4e82:	9f 90       	pop	r9
    4e84:	8f 90       	pop	r8
    4e86:	7f 90       	pop	r7
    4e88:	6f 90       	pop	r6
    4e8a:	08 95       	ret

00004e8c <sun_rise_and_set>:
                        cos(latitude_rad)*cos(delta_prime_rad)*cos(deg2rad(h_prime))));
}

double sun_rise_and_set(double *m_rts,   double *h_rts,   double *delta_prime, double latitude,
                        double *h_prime, double h0_prime, int sun)
{
    4e8c:	2f 92       	push	r2
    4e8e:	3f 92       	push	r3
    4e90:	4f 92       	push	r4
    4e92:	5f 92       	push	r5
    4e94:	6f 92       	push	r6
    4e96:	7f 92       	push	r7
    4e98:	8f 92       	push	r8
    4e9a:	9f 92       	push	r9
    4e9c:	af 92       	push	r10
    4e9e:	bf 92       	push	r11
    4ea0:	cf 92       	push	r12
    4ea2:	df 92       	push	r13
    4ea4:	ef 92       	push	r14
    4ea6:	ff 92       	push	r15
    4ea8:	0f 93       	push	r16
    4eaa:	1f 93       	push	r17
    4eac:	df 93       	push	r29
    4eae:	cf 93       	push	r28
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	28 97       	sbiw	r28, 0x08	; 8
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	9e 83       	std	Y+6, r25	; 0x06
    4ec2:	8d 83       	std	Y+5, r24	; 0x05
    4ec4:	78 87       	std	Y+8, r23	; 0x08
    4ec6:	6f 83       	std	Y+7, r22	; 0x07
    4ec8:	fa 01       	movw	r30, r20
    4eca:	28 01       	movw	r4, r16
    4ecc:	39 01       	movw	r6, r18
    4ece:	84 01       	movw	r16, r8
    return m_rts[sun] + (h_rts[sun] - h0_prime) /
    4ed0:	00 0f       	add	r16, r16
    4ed2:	11 1f       	adc	r17, r17
    4ed4:	00 0f       	add	r16, r16
    4ed6:	11 1f       	adc	r17, r17
    4ed8:	e0 0f       	add	r30, r16
    4eda:	f1 1f       	adc	r31, r17
    4edc:	60 81       	ld	r22, Z
    4ede:	71 81       	ldd	r23, Z+1	; 0x01
    4ee0:	82 81       	ldd	r24, Z+2	; 0x02
    4ee2:	93 81       	ldd	r25, Z+3	; 0x03
    4ee4:	25 e3       	ldi	r18, 0x35	; 53
    4ee6:	3a ef       	ldi	r19, 0xFA	; 250
    4ee8:	4e e8       	ldi	r20, 0x8E	; 142
    4eea:	5c e3       	ldi	r21, 0x3C	; 60
    4eec:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4ef0:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    4ef4:	69 83       	std	Y+1, r22	; 0x01
    4ef6:	7a 83       	std	Y+2, r23	; 0x02
    4ef8:	8b 83       	std	Y+3, r24	; 0x03
    4efa:	9c 83       	std	Y+4, r25	; 0x04
    4efc:	c3 01       	movw	r24, r6
    4efe:	b2 01       	movw	r22, r4
    4f00:	25 e3       	ldi	r18, 0x35	; 53
    4f02:	3a ef       	ldi	r19, 0xFA	; 250
    4f04:	4e e8       	ldi	r20, 0x8E	; 142
    4f06:	5c e3       	ldi	r21, 0x3C	; 60
    4f08:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4f0c:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    4f10:	1b 01       	movw	r2, r22
    4f12:	2c 01       	movw	r4, r24
    4f14:	e0 0e       	add	r14, r16
    4f16:	f1 1e       	adc	r15, r17
    4f18:	f7 01       	movw	r30, r14
    4f1a:	60 81       	ld	r22, Z
    4f1c:	71 81       	ldd	r23, Z+1	; 0x01
    4f1e:	82 81       	ldd	r24, Z+2	; 0x02
    4f20:	93 81       	ldd	r25, Z+3	; 0x03
    4f22:	25 e3       	ldi	r18, 0x35	; 53
    4f24:	3a ef       	ldi	r19, 0xFA	; 250
    4f26:	4e e8       	ldi	r20, 0x8E	; 142
    4f28:	5c e3       	ldi	r21, 0x3C	; 60
    4f2a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4f2e:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    4f32:	3b 01       	movw	r6, r22
    4f34:	4c 01       	movw	r8, r24
    4f36:	8d 81       	ldd	r24, Y+5	; 0x05
    4f38:	9e 81       	ldd	r25, Y+6	; 0x06
    4f3a:	80 0f       	add	r24, r16
    4f3c:	91 1f       	adc	r25, r17
    4f3e:	9e 83       	std	Y+6, r25	; 0x06
    4f40:	8d 83       	std	Y+5, r24	; 0x05
    4f42:	ef 81       	ldd	r30, Y+7	; 0x07
    4f44:	f8 85       	ldd	r31, Y+8	; 0x08
    4f46:	0e 0f       	add	r16, r30
    4f48:	1f 1f       	adc	r17, r31
    4f4a:	f8 01       	movw	r30, r16
    4f4c:	60 81       	ld	r22, Z
    4f4e:	71 81       	ldd	r23, Z+1	; 0x01
    4f50:	82 81       	ldd	r24, Z+2	; 0x02
    4f52:	93 81       	ldd	r25, Z+3	; 0x03
    4f54:	a6 01       	movw	r20, r12
    4f56:	95 01       	movw	r18, r10
    4f58:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    4f5c:	7b 01       	movw	r14, r22
    4f5e:	8c 01       	movw	r16, r24
    4f60:	69 81       	ldd	r22, Y+1	; 0x01
    4f62:	7a 81       	ldd	r23, Y+2	; 0x02
    4f64:	8b 81       	ldd	r24, Y+3	; 0x03
    4f66:	9c 81       	ldd	r25, Y+4	; 0x04
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	44 eb       	ldi	r20, 0xB4	; 180
    4f6e:	53 e4       	ldi	r21, 0x43	; 67
    4f70:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4f74:	a2 01       	movw	r20, r4
    4f76:	91 01       	movw	r18, r2
    4f78:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4f7c:	a4 01       	movw	r20, r8
    4f7e:	93 01       	movw	r18, r6
    4f80:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    4f84:	9b 01       	movw	r18, r22
    4f86:	ac 01       	movw	r20, r24
    4f88:	c8 01       	movw	r24, r16
    4f8a:	b7 01       	movw	r22, r14
    4f8c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    4f90:	ed 81       	ldd	r30, Y+5	; 0x05
    4f92:	fe 81       	ldd	r31, Y+6	; 0x06
    4f94:	20 81       	ld	r18, Z
    4f96:	31 81       	ldd	r19, Z+1	; 0x01
    4f98:	42 81       	ldd	r20, Z+2	; 0x02
    4f9a:	53 81       	ldd	r21, Z+3	; 0x03
    4f9c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
          (360.0*cos(deg2rad(delta_prime[sun]))*cos(deg2rad(latitude))*sin(deg2rad(h_prime[sun])));
}
    4fa0:	28 96       	adiw	r28, 0x08	; 8
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	cf 91       	pop	r28
    4fae:	df 91       	pop	r29
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	ff 90       	pop	r15
    4fb6:	ef 90       	pop	r14
    4fb8:	df 90       	pop	r13
    4fba:	cf 90       	pop	r12
    4fbc:	bf 90       	pop	r11
    4fbe:	af 90       	pop	r10
    4fc0:	9f 90       	pop	r9
    4fc2:	8f 90       	pop	r8
    4fc4:	7f 90       	pop	r7
    4fc6:	6f 90       	pop	r6
    4fc8:	5f 90       	pop	r5
    4fca:	4f 90       	pop	r4
    4fcc:	3f 90       	pop	r3
    4fce:	2f 90       	pop	r2
    4fd0:	08 95       	ret

00004fd2 <nutation_longitude_and_obliquity>:
    return sum;
}

void nutation_longitude_and_obliquity(double jce, double x[TERM_X_COUNT], double *del_psi,
                                                                          double *del_epsilon)
{
    4fd2:	2f 92       	push	r2
    4fd4:	3f 92       	push	r3
    4fd6:	4f 92       	push	r4
    4fd8:	5f 92       	push	r5
    4fda:	6f 92       	push	r6
    4fdc:	7f 92       	push	r7
    4fde:	8f 92       	push	r8
    4fe0:	9f 92       	push	r9
    4fe2:	af 92       	push	r10
    4fe4:	bf 92       	push	r11
    4fe6:	cf 92       	push	r12
    4fe8:	df 92       	push	r13
    4fea:	ef 92       	push	r14
    4fec:	ff 92       	push	r15
    4fee:	0f 93       	push	r16
    4ff0:	1f 93       	push	r17
    4ff2:	df 93       	push	r29
    4ff4:	cf 93       	push	r28
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	66 97       	sbiw	r28, 0x16	; 22
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	6b 87       	std	Y+11, r22	; 0x0b
    5008:	7c 87       	std	Y+12, r23	; 0x0c
    500a:	8d 87       	std	Y+13, r24	; 0x0d
    500c:	9e 87       	std	Y+14, r25	; 0x0e
    500e:	58 8b       	std	Y+16, r21	; 0x10
    5010:	4f 87       	std	Y+15, r20	; 0x0f
    5012:	3a 8b       	std	Y+18, r19	; 0x12
    5014:	29 8b       	std	Y+17, r18	; 0x11
    5016:	1c 8b       	std	Y+20, r17	; 0x14
    5018:	0b 8b       	std	Y+19, r16	; 0x13
    501a:	82 e3       	ldi	r24, 0x32	; 50
    501c:	91 e2       	ldi	r25, 0x21	; 33
    501e:	9e 8b       	std	Y+22, r25	; 0x16
    5020:	8d 8b       	std	Y+21, r24	; 0x15
    5022:	1a 86       	std	Y+10, r1	; 0x0a
    5024:	19 86       	std	Y+9, r1	; 0x09
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	a0 e0       	ldi	r26, 0x00	; 0
    502c:	b0 e0       	ldi	r27, 0x00	; 0
    502e:	8d 83       	std	Y+5, r24	; 0x05
    5030:	9e 83       	std	Y+6, r25	; 0x06
    5032:	af 83       	std	Y+7, r26	; 0x07
    5034:	b8 87       	std	Y+8, r27	; 0x08
    5036:	89 83       	std	Y+1, r24	; 0x01
    5038:	9a 83       	std	Y+2, r25	; 0x02
    503a:	ab 83       	std	Y+3, r26	; 0x03
    503c:	bc 83       	std	Y+4, r27	; 0x04
    int i;
    double xy_term_sum, sum_psi=0, sum_epsilon=0;

    for (i = 0; i < Y_COUNT; i++) {
        xy_term_sum  = deg2rad(xy_term_summation(i, x));
    503e:	89 85       	ldd	r24, Y+9	; 0x09
    5040:	9a 85       	ldd	r25, Y+10	; 0x0a
    5042:	6f 85       	ldd	r22, Y+15	; 0x0f
    5044:	78 89       	ldd	r23, Y+16	; 0x10
    5046:	0e 94 de 24 	call	0x49bc	; 0x49bc <xy_term_summation>
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    504a:	25 e3       	ldi	r18, 0x35	; 53
    504c:	3a ef       	ldi	r19, 0xFA	; 250
    504e:	4e e8       	ldi	r20, 0x8E	; 142
    5050:	5c e3       	ldi	r21, 0x3C	; 60
    5052:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5056:	7b 01       	movw	r14, r22
    5058:	8c 01       	movw	r16, r24
    int i;
    double xy_term_sum, sum_psi=0, sum_epsilon=0;

    for (i = 0; i < Y_COUNT; i++) {
        xy_term_sum  = deg2rad(xy_term_summation(i, x));
        sum_psi     += ((double)pgm_read_dword(&(PE_TERMS[i][TERM_PSI_A])) + jce*(double)pgm_read_dword(&(PE_TERMS[i][TERM_PSI_B])))*sin(xy_term_sum);
    505a:	ed 89       	ldd	r30, Y+21	; 0x15
    505c:	fe 89       	ldd	r31, Y+22	; 0x16
    505e:	a5 90       	lpm	r10, Z+
    5060:	b5 90       	lpm	r11, Z+
    5062:	c5 90       	lpm	r12, Z+
    5064:	d4 90       	lpm	r13, Z+
    5066:	ed 89       	ldd	r30, Y+21	; 0x15
    5068:	fe 89       	ldd	r31, Y+22	; 0x16
    506a:	34 96       	adiw	r30, 0x04	; 4
    506c:	25 90       	lpm	r2, Z+
    506e:	35 90       	lpm	r3, Z+
    5070:	45 90       	lpm	r4, Z+
    5072:	54 90       	lpm	r5, Z+
    5074:	c8 01       	movw	r24, r16
    5076:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    507a:	3b 01       	movw	r6, r22
    507c:	4c 01       	movw	r8, r24
    507e:	c6 01       	movw	r24, r12
    5080:	b5 01       	movw	r22, r10
    5082:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5086:	5b 01       	movw	r10, r22
    5088:	6c 01       	movw	r12, r24
    508a:	c2 01       	movw	r24, r4
    508c:	b1 01       	movw	r22, r2
    508e:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5092:	9b 01       	movw	r18, r22
    5094:	ac 01       	movw	r20, r24
    5096:	6b 85       	ldd	r22, Y+11	; 0x0b
    5098:	7c 85       	ldd	r23, Y+12	; 0x0c
    509a:	8d 85       	ldd	r24, Y+13	; 0x0d
    509c:	9e 85       	ldd	r25, Y+14	; 0x0e
    509e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    50a2:	9b 01       	movw	r18, r22
    50a4:	ac 01       	movw	r20, r24
    50a6:	c6 01       	movw	r24, r12
    50a8:	b5 01       	movw	r22, r10
    50aa:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    50ae:	a4 01       	movw	r20, r8
    50b0:	93 01       	movw	r18, r6
    50b2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    50b6:	9b 01       	movw	r18, r22
    50b8:	ac 01       	movw	r20, r24
    50ba:	6d 81       	ldd	r22, Y+5	; 0x05
    50bc:	7e 81       	ldd	r23, Y+6	; 0x06
    50be:	8f 81       	ldd	r24, Y+7	; 0x07
    50c0:	98 85       	ldd	r25, Y+8	; 0x08
    50c2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    50c6:	6d 83       	std	Y+5, r22	; 0x05
    50c8:	7e 83       	std	Y+6, r23	; 0x06
    50ca:	8f 83       	std	Y+7, r24	; 0x07
    50cc:	98 87       	std	Y+8, r25	; 0x08
    50ce:	ed 89       	ldd	r30, Y+21	; 0x15
    50d0:	fe 89       	ldd	r31, Y+22	; 0x16
    50d2:	38 96       	adiw	r30, 0x08	; 8
        sum_epsilon += ((double)pgm_read_dword(&(PE_TERMS[i][TERM_EPS_C])) + jce*(double)pgm_read_dword(&(PE_TERMS[i][TERM_EPS_D])))*cos(xy_term_sum);
    50d4:	65 90       	lpm	r6, Z+
    50d6:	75 90       	lpm	r7, Z+
    50d8:	85 90       	lpm	r8, Z+
    50da:	94 90       	lpm	r9, Z+
    50dc:	ed 89       	ldd	r30, Y+21	; 0x15
    50de:	fe 89       	ldd	r31, Y+22	; 0x16
    50e0:	3c 96       	adiw	r30, 0x0c	; 12
    50e2:	25 90       	lpm	r2, Z+
    50e4:	35 90       	lpm	r3, Z+
    50e6:	45 90       	lpm	r4, Z+
    50e8:	54 90       	lpm	r5, Z+
    50ea:	b7 01       	movw	r22, r14
    50ec:	c8 01       	movw	r24, r16
    50ee:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    50f2:	5b 01       	movw	r10, r22
    50f4:	6c 01       	movw	r12, r24
    50f6:	c4 01       	movw	r24, r8
    50f8:	b3 01       	movw	r22, r6
    50fa:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    50fe:	7b 01       	movw	r14, r22
    5100:	8c 01       	movw	r16, r24
    5102:	c2 01       	movw	r24, r4
    5104:	b1 01       	movw	r22, r2
    5106:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    510a:	9b 01       	movw	r18, r22
    510c:	ac 01       	movw	r20, r24
    510e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5110:	7c 85       	ldd	r23, Y+12	; 0x0c
    5112:	8d 85       	ldd	r24, Y+13	; 0x0d
    5114:	9e 85       	ldd	r25, Y+14	; 0x0e
    5116:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    511a:	9b 01       	movw	r18, r22
    511c:	ac 01       	movw	r20, r24
    511e:	c8 01       	movw	r24, r16
    5120:	b7 01       	movw	r22, r14
    5122:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5126:	a6 01       	movw	r20, r12
    5128:	95 01       	movw	r18, r10
    512a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    512e:	9b 01       	movw	r18, r22
    5130:	ac 01       	movw	r20, r24
    5132:	69 81       	ldd	r22, Y+1	; 0x01
    5134:	7a 81       	ldd	r23, Y+2	; 0x02
    5136:	8b 81       	ldd	r24, Y+3	; 0x03
    5138:	9c 81       	ldd	r25, Y+4	; 0x04
    513a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    513e:	69 83       	std	Y+1, r22	; 0x01
    5140:	7a 83       	std	Y+2, r23	; 0x02
    5142:	8b 83       	std	Y+3, r24	; 0x03
    5144:	9c 83       	std	Y+4, r25	; 0x04
                                                                          double *del_epsilon)
{
    int i;
    double xy_term_sum, sum_psi=0, sum_epsilon=0;

    for (i = 0; i < Y_COUNT; i++) {
    5146:	a9 85       	ldd	r26, Y+9	; 0x09
    5148:	ba 85       	ldd	r27, Y+10	; 0x0a
    514a:	11 96       	adiw	r26, 0x01	; 1
    514c:	ba 87       	std	Y+10, r27	; 0x0a
    514e:	a9 87       	std	Y+9, r26	; 0x09
    5150:	ed 89       	ldd	r30, Y+21	; 0x15
    5152:	fe 89       	ldd	r31, Y+22	; 0x16
    5154:	70 96       	adiw	r30, 0x10	; 16
    5156:	fe 8b       	std	Y+22, r31	; 0x16
    5158:	ed 8b       	std	Y+21, r30	; 0x15
    515a:	df 97       	sbiw	r26, 0x3f	; 63
    515c:	09 f0       	breq	.+2      	; 0x5160 <nutation_longitude_and_obliquity+0x18e>
    515e:	6f cf       	rjmp	.-290    	; 0x503e <nutation_longitude_and_obliquity+0x6c>
        xy_term_sum  = deg2rad(xy_term_summation(i, x));
        sum_psi     += ((double)pgm_read_dword(&(PE_TERMS[i][TERM_PSI_A])) + jce*(double)pgm_read_dword(&(PE_TERMS[i][TERM_PSI_B])))*sin(xy_term_sum);
        sum_epsilon += ((double)pgm_read_dword(&(PE_TERMS[i][TERM_EPS_C])) + jce*(double)pgm_read_dword(&(PE_TERMS[i][TERM_EPS_D])))*cos(xy_term_sum);
    }

    *del_psi     = sum_psi     / 36000000.0;
    5160:	6d 81       	ldd	r22, Y+5	; 0x05
    5162:	7e 81       	ldd	r23, Y+6	; 0x06
    5164:	8f 81       	ldd	r24, Y+7	; 0x07
    5166:	98 85       	ldd	r25, Y+8	; 0x08
    5168:	20 e4       	ldi	r18, 0x40	; 64
    516a:	34 e5       	ldi	r19, 0x54	; 84
    516c:	49 e0       	ldi	r20, 0x09	; 9
    516e:	5c e4       	ldi	r21, 0x4C	; 76
    5170:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    5174:	a9 89       	ldd	r26, Y+17	; 0x11
    5176:	ba 89       	ldd	r27, Y+18	; 0x12
    5178:	6d 93       	st	X+, r22
    517a:	7d 93       	st	X+, r23
    517c:	8d 93       	st	X+, r24
    517e:	9c 93       	st	X, r25
    5180:	13 97       	sbiw	r26, 0x03	; 3
    *del_epsilon = sum_epsilon / 36000000.0;
    5182:	69 81       	ldd	r22, Y+1	; 0x01
    5184:	7a 81       	ldd	r23, Y+2	; 0x02
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	9c 81       	ldd	r25, Y+4	; 0x04
    518a:	20 e4       	ldi	r18, 0x40	; 64
    518c:	34 e5       	ldi	r19, 0x54	; 84
    518e:	49 e0       	ldi	r20, 0x09	; 9
    5190:	5c e4       	ldi	r21, 0x4C	; 76
    5192:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    5196:	eb 89       	ldd	r30, Y+19	; 0x13
    5198:	fc 89       	ldd	r31, Y+20	; 0x14
    519a:	60 83       	st	Z, r22
    519c:	71 83       	std	Z+1, r23	; 0x01
    519e:	82 83       	std	Z+2, r24	; 0x02
    51a0:	93 83       	std	Z+3, r25	; 0x03
}
    51a2:	66 96       	adiw	r28, 0x16	; 22
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	f8 94       	cli
    51a8:	de bf       	out	0x3e, r29	; 62
    51aa:	0f be       	out	0x3f, r0	; 63
    51ac:	cd bf       	out	0x3d, r28	; 61
    51ae:	cf 91       	pop	r28
    51b0:	df 91       	pop	r29
    51b2:	1f 91       	pop	r17
    51b4:	0f 91       	pop	r16
    51b6:	ff 90       	pop	r15
    51b8:	ef 90       	pop	r14
    51ba:	df 90       	pop	r13
    51bc:	cf 90       	pop	r12
    51be:	bf 90       	pop	r11
    51c0:	af 90       	pop	r10
    51c2:	9f 90       	pop	r9
    51c4:	8f 90       	pop	r8
    51c6:	7f 90       	pop	r7
    51c8:	6f 90       	pop	r6
    51ca:	5f 90       	pop	r5
    51cc:	4f 90       	pop	r4
    51ce:	3f 90       	pop	r3
    51d0:	2f 90       	pop	r2
    51d2:	08 95       	ret

000051d4 <rts_sun_altitude>:

    return ad[JD_ZERO] + n * (a + b + (b-a)*n)/2.0;
}

double rts_sun_altitude(double latitude, double delta_prime, double h_prime)
{
    51d4:	2f 92       	push	r2
    51d6:	3f 92       	push	r3
    51d8:	4f 92       	push	r4
    51da:	5f 92       	push	r5
    51dc:	6f 92       	push	r6
    51de:	7f 92       	push	r7
    51e0:	8f 92       	push	r8
    51e2:	9f 92       	push	r9
    51e4:	af 92       	push	r10
    51e6:	bf 92       	push	r11
    51e8:	cf 92       	push	r12
    51ea:	df 92       	push	r13
    51ec:	ef 92       	push	r14
    51ee:	ff 92       	push	r15
    51f0:	0f 93       	push	r16
    51f2:	1f 93       	push	r17
    51f4:	df 93       	push	r29
    51f6:	cf 93       	push	r28
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	28 97       	sbiw	r28, 0x08	; 8
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	de bf       	out	0x3e, r29	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	cd bf       	out	0x3d, r28	; 61
    5208:	39 01       	movw	r6, r18
    520a:	4a 01       	movw	r8, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    520c:	25 e3       	ldi	r18, 0x35	; 53
    520e:	3a ef       	ldi	r19, 0xFA	; 250
    5210:	4e e8       	ldi	r20, 0x8E	; 142
    5212:	5c e3       	ldi	r21, 0x3C	; 60
    5214:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5218:	5b 01       	movw	r10, r22
    521a:	6c 01       	movw	r12, r24
double rts_sun_altitude(double latitude, double delta_prime, double h_prime)
{
    double latitude_rad    = deg2rad(latitude);
    double delta_prime_rad = deg2rad(delta_prime);

    return rad2deg(asin(sin(latitude_rad)*sin(delta_prime_rad) +
    521c:	c4 01       	movw	r24, r8
    521e:	b3 01       	movw	r22, r6
    5220:	25 e3       	ldi	r18, 0x35	; 53
    5222:	3a ef       	ldi	r19, 0xFA	; 250
    5224:	4e e8       	ldi	r20, 0x8E	; 142
    5226:	5c e3       	ldi	r21, 0x3C	; 60
    5228:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    522c:	3b 01       	movw	r6, r22
    522e:	4c 01       	movw	r8, r24
    5230:	b5 01       	movw	r22, r10
    5232:	c6 01       	movw	r24, r12
    5234:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5238:	6d 83       	std	Y+5, r22	; 0x05
    523a:	7e 83       	std	Y+6, r23	; 0x06
    523c:	8f 83       	std	Y+7, r24	; 0x07
    523e:	98 87       	std	Y+8, r25	; 0x08
    5240:	b3 01       	movw	r22, r6
    5242:	c4 01       	movw	r24, r8
    5244:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5248:	69 83       	std	Y+1, r22	; 0x01
    524a:	7a 83       	std	Y+2, r23	; 0x02
    524c:	8b 83       	std	Y+3, r24	; 0x03
    524e:	9c 83       	std	Y+4, r25	; 0x04
    5250:	b5 01       	movw	r22, r10
    5252:	c6 01       	movw	r24, r12
    5254:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5258:	1b 01       	movw	r2, r22
    525a:	2c 01       	movw	r4, r24
    525c:	b3 01       	movw	r22, r6
    525e:	c4 01       	movw	r24, r8
    5260:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5264:	3b 01       	movw	r6, r22
    5266:	4c 01       	movw	r8, r24
    5268:	c8 01       	movw	r24, r16
    526a:	b7 01       	movw	r22, r14
    526c:	25 e3       	ldi	r18, 0x35	; 53
    526e:	3a ef       	ldi	r19, 0xFA	; 250
    5270:	4e e8       	ldi	r20, 0x8E	; 142
    5272:	5c e3       	ldi	r21, 0x3C	; 60
    5274:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5278:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    527c:	5b 01       	movw	r10, r22
    527e:	6c 01       	movw	r12, r24
    5280:	6d 81       	ldd	r22, Y+5	; 0x05
    5282:	7e 81       	ldd	r23, Y+6	; 0x06
    5284:	8f 81       	ldd	r24, Y+7	; 0x07
    5286:	98 85       	ldd	r25, Y+8	; 0x08
    5288:	29 81       	ldd	r18, Y+1	; 0x01
    528a:	3a 81       	ldd	r19, Y+2	; 0x02
    528c:	4b 81       	ldd	r20, Y+3	; 0x03
    528e:	5c 81       	ldd	r21, Y+4	; 0x04
    5290:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5294:	7b 01       	movw	r14, r22
    5296:	8c 01       	movw	r16, r24
    5298:	c2 01       	movw	r24, r4
    529a:	b1 01       	movw	r22, r2
    529c:	a4 01       	movw	r20, r8
    529e:	93 01       	movw	r18, r6
    52a0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    52a4:	a6 01       	movw	r20, r12
    52a6:	95 01       	movw	r18, r10
    52a8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    52ac:	9b 01       	movw	r18, r22
    52ae:	ac 01       	movw	r20, r24
    52b0:	c8 01       	movw	r24, r16
    52b2:	b7 01       	movw	r22, r14
    52b4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    52b8:	0e 94 35 61 	call	0xc26a	; 0xc26a <asin>
    52bc:	20 ee       	ldi	r18, 0xE0	; 224
    52be:	3e e2       	ldi	r19, 0x2E	; 46
    52c0:	45 e6       	ldi	r20, 0x65	; 101
    52c2:	52 e4       	ldi	r21, 0x42	; 66
    52c4:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
                        cos(latitude_rad)*cos(delta_prime_rad)*cos(deg2rad(h_prime))));
}
    52c8:	28 96       	adiw	r28, 0x08	; 8
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	f8 94       	cli
    52ce:	de bf       	out	0x3e, r29	; 62
    52d0:	0f be       	out	0x3f, r0	; 63
    52d2:	cd bf       	out	0x3d, r28	; 61
    52d4:	cf 91       	pop	r28
    52d6:	df 91       	pop	r29
    52d8:	1f 91       	pop	r17
    52da:	0f 91       	pop	r16
    52dc:	ff 90       	pop	r15
    52de:	ef 90       	pop	r14
    52e0:	df 90       	pop	r13
    52e2:	cf 90       	pop	r12
    52e4:	bf 90       	pop	r11
    52e6:	af 90       	pop	r10
    52e8:	9f 90       	pop	r9
    52ea:	8f 90       	pop	r8
    52ec:	7f 90       	pop	r7
    52ee:	6f 90       	pop	r6
    52f0:	5f 90       	pop	r5
    52f2:	4f 90       	pop	r4
    52f4:	3f 90       	pop	r3
    52f6:	2f 90       	pop	r2
    52f8:	08 95       	ret

000052fa <topocentric_elevation_angle>:
{
    return h - delta_alpha;
}

double topocentric_elevation_angle(double latitude, double delta_prime, double h_prime)
{
    52fa:	2f 92       	push	r2
    52fc:	3f 92       	push	r3
    52fe:	4f 92       	push	r4
    5300:	5f 92       	push	r5
    5302:	6f 92       	push	r6
    5304:	7f 92       	push	r7
    5306:	8f 92       	push	r8
    5308:	9f 92       	push	r9
    530a:	af 92       	push	r10
    530c:	bf 92       	push	r11
    530e:	cf 92       	push	r12
    5310:	df 92       	push	r13
    5312:	ef 92       	push	r14
    5314:	ff 92       	push	r15
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	df 93       	push	r29
    531c:	cf 93       	push	r28
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
    5322:	28 97       	sbiw	r28, 0x08	; 8
    5324:	0f b6       	in	r0, 0x3f	; 63
    5326:	f8 94       	cli
    5328:	de bf       	out	0x3e, r29	; 62
    532a:	0f be       	out	0x3f, r0	; 63
    532c:	cd bf       	out	0x3d, r28	; 61
    532e:	39 01       	movw	r6, r18
    5330:	4a 01       	movw	r8, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    5332:	25 e3       	ldi	r18, 0x35	; 53
    5334:	3a ef       	ldi	r19, 0xFA	; 250
    5336:	4e e8       	ldi	r20, 0x8E	; 142
    5338:	5c e3       	ldi	r21, 0x3C	; 60
    533a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    533e:	5b 01       	movw	r10, r22
    5340:	6c 01       	movw	r12, r24
double topocentric_elevation_angle(double latitude, double delta_prime, double h_prime)
{
    double lat_rad         = deg2rad(latitude);
    double delta_prime_rad = deg2rad(delta_prime);

    return rad2deg(asin(sin(lat_rad)*sin(delta_prime_rad) +
    5342:	c4 01       	movw	r24, r8
    5344:	b3 01       	movw	r22, r6
    5346:	25 e3       	ldi	r18, 0x35	; 53
    5348:	3a ef       	ldi	r19, 0xFA	; 250
    534a:	4e e8       	ldi	r20, 0x8E	; 142
    534c:	5c e3       	ldi	r21, 0x3C	; 60
    534e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5352:	3b 01       	movw	r6, r22
    5354:	4c 01       	movw	r8, r24
    5356:	b5 01       	movw	r22, r10
    5358:	c6 01       	movw	r24, r12
    535a:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    535e:	6d 83       	std	Y+5, r22	; 0x05
    5360:	7e 83       	std	Y+6, r23	; 0x06
    5362:	8f 83       	std	Y+7, r24	; 0x07
    5364:	98 87       	std	Y+8, r25	; 0x08
    5366:	b3 01       	movw	r22, r6
    5368:	c4 01       	movw	r24, r8
    536a:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    536e:	69 83       	std	Y+1, r22	; 0x01
    5370:	7a 83       	std	Y+2, r23	; 0x02
    5372:	8b 83       	std	Y+3, r24	; 0x03
    5374:	9c 83       	std	Y+4, r25	; 0x04
    5376:	b5 01       	movw	r22, r10
    5378:	c6 01       	movw	r24, r12
    537a:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    537e:	1b 01       	movw	r2, r22
    5380:	2c 01       	movw	r4, r24
    5382:	b3 01       	movw	r22, r6
    5384:	c4 01       	movw	r24, r8
    5386:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    538a:	3b 01       	movw	r6, r22
    538c:	4c 01       	movw	r8, r24
    538e:	c8 01       	movw	r24, r16
    5390:	b7 01       	movw	r22, r14
    5392:	25 e3       	ldi	r18, 0x35	; 53
    5394:	3a ef       	ldi	r19, 0xFA	; 250
    5396:	4e e8       	ldi	r20, 0x8E	; 142
    5398:	5c e3       	ldi	r21, 0x3C	; 60
    539a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    539e:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    53a2:	5b 01       	movw	r10, r22
    53a4:	6c 01       	movw	r12, r24
    53a6:	6d 81       	ldd	r22, Y+5	; 0x05
    53a8:	7e 81       	ldd	r23, Y+6	; 0x06
    53aa:	8f 81       	ldd	r24, Y+7	; 0x07
    53ac:	98 85       	ldd	r25, Y+8	; 0x08
    53ae:	29 81       	ldd	r18, Y+1	; 0x01
    53b0:	3a 81       	ldd	r19, Y+2	; 0x02
    53b2:	4b 81       	ldd	r20, Y+3	; 0x03
    53b4:	5c 81       	ldd	r21, Y+4	; 0x04
    53b6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    53ba:	7b 01       	movw	r14, r22
    53bc:	8c 01       	movw	r16, r24
    53be:	c2 01       	movw	r24, r4
    53c0:	b1 01       	movw	r22, r2
    53c2:	a4 01       	movw	r20, r8
    53c4:	93 01       	movw	r18, r6
    53c6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    53ca:	a6 01       	movw	r20, r12
    53cc:	95 01       	movw	r18, r10
    53ce:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    53d2:	9b 01       	movw	r18, r22
    53d4:	ac 01       	movw	r20, r24
    53d6:	c8 01       	movw	r24, r16
    53d8:	b7 01       	movw	r22, r14
    53da:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    53de:	0e 94 35 61 	call	0xc26a	; 0xc26a <asin>
    53e2:	20 ee       	ldi	r18, 0xE0	; 224
    53e4:	3e e2       	ldi	r19, 0x2E	; 46
    53e6:	45 e6       	ldi	r20, 0x65	; 101
    53e8:	52 e4       	ldi	r21, 0x42	; 66
    53ea:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
                        cos(lat_rad)*cos(delta_prime_rad) * cos(deg2rad(h_prime))));
}
    53ee:	28 96       	adiw	r28, 0x08	; 8
    53f0:	0f b6       	in	r0, 0x3f	; 63
    53f2:	f8 94       	cli
    53f4:	de bf       	out	0x3e, r29	; 62
    53f6:	0f be       	out	0x3f, r0	; 63
    53f8:	cd bf       	out	0x3d, r28	; 61
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	1f 91       	pop	r17
    5400:	0f 91       	pop	r16
    5402:	ff 90       	pop	r15
    5404:	ef 90       	pop	r14
    5406:	df 90       	pop	r13
    5408:	cf 90       	pop	r12
    540a:	bf 90       	pop	r11
    540c:	af 90       	pop	r10
    540e:	9f 90       	pop	r9
    5410:	8f 90       	pop	r8
    5412:	7f 90       	pop	r7
    5414:	6f 90       	pop	r6
    5416:	5f 90       	pop	r5
    5418:	4f 90       	pop	r4
    541a:	3f 90       	pop	r3
    541c:	2f 90       	pop	r2
    541e:	08 95       	ret

00005420 <geocentric_sun_declination>:
    return limit_degrees(rad2deg(atan2(sin(lamda_rad)*cos(epsilon_rad) -
                                       tan(deg2rad(beta))*sin(epsilon_rad), cos(lamda_rad))));
}

double geocentric_sun_declination(double beta, double epsilon, double lamda)
{
    5420:	2f 92       	push	r2
    5422:	3f 92       	push	r3
    5424:	4f 92       	push	r4
    5426:	5f 92       	push	r5
    5428:	6f 92       	push	r6
    542a:	7f 92       	push	r7
    542c:	8f 92       	push	r8
    542e:	9f 92       	push	r9
    5430:	af 92       	push	r10
    5432:	bf 92       	push	r11
    5434:	cf 92       	push	r12
    5436:	df 92       	push	r13
    5438:	ef 92       	push	r14
    543a:	ff 92       	push	r15
    543c:	0f 93       	push	r16
    543e:	1f 93       	push	r17
    5440:	df 93       	push	r29
    5442:	cf 93       	push	r28
    5444:	cd b7       	in	r28, 0x3d	; 61
    5446:	de b7       	in	r29, 0x3e	; 62
    5448:	28 97       	sbiw	r28, 0x08	; 8
    544a:	0f b6       	in	r0, 0x3f	; 63
    544c:	f8 94       	cli
    544e:	de bf       	out	0x3e, r29	; 62
    5450:	0f be       	out	0x3f, r0	; 63
    5452:	cd bf       	out	0x3d, r28	; 61
    5454:	39 01       	movw	r6, r18
    5456:	4a 01       	movw	r8, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    5458:	25 e3       	ldi	r18, 0x35	; 53
    545a:	3a ef       	ldi	r19, 0xFA	; 250
    545c:	4e e8       	ldi	r20, 0x8E	; 142
    545e:	5c e3       	ldi	r21, 0x3C	; 60
    5460:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5464:	5b 01       	movw	r10, r22
    5466:	6c 01       	movw	r12, r24
double geocentric_sun_declination(double beta, double epsilon, double lamda)
{
    double beta_rad    = deg2rad(beta);
    double epsilon_rad = deg2rad(epsilon);

    return rad2deg(asin(sin(beta_rad)*cos(epsilon_rad) +
    5468:	c4 01       	movw	r24, r8
    546a:	b3 01       	movw	r22, r6
    546c:	25 e3       	ldi	r18, 0x35	; 53
    546e:	3a ef       	ldi	r19, 0xFA	; 250
    5470:	4e e8       	ldi	r20, 0x8E	; 142
    5472:	5c e3       	ldi	r21, 0x3C	; 60
    5474:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5478:	3b 01       	movw	r6, r22
    547a:	4c 01       	movw	r8, r24
    547c:	b5 01       	movw	r22, r10
    547e:	c6 01       	movw	r24, r12
    5480:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5484:	6d 83       	std	Y+5, r22	; 0x05
    5486:	7e 83       	std	Y+6, r23	; 0x06
    5488:	8f 83       	std	Y+7, r24	; 0x07
    548a:	98 87       	std	Y+8, r25	; 0x08
    548c:	b3 01       	movw	r22, r6
    548e:	c4 01       	movw	r24, r8
    5490:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5494:	69 83       	std	Y+1, r22	; 0x01
    5496:	7a 83       	std	Y+2, r23	; 0x02
    5498:	8b 83       	std	Y+3, r24	; 0x03
    549a:	9c 83       	std	Y+4, r25	; 0x04
    549c:	b5 01       	movw	r22, r10
    549e:	c6 01       	movw	r24, r12
    54a0:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    54a4:	1b 01       	movw	r2, r22
    54a6:	2c 01       	movw	r4, r24
    54a8:	b3 01       	movw	r22, r6
    54aa:	c4 01       	movw	r24, r8
    54ac:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    54b0:	3b 01       	movw	r6, r22
    54b2:	4c 01       	movw	r8, r24
    54b4:	c8 01       	movw	r24, r16
    54b6:	b7 01       	movw	r22, r14
    54b8:	25 e3       	ldi	r18, 0x35	; 53
    54ba:	3a ef       	ldi	r19, 0xFA	; 250
    54bc:	4e e8       	ldi	r20, 0x8E	; 142
    54be:	5c e3       	ldi	r21, 0x3C	; 60
    54c0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    54c4:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    54c8:	5b 01       	movw	r10, r22
    54ca:	6c 01       	movw	r12, r24
    54cc:	6d 81       	ldd	r22, Y+5	; 0x05
    54ce:	7e 81       	ldd	r23, Y+6	; 0x06
    54d0:	8f 81       	ldd	r24, Y+7	; 0x07
    54d2:	98 85       	ldd	r25, Y+8	; 0x08
    54d4:	29 81       	ldd	r18, Y+1	; 0x01
    54d6:	3a 81       	ldd	r19, Y+2	; 0x02
    54d8:	4b 81       	ldd	r20, Y+3	; 0x03
    54da:	5c 81       	ldd	r21, Y+4	; 0x04
    54dc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    54e0:	7b 01       	movw	r14, r22
    54e2:	8c 01       	movw	r16, r24
    54e4:	c2 01       	movw	r24, r4
    54e6:	b1 01       	movw	r22, r2
    54e8:	a4 01       	movw	r20, r8
    54ea:	93 01       	movw	r18, r6
    54ec:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    54f0:	a6 01       	movw	r20, r12
    54f2:	95 01       	movw	r18, r10
    54f4:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    54f8:	9b 01       	movw	r18, r22
    54fa:	ac 01       	movw	r20, r24
    54fc:	c8 01       	movw	r24, r16
    54fe:	b7 01       	movw	r22, r14
    5500:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5504:	0e 94 35 61 	call	0xc26a	; 0xc26a <asin>
    5508:	20 ee       	ldi	r18, 0xE0	; 224
    550a:	3e e2       	ldi	r19, 0x2E	; 46
    550c:	45 e6       	ldi	r20, 0x65	; 101
    550e:	52 e4       	ldi	r21, 0x42	; 66
    5510:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
                        cos(beta_rad)*sin(epsilon_rad)*sin(deg2rad(lamda))));
}
    5514:	28 96       	adiw	r28, 0x08	; 8
    5516:	0f b6       	in	r0, 0x3f	; 63
    5518:	f8 94       	cli
    551a:	de bf       	out	0x3e, r29	; 62
    551c:	0f be       	out	0x3f, r0	; 63
    551e:	cd bf       	out	0x3d, r28	; 61
    5520:	cf 91       	pop	r28
    5522:	df 91       	pop	r29
    5524:	1f 91       	pop	r17
    5526:	0f 91       	pop	r16
    5528:	ff 90       	pop	r15
    552a:	ef 90       	pop	r14
    552c:	df 90       	pop	r13
    552e:	cf 90       	pop	r12
    5530:	bf 90       	pop	r11
    5532:	af 90       	pop	r10
    5534:	9f 90       	pop	r9
    5536:	8f 90       	pop	r8
    5538:	7f 90       	pop	r7
    553a:	6f 90       	pop	r6
    553c:	5f 90       	pop	r5
    553e:	4f 90       	pop	r4
    5540:	3f 90       	pop	r3
    5542:	2f 90       	pop	r2
    5544:	08 95       	ret

00005546 <surface_incidence_angle>:
    return azimuth180 + 180.0;
}

double surface_incidence_angle(double zenith, double azimuth180, double azm_rotation,
	                                                             double slope)
{
    5546:	2f 92       	push	r2
    5548:	3f 92       	push	r3
    554a:	4f 92       	push	r4
    554c:	5f 92       	push	r5
    554e:	6f 92       	push	r6
    5550:	7f 92       	push	r7
    5552:	8f 92       	push	r8
    5554:	9f 92       	push	r9
    5556:	af 92       	push	r10
    5558:	bf 92       	push	r11
    555a:	cf 92       	push	r12
    555c:	df 92       	push	r13
    555e:	ef 92       	push	r14
    5560:	ff 92       	push	r15
    5562:	0f 93       	push	r16
    5564:	1f 93       	push	r17
    5566:	df 93       	push	r29
    5568:	cf 93       	push	r28
    556a:	cd b7       	in	r28, 0x3d	; 61
    556c:	de b7       	in	r29, 0x3e	; 62
    556e:	2c 97       	sbiw	r28, 0x0c	; 12
    5570:	0f b6       	in	r0, 0x3f	; 63
    5572:	f8 94       	cli
    5574:	de bf       	out	0x3e, r29	; 62
    5576:	0f be       	out	0x3f, r0	; 63
    5578:	cd bf       	out	0x3d, r28	; 61
    557a:	29 87       	std	Y+9, r18	; 0x09
    557c:	3a 87       	std	Y+10, r19	; 0x0a
    557e:	4b 87       	std	Y+11, r20	; 0x0b
    5580:	5c 87       	std	Y+12, r21	; 0x0c
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    5582:	25 e3       	ldi	r18, 0x35	; 53
    5584:	3a ef       	ldi	r19, 0xFA	; 250
    5586:	4e e8       	ldi	r20, 0x8E	; 142
    5588:	5c e3       	ldi	r21, 0x3C	; 60
    558a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    558e:	3b 01       	movw	r6, r22
    5590:	4c 01       	movw	r8, r24
	                                                             double slope)
{
    double zenith_rad = deg2rad(zenith);
    double slope_rad  = deg2rad(slope);

    return rad2deg(acos(cos(zenith_rad)*cos(slope_rad)  +
    5592:	c6 01       	movw	r24, r12
    5594:	b5 01       	movw	r22, r10
    5596:	25 e3       	ldi	r18, 0x35	; 53
    5598:	3a ef       	ldi	r19, 0xFA	; 250
    559a:	4e e8       	ldi	r20, 0x8E	; 142
    559c:	5c e3       	ldi	r21, 0x3C	; 60
    559e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    55a2:	5b 01       	movw	r10, r22
    55a4:	6c 01       	movw	r12, r24
    55a6:	b3 01       	movw	r22, r6
    55a8:	c4 01       	movw	r24, r8
    55aa:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    55ae:	6d 83       	std	Y+5, r22	; 0x05
    55b0:	7e 83       	std	Y+6, r23	; 0x06
    55b2:	8f 83       	std	Y+7, r24	; 0x07
    55b4:	98 87       	std	Y+8, r25	; 0x08
    55b6:	b5 01       	movw	r22, r10
    55b8:	c6 01       	movw	r24, r12
    55ba:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    55be:	69 83       	std	Y+1, r22	; 0x01
    55c0:	7a 83       	std	Y+2, r23	; 0x02
    55c2:	8b 83       	std	Y+3, r24	; 0x03
    55c4:	9c 83       	std	Y+4, r25	; 0x04
    55c6:	b5 01       	movw	r22, r10
    55c8:	c6 01       	movw	r24, r12
    55ca:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    55ce:	1b 01       	movw	r2, r22
    55d0:	2c 01       	movw	r4, r24
    55d2:	b3 01       	movw	r22, r6
    55d4:	c4 01       	movw	r24, r8
    55d6:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    55da:	3b 01       	movw	r6, r22
    55dc:	4c 01       	movw	r8, r24
    55de:	69 85       	ldd	r22, Y+9	; 0x09
    55e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    55e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    55e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    55e6:	a8 01       	movw	r20, r16
    55e8:	97 01       	movw	r18, r14
    55ea:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    55ee:	25 e3       	ldi	r18, 0x35	; 53
    55f0:	3a ef       	ldi	r19, 0xFA	; 250
    55f2:	4e e8       	ldi	r20, 0x8E	; 142
    55f4:	5c e3       	ldi	r21, 0x3C	; 60
    55f6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    55fa:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    55fe:	5b 01       	movw	r10, r22
    5600:	6c 01       	movw	r12, r24
    5602:	6d 81       	ldd	r22, Y+5	; 0x05
    5604:	7e 81       	ldd	r23, Y+6	; 0x06
    5606:	8f 81       	ldd	r24, Y+7	; 0x07
    5608:	98 85       	ldd	r25, Y+8	; 0x08
    560a:	29 81       	ldd	r18, Y+1	; 0x01
    560c:	3a 81       	ldd	r19, Y+2	; 0x02
    560e:	4b 81       	ldd	r20, Y+3	; 0x03
    5610:	5c 81       	ldd	r21, Y+4	; 0x04
    5612:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5616:	7b 01       	movw	r14, r22
    5618:	8c 01       	movw	r16, r24
    561a:	c2 01       	movw	r24, r4
    561c:	b1 01       	movw	r22, r2
    561e:	a4 01       	movw	r20, r8
    5620:	93 01       	movw	r18, r6
    5622:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5626:	a6 01       	movw	r20, r12
    5628:	95 01       	movw	r18, r10
    562a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    562e:	9b 01       	movw	r18, r22
    5630:	ac 01       	movw	r20, r24
    5632:	c8 01       	movw	r24, r16
    5634:	b7 01       	movw	r22, r14
    5636:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    563a:	0e 94 c2 60 	call	0xc184	; 0xc184 <acos>
    563e:	20 ee       	ldi	r18, 0xE0	; 224
    5640:	3e e2       	ldi	r19, 0x2E	; 46
    5642:	45 e6       	ldi	r20, 0x65	; 101
    5644:	52 e4       	ldi	r21, 0x42	; 66
    5646:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
                        sin(slope_rad )*sin(zenith_rad) * cos(deg2rad(azimuth180 - azm_rotation))));
}
    564a:	2c 96       	adiw	r28, 0x0c	; 12
    564c:	0f b6       	in	r0, 0x3f	; 63
    564e:	f8 94       	cli
    5650:	de bf       	out	0x3e, r29	; 62
    5652:	0f be       	out	0x3f, r0	; 63
    5654:	cd bf       	out	0x3d, r28	; 61
    5656:	cf 91       	pop	r28
    5658:	df 91       	pop	r29
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	ff 90       	pop	r15
    5660:	ef 90       	pop	r14
    5662:	df 90       	pop	r13
    5664:	cf 90       	pop	r12
    5666:	bf 90       	pop	r11
    5668:	af 90       	pop	r10
    566a:	9f 90       	pop	r9
    566c:	8f 90       	pop	r8
    566e:	7f 90       	pop	r7
    5670:	6f 90       	pop	r6
    5672:	5f 90       	pop	r5
    5674:	4f 90       	pop	r4
    5676:	3f 90       	pop	r3
    5678:	2f 90       	pop	r2
    567a:	08 95       	ret

0000567c <atmospheric_refraction_correction>:
                        cos(lat_rad)*cos(delta_prime_rad) * cos(deg2rad(h_prime))));
}

double atmospheric_refraction_correction(double pressure, double temperature,
	                                     double atmos_refract, double e0)
{
    567c:	2f 92       	push	r2
    567e:	3f 92       	push	r3
    5680:	4f 92       	push	r4
    5682:	5f 92       	push	r5
    5684:	6f 92       	push	r6
    5686:	7f 92       	push	r7
    5688:	8f 92       	push	r8
    568a:	9f 92       	push	r9
    568c:	af 92       	push	r10
    568e:	bf 92       	push	r11
    5690:	cf 92       	push	r12
    5692:	df 92       	push	r13
    5694:	ef 92       	push	r14
    5696:	ff 92       	push	r15
    5698:	0f 93       	push	r16
    569a:	1f 93       	push	r17
    569c:	3b 01       	movw	r6, r22
    569e:	4c 01       	movw	r8, r24
    56a0:	19 01       	movw	r2, r18
    56a2:	2a 01       	movw	r4, r20
    56a4:	c8 01       	movw	r24, r16
    56a6:	b7 01       	movw	r22, r14
    double del_e = 0;

    if (e0 >= -1*(SUN_RADIUS + atmos_refract))
    56a8:	28 ef       	ldi	r18, 0xF8	; 248
    56aa:	38 e8       	ldi	r19, 0x88	; 136
    56ac:	48 e8       	ldi	r20, 0x88	; 136
    56ae:	5e e3       	ldi	r21, 0x3E	; 62
    56b0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    56b4:	9b 01       	movw	r18, r22
    56b6:	ac 01       	movw	r20, r24
    56b8:	50 58       	subi	r21, 0x80	; 128
    56ba:	c6 01       	movw	r24, r12
    56bc:	b5 01       	movw	r22, r10
    56be:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    56c2:	87 ff       	sbrs	r24, 7
    56c4:	05 c0       	rjmp	.+10     	; 0x56d0 <atmospheric_refraction_correction+0x54>
    56c6:	e0 e0       	ldi	r30, 0x00	; 0
    56c8:	70 e0       	ldi	r23, 0x00	; 0
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	60 e0       	ldi	r22, 0x00	; 0
    56ce:	58 c0       	rjmp	.+176    	; 0x5780 <atmospheric_refraction_correction+0x104>
        del_e = (pressure / 1010.0) * (283.0 / (273.0 + temperature)) *
    56d0:	c6 01       	movw	r24, r12
    56d2:	b5 01       	movw	r22, r10
    56d4:	2f e1       	ldi	r18, 0x1F	; 31
    56d6:	35 e8       	ldi	r19, 0x85	; 133
    56d8:	43 ea       	ldi	r20, 0xA3	; 163
    56da:	50 e4       	ldi	r21, 0x40	; 64
    56dc:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    56e0:	9b 01       	movw	r18, r22
    56e2:	ac 01       	movw	r20, r24
    56e4:	6d ec       	ldi	r22, 0xCD	; 205
    56e6:	7c ec       	ldi	r23, 0xCC	; 204
    56e8:	84 e2       	ldi	r24, 0x24	; 36
    56ea:	91 e4       	ldi	r25, 0x41	; 65
    56ec:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    56f0:	9b 01       	movw	r18, r22
    56f2:	ac 01       	movw	r20, r24
    56f4:	c6 01       	movw	r24, r12
    56f6:	b5 01       	movw	r22, r10
    56f8:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    56fc:	25 e3       	ldi	r18, 0x35	; 53
    56fe:	3a ef       	ldi	r19, 0xFA	; 250
    5700:	4e e8       	ldi	r20, 0x8E	; 142
    5702:	5c e3       	ldi	r21, 0x3C	; 60
    5704:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5708:	0e 94 02 65 	call	0xca04	; 0xca04 <tan>
    570c:	5b 01       	movw	r10, r22
    570e:	6c 01       	movw	r12, r24
    5710:	c4 01       	movw	r24, r8
    5712:	b3 01       	movw	r22, r6
    5714:	20 e0       	ldi	r18, 0x00	; 0
    5716:	30 e8       	ldi	r19, 0x80	; 128
    5718:	4c e7       	ldi	r20, 0x7C	; 124
    571a:	54 e4       	ldi	r21, 0x44	; 68
    571c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    5720:	7b 01       	movw	r14, r22
    5722:	8c 01       	movw	r16, r24
    5724:	c2 01       	movw	r24, r4
    5726:	b1 01       	movw	r22, r2
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	30 e8       	ldi	r19, 0x80	; 128
    572c:	48 e8       	ldi	r20, 0x88	; 136
    572e:	53 e4       	ldi	r21, 0x43	; 67
    5730:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5734:	9b 01       	movw	r18, r22
    5736:	ac 01       	movw	r20, r24
    5738:	60 e0       	ldi	r22, 0x00	; 0
    573a:	70 e8       	ldi	r23, 0x80	; 128
    573c:	8d e8       	ldi	r24, 0x8D	; 141
    573e:	93 e4       	ldi	r25, 0x43	; 67
    5740:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    5744:	9b 01       	movw	r18, r22
    5746:	ac 01       	movw	r20, r24
    5748:	c8 01       	movw	r24, r16
    574a:	b7 01       	movw	r22, r14
    574c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5750:	2c e5       	ldi	r18, 0x5C	; 92
    5752:	3f e8       	ldi	r19, 0x8F	; 143
    5754:	42 e8       	ldi	r20, 0x82	; 130
    5756:	5f e3       	ldi	r21, 0x3F	; 63
    5758:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    575c:	7b 01       	movw	r14, r22
    575e:	8c 01       	movw	r16, r24
    5760:	c6 01       	movw	r24, r12
    5762:	b5 01       	movw	r22, r10
    5764:	20 e0       	ldi	r18, 0x00	; 0
    5766:	30 e0       	ldi	r19, 0x00	; 0
    5768:	40 e7       	ldi	r20, 0x70	; 112
    576a:	52 e4       	ldi	r21, 0x42	; 66
    576c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5770:	9b 01       	movw	r18, r22
    5772:	ac 01       	movw	r20, r24
    5774:	c8 01       	movw	r24, r16
    5776:	b7 01       	movw	r22, r14
    5778:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    577c:	e6 2f       	mov	r30, r22
    577e:	69 2f       	mov	r22, r25
                 1.02 / (60.0 * tan(deg2rad(e0 + 10.3/(e0 + 5.11))));

    return del_e;
}
    5780:	2e 2f       	mov	r18, r30
    5782:	37 2f       	mov	r19, r23
    5784:	48 2f       	mov	r20, r24
    5786:	56 2f       	mov	r21, r22
    5788:	b9 01       	movw	r22, r18
    578a:	ca 01       	movw	r24, r20
    578c:	1f 91       	pop	r17
    578e:	0f 91       	pop	r16
    5790:	ff 90       	pop	r15
    5792:	ef 90       	pop	r14
    5794:	df 90       	pop	r13
    5796:	cf 90       	pop	r12
    5798:	bf 90       	pop	r11
    579a:	af 90       	pop	r10
    579c:	9f 90       	pop	r9
    579e:	8f 90       	pop	r8
    57a0:	7f 90       	pop	r7
    57a2:	6f 90       	pop	r6
    57a4:	5f 90       	pop	r5
    57a6:	4f 90       	pop	r4
    57a8:	3f 90       	pop	r3
    57aa:	2f 90       	pop	r2
    57ac:	08 95       	ret

000057ae <topocentric_azimuth_angle_neg180_180>:
{
    return 90.0 - e;
}

double topocentric_azimuth_angle_neg180_180(double h_prime, double latitude, double delta_prime)
{
    57ae:	2f 92       	push	r2
    57b0:	3f 92       	push	r3
    57b2:	4f 92       	push	r4
    57b4:	5f 92       	push	r5
    57b6:	6f 92       	push	r6
    57b8:	7f 92       	push	r7
    57ba:	8f 92       	push	r8
    57bc:	9f 92       	push	r9
    57be:	af 92       	push	r10
    57c0:	bf 92       	push	r11
    57c2:	cf 92       	push	r12
    57c4:	df 92       	push	r13
    57c6:	ef 92       	push	r14
    57c8:	ff 92       	push	r15
    57ca:	0f 93       	push	r16
    57cc:	1f 93       	push	r17
    57ce:	df 93       	push	r29
    57d0:	cf 93       	push	r28
    57d2:	cd b7       	in	r28, 0x3d	; 61
    57d4:	de b7       	in	r29, 0x3e	; 62
    57d6:	2c 97       	sbiw	r28, 0x0c	; 12
    57d8:	0f b6       	in	r0, 0x3f	; 63
    57da:	f8 94       	cli
    57dc:	de bf       	out	0x3e, r29	; 62
    57de:	0f be       	out	0x3f, r0	; 63
    57e0:	cd bf       	out	0x3d, r28	; 61
    57e2:	39 01       	movw	r6, r18
    57e4:	4a 01       	movw	r8, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    57e6:	25 e3       	ldi	r18, 0x35	; 53
    57e8:	3a ef       	ldi	r19, 0xFA	; 250
    57ea:	4e e8       	ldi	r20, 0x8E	; 142
    57ec:	5c e3       	ldi	r21, 0x3C	; 60
    57ee:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    57f2:	5b 01       	movw	r10, r22
    57f4:	6c 01       	movw	r12, r24
double topocentric_azimuth_angle_neg180_180(double h_prime, double latitude, double delta_prime)
{
    double h_prime_rad = deg2rad(h_prime);
    double lat_rad     = deg2rad(latitude);

    return rad2deg(atan2(sin(h_prime_rad),
    57f6:	c4 01       	movw	r24, r8
    57f8:	b3 01       	movw	r22, r6
    57fa:	25 e3       	ldi	r18, 0x35	; 53
    57fc:	3a ef       	ldi	r19, 0xFA	; 250
    57fe:	4e e8       	ldi	r20, 0x8E	; 142
    5800:	5c e3       	ldi	r21, 0x3C	; 60
    5802:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5806:	3b 01       	movw	r6, r22
    5808:	4c 01       	movw	r8, r24
    580a:	b5 01       	movw	r22, r10
    580c:	c6 01       	movw	r24, r12
    580e:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5812:	69 87       	std	Y+9, r22	; 0x09
    5814:	7a 87       	std	Y+10, r23	; 0x0a
    5816:	8b 87       	std	Y+11, r24	; 0x0b
    5818:	9c 87       	std	Y+12, r25	; 0x0c
    581a:	b5 01       	movw	r22, r10
    581c:	c6 01       	movw	r24, r12
    581e:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5822:	6d 83       	std	Y+5, r22	; 0x05
    5824:	7e 83       	std	Y+6, r23	; 0x06
    5826:	8f 83       	std	Y+7, r24	; 0x07
    5828:	98 87       	std	Y+8, r25	; 0x08
    582a:	b3 01       	movw	r22, r6
    582c:	c4 01       	movw	r24, r8
    582e:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5832:	69 83       	std	Y+1, r22	; 0x01
    5834:	7a 83       	std	Y+2, r23	; 0x02
    5836:	8b 83       	std	Y+3, r24	; 0x03
    5838:	9c 83       	std	Y+4, r25	; 0x04
    583a:	c8 01       	movw	r24, r16
    583c:	b7 01       	movw	r22, r14
    583e:	25 e3       	ldi	r18, 0x35	; 53
    5840:	3a ef       	ldi	r19, 0xFA	; 250
    5842:	4e e8       	ldi	r20, 0x8E	; 142
    5844:	5c e3       	ldi	r21, 0x3C	; 60
    5846:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    584a:	0e 94 02 65 	call	0xca04	; 0xca04 <tan>
    584e:	1b 01       	movw	r2, r22
    5850:	2c 01       	movw	r4, r24
    5852:	b3 01       	movw	r22, r6
    5854:	c4 01       	movw	r24, r8
    5856:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    585a:	5b 01       	movw	r10, r22
    585c:	6c 01       	movw	r12, r24
    585e:	6d 81       	ldd	r22, Y+5	; 0x05
    5860:	7e 81       	ldd	r23, Y+6	; 0x06
    5862:	8f 81       	ldd	r24, Y+7	; 0x07
    5864:	98 85       	ldd	r25, Y+8	; 0x08
    5866:	29 81       	ldd	r18, Y+1	; 0x01
    5868:	3a 81       	ldd	r19, Y+2	; 0x02
    586a:	4b 81       	ldd	r20, Y+3	; 0x03
    586c:	5c 81       	ldd	r21, Y+4	; 0x04
    586e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5872:	7b 01       	movw	r14, r22
    5874:	8c 01       	movw	r16, r24
    5876:	c2 01       	movw	r24, r4
    5878:	b1 01       	movw	r22, r2
    587a:	a6 01       	movw	r20, r12
    587c:	95 01       	movw	r18, r10
    587e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5882:	9b 01       	movw	r18, r22
    5884:	ac 01       	movw	r20, r24
    5886:	c8 01       	movw	r24, r16
    5888:	b7 01       	movw	r22, r14
    588a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    588e:	9b 01       	movw	r18, r22
    5890:	ac 01       	movw	r20, r24
    5892:	69 85       	ldd	r22, Y+9	; 0x09
    5894:	7a 85       	ldd	r23, Y+10	; 0x0a
    5896:	8b 85       	ldd	r24, Y+11	; 0x0b
    5898:	9c 85       	ldd	r25, Y+12	; 0x0c
    589a:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    589e:	20 ee       	ldi	r18, 0xE0	; 224
    58a0:	3e e2       	ldi	r19, 0x2E	; 46
    58a2:	45 e6       	ldi	r20, 0x65	; 101
    58a4:	52 e4       	ldi	r21, 0x42	; 66
    58a6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
                         cos(h_prime_rad)*sin(lat_rad) - tan(deg2rad(delta_prime))*cos(lat_rad)));
}
    58aa:	2c 96       	adiw	r28, 0x0c	; 12
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
    58b6:	cf 91       	pop	r28
    58b8:	df 91       	pop	r29
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	ff 90       	pop	r15
    58c0:	ef 90       	pop	r14
    58c2:	df 90       	pop	r13
    58c4:	cf 90       	pop	r12
    58c6:	bf 90       	pop	r11
    58c8:	af 90       	pop	r10
    58ca:	9f 90       	pop	r9
    58cc:	8f 90       	pop	r8
    58ce:	7f 90       	pop	r7
    58d0:	6f 90       	pop	r6
    58d2:	5f 90       	pop	r5
    58d4:	4f 90       	pop	r4
    58d6:	3f 90       	pop	r3
    58d8:	2f 90       	pop	r2
    58da:	08 95       	ret

000058dc <sun_right_ascension_parallax_and_topocentric_dec>:
    return 8.794 / (3600.0 * r);
}

void sun_right_ascension_parallax_and_topocentric_dec(double latitude, double elevation,
	           double xi, double h, double delta, double *delta_alpha, double *delta_prime)
{
    58dc:	2f 92       	push	r2
    58de:	3f 92       	push	r3
    58e0:	4f 92       	push	r4
    58e2:	5f 92       	push	r5
    58e4:	6f 92       	push	r6
    58e6:	7f 92       	push	r7
    58e8:	8f 92       	push	r8
    58ea:	9f 92       	push	r9
    58ec:	af 92       	push	r10
    58ee:	bf 92       	push	r11
    58f0:	cf 92       	push	r12
    58f2:	df 92       	push	r13
    58f4:	ef 92       	push	r14
    58f6:	ff 92       	push	r15
    58f8:	0f 93       	push	r16
    58fa:	1f 93       	push	r17
    58fc:	df 93       	push	r29
    58fe:	cf 93       	push	r28
    5900:	cd b7       	in	r28, 0x3d	; 61
    5902:	de b7       	in	r29, 0x3e	; 62
    5904:	a4 97       	sbiw	r28, 0x24	; 36
    5906:	0f b6       	in	r0, 0x3f	; 63
    5908:	f8 94       	cli
    590a:	de bf       	out	0x3e, r29	; 62
    590c:	0f be       	out	0x3f, r0	; 63
    590e:	cd bf       	out	0x3d, r28	; 61
    5910:	29 a3       	std	Y+33, r18	; 0x21
    5912:	3a a3       	std	Y+34, r19	; 0x22
    5914:	4b a3       	std	Y+35, r20	; 0x23
    5916:	5c a3       	std	Y+36, r21	; 0x24
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    5918:	25 e3       	ldi	r18, 0x35	; 53
    591a:	3a ef       	ldi	r19, 0xFA	; 250
    591c:	4e e8       	ldi	r20, 0x8E	; 142
    591e:	5c e3       	ldi	r21, 0x3C	; 60
    5920:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5924:	3b 01       	movw	r6, r22
    5926:	4c 01       	movw	r8, r24
    double delta_alpha_rad;
    double lat_rad   = deg2rad(latitude);
    double xi_rad    = deg2rad(xi);
    double h_rad     = deg2rad(h);
    double delta_rad = deg2rad(delta);
    double u = atan(0.99664719 * tan(lat_rad));
    5928:	c6 01       	movw	r24, r12
    592a:	b5 01       	movw	r22, r10
    592c:	25 e3       	ldi	r18, 0x35	; 53
    592e:	3a ef       	ldi	r19, 0xFA	; 250
    5930:	4e e8       	ldi	r20, 0x8E	; 142
    5932:	5c e3       	ldi	r21, 0x3C	; 60
    5934:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5938:	5b 01       	movw	r10, r22
    593a:	6c 01       	movw	r12, r24
    593c:	69 ad       	ldd	r22, Y+57	; 0x39
    593e:	7a ad       	ldd	r23, Y+58	; 0x3a
    5940:	8b ad       	ldd	r24, Y+59	; 0x3b
    5942:	9c ad       	ldd	r25, Y+60	; 0x3c
    5944:	25 e3       	ldi	r18, 0x35	; 53
    5946:	3a ef       	ldi	r19, 0xFA	; 250
    5948:	4e e8       	ldi	r20, 0x8E	; 142
    594a:	5c e3       	ldi	r21, 0x3C	; 60
    594c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5950:	1b 01       	movw	r2, r22
    5952:	2c 01       	movw	r4, r24
    5954:	b3 01       	movw	r22, r6
    5956:	c4 01       	movw	r24, r8
    5958:	0e 94 02 65 	call	0xca04	; 0xca04 <tan>
    595c:	25 e4       	ldi	r18, 0x45	; 69
    595e:	34 e2       	ldi	r19, 0x24	; 36
    5960:	4f e7       	ldi	r20, 0x7F	; 127
    5962:	5f e3       	ldi	r21, 0x3F	; 63
    5964:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5968:	0e 94 86 61 	call	0xc30c	; 0xc30c <atan>
    596c:	69 83       	std	Y+1, r22	; 0x01
    596e:	7a 83       	std	Y+2, r23	; 0x02
    5970:	8b 83       	std	Y+3, r24	; 0x03
    5972:	9c 83       	std	Y+4, r25	; 0x04
    double y = 0.99664719 * sin(u) + elevation*sin(lat_rad)/6378140.0;
    5974:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5978:	6d 8f       	std	Y+29, r22	; 0x1d
    597a:	7e 8f       	std	Y+30, r23	; 0x1e
    597c:	8f 8f       	std	Y+31, r24	; 0x1f
    597e:	98 a3       	std	Y+32, r25	; 0x20
    5980:	b3 01       	movw	r22, r6
    5982:	c4 01       	movw	r24, r8
    5984:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5988:	69 8f       	std	Y+25, r22	; 0x19
    598a:	7a 8f       	std	Y+26, r23	; 0x1a
    598c:	8b 8f       	std	Y+27, r24	; 0x1b
    598e:	9c 8f       	std	Y+28, r25	; 0x1c
    double x =              cos(u) + elevation*cos(lat_rad)/6378140.0;
    5990:	69 81       	ldd	r22, Y+1	; 0x01
    5992:	7a 81       	ldd	r23, Y+2	; 0x02
    5994:	8b 81       	ldd	r24, Y+3	; 0x03
    5996:	9c 81       	ldd	r25, Y+4	; 0x04
    5998:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    599c:	6d 8b       	std	Y+21, r22	; 0x15
    599e:	7e 8b       	std	Y+22, r23	; 0x16
    59a0:	8f 8b       	std	Y+23, r24	; 0x17
    59a2:	98 8f       	std	Y+24, r25	; 0x18
    59a4:	b3 01       	movw	r22, r6
    59a6:	c4 01       	movw	r24, r8
    59a8:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    59ac:	9b 01       	movw	r18, r22
    59ae:	ac 01       	movw	r20, r24
    59b0:	69 a1       	ldd	r22, Y+33	; 0x21
    59b2:	7a a1       	ldd	r23, Y+34	; 0x22
    59b4:	8b a1       	ldd	r24, Y+35	; 0x23
    59b6:	9c a1       	ldd	r25, Y+36	; 0x24
    59b8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    59bc:	28 e3       	ldi	r18, 0x38	; 56
    59be:	35 ea       	ldi	r19, 0xA5	; 165
    59c0:	42 ec       	ldi	r20, 0xC2	; 194
    59c2:	5a e4       	ldi	r21, 0x4A	; 74
    59c4:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    59c8:	9b 01       	movw	r18, r22
    59ca:	ac 01       	movw	r20, r24
    59cc:	6d 89       	ldd	r22, Y+21	; 0x15
    59ce:	7e 89       	ldd	r23, Y+22	; 0x16
    59d0:	8f 89       	ldd	r24, Y+23	; 0x17
    59d2:	98 8d       	ldd	r25, Y+24	; 0x18
    59d4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    59d8:	3b 01       	movw	r6, r22
    59da:	4c 01       	movw	r8, r24

    delta_alpha_rad =      atan2(                - x*sin(xi_rad) *sin(h_rad),
    59dc:	c8 01       	movw	r24, r16
    59de:	b7 01       	movw	r22, r14
    59e0:	25 e3       	ldi	r18, 0x35	; 53
    59e2:	3a ef       	ldi	r19, 0xFA	; 250
    59e4:	4e e8       	ldi	r20, 0x8E	; 142
    59e6:	5c e3       	ldi	r21, 0x3C	; 60
    59e8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    59ec:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    59f0:	69 8b       	std	Y+17, r22	; 0x11
    59f2:	7a 8b       	std	Y+18, r23	; 0x12
    59f4:	8b 8b       	std	Y+19, r24	; 0x13
    59f6:	9c 8b       	std	Y+20, r25	; 0x14
    59f8:	b5 01       	movw	r22, r10
    59fa:	c6 01       	movw	r24, r12
    59fc:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5a00:	6d 87       	std	Y+13, r22	; 0x0d
    5a02:	7e 87       	std	Y+14, r23	; 0x0e
    5a04:	8f 87       	std	Y+15, r24	; 0x0f
    5a06:	98 8b       	std	Y+16, r25	; 0x10
    5a08:	b1 01       	movw	r22, r2
    5a0a:	c2 01       	movw	r24, r4
    5a0c:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5a10:	69 87       	std	Y+9, r22	; 0x09
    5a12:	7a 87       	std	Y+10, r23	; 0x0a
    5a14:	8b 87       	std	Y+11, r24	; 0x0b
    5a16:	9c 87       	std	Y+12, r25	; 0x0c
    5a18:	b5 01       	movw	r22, r10
    5a1a:	c6 01       	movw	r24, r12
    5a1c:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5a20:	7b 01       	movw	r14, r22
    5a22:	8c 01       	movw	r16, r24
    5a24:	c4 01       	movw	r24, r8
    5a26:	b3 01       	movw	r22, r6
    5a28:	29 89       	ldd	r18, Y+17	; 0x11
    5a2a:	3a 89       	ldd	r19, Y+18	; 0x12
    5a2c:	4b 89       	ldd	r20, Y+19	; 0x13
    5a2e:	5c 89       	ldd	r21, Y+20	; 0x14
    5a30:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5a34:	a8 01       	movw	r20, r16
    5a36:	97 01       	movw	r18, r14
    5a38:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5a3c:	9b 01       	movw	r18, r22
    5a3e:	ac 01       	movw	r20, r24
    5a40:	69 85       	ldd	r22, Y+9	; 0x09
    5a42:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a44:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a46:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a48:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    5a4c:	7b 01       	movw	r14, r22
    5a4e:	8c 01       	movw	r16, r24
    5a50:	97 fa       	bst	r9, 7
    5a52:	90 94       	com	r9
    5a54:	97 f8       	bld	r9, 7
    5a56:	90 94       	com	r9
    5a58:	c4 01       	movw	r24, r8
    5a5a:	b3 01       	movw	r22, r6
    5a5c:	29 89       	ldd	r18, Y+17	; 0x11
    5a5e:	3a 89       	ldd	r19, Y+18	; 0x12
    5a60:	4b 89       	ldd	r20, Y+19	; 0x13
    5a62:	5c 89       	ldd	r21, Y+20	; 0x14
    5a64:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5a68:	2d 85       	ldd	r18, Y+13	; 0x0d
    5a6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    5a6c:	4f 85       	ldd	r20, Y+15	; 0x0f
    5a6e:	58 89       	ldd	r21, Y+16	; 0x10
    5a70:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5a74:	97 01       	movw	r18, r14
    5a76:	a8 01       	movw	r20, r16
    5a78:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    5a7c:	6d 83       	std	Y+5, r22	; 0x05
    5a7e:	7e 83       	std	Y+6, r23	; 0x06
    5a80:	8f 83       	std	Y+7, r24	; 0x07
    5a82:	98 87       	std	Y+8, r25	; 0x08
                                  cos(delta_rad) - x*sin(xi_rad) *cos(h_rad));

    *delta_prime = rad2deg(atan2((sin(delta_rad) - y*sin(xi_rad))*cos(delta_alpha_rad),
    5a84:	b1 01       	movw	r22, r2
    5a86:	c2 01       	movw	r24, r4
    5a88:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    5a8c:	3b 01       	movw	r6, r22
    5a8e:	4c 01       	movw	r8, r24
    5a90:	6d 81       	ldd	r22, Y+5	; 0x05
    5a92:	7e 81       	ldd	r23, Y+6	; 0x06
    5a94:	8f 81       	ldd	r24, Y+7	; 0x07
    5a96:	98 85       	ldd	r25, Y+8	; 0x08
    5a98:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5a9c:	1b 01       	movw	r2, r22
    5a9e:	2c 01       	movw	r4, r24
    5aa0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5aa2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    5aa8:	25 e4       	ldi	r18, 0x45	; 69
    5aaa:	34 e2       	ldi	r19, 0x24	; 36
    5aac:	4f e7       	ldi	r20, 0x7F	; 127
    5aae:	5f e3       	ldi	r21, 0x3F	; 63
    5ab0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5ab4:	5b 01       	movw	r10, r22
    5ab6:	6c 01       	movw	r12, r24
    5ab8:	69 a1       	ldd	r22, Y+33	; 0x21
    5aba:	7a a1       	ldd	r23, Y+34	; 0x22
    5abc:	8b a1       	ldd	r24, Y+35	; 0x23
    5abe:	9c a1       	ldd	r25, Y+36	; 0x24
    5ac0:	29 8d       	ldd	r18, Y+25	; 0x19
    5ac2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5ac4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    5ac6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    5ac8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5acc:	28 e3       	ldi	r18, 0x38	; 56
    5ace:	35 ea       	ldi	r19, 0xA5	; 165
    5ad0:	42 ec       	ldi	r20, 0xC2	; 194
    5ad2:	5a e4       	ldi	r21, 0x4A	; 74
    5ad4:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    5ad8:	9b 01       	movw	r18, r22
    5ada:	ac 01       	movw	r20, r24
    5adc:	c6 01       	movw	r24, r12
    5ade:	b5 01       	movw	r22, r10
    5ae0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5ae4:	29 89       	ldd	r18, Y+17	; 0x11
    5ae6:	3a 89       	ldd	r19, Y+18	; 0x12
    5ae8:	4b 89       	ldd	r20, Y+19	; 0x13
    5aea:	5c 89       	ldd	r21, Y+20	; 0x14
    5aec:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5af0:	9b 01       	movw	r18, r22
    5af2:	ac 01       	movw	r20, r24
    5af4:	c4 01       	movw	r24, r8
    5af6:	b3 01       	movw	r22, r6
    5af8:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    5afc:	a2 01       	movw	r20, r4
    5afe:	91 01       	movw	r18, r2
    5b00:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5b04:	97 01       	movw	r18, r14
    5b06:	a8 01       	movw	r20, r16
    5b08:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    5b0c:	20 ee       	ldi	r18, 0xE0	; 224
    5b0e:	3e e2       	ldi	r19, 0x2E	; 46
    5b10:	45 e6       	ldi	r20, 0x65	; 101
    5b12:	52 e4       	ldi	r21, 0x42	; 66
    5b14:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5b18:	21 96       	adiw	r28, 0x01	; 1
    5b1a:	ee ad       	ldd	r30, Y+62	; 0x3e
    5b1c:	ff ad       	ldd	r31, Y+63	; 0x3f
    5b1e:	21 97       	sbiw	r28, 0x01	; 1
    5b20:	60 83       	st	Z, r22
    5b22:	71 83       	std	Z+1, r23	; 0x01
    5b24:	82 83       	std	Z+2, r24	; 0x02
    5b26:	93 83       	std	Z+3, r25	; 0x03
                                  cos(delta_rad) - x*sin(xi_rad) *cos(h_rad)));

    *delta_alpha = rad2deg(delta_alpha_rad);
    5b28:	6d 81       	ldd	r22, Y+5	; 0x05
    5b2a:	7e 81       	ldd	r23, Y+6	; 0x06
    5b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    5b2e:	98 85       	ldd	r25, Y+8	; 0x08
    5b30:	20 ee       	ldi	r18, 0xE0	; 224
    5b32:	3e e2       	ldi	r19, 0x2E	; 46
    5b34:	45 e6       	ldi	r20, 0x65	; 101
    5b36:	52 e4       	ldi	r21, 0x42	; 66
    5b38:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5b3c:	ed ad       	ldd	r30, Y+61	; 0x3d
    5b3e:	fe ad       	ldd	r31, Y+62	; 0x3e
    5b40:	60 83       	st	Z, r22
    5b42:	71 83       	std	Z+1, r23	; 0x01
    5b44:	82 83       	std	Z+2, r24	; 0x02
    5b46:	93 83       	std	Z+3, r25	; 0x03
}
    5b48:	a4 96       	adiw	r28, 0x24	; 36
    5b4a:	0f b6       	in	r0, 0x3f	; 63
    5b4c:	f8 94       	cli
    5b4e:	de bf       	out	0x3e, r29	; 62
    5b50:	0f be       	out	0x3f, r0	; 63
    5b52:	cd bf       	out	0x3d, r28	; 61
    5b54:	cf 91       	pop	r28
    5b56:	df 91       	pop	r29
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	ef 90       	pop	r14
    5b60:	df 90       	pop	r13
    5b62:	cf 90       	pop	r12
    5b64:	bf 90       	pop	r11
    5b66:	af 90       	pop	r10
    5b68:	9f 90       	pop	r9
    5b6a:	8f 90       	pop	r8
    5b6c:	7f 90       	pop	r7
    5b6e:	6f 90       	pop	r6
    5b70:	5f 90       	pop	r5
    5b72:	4f 90       	pop	r4
    5b74:	3f 90       	pop	r3
    5b76:	2f 90       	pop	r2
    5b78:	08 95       	ret

00005b7a <earth_values>:

    return sum;
}

double earth_values(double term_sum[], int count, double jme)
{
    5b7a:	6f 92       	push	r6
    5b7c:	7f 92       	push	r7
    5b7e:	8f 92       	push	r8
    5b80:	9f 92       	push	r9
    5b82:	af 92       	push	r10
    5b84:	bf 92       	push	r11
    5b86:	cf 92       	push	r12
    5b88:	df 92       	push	r13
    5b8a:	ef 92       	push	r14
    5b8c:	ff 92       	push	r15
    5b8e:	0f 93       	push	r16
    5b90:	1f 93       	push	r17
    5b92:	cf 93       	push	r28
    5b94:	df 93       	push	r29
    5b96:	3b 01       	movw	r6, r22
    5b98:	59 01       	movw	r10, r18
    5b9a:	6a 01       	movw	r12, r20
    5b9c:	4c 01       	movw	r8, r24
    5b9e:	c0 e0       	ldi	r28, 0x00	; 0
    5ba0:	d0 e0       	ldi	r29, 0x00	; 0
    5ba2:	0f 2e       	mov	r0, r31
    5ba4:	f0 e0       	ldi	r31, 0x00	; 0
    5ba6:	ef 2e       	mov	r14, r31
    5ba8:	f0 e0       	ldi	r31, 0x00	; 0
    5baa:	ff 2e       	mov	r15, r31
    5bac:	f0 e0       	ldi	r31, 0x00	; 0
    5bae:	0f 2f       	mov	r16, r31
    5bb0:	f0 e0       	ldi	r31, 0x00	; 0
    5bb2:	1f 2f       	mov	r17, r31
    5bb4:	f0 2d       	mov	r31, r0
    5bb6:	22 c0       	rjmp	.+68     	; 0x5bfc <earth_values+0x82>
    int i;
    double sum=0;

    for (i = 0; i < count; i++)
        sum += term_sum[i]*pow(jme, i);
    5bb8:	be 01       	movw	r22, r28
    5bba:	88 27       	eor	r24, r24
    5bbc:	77 fd       	sbrc	r23, 7
    5bbe:	80 95       	com	r24
    5bc0:	98 2f       	mov	r25, r24
    5bc2:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    5bc6:	9b 01       	movw	r18, r22
    5bc8:	ac 01       	movw	r20, r24
    5bca:	c6 01       	movw	r24, r12
    5bcc:	b5 01       	movw	r22, r10
    5bce:	0e 94 4b 64 	call	0xc896	; 0xc896 <pow>
    5bd2:	9b 01       	movw	r18, r22
    5bd4:	ac 01       	movw	r20, r24
    5bd6:	ca 01       	movw	r24, r20
    5bd8:	b9 01       	movw	r22, r18
    5bda:	f4 01       	movw	r30, r8
    5bdc:	21 91       	ld	r18, Z+
    5bde:	31 91       	ld	r19, Z+
    5be0:	41 91       	ld	r20, Z+
    5be2:	51 91       	ld	r21, Z+
    5be4:	4f 01       	movw	r8, r30
    5be6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5bea:	9b 01       	movw	r18, r22
    5bec:	ac 01       	movw	r20, r24
    5bee:	c8 01       	movw	r24, r16
    5bf0:	b7 01       	movw	r22, r14
    5bf2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5bf6:	7b 01       	movw	r14, r22
    5bf8:	8c 01       	movw	r16, r24
double earth_values(double term_sum[], int count, double jme)
{
    int i;
    double sum=0;

    for (i = 0; i < count; i++)
    5bfa:	21 96       	adiw	r28, 0x01	; 1
    5bfc:	c6 15       	cp	r28, r6
    5bfe:	d7 05       	cpc	r29, r7
    5c00:	dc f2       	brlt	.-74     	; 0x5bb8 <earth_values+0x3e>
    5c02:	c8 01       	movw	r24, r16
    5c04:	b7 01       	movw	r22, r14
    5c06:	20 e2       	ldi	r18, 0x20	; 32
    5c08:	3c eb       	ldi	r19, 0xBC	; 188
    5c0a:	4e eb       	ldi	r20, 0xBE	; 190
    5c0c:	5c e4       	ldi	r21, 0x4C	; 76
    5c0e:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
        sum += term_sum[i]*pow(jme, i);

    sum /= 1.0e8;

    return sum;
}
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	1f 91       	pop	r17
    5c18:	0f 91       	pop	r16
    5c1a:	ff 90       	pop	r15
    5c1c:	ef 90       	pop	r14
    5c1e:	df 90       	pop	r13
    5c20:	cf 90       	pop	r12
    5c22:	bf 90       	pop	r11
    5c24:	af 90       	pop	r10
    5c26:	9f 90       	pop	r9
    5c28:	8f 90       	pop	r8
    5c2a:	7f 90       	pop	r7
    5c2c:	6f 90       	pop	r6
    5c2e:	08 95       	ret

00005c30 <earth_radius_vector>:
    return rad2deg(earth_values(sum, B_COUNT, jme));

}

double earth_radius_vector(double jme)
{
    5c30:	2f 92       	push	r2
    5c32:	3f 92       	push	r3
    5c34:	4f 92       	push	r4
    5c36:	5f 92       	push	r5
    5c38:	6f 92       	push	r6
    5c3a:	7f 92       	push	r7
    5c3c:	8f 92       	push	r8
    5c3e:	9f 92       	push	r9
    5c40:	af 92       	push	r10
    5c42:	bf 92       	push	r11
    5c44:	cf 92       	push	r12
    5c46:	df 92       	push	r13
    5c48:	ef 92       	push	r14
    5c4a:	ff 92       	push	r15
    5c4c:	0f 93       	push	r16
    5c4e:	1f 93       	push	r17
    5c50:	df 93       	push	r29
    5c52:	cf 93       	push	r28
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
    5c58:	a4 97       	sbiw	r28, 0x24	; 36
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	69 a3       	std	Y+33, r22	; 0x21
    5c66:	7a a3       	std	Y+34, r23	; 0x22
    5c68:	8b a3       	std	Y+35, r24	; 0x23
    5c6a:	9c a3       	std	Y+36, r25	; 0x24
    5c6c:	2c e1       	ldi	r18, 0x1C	; 28
    5c6e:	32 e0       	ldi	r19, 0x02	; 2
    5c70:	3a 8f       	std	Y+26, r19	; 0x1a
    5c72:	29 8f       	std	Y+25, r18	; 0x19
    5c74:	ce 01       	movw	r24, r28
    5c76:	01 96       	adiw	r24, 0x01	; 1
    5c78:	98 8f       	std	Y+24, r25	; 0x18
    5c7a:	8f 8b       	std	Y+23, r24	; 0x17
    5c7c:	ec e5       	ldi	r30, 0x5C	; 92
    5c7e:	f5 e1       	ldi	r31, 0x15	; 21
    5c80:	fc 8f       	std	Y+28, r31	; 0x1c
    5c82:	eb 8f       	std	Y+27, r30	; 0x1b
    5c84:	66 c0       	rjmp	.+204    	; 0x5d52 <earth_radius_vector+0x122>
    {
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < r_subcount[i]; j++)
	        sum_epts += (double)pgm_read_dword(&(R_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(R_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(R_TERMS[i][j][TERM_C]))*jme);
    5c86:	ed 89       	ldd	r30, Y+21	; 0x15
    5c88:	fe 89       	ldd	r31, Y+22	; 0x16
    5c8a:	65 90       	lpm	r6, Z+
    5c8c:	75 90       	lpm	r7, Z+
    5c8e:	85 90       	lpm	r8, Z+
    5c90:	94 90       	lpm	r9, Z+
    5c92:	ed 89       	ldd	r30, Y+21	; 0x15
    5c94:	fe 89       	ldd	r31, Y+22	; 0x16
    5c96:	34 96       	adiw	r30, 0x04	; 4
    5c98:	65 91       	lpm	r22, Z+
    5c9a:	75 91       	lpm	r23, Z+
    5c9c:	85 91       	lpm	r24, Z+
    5c9e:	94 91       	lpm	r25, Z+
    5ca0:	ed 89       	ldd	r30, Y+21	; 0x15
    5ca2:	fe 89       	ldd	r31, Y+22	; 0x16
    5ca4:	38 96       	adiw	r30, 0x08	; 8
    5ca6:	e5 90       	lpm	r14, Z+
    5ca8:	f5 90       	lpm	r15, Z+
    5caa:	05 91       	lpm	r16, Z+
    5cac:	14 91       	lpm	r17, Z+
    5cae:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5cb2:	5b 01       	movw	r10, r22
    5cb4:	6c 01       	movw	r12, r24
    5cb6:	c8 01       	movw	r24, r16
    5cb8:	b7 01       	movw	r22, r14
    5cba:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5cbe:	29 a1       	ldd	r18, Y+33	; 0x21
    5cc0:	3a a1       	ldd	r19, Y+34	; 0x22
    5cc2:	4b a1       	ldd	r20, Y+35	; 0x23
    5cc4:	5c a1       	ldd	r21, Y+36	; 0x24
    5cc6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5cca:	9b 01       	movw	r18, r22
    5ccc:	ac 01       	movw	r20, r24
    5cce:	c6 01       	movw	r24, r12
    5cd0:	b5 01       	movw	r22, r10
    5cd2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5cd6:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5cda:	7b 01       	movw	r14, r22
    5cdc:	8c 01       	movw	r16, r24
    5cde:	c4 01       	movw	r24, r8
    5ce0:	b3 01       	movw	r22, r6
    5ce2:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5ce6:	a8 01       	movw	r20, r16
    5ce8:	97 01       	movw	r18, r14
    5cea:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5cee:	9b 01       	movw	r18, r22
    5cf0:	ac 01       	movw	r20, r24
    5cf2:	c2 01       	movw	r24, r4
    5cf4:	b1 01       	movw	r22, r2
    5cf6:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5cfa:	1b 01       	movw	r2, r22
    5cfc:	2c 01       	movw	r4, r24
    for (i = 0; i < R_COUNT; i++)
    {
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < r_subcount[i]; j++)
    5cfe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5d00:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5d02:	2f 5f       	subi	r18, 0xFF	; 255
    5d04:	3f 4f       	sbci	r19, 0xFF	; 255
    5d06:	3e 8f       	std	Y+30, r19	; 0x1e
    5d08:	2d 8f       	std	Y+29, r18	; 0x1d
    5d0a:	8d 89       	ldd	r24, Y+21	; 0x15
    5d0c:	9e 89       	ldd	r25, Y+22	; 0x16
    5d0e:	0c 96       	adiw	r24, 0x0c	; 12
    5d10:	9e 8b       	std	Y+22, r25	; 0x16
    5d12:	8d 8b       	std	Y+21, r24	; 0x15
    5d14:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5d16:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5d18:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5d1a:	38 a1       	ldd	r19, Y+32	; 0x20
    5d1c:	e2 17       	cp	r30, r18
    5d1e:	f3 07       	cpc	r31, r19
    5d20:	0c f4       	brge	.+2      	; 0x5d24 <earth_radius_vector+0xf4>
    5d22:	b1 cf       	rjmp	.-158    	; 0x5c86 <earth_radius_vector+0x56>
	        sum_epts += (double)pgm_read_dword(&(R_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(R_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(R_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
    5d24:	ef 89       	ldd	r30, Y+23	; 0x17
    5d26:	f8 8d       	ldd	r31, Y+24	; 0x18
    5d28:	21 92       	st	Z+, r2
    5d2a:	31 92       	st	Z+, r3
    5d2c:	41 92       	st	Z+, r4
    5d2e:	51 92       	st	Z+, r5
    5d30:	f8 8f       	std	Y+24, r31	; 0x18
    5d32:	ef 8b       	std	Y+23, r30	; 0x17
    5d34:	29 8d       	ldd	r18, Y+25	; 0x19
    5d36:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5d38:	2e 5f       	subi	r18, 0xFE	; 254
    5d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d3c:	3a 8f       	std	Y+26, r19	; 0x1a
    5d3e:	29 8f       	std	Y+25, r18	; 0x19
    5d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d44:	80 52       	subi	r24, 0x20	; 32
    5d46:	9e 4f       	sbci	r25, 0xFE	; 254
    5d48:	9c 8f       	std	Y+28, r25	; 0x1c
    5d4a:	8b 8f       	std	Y+27, r24	; 0x1b
double earth_radius_vector(double jme)
{
    double sum[R_COUNT];
    int i;

    for (i = 0; i < R_COUNT; i++)
    5d4c:	26 52       	subi	r18, 0x26	; 38
    5d4e:	32 40       	sbci	r19, 0x02	; 2
    5d50:	c1 f0       	breq	.+48     	; 0x5d82 <earth_radius_vector+0x152>
    {
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < r_subcount[i]; j++)
    5d52:	e9 8d       	ldd	r30, Y+25	; 0x19
    5d54:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5d56:	01 90       	ld	r0, Z+
    5d58:	f0 81       	ld	r31, Z
    5d5a:	e0 2d       	mov	r30, r0
    5d5c:	f8 a3       	std	Y+32, r31	; 0x20
    5d5e:	ef 8f       	std	Y+31, r30	; 0x1f
    5d60:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5d62:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5d64:	3e 8b       	std	Y+22, r19	; 0x16
    5d66:	2d 8b       	std	Y+21, r18	; 0x15
    5d68:	1e 8e       	std	Y+30, r1	; 0x1e
    5d6a:	1d 8e       	std	Y+29, r1	; 0x1d
    5d6c:	0f 2e       	mov	r0, r31
    5d6e:	f0 e0       	ldi	r31, 0x00	; 0
    5d70:	2f 2e       	mov	r2, r31
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	3f 2e       	mov	r3, r31
    5d76:	f0 e0       	ldi	r31, 0x00	; 0
    5d78:	4f 2e       	mov	r4, r31
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	5f 2e       	mov	r5, r31
    5d7e:	f0 2d       	mov	r31, r0
    5d80:	c9 cf       	rjmp	.-110    	; 0x5d14 <earth_radius_vector+0xe4>
	        sum_epts += (double)pgm_read_dword(&(R_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(R_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(R_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
	}
    return earth_values(sum, R_COUNT, jme);
    5d82:	ce 01       	movw	r24, r28
    5d84:	01 96       	adiw	r24, 0x01	; 1
    5d86:	65 e0       	ldi	r22, 0x05	; 5
    5d88:	70 e0       	ldi	r23, 0x00	; 0
    5d8a:	29 a1       	ldd	r18, Y+33	; 0x21
    5d8c:	3a a1       	ldd	r19, Y+34	; 0x22
    5d8e:	4b a1       	ldd	r20, Y+35	; 0x23
    5d90:	5c a1       	ldd	r21, Y+36	; 0x24
    5d92:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <earth_values>

}
    5d96:	a4 96       	adiw	r28, 0x24	; 36
    5d98:	0f b6       	in	r0, 0x3f	; 63
    5d9a:	f8 94       	cli
    5d9c:	de bf       	out	0x3e, r29	; 62
    5d9e:	0f be       	out	0x3f, r0	; 63
    5da0:	cd bf       	out	0x3d, r28	; 61
    5da2:	cf 91       	pop	r28
    5da4:	df 91       	pop	r29
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	df 90       	pop	r13
    5db0:	cf 90       	pop	r12
    5db2:	bf 90       	pop	r11
    5db4:	af 90       	pop	r10
    5db6:	9f 90       	pop	r9
    5db8:	8f 90       	pop	r8
    5dba:	7f 90       	pop	r7
    5dbc:	6f 90       	pop	r6
    5dbe:	5f 90       	pop	r5
    5dc0:	4f 90       	pop	r4
    5dc2:	3f 90       	pop	r3
    5dc4:	2f 90       	pop	r2
    5dc6:	08 95       	ret

00005dc8 <earth_heliocentric_latitude>:
    return limit_degrees(rad2deg(earth_values(sum, L_COUNT, jme)));

}

double earth_heliocentric_latitude(double jme)
{
    5dc8:	2f 92       	push	r2
    5dca:	3f 92       	push	r3
    5dcc:	4f 92       	push	r4
    5dce:	5f 92       	push	r5
    5dd0:	6f 92       	push	r6
    5dd2:	7f 92       	push	r7
    5dd4:	8f 92       	push	r8
    5dd6:	9f 92       	push	r9
    5dd8:	af 92       	push	r10
    5dda:	bf 92       	push	r11
    5ddc:	cf 92       	push	r12
    5dde:	df 92       	push	r13
    5de0:	ef 92       	push	r14
    5de2:	ff 92       	push	r15
    5de4:	0f 93       	push	r16
    5de6:	1f 93       	push	r17
    5de8:	df 93       	push	r29
    5dea:	cf 93       	push	r28
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	68 97       	sbiw	r28, 0x18	; 24
    5df2:	0f b6       	in	r0, 0x3f	; 63
    5df4:	f8 94       	cli
    5df6:	de bf       	out	0x3e, r29	; 62
    5df8:	0f be       	out	0x3f, r0	; 63
    5dfa:	cd bf       	out	0x3d, r28	; 61
    5dfc:	6d 8b       	std	Y+21, r22	; 0x15
    5dfe:	7e 8b       	std	Y+22, r23	; 0x16
    5e00:	8f 8b       	std	Y+23, r24	; 0x17
    5e02:	98 8f       	std	Y+24, r25	; 0x18
    5e04:	28 e1       	ldi	r18, 0x18	; 24
    5e06:	32 e0       	ldi	r19, 0x02	; 2
    5e08:	3e 87       	std	Y+14, r19	; 0x0e
    5e0a:	2d 87       	std	Y+13, r18	; 0x0d
    5e0c:	ce 01       	movw	r24, r28
    5e0e:	01 96       	adiw	r24, 0x01	; 1
    5e10:	9c 87       	std	Y+12, r25	; 0x0c
    5e12:	8b 87       	std	Y+11, r24	; 0x0b
    5e14:	e4 ee       	ldi	r30, 0xE4	; 228
    5e16:	f4 e1       	ldi	r31, 0x14	; 20
    5e18:	f8 8b       	std	Y+16, r31	; 0x10
    5e1a:	ef 87       	std	Y+15, r30	; 0x0f
    5e1c:	65 c0       	rjmp	.+202    	; 0x5ee8 <earth_heliocentric_latitude+0x120>
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < b_subcount[i]; j++)
	        sum_epts += (double)pgm_read_dword(&(B_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(B_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(B_TERMS[i][j][TERM_C]))*jme);
    5e1e:	e9 85       	ldd	r30, Y+9	; 0x09
    5e20:	fa 85       	ldd	r31, Y+10	; 0x0a
    5e22:	65 90       	lpm	r6, Z+
    5e24:	75 90       	lpm	r7, Z+
    5e26:	85 90       	lpm	r8, Z+
    5e28:	94 90       	lpm	r9, Z+
    5e2a:	e9 85       	ldd	r30, Y+9	; 0x09
    5e2c:	fa 85       	ldd	r31, Y+10	; 0x0a
    5e2e:	34 96       	adiw	r30, 0x04	; 4
    5e30:	65 91       	lpm	r22, Z+
    5e32:	75 91       	lpm	r23, Z+
    5e34:	85 91       	lpm	r24, Z+
    5e36:	94 91       	lpm	r25, Z+
    5e38:	e9 85       	ldd	r30, Y+9	; 0x09
    5e3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    5e3c:	38 96       	adiw	r30, 0x08	; 8
    5e3e:	e5 90       	lpm	r14, Z+
    5e40:	f5 90       	lpm	r15, Z+
    5e42:	05 91       	lpm	r16, Z+
    5e44:	14 91       	lpm	r17, Z+
    5e46:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5e4a:	5b 01       	movw	r10, r22
    5e4c:	6c 01       	movw	r12, r24
    5e4e:	c8 01       	movw	r24, r16
    5e50:	b7 01       	movw	r22, r14
    5e52:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5e56:	2d 89       	ldd	r18, Y+21	; 0x15
    5e58:	3e 89       	ldd	r19, Y+22	; 0x16
    5e5a:	4f 89       	ldd	r20, Y+23	; 0x17
    5e5c:	58 8d       	ldd	r21, Y+24	; 0x18
    5e5e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5e62:	9b 01       	movw	r18, r22
    5e64:	ac 01       	movw	r20, r24
    5e66:	c6 01       	movw	r24, r12
    5e68:	b5 01       	movw	r22, r10
    5e6a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5e6e:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    5e72:	7b 01       	movw	r14, r22
    5e74:	8c 01       	movw	r16, r24
    5e76:	c4 01       	movw	r24, r8
    5e78:	b3 01       	movw	r22, r6
    5e7a:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    5e7e:	a8 01       	movw	r20, r16
    5e80:	97 01       	movw	r18, r14
    5e82:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5e86:	9b 01       	movw	r18, r22
    5e88:	ac 01       	movw	r20, r24
    5e8a:	c2 01       	movw	r24, r4
    5e8c:	b1 01       	movw	r22, r2
    5e8e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5e92:	1b 01       	movw	r2, r22
    5e94:	2c 01       	movw	r4, r24
    for (i = 0; i < B_COUNT; i++)
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < b_subcount[i]; j++)
    5e96:	29 89       	ldd	r18, Y+17	; 0x11
    5e98:	3a 89       	ldd	r19, Y+18	; 0x12
    5e9a:	2f 5f       	subi	r18, 0xFF	; 255
    5e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e9e:	3a 8b       	std	Y+18, r19	; 0x12
    5ea0:	29 8b       	std	Y+17, r18	; 0x11
    5ea2:	89 85       	ldd	r24, Y+9	; 0x09
    5ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ea6:	0c 96       	adiw	r24, 0x0c	; 12
    5ea8:	9a 87       	std	Y+10, r25	; 0x0a
    5eaa:	89 87       	std	Y+9, r24	; 0x09
    5eac:	e9 89       	ldd	r30, Y+17	; 0x11
    5eae:	fa 89       	ldd	r31, Y+18	; 0x12
    5eb0:	2b 89       	ldd	r18, Y+19	; 0x13
    5eb2:	3c 89       	ldd	r19, Y+20	; 0x14
    5eb4:	e2 17       	cp	r30, r18
    5eb6:	f3 07       	cpc	r31, r19
    5eb8:	0c f4       	brge	.+2      	; 0x5ebc <earth_heliocentric_latitude+0xf4>
    5eba:	b1 cf       	rjmp	.-158    	; 0x5e1e <earth_heliocentric_latitude+0x56>
	        sum_epts += (double)pgm_read_dword(&(B_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(B_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(B_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
    5ebc:	eb 85       	ldd	r30, Y+11	; 0x0b
    5ebe:	fc 85       	ldd	r31, Y+12	; 0x0c
    5ec0:	21 92       	st	Z+, r2
    5ec2:	31 92       	st	Z+, r3
    5ec4:	41 92       	st	Z+, r4
    5ec6:	51 92       	st	Z+, r5
    5ec8:	fc 87       	std	Y+12, r31	; 0x0c
    5eca:	eb 87       	std	Y+11, r30	; 0x0b
    5ecc:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ece:	3e 85       	ldd	r19, Y+14	; 0x0e
    5ed0:	2e 5f       	subi	r18, 0xFE	; 254
    5ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed4:	3e 87       	std	Y+14, r19	; 0x0e
    5ed6:	2d 87       	std	Y+13, r18	; 0x0d
    5ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
    5eda:	98 89       	ldd	r25, Y+16	; 0x10
    5edc:	cc 96       	adiw	r24, 0x3c	; 60
    5ede:	98 8b       	std	Y+16, r25	; 0x10
    5ee0:	8f 87       	std	Y+15, r24	; 0x0f
double earth_heliocentric_latitude(double jme)
{
    double sum[B_COUNT];
    int i;

    for (i = 0; i < B_COUNT; i++)
    5ee2:	2c 51       	subi	r18, 0x1C	; 28
    5ee4:	32 40       	sbci	r19, 0x02	; 2
    5ee6:	c1 f0       	breq	.+48     	; 0x5f18 <earth_heliocentric_latitude+0x150>
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < b_subcount[i]; j++)
    5ee8:	ed 85       	ldd	r30, Y+13	; 0x0d
    5eea:	fe 85       	ldd	r31, Y+14	; 0x0e
    5eec:	01 90       	ld	r0, Z+
    5eee:	f0 81       	ld	r31, Z
    5ef0:	e0 2d       	mov	r30, r0
    5ef2:	fc 8b       	std	Y+20, r31	; 0x14
    5ef4:	eb 8b       	std	Y+19, r30	; 0x13
    5ef6:	2f 85       	ldd	r18, Y+15	; 0x0f
    5ef8:	38 89       	ldd	r19, Y+16	; 0x10
    5efa:	3a 87       	std	Y+10, r19	; 0x0a
    5efc:	29 87       	std	Y+9, r18	; 0x09
    5efe:	1a 8a       	std	Y+18, r1	; 0x12
    5f00:	19 8a       	std	Y+17, r1	; 0x11
    5f02:	0f 2e       	mov	r0, r31
    5f04:	f0 e0       	ldi	r31, 0x00	; 0
    5f06:	2f 2e       	mov	r2, r31
    5f08:	f0 e0       	ldi	r31, 0x00	; 0
    5f0a:	3f 2e       	mov	r3, r31
    5f0c:	f0 e0       	ldi	r31, 0x00	; 0
    5f0e:	4f 2e       	mov	r4, r31
    5f10:	f0 e0       	ldi	r31, 0x00	; 0
    5f12:	5f 2e       	mov	r5, r31
    5f14:	f0 2d       	mov	r31, r0
    5f16:	ca cf       	rjmp	.-108    	; 0x5eac <earth_heliocentric_latitude+0xe4>
	        sum_epts += (double)pgm_read_dword(&(B_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(B_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(B_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
	}
    return rad2deg(earth_values(sum, B_COUNT, jme));
    5f18:	ce 01       	movw	r24, r28
    5f1a:	01 96       	adiw	r24, 0x01	; 1
    5f1c:	62 e0       	ldi	r22, 0x02	; 2
    5f1e:	70 e0       	ldi	r23, 0x00	; 0
    5f20:	2d 89       	ldd	r18, Y+21	; 0x15
    5f22:	3e 89       	ldd	r19, Y+22	; 0x16
    5f24:	4f 89       	ldd	r20, Y+23	; 0x17
    5f26:	58 8d       	ldd	r21, Y+24	; 0x18
    5f28:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <earth_values>
    5f2c:	20 ee       	ldi	r18, 0xE0	; 224
    5f2e:	3e e2       	ldi	r19, 0x2E	; 46
    5f30:	45 e6       	ldi	r20, 0x65	; 101
    5f32:	52 e4       	ldi	r21, 0x42	; 66
    5f34:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>

}
    5f38:	68 96       	adiw	r28, 0x18	; 24
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	f8 94       	cli
    5f3e:	de bf       	out	0x3e, r29	; 62
    5f40:	0f be       	out	0x3f, r0	; 63
    5f42:	cd bf       	out	0x3d, r28	; 61
    5f44:	cf 91       	pop	r28
    5f46:	df 91       	pop	r29
    5f48:	1f 91       	pop	r17
    5f4a:	0f 91       	pop	r16
    5f4c:	ff 90       	pop	r15
    5f4e:	ef 90       	pop	r14
    5f50:	df 90       	pop	r13
    5f52:	cf 90       	pop	r12
    5f54:	bf 90       	pop	r11
    5f56:	af 90       	pop	r10
    5f58:	9f 90       	pop	r9
    5f5a:	8f 90       	pop	r8
    5f5c:	7f 90       	pop	r7
    5f5e:	6f 90       	pop	r6
    5f60:	5f 90       	pop	r5
    5f62:	4f 90       	pop	r4
    5f64:	3f 90       	pop	r3
    5f66:	2f 90       	pop	r2
    5f68:	08 95       	ret

00005f6a <julian_day>:

    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////
double julian_day (int year, int month, int day, int hour, int minute, int second, double tz)
{
    5f6a:	2f 92       	push	r2
    5f6c:	3f 92       	push	r3
    5f6e:	4f 92       	push	r4
    5f70:	5f 92       	push	r5
    5f72:	6f 92       	push	r6
    5f74:	7f 92       	push	r7
    5f76:	8f 92       	push	r8
    5f78:	9f 92       	push	r9
    5f7a:	af 92       	push	r10
    5f7c:	bf 92       	push	r11
    5f7e:	cf 92       	push	r12
    5f80:	df 92       	push	r13
    5f82:	ef 92       	push	r14
    5f84:	ff 92       	push	r15
    5f86:	0f 93       	push	r16
    5f88:	1f 93       	push	r17
    5f8a:	df 93       	push	r29
    5f8c:	cf 93       	push	r28
    5f8e:	cd b7       	in	r28, 0x3d	; 61
    5f90:	de b7       	in	r29, 0x3e	; 62
    5f92:	28 97       	sbiw	r28, 0x08	; 8
    5f94:	0f b6       	in	r0, 0x3f	; 63
    5f96:	f8 94       	cli
    5f98:	de bf       	out	0x3e, r29	; 62
    5f9a:	0f be       	out	0x3f, r0	; 63
    5f9c:	cd bf       	out	0x3d, r28	; 61
    5f9e:	9a 83       	std	Y+2, r25	; 0x02
    5fa0:	89 83       	std	Y+1, r24	; 0x01
    5fa2:	3b 01       	movw	r6, r22
    5fa4:	4a 01       	movw	r8, r20
    5fa6:	3c 83       	std	Y+4, r19	; 0x04
    5fa8:	2b 83       	std	Y+3, r18	; 0x03
    5faa:	1e 83       	std	Y+6, r17	; 0x06
    5fac:	0d 83       	std	Y+5, r16	; 0x05
    5fae:	f8 86       	std	Y+8, r15	; 0x08
    5fb0:	ef 82       	std	Y+7, r14	; 0x07
    double day_decimal, julian_day, a;

    day_decimal = day + (hour - tz + (minute + second/60.0)/60.0)/24.0;

    if (month < 3) {
    5fb2:	63 30       	cpi	r22, 0x03	; 3
    5fb4:	71 05       	cpc	r23, r1
    5fb6:	4c f4       	brge	.+18     	; 0x5fca <julian_day+0x60>
        month += 12;
    5fb8:	8c e0       	ldi	r24, 0x0C	; 12
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	68 0e       	add	r6, r24
    5fbe:	79 1e       	adc	r7, r25
        year--;
    5fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    5fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    5fc4:	31 97       	sbiw	r30, 0x01	; 1
    5fc6:	fa 83       	std	Y+2, r31	; 0x02
    5fc8:	e9 83       	std	Y+1, r30	; 0x01
    }

    julian_day = floor(365.25*(year+4716.0)) + floor(30.6001*(month+1)) + day_decimal - 1524.5;
    5fca:	29 81       	ldd	r18, Y+1	; 0x01
    5fcc:	3a 81       	ldd	r19, Y+2	; 0x02
    5fce:	b9 01       	movw	r22, r18
    5fd0:	88 27       	eor	r24, r24
    5fd2:	77 fd       	sbrc	r23, 7
    5fd4:	80 95       	com	r24
    5fd6:	98 2f       	mov	r25, r24
    5fd8:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    5fdc:	20 e0       	ldi	r18, 0x00	; 0
    5fde:	30 e6       	ldi	r19, 0x60	; 96
    5fe0:	43 e9       	ldi	r20, 0x93	; 147
    5fe2:	55 e4       	ldi	r21, 0x45	; 69
    5fe4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    5fe8:	20 e0       	ldi	r18, 0x00	; 0
    5fea:	30 ea       	ldi	r19, 0xA0	; 160
    5fec:	46 eb       	ldi	r20, 0xB6	; 182
    5fee:	53 e4       	ldi	r21, 0x43	; 67
    5ff0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    5ff4:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    5ff8:	7b 01       	movw	r14, r22
    5ffa:	8c 01       	movw	r16, r24
    5ffc:	08 94       	sec
    5ffe:	61 1c       	adc	r6, r1
    6000:	71 1c       	adc	r7, r1
    6002:	b3 01       	movw	r22, r6
    6004:	88 27       	eor	r24, r24
    6006:	77 fd       	sbrc	r23, 7
    6008:	80 95       	com	r24
    600a:	98 2f       	mov	r25, r24
    600c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    6010:	21 e0       	ldi	r18, 0x01	; 1
    6012:	3d ec       	ldi	r19, 0xCD	; 205
    6014:	44 ef       	ldi	r20, 0xF4	; 244
    6016:	51 e4       	ldi	r21, 0x41	; 65
    6018:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    601c:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    6020:	9b 01       	movw	r18, r22
    6022:	ac 01       	movw	r20, r24
    6024:	c8 01       	movw	r24, r16
    6026:	b7 01       	movw	r22, r14
    6028:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    602c:	1b 01       	movw	r2, r22
    602e:	2c 01       	movw	r4, r24
    6030:	b4 01       	movw	r22, r8
    6032:	88 27       	eor	r24, r24
    6034:	77 fd       	sbrc	r23, 7
    6036:	80 95       	com	r24
    6038:	98 2f       	mov	r25, r24
    603a:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    603e:	3b 01       	movw	r6, r22
    6040:	4c 01       	movw	r8, r24
    6042:	eb 81       	ldd	r30, Y+3	; 0x03
    6044:	fc 81       	ldd	r31, Y+4	; 0x04
    6046:	bf 01       	movw	r22, r30
    6048:	88 27       	eor	r24, r24
    604a:	77 fd       	sbrc	r23, 7
    604c:	80 95       	com	r24
    604e:	98 2f       	mov	r25, r24
    6050:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    6054:	a6 01       	movw	r20, r12
    6056:	95 01       	movw	r18, r10
    6058:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    605c:	5b 01       	movw	r10, r22
    605e:	6c 01       	movw	r12, r24
    6060:	2d 81       	ldd	r18, Y+5	; 0x05
    6062:	3e 81       	ldd	r19, Y+6	; 0x06
    6064:	b9 01       	movw	r22, r18
    6066:	88 27       	eor	r24, r24
    6068:	77 fd       	sbrc	r23, 7
    606a:	80 95       	com	r24
    606c:	98 2f       	mov	r25, r24
    606e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    6072:	7b 01       	movw	r14, r22
    6074:	8c 01       	movw	r16, r24
    6076:	ef 81       	ldd	r30, Y+7	; 0x07
    6078:	f8 85       	ldd	r31, Y+8	; 0x08
    607a:	bf 01       	movw	r22, r30
    607c:	88 27       	eor	r24, r24
    607e:	77 fd       	sbrc	r23, 7
    6080:	80 95       	com	r24
    6082:	98 2f       	mov	r25, r24
    6084:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    6088:	20 e0       	ldi	r18, 0x00	; 0
    608a:	30 e0       	ldi	r19, 0x00	; 0
    608c:	40 e7       	ldi	r20, 0x70	; 112
    608e:	52 e4       	ldi	r21, 0x42	; 66
    6090:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    6094:	9b 01       	movw	r18, r22
    6096:	ac 01       	movw	r20, r24
    6098:	c8 01       	movw	r24, r16
    609a:	b7 01       	movw	r22, r14
    609c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    60a0:	20 e0       	ldi	r18, 0x00	; 0
    60a2:	30 e0       	ldi	r19, 0x00	; 0
    60a4:	40 e7       	ldi	r20, 0x70	; 112
    60a6:	52 e4       	ldi	r21, 0x42	; 66
    60a8:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    60ac:	9b 01       	movw	r18, r22
    60ae:	ac 01       	movw	r20, r24
    60b0:	c6 01       	movw	r24, r12
    60b2:	b5 01       	movw	r22, r10
    60b4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	40 ec       	ldi	r20, 0xC0	; 192
    60be:	51 e4       	ldi	r21, 0x41	; 65
    60c0:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    60c4:	9b 01       	movw	r18, r22
    60c6:	ac 01       	movw	r20, r24
    60c8:	c4 01       	movw	r24, r8
    60ca:	b3 01       	movw	r22, r6
    60cc:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    60d0:	9b 01       	movw	r18, r22
    60d2:	ac 01       	movw	r20, r24
    60d4:	c2 01       	movw	r24, r4
    60d6:	b1 01       	movw	r22, r2
    60d8:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    60dc:	20 e0       	ldi	r18, 0x00	; 0
    60de:	30 e9       	ldi	r19, 0x90	; 144
    60e0:	4e eb       	ldi	r20, 0xBE	; 190
    60e2:	54 e4       	ldi	r21, 0x44	; 68
    60e4:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    60e8:	3b 01       	movw	r6, r22
    60ea:	4c 01       	movw	r8, r24

    if (julian_day > 2299160.0) {
    60ec:	20 e6       	ldi	r18, 0x60	; 96
    60ee:	34 e5       	ldi	r19, 0x54	; 84
    60f0:	4c e0       	ldi	r20, 0x0C	; 12
    60f2:	5a e4       	ldi	r21, 0x4A	; 74
    60f4:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    60f8:	18 16       	cp	r1, r24
    60fa:	74 f5       	brge	.+92     	; 0x6158 <julian_day+0x1ee>
        a = floor(year/100);
    60fc:	89 81       	ldd	r24, Y+1	; 0x01
    60fe:	9a 81       	ldd	r25, Y+2	; 0x02
    6100:	64 e6       	ldi	r22, 0x64	; 100
    6102:	70 e0       	ldi	r23, 0x00	; 0
    6104:	0e 94 1c 66 	call	0xcc38	; 0xcc38 <__divmodhi4>
    6108:	88 27       	eor	r24, r24
    610a:	77 fd       	sbrc	r23, 7
    610c:	80 95       	com	r24
    610e:	98 2f       	mov	r25, r24
    6110:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    6114:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    6118:	7b 01       	movw	r14, r22
    611a:	8c 01       	movw	r16, r24
        julian_day += (2 - a + floor(a/4));
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	40 e8       	ldi	r20, 0x80	; 128
    6122:	5e e3       	ldi	r21, 0x3E	; 62
    6124:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6128:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    612c:	5b 01       	movw	r10, r22
    612e:	6c 01       	movw	r12, r24
    6130:	60 e0       	ldi	r22, 0x00	; 0
    6132:	70 e0       	ldi	r23, 0x00	; 0
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	90 e4       	ldi	r25, 0x40	; 64
    6138:	a8 01       	movw	r20, r16
    613a:	97 01       	movw	r18, r14
    613c:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6140:	a6 01       	movw	r20, r12
    6142:	95 01       	movw	r18, r10
    6144:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6148:	9b 01       	movw	r18, r22
    614a:	ac 01       	movw	r20, r24
    614c:	c4 01       	movw	r24, r8
    614e:	b3 01       	movw	r22, r6
    6150:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6154:	3b 01       	movw	r6, r22
    6156:	4c 01       	movw	r8, r24
    }

    return julian_day;
}
    6158:	b3 01       	movw	r22, r6
    615a:	c4 01       	movw	r24, r8
    615c:	28 96       	adiw	r28, 0x08	; 8
    615e:	0f b6       	in	r0, 0x3f	; 63
    6160:	f8 94       	cli
    6162:	de bf       	out	0x3e, r29	; 62
    6164:	0f be       	out	0x3f, r0	; 63
    6166:	cd bf       	out	0x3d, r28	; 61
    6168:	cf 91       	pop	r28
    616a:	df 91       	pop	r29
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	ff 90       	pop	r15
    6172:	ef 90       	pop	r14
    6174:	df 90       	pop	r13
    6176:	cf 90       	pop	r12
    6178:	bf 90       	pop	r11
    617a:	af 90       	pop	r10
    617c:	9f 90       	pop	r9
    617e:	8f 90       	pop	r8
    6180:	7f 90       	pop	r7
    6182:	6f 90       	pop	r6
    6184:	5f 90       	pop	r5
    6186:	4f 90       	pop	r4
    6188:	3f 90       	pop	r3
    618a:	2f 90       	pop	r2
    618c:	08 95       	ret

0000618e <limit_zero2one>:

    return limited;
}

double limit_zero2one(double value)
{
    618e:	ef 92       	push	r14
    6190:	ff 92       	push	r15
    6192:	0f 93       	push	r16
    6194:	1f 93       	push	r17
    6196:	7b 01       	movw	r14, r22
    6198:	8c 01       	movw	r16, r24
    double limited;

    limited = value - floor(value);
    619a:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    619e:	9b 01       	movw	r18, r22
    61a0:	ac 01       	movw	r20, r24
    61a2:	c8 01       	movw	r24, r16
    61a4:	b7 01       	movw	r22, r14
    61a6:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    61aa:	7b 01       	movw	r14, r22
    61ac:	8c 01       	movw	r16, r24
    if (limited < 0) limited += 1.0;
    61ae:	20 e0       	ldi	r18, 0x00	; 0
    61b0:	30 e0       	ldi	r19, 0x00	; 0
    61b2:	40 e0       	ldi	r20, 0x00	; 0
    61b4:	50 e0       	ldi	r21, 0x00	; 0
    61b6:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    61ba:	88 23       	and	r24, r24
    61bc:	54 f4       	brge	.+20     	; 0x61d2 <limit_zero2one+0x44>
    61be:	c8 01       	movw	r24, r16
    61c0:	b7 01       	movw	r22, r14
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	40 e8       	ldi	r20, 0x80	; 128
    61c8:	5f e3       	ldi	r21, 0x3F	; 63
    61ca:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    61ce:	7b 01       	movw	r14, r22
    61d0:	8c 01       	movw	r16, r24

    return limited;
}
    61d2:	b7 01       	movw	r22, r14
    61d4:	c8 01       	movw	r24, r16
    61d6:	1f 91       	pop	r17
    61d8:	0f 91       	pop	r16
    61da:	ff 90       	pop	r15
    61dc:	ef 90       	pop	r14
    61de:	08 95       	ret

000061e0 <rts_alpha_delta_prime>:
    m_rts[SUN_SET]     = limit_zero2one(m_rts[SUN_TRANSIT] + h0_dfrac);
    m_rts[SUN_TRANSIT] = limit_zero2one(m_rts[SUN_TRANSIT]);
}

double rts_alpha_delta_prime(double *ad, double n)
{
    61e0:	2f 92       	push	r2
    61e2:	3f 92       	push	r3
    61e4:	4f 92       	push	r4
    61e6:	5f 92       	push	r5
    61e8:	6f 92       	push	r6
    61ea:	7f 92       	push	r7
    61ec:	8f 92       	push	r8
    61ee:	9f 92       	push	r9
    61f0:	af 92       	push	r10
    61f2:	bf 92       	push	r11
    61f4:	cf 92       	push	r12
    61f6:	df 92       	push	r13
    61f8:	ef 92       	push	r14
    61fa:	ff 92       	push	r15
    61fc:	0f 93       	push	r16
    61fe:	1f 93       	push	r17
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	ec 01       	movw	r28, r24
    6206:	1a 01       	movw	r2, r20
    6208:	2b 01       	movw	r4, r22
    double a = ad[JD_ZERO] - ad[JD_MINUS];
    620a:	ec 80       	ldd	r14, Y+4	; 0x04
    620c:	fd 80       	ldd	r15, Y+5	; 0x05
    620e:	0e 81       	ldd	r16, Y+6	; 0x06
    6210:	1f 81       	ldd	r17, Y+7	; 0x07
    6212:	c8 01       	movw	r24, r16
    6214:	b7 01       	movw	r22, r14
    6216:	28 81       	ld	r18, Y
    6218:	39 81       	ldd	r19, Y+1	; 0x01
    621a:	4a 81       	ldd	r20, Y+2	; 0x02
    621c:	5b 81       	ldd	r21, Y+3	; 0x03
    621e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6222:	3b 01       	movw	r6, r22
    6224:	4c 01       	movw	r8, r24
    double b = ad[JD_PLUS] - ad[JD_ZERO];
    6226:	68 85       	ldd	r22, Y+8	; 0x08
    6228:	79 85       	ldd	r23, Y+9	; 0x09
    622a:	8a 85       	ldd	r24, Y+10	; 0x0a
    622c:	9b 85       	ldd	r25, Y+11	; 0x0b
    622e:	a8 01       	movw	r20, r16
    6230:	97 01       	movw	r18, r14
    6232:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6236:	5b 01       	movw	r10, r22
    6238:	6c 01       	movw	r12, r24

    if (fabs(a) >= 2.0) a = limit_zero2one(a);
    623a:	c4 01       	movw	r24, r8
    623c:	b3 01       	movw	r22, r6
    623e:	9f 77       	andi	r25, 0x7F	; 127
    6240:	20 e0       	ldi	r18, 0x00	; 0
    6242:	30 e0       	ldi	r19, 0x00	; 0
    6244:	40 e0       	ldi	r20, 0x00	; 0
    6246:	50 e4       	ldi	r21, 0x40	; 64
    6248:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    624c:	88 23       	and	r24, r24
    624e:	34 f0       	brlt	.+12     	; 0x625c <rts_alpha_delta_prime+0x7c>
    6250:	c4 01       	movw	r24, r8
    6252:	b3 01       	movw	r22, r6
    6254:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    6258:	3b 01       	movw	r6, r22
    625a:	4c 01       	movw	r8, r24
    if (fabs(b) >= 2.0) b = limit_zero2one(b);
    625c:	c6 01       	movw	r24, r12
    625e:	b5 01       	movw	r22, r10
    6260:	9f 77       	andi	r25, 0x7F	; 127
    6262:	20 e0       	ldi	r18, 0x00	; 0
    6264:	30 e0       	ldi	r19, 0x00	; 0
    6266:	40 e0       	ldi	r20, 0x00	; 0
    6268:	50 e4       	ldi	r21, 0x40	; 64
    626a:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    626e:	88 23       	and	r24, r24
    6270:	34 f0       	brlt	.+12     	; 0x627e <rts_alpha_delta_prime+0x9e>
    6272:	c6 01       	movw	r24, r12
    6274:	b5 01       	movw	r22, r10
    6276:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    627a:	5b 01       	movw	r10, r22
    627c:	6c 01       	movw	r12, r24
    627e:	c4 01       	movw	r24, r8
    6280:	b3 01       	movw	r22, r6
    6282:	a6 01       	movw	r20, r12
    6284:	95 01       	movw	r18, r10
    6286:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    628a:	7b 01       	movw	r14, r22
    628c:	8c 01       	movw	r16, r24
    628e:	c6 01       	movw	r24, r12
    6290:	b5 01       	movw	r22, r10
    6292:	a4 01       	movw	r20, r8
    6294:	93 01       	movw	r18, r6
    6296:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    629a:	a2 01       	movw	r20, r4
    629c:	91 01       	movw	r18, r2
    629e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    62a2:	9b 01       	movw	r18, r22
    62a4:	ac 01       	movw	r20, r24
    62a6:	c8 01       	movw	r24, r16
    62a8:	b7 01       	movw	r22, r14
    62aa:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    62ae:	9b 01       	movw	r18, r22
    62b0:	ac 01       	movw	r20, r24
    62b2:	c2 01       	movw	r24, r4
    62b4:	b1 01       	movw	r22, r2
    62b6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    62ba:	20 e0       	ldi	r18, 0x00	; 0
    62bc:	30 e0       	ldi	r19, 0x00	; 0
    62be:	40 e0       	ldi	r20, 0x00	; 0
    62c0:	5f e3       	ldi	r21, 0x3F	; 63
    62c2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    62c6:	2c 81       	ldd	r18, Y+4	; 0x04
    62c8:	3d 81       	ldd	r19, Y+5	; 0x05
    62ca:	4e 81       	ldd	r20, Y+6	; 0x06
    62cc:	5f 81       	ldd	r21, Y+7	; 0x07
    62ce:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>

    return ad[JD_ZERO] + n * (a + b + (b-a)*n)/2.0;
}
    62d2:	df 91       	pop	r29
    62d4:	cf 91       	pop	r28
    62d6:	1f 91       	pop	r17
    62d8:	0f 91       	pop	r16
    62da:	ff 90       	pop	r15
    62dc:	ef 90       	pop	r14
    62de:	df 90       	pop	r13
    62e0:	cf 90       	pop	r12
    62e2:	bf 90       	pop	r11
    62e4:	af 90       	pop	r10
    62e6:	9f 90       	pop	r9
    62e8:	8f 90       	pop	r8
    62ea:	7f 90       	pop	r7
    62ec:	6f 90       	pop	r6
    62ee:	5f 90       	pop	r5
    62f0:	4f 90       	pop	r4
    62f2:	3f 90       	pop	r3
    62f4:	2f 90       	pop	r2
    62f6:	08 95       	ret

000062f8 <approx_sun_rise_and_set>:

    return h0;
}

void approx_sun_rise_and_set(double *m_rts, double h0)
{
    62f8:	cf 92       	push	r12
    62fa:	df 92       	push	r13
    62fc:	ef 92       	push	r14
    62fe:	ff 92       	push	r15
    6300:	0f 93       	push	r16
    6302:	1f 93       	push	r17
    6304:	6c 01       	movw	r12, r24
    double h0_dfrac = h0/360.0;
    6306:	cb 01       	movw	r24, r22
    6308:	ba 01       	movw	r22, r20
    630a:	20 e0       	ldi	r18, 0x00	; 0
    630c:	30 e0       	ldi	r19, 0x00	; 0
    630e:	44 eb       	ldi	r20, 0xB4	; 180
    6310:	53 e4       	ldi	r21, 0x43	; 67
    6312:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    6316:	7b 01       	movw	r14, r22
    6318:	8c 01       	movw	r16, r24

    m_rts[SUN_RISE]    = limit_zero2one(m_rts[SUN_TRANSIT] - h0_dfrac);
    631a:	f6 01       	movw	r30, r12
    631c:	60 81       	ld	r22, Z
    631e:	71 81       	ldd	r23, Z+1	; 0x01
    6320:	82 81       	ldd	r24, Z+2	; 0x02
    6322:	93 81       	ldd	r25, Z+3	; 0x03
    6324:	a8 01       	movw	r20, r16
    6326:	97 01       	movw	r18, r14
    6328:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    632c:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    6330:	f6 01       	movw	r30, r12
    6332:	64 83       	std	Z+4, r22	; 0x04
    6334:	75 83       	std	Z+5, r23	; 0x05
    6336:	86 83       	std	Z+6, r24	; 0x06
    6338:	97 83       	std	Z+7, r25	; 0x07
    m_rts[SUN_SET]     = limit_zero2one(m_rts[SUN_TRANSIT] + h0_dfrac);
    633a:	c8 01       	movw	r24, r16
    633c:	b7 01       	movw	r22, r14
    633e:	20 81       	ld	r18, Z
    6340:	31 81       	ldd	r19, Z+1	; 0x01
    6342:	42 81       	ldd	r20, Z+2	; 0x02
    6344:	53 81       	ldd	r21, Z+3	; 0x03
    6346:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    634a:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    634e:	f6 01       	movw	r30, r12
    6350:	60 87       	std	Z+8, r22	; 0x08
    6352:	71 87       	std	Z+9, r23	; 0x09
    6354:	82 87       	std	Z+10, r24	; 0x0a
    6356:	93 87       	std	Z+11, r25	; 0x0b
    m_rts[SUN_TRANSIT] = limit_zero2one(m_rts[SUN_TRANSIT]);
    6358:	60 81       	ld	r22, Z
    635a:	71 81       	ldd	r23, Z+1	; 0x01
    635c:	82 81       	ldd	r24, Z+2	; 0x02
    635e:	93 81       	ldd	r25, Z+3	; 0x03
    6360:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    6364:	f6 01       	movw	r30, r12
    6366:	60 83       	st	Z, r22
    6368:	71 83       	std	Z+1, r23	; 0x01
    636a:	82 83       	std	Z+2, r24	; 0x02
    636c:	93 83       	std	Z+3, r25	; 0x03
}
    636e:	1f 91       	pop	r17
    6370:	0f 91       	pop	r16
    6372:	ff 90       	pop	r15
    6374:	ef 90       	pop	r14
    6376:	df 90       	pop	r13
    6378:	cf 90       	pop	r12
    637a:	08 95       	ret

0000637c <dayfrac_to_local_hr>:

    return limited;
}

double dayfrac_to_local_hr(double dayfrac, double timezone)
{
    637c:	ef 92       	push	r14
    637e:	ff 92       	push	r15
    6380:	0f 93       	push	r16
    6382:	1f 93       	push	r17
    6384:	7b 01       	movw	r14, r22
    6386:	8c 01       	movw	r16, r24
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
    6388:	ca 01       	movw	r24, r20
    638a:	b9 01       	movw	r22, r18
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	40 ec       	ldi	r20, 0xC0	; 192
    6392:	51 e4       	ldi	r21, 0x41	; 65
    6394:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    6398:	9b 01       	movw	r18, r22
    639a:	ac 01       	movw	r20, r24
    639c:	c8 01       	movw	r24, r16
    639e:	b7 01       	movw	r22, r14
    63a0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    63a4:	0e 94 c7 30 	call	0x618e	; 0x618e <limit_zero2one>
    63a8:	20 e0       	ldi	r18, 0x00	; 0
    63aa:	30 e0       	ldi	r19, 0x00	; 0
    63ac:	40 ec       	ldi	r20, 0xC0	; 192
    63ae:	51 e4       	ldi	r21, 0x41	; 65
    63b0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
}
    63b4:	1f 91       	pop	r17
    63b6:	0f 91       	pop	r16
    63b8:	ff 90       	pop	r15
    63ba:	ef 90       	pop	r14
    63bc:	08 95       	ret

000063be <limit_degrees180>:

    return limited;
}

double limit_degrees180(double degrees)
{
    63be:	ef 92       	push	r14
    63c0:	ff 92       	push	r15
    63c2:	0f 93       	push	r16
    63c4:	1f 93       	push	r17
    double limited;

    degrees /= 180.0;
    63c6:	20 e0       	ldi	r18, 0x00	; 0
    63c8:	30 e0       	ldi	r19, 0x00	; 0
    63ca:	44 e3       	ldi	r20, 0x34	; 52
    63cc:	53 e4       	ldi	r21, 0x43	; 67
    63ce:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    63d2:	7b 01       	movw	r14, r22
    63d4:	8c 01       	movw	r16, r24
    limited = 180.0*(degrees-floor(degrees));
    63d6:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    63da:	9b 01       	movw	r18, r22
    63dc:	ac 01       	movw	r20, r24
    63de:	c8 01       	movw	r24, r16
    63e0:	b7 01       	movw	r22, r14
    63e2:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	44 e3       	ldi	r20, 0x34	; 52
    63ec:	53 e4       	ldi	r21, 0x43	; 67
    63ee:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    63f2:	7b 01       	movw	r14, r22
    63f4:	8c 01       	movw	r16, r24
    if (limited < 0) limited += 180.0;
    63f6:	20 e0       	ldi	r18, 0x00	; 0
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	40 e0       	ldi	r20, 0x00	; 0
    63fc:	50 e0       	ldi	r21, 0x00	; 0
    63fe:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    6402:	88 23       	and	r24, r24
    6404:	54 f4       	brge	.+20     	; 0x641a <limit_degrees180+0x5c>
    6406:	c8 01       	movw	r24, r16
    6408:	b7 01       	movw	r22, r14
    640a:	20 e0       	ldi	r18, 0x00	; 0
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	44 e3       	ldi	r20, 0x34	; 52
    6410:	53 e4       	ldi	r21, 0x43	; 67
    6412:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6416:	7b 01       	movw	r14, r22
    6418:	8c 01       	movw	r16, r24

    return limited;
}
    641a:	b7 01       	movw	r22, r14
    641c:	c8 01       	movw	r24, r16
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	ff 90       	pop	r15
    6424:	ef 90       	pop	r14
    6426:	08 95       	ret

00006428 <sun_hour_angle_at_rise_set>:
{
    return (alpha_zero - longitude - nu) / 360.0;
}

double sun_hour_angle_at_rise_set(double latitude, double delta_zero, double h0_prime)
{
    6428:	2f 92       	push	r2
    642a:	3f 92       	push	r3
    642c:	4f 92       	push	r4
    642e:	5f 92       	push	r5
    6430:	6f 92       	push	r6
    6432:	7f 92       	push	r7
    6434:	8f 92       	push	r8
    6436:	9f 92       	push	r9
    6438:	af 92       	push	r10
    643a:	bf 92       	push	r11
    643c:	cf 92       	push	r12
    643e:	df 92       	push	r13
    6440:	ef 92       	push	r14
    6442:	ff 92       	push	r15
    6444:	0f 93       	push	r16
    6446:	1f 93       	push	r17
    6448:	df 93       	push	r29
    644a:	cf 93       	push	r28
    644c:	cd b7       	in	r28, 0x3d	; 61
    644e:	de b7       	in	r29, 0x3e	; 62
    6450:	28 97       	sbiw	r28, 0x08	; 8
    6452:	0f b6       	in	r0, 0x3f	; 63
    6454:	f8 94       	cli
    6456:	de bf       	out	0x3e, r29	; 62
    6458:	0f be       	out	0x3f, r0	; 63
    645a:	cd bf       	out	0x3d, r28	; 61
    645c:	39 01       	movw	r6, r18
    645e:	4a 01       	movw	r8, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    6460:	25 e3       	ldi	r18, 0x35	; 53
    6462:	3a ef       	ldi	r19, 0xFA	; 250
    6464:	4e e8       	ldi	r20, 0x8E	; 142
    6466:	5c e3       	ldi	r21, 0x3C	; 60
    6468:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    646c:	5b 01       	movw	r10, r22
    646e:	6c 01       	movw	r12, r24
{
    double h0             = -99999;
    double latitude_rad   = deg2rad(latitude);
    double delta_zero_rad = deg2rad(delta_zero);
    double argument       = (sin(deg2rad(h0_prime)) - sin(latitude_rad)*sin(delta_zero_rad)) /
                                                     (cos(latitude_rad)*cos(delta_zero_rad));
    6470:	c4 01       	movw	r24, r8
    6472:	b3 01       	movw	r22, r6
    6474:	25 e3       	ldi	r18, 0x35	; 53
    6476:	3a ef       	ldi	r19, 0xFA	; 250
    6478:	4e e8       	ldi	r20, 0x8E	; 142
    647a:	5c e3       	ldi	r21, 0x3C	; 60
    647c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6480:	3b 01       	movw	r6, r22
    6482:	4c 01       	movw	r8, r24
    6484:	c8 01       	movw	r24, r16
    6486:	b7 01       	movw	r22, r14
    6488:	25 e3       	ldi	r18, 0x35	; 53
    648a:	3a ef       	ldi	r19, 0xFA	; 250
    648c:	4e e8       	ldi	r20, 0x8E	; 142
    648e:	5c e3       	ldi	r21, 0x3C	; 60
    6490:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6494:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    6498:	6d 83       	std	Y+5, r22	; 0x05
    649a:	7e 83       	std	Y+6, r23	; 0x06
    649c:	8f 83       	std	Y+7, r24	; 0x07
    649e:	98 87       	std	Y+8, r25	; 0x08
    64a0:	b5 01       	movw	r22, r10
    64a2:	c6 01       	movw	r24, r12
    64a4:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    64a8:	69 83       	std	Y+1, r22	; 0x01
    64aa:	7a 83       	std	Y+2, r23	; 0x02
    64ac:	8b 83       	std	Y+3, r24	; 0x03
    64ae:	9c 83       	std	Y+4, r25	; 0x04
    64b0:	b3 01       	movw	r22, r6
    64b2:	c4 01       	movw	r24, r8
    64b4:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    64b8:	7b 01       	movw	r14, r22
    64ba:	8c 01       	movw	r16, r24
    64bc:	b5 01       	movw	r22, r10
    64be:	c6 01       	movw	r24, r12
    64c0:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    64c4:	1b 01       	movw	r2, r22
    64c6:	2c 01       	movw	r4, r24
    64c8:	b3 01       	movw	r22, r6
    64ca:	c4 01       	movw	r24, r8
    64cc:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    64d0:	5b 01       	movw	r10, r22
    64d2:	6c 01       	movw	r12, r24
    64d4:	69 81       	ldd	r22, Y+1	; 0x01
    64d6:	7a 81       	ldd	r23, Y+2	; 0x02
    64d8:	8b 81       	ldd	r24, Y+3	; 0x03
    64da:	9c 81       	ldd	r25, Y+4	; 0x04
    64dc:	a8 01       	movw	r20, r16
    64de:	97 01       	movw	r18, r14
    64e0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    64e4:	9b 01       	movw	r18, r22
    64e6:	ac 01       	movw	r20, r24
    64e8:	6d 81       	ldd	r22, Y+5	; 0x05
    64ea:	7e 81       	ldd	r23, Y+6	; 0x06
    64ec:	8f 81       	ldd	r24, Y+7	; 0x07
    64ee:	98 85       	ldd	r25, Y+8	; 0x08
    64f0:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    64f4:	7b 01       	movw	r14, r22
    64f6:	8c 01       	movw	r16, r24
    64f8:	c2 01       	movw	r24, r4
    64fa:	b1 01       	movw	r22, r2
    64fc:	a6 01       	movw	r20, r12
    64fe:	95 01       	movw	r18, r10
    6500:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6504:	9b 01       	movw	r18, r22
    6506:	ac 01       	movw	r20, r24
    6508:	c8 01       	movw	r24, r16
    650a:	b7 01       	movw	r22, r14
    650c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    6510:	7b 01       	movw	r14, r22
    6512:	8c 01       	movw	r16, r24

    if (fabs(argument) <= 1) h0 = limit_degrees180(rad2deg(acos(argument)));
    6514:	9f 77       	andi	r25, 0x7F	; 127
    6516:	20 e0       	ldi	r18, 0x00	; 0
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	40 e8       	ldi	r20, 0x80	; 128
    651c:	5f e3       	ldi	r21, 0x3F	; 63
    651e:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    6522:	18 16       	cp	r1, r24
    6524:	2c f4       	brge	.+10     	; 0x6530 <sun_hour_angle_at_rise_set+0x108>
    6526:	60 e8       	ldi	r22, 0x80	; 128
    6528:	7f e4       	ldi	r23, 0x4F	; 79
    652a:	83 ec       	ldi	r24, 0xC3	; 195
    652c:	97 ec       	ldi	r25, 0xC7	; 199
    652e:	0c c0       	rjmp	.+24     	; 0x6548 <sun_hour_angle_at_rise_set+0x120>
    6530:	c8 01       	movw	r24, r16
    6532:	b7 01       	movw	r22, r14
    6534:	0e 94 c2 60 	call	0xc184	; 0xc184 <acos>
    6538:	20 ee       	ldi	r18, 0xE0	; 224
    653a:	3e e2       	ldi	r19, 0x2E	; 46
    653c:	45 e6       	ldi	r20, 0x65	; 101
    653e:	52 e4       	ldi	r21, 0x42	; 66
    6540:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6544:	0e 94 df 31 	call	0x63be	; 0x63be <limit_degrees180>

    return h0;
}
    6548:	28 96       	adiw	r28, 0x08	; 8
    654a:	0f b6       	in	r0, 0x3f	; 63
    654c:	f8 94       	cli
    654e:	de bf       	out	0x3e, r29	; 62
    6550:	0f be       	out	0x3f, r0	; 63
    6552:	cd bf       	out	0x3d, r28	; 61
    6554:	cf 91       	pop	r28
    6556:	df 91       	pop	r29
    6558:	1f 91       	pop	r17
    655a:	0f 91       	pop	r16
    655c:	ff 90       	pop	r15
    655e:	ef 90       	pop	r14
    6560:	df 90       	pop	r13
    6562:	cf 90       	pop	r12
    6564:	bf 90       	pop	r11
    6566:	af 90       	pop	r10
    6568:	9f 90       	pop	r9
    656a:	8f 90       	pop	r8
    656c:	7f 90       	pop	r7
    656e:	6f 90       	pop	r6
    6570:	5f 90       	pop	r5
    6572:	4f 90       	pop	r4
    6574:	3f 90       	pop	r3
    6576:	2f 90       	pop	r2
    6578:	08 95       	ret

0000657a <limit_degrees180pm>:

    return limited;
}

double limit_degrees180pm(double degrees)
{
    657a:	ef 92       	push	r14
    657c:	ff 92       	push	r15
    657e:	0f 93       	push	r16
    6580:	1f 93       	push	r17
    double limited;

    degrees /= 360.0;
    6582:	20 e0       	ldi	r18, 0x00	; 0
    6584:	30 e0       	ldi	r19, 0x00	; 0
    6586:	44 eb       	ldi	r20, 0xB4	; 180
    6588:	53 e4       	ldi	r21, 0x43	; 67
    658a:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    658e:	7b 01       	movw	r14, r22
    6590:	8c 01       	movw	r16, r24
    limited = 360.0*(degrees-floor(degrees));
    6592:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    6596:	9b 01       	movw	r18, r22
    6598:	ac 01       	movw	r20, r24
    659a:	c8 01       	movw	r24, r16
    659c:	b7 01       	movw	r22, r14
    659e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    65a2:	20 e0       	ldi	r18, 0x00	; 0
    65a4:	30 e0       	ldi	r19, 0x00	; 0
    65a6:	44 eb       	ldi	r20, 0xB4	; 180
    65a8:	53 e4       	ldi	r21, 0x43	; 67
    65aa:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    65ae:	7b 01       	movw	r14, r22
    65b0:	8c 01       	movw	r16, r24
    if      (limited < -180.0) limited += 360.0;
    65b2:	20 e0       	ldi	r18, 0x00	; 0
    65b4:	30 e0       	ldi	r19, 0x00	; 0
    65b6:	44 e3       	ldi	r20, 0x34	; 52
    65b8:	53 ec       	ldi	r21, 0xC3	; 195
    65ba:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    65be:	88 23       	and	r24, r24
    65c0:	4c f4       	brge	.+18     	; 0x65d4 <limit_degrees180pm+0x5a>
    65c2:	c8 01       	movw	r24, r16
    65c4:	b7 01       	movw	r22, r14
    65c6:	20 e0       	ldi	r18, 0x00	; 0
    65c8:	30 e0       	ldi	r19, 0x00	; 0
    65ca:	44 eb       	ldi	r20, 0xB4	; 180
    65cc:	53 e4       	ldi	r21, 0x43	; 67
    65ce:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    65d2:	12 c0       	rjmp	.+36     	; 0x65f8 <limit_degrees180pm+0x7e>
    else if (limited >  180.0) limited -= 360.0;
    65d4:	c8 01       	movw	r24, r16
    65d6:	b7 01       	movw	r22, r14
    65d8:	20 e0       	ldi	r18, 0x00	; 0
    65da:	30 e0       	ldi	r19, 0x00	; 0
    65dc:	44 e3       	ldi	r20, 0x34	; 52
    65de:	53 e4       	ldi	r21, 0x43	; 67
    65e0:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    65e4:	18 16       	cp	r1, r24
    65e6:	54 f4       	brge	.+20     	; 0x65fc <limit_degrees180pm+0x82>
    65e8:	c8 01       	movw	r24, r16
    65ea:	b7 01       	movw	r22, r14
    65ec:	20 e0       	ldi	r18, 0x00	; 0
    65ee:	30 e0       	ldi	r19, 0x00	; 0
    65f0:	44 eb       	ldi	r20, 0xB4	; 180
    65f2:	53 e4       	ldi	r21, 0x43	; 67
    65f4:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    65f8:	7b 01       	movw	r14, r22
    65fa:	8c 01       	movw	r16, r24

    return limited;
}
    65fc:	b7 01       	movw	r22, r14
    65fe:	c8 01       	movw	r24, r16
    6600:	1f 91       	pop	r17
    6602:	0f 91       	pop	r16
    6604:	ff 90       	pop	r15
    6606:	ef 90       	pop	r14
    6608:	08 95       	ret

0000660a <limit_degrees>:
{
    return (PI/180.0)*degrees;
}

double limit_degrees(double degrees)
{
    660a:	ef 92       	push	r14
    660c:	ff 92       	push	r15
    660e:	0f 93       	push	r16
    6610:	1f 93       	push	r17
    double limited;

    degrees /= 360.0;
    6612:	20 e0       	ldi	r18, 0x00	; 0
    6614:	30 e0       	ldi	r19, 0x00	; 0
    6616:	44 eb       	ldi	r20, 0xB4	; 180
    6618:	53 e4       	ldi	r21, 0x43	; 67
    661a:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    661e:	7b 01       	movw	r14, r22
    6620:	8c 01       	movw	r16, r24
    limited = 360.0*(degrees-floor(degrees));
    6622:	0e 94 8b 62 	call	0xc516	; 0xc516 <floor>
    6626:	9b 01       	movw	r18, r22
    6628:	ac 01       	movw	r20, r24
    662a:	c8 01       	movw	r24, r16
    662c:	b7 01       	movw	r22, r14
    662e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6632:	20 e0       	ldi	r18, 0x00	; 0
    6634:	30 e0       	ldi	r19, 0x00	; 0
    6636:	44 eb       	ldi	r20, 0xB4	; 180
    6638:	53 e4       	ldi	r21, 0x43	; 67
    663a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    663e:	7b 01       	movw	r14, r22
    6640:	8c 01       	movw	r16, r24
    if (limited < 0) limited += 360.0;
    6642:	20 e0       	ldi	r18, 0x00	; 0
    6644:	30 e0       	ldi	r19, 0x00	; 0
    6646:	40 e0       	ldi	r20, 0x00	; 0
    6648:	50 e0       	ldi	r21, 0x00	; 0
    664a:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    664e:	88 23       	and	r24, r24
    6650:	54 f4       	brge	.+20     	; 0x6666 <limit_degrees+0x5c>
    6652:	c8 01       	movw	r24, r16
    6654:	b7 01       	movw	r22, r14
    6656:	20 e0       	ldi	r18, 0x00	; 0
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	44 eb       	ldi	r20, 0xB4	; 180
    665c:	53 e4       	ldi	r21, 0x43	; 67
    665e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6662:	7b 01       	movw	r14, r22
    6664:	8c 01       	movw	r16, r24

    return limited;
}
    6666:	b7 01       	movw	r22, r14
    6668:	c8 01       	movw	r24, r16
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	ff 90       	pop	r15
    6670:	ef 90       	pop	r14
    6672:	08 95       	ret

00006674 <sun_mean_longitude>:
    return rad2deg(acos(cos(zenith_rad)*cos(slope_rad)  +
                        sin(slope_rad )*sin(zenith_rad) * cos(deg2rad(azimuth180 - azm_rotation))));
}

double sun_mean_longitude(double jme)
{
    6674:	ef 92       	push	r14
    6676:	ff 92       	push	r15
    6678:	0f 93       	push	r16
    667a:	1f 93       	push	r17
    667c:	7b 01       	movw	r14, r22
    667e:	8c 01       	movw	r16, r24
    return limit_degrees(280.4664567 + jme*(360007.6982779 + jme*(0.03032028 +
    6680:	2d eb       	ldi	r18, 0xBD	; 189
    6682:	37 e3       	ldi	r19, 0x37	; 55
    6684:	46 e0       	ldi	r20, 0x06	; 6
    6686:	55 eb       	ldi	r21, 0xB5	; 181
    6688:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    668c:	2a e9       	ldi	r18, 0x9A	; 154
    668e:	31 e1       	ldi	r19, 0x11	; 17
    6690:	49 e8       	ldi	r20, 0x89	; 137
    6692:	58 e3       	ldi	r21, 0x38	; 56
    6694:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6698:	9b 01       	movw	r18, r22
    669a:	ac 01       	movw	r20, r24
    669c:	c8 01       	movw	r24, r16
    669e:	b7 01       	movw	r22, r14
    66a0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    66a4:	27 e0       	ldi	r18, 0x07	; 7
    66a6:	31 e0       	ldi	r19, 0x01	; 1
    66a8:	48 ea       	ldi	r20, 0xA8	; 168
    66aa:	57 e3       	ldi	r21, 0x37	; 55
    66ac:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    66b0:	9b 01       	movw	r18, r22
    66b2:	ac 01       	movw	r20, r24
    66b4:	c8 01       	movw	r24, r16
    66b6:	b7 01       	movw	r22, r14
    66b8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    66bc:	2c e3       	ldi	r18, 0x3C	; 60
    66be:	32 e6       	ldi	r19, 0x62	; 98
    66c0:	48 ef       	ldi	r20, 0xF8	; 248
    66c2:	5c e3       	ldi	r21, 0x3C	; 60
    66c4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    66c8:	9b 01       	movw	r18, r22
    66ca:	ac 01       	movw	r20, r24
    66cc:	c8 01       	movw	r24, r16
    66ce:	b7 01       	movw	r22, r14
    66d0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    66d4:	26 ef       	ldi	r18, 0xF6	; 246
    66d6:	38 ec       	ldi	r19, 0xC8	; 200
    66d8:	4f ea       	ldi	r20, 0xAF	; 175
    66da:	58 e4       	ldi	r21, 0x48	; 72
    66dc:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    66e0:	9b 01       	movw	r18, r22
    66e2:	ac 01       	movw	r20, r24
    66e4:	c8 01       	movw	r24, r16
    66e6:	b7 01       	movw	r22, r14
    66e8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    66ec:	25 eb       	ldi	r18, 0xB5	; 181
    66ee:	3b e3       	ldi	r19, 0x3B	; 59
    66f0:	4c e8       	ldi	r20, 0x8C	; 140
    66f2:	53 e4       	ldi	r21, 0x43	; 67
    66f4:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    66f8:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>
                    jme*(1/49931.0   + jme*(-1/15300.0     + jme*(-1/2000000.0))))));
}
    66fc:	1f 91       	pop	r17
    66fe:	0f 91       	pop	r16
    6700:	ff 90       	pop	r15
    6702:	ef 90       	pop	r14
    6704:	08 95       	ret

00006706 <observer_hour_angle>:
    return rad2deg(asin(sin(beta_rad)*cos(epsilon_rad) +
                        cos(beta_rad)*sin(epsilon_rad)*sin(deg2rad(lamda))));
}

double observer_hour_angle(double nu, double longitude, double alpha_deg)
{
    6706:	ef 92       	push	r14
    6708:	ff 92       	push	r15
    670a:	0f 93       	push	r16
    670c:	1f 93       	push	r17
    return limit_degrees(nu + longitude - alpha_deg);
    670e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6712:	a8 01       	movw	r20, r16
    6714:	97 01       	movw	r18, r14
    6716:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    671a:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>
}
    671e:	1f 91       	pop	r17
    6720:	0f 91       	pop	r16
    6722:	ff 90       	pop	r15
    6724:	ef 90       	pop	r14
    6726:	08 95       	ret

00006728 <geocentric_sun_right_ascension>:
{
    return nu0 + delta_psi*cos(deg2rad(epsilon));
}

double geocentric_sun_right_ascension(double lamda, double epsilon, double beta)
{
    6728:	2f 92       	push	r2
    672a:	3f 92       	push	r3
    672c:	4f 92       	push	r4
    672e:	5f 92       	push	r5
    6730:	6f 92       	push	r6
    6732:	7f 92       	push	r7
    6734:	8f 92       	push	r8
    6736:	9f 92       	push	r9
    6738:	af 92       	push	r10
    673a:	bf 92       	push	r11
    673c:	cf 92       	push	r12
    673e:	df 92       	push	r13
    6740:	ef 92       	push	r14
    6742:	ff 92       	push	r15
    6744:	0f 93       	push	r16
    6746:	1f 93       	push	r17
    6748:	df 93       	push	r29
    674a:	cf 93       	push	r28
    674c:	cd b7       	in	r28, 0x3d	; 61
    674e:	de b7       	in	r29, 0x3e	; 62
    6750:	2c 97       	sbiw	r28, 0x0c	; 12
    6752:	0f b6       	in	r0, 0x3f	; 63
    6754:	f8 94       	cli
    6756:	de bf       	out	0x3e, r29	; 62
    6758:	0f be       	out	0x3f, r0	; 63
    675a:	cd bf       	out	0x3d, r28	; 61
    675c:	59 01       	movw	r10, r18
    675e:	6a 01       	movw	r12, r20
    return (180.0/PI)*radians;
}

double deg2rad(double degrees)
{
    return (PI/180.0)*degrees;
    6760:	25 e3       	ldi	r18, 0x35	; 53
    6762:	3a ef       	ldi	r19, 0xFA	; 250
    6764:	4e e8       	ldi	r20, 0x8E	; 142
    6766:	5c e3       	ldi	r21, 0x3C	; 60
    6768:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    676c:	3b 01       	movw	r6, r22
    676e:	4c 01       	movw	r8, r24
double geocentric_sun_right_ascension(double lamda, double epsilon, double beta)
{
    double lamda_rad   = deg2rad(lamda);
    double epsilon_rad = deg2rad(epsilon);

    return limit_degrees(rad2deg(atan2(sin(lamda_rad)*cos(epsilon_rad) -
    6770:	c6 01       	movw	r24, r12
    6772:	b5 01       	movw	r22, r10
    6774:	25 e3       	ldi	r18, 0x35	; 53
    6776:	3a ef       	ldi	r19, 0xFA	; 250
    6778:	4e e8       	ldi	r20, 0x8E	; 142
    677a:	5c e3       	ldi	r21, 0x3C	; 60
    677c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6780:	5b 01       	movw	r10, r22
    6782:	6c 01       	movw	r12, r24
    6784:	b3 01       	movw	r22, r6
    6786:	c4 01       	movw	r24, r8
    6788:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    678c:	69 87       	std	Y+9, r22	; 0x09
    678e:	7a 87       	std	Y+10, r23	; 0x0a
    6790:	8b 87       	std	Y+11, r24	; 0x0b
    6792:	9c 87       	std	Y+12, r25	; 0x0c
    6794:	b5 01       	movw	r22, r10
    6796:	c6 01       	movw	r24, r12
    6798:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    679c:	6d 83       	std	Y+5, r22	; 0x05
    679e:	7e 83       	std	Y+6, r23	; 0x06
    67a0:	8f 83       	std	Y+7, r24	; 0x07
    67a2:	98 87       	std	Y+8, r25	; 0x08
    67a4:	c8 01       	movw	r24, r16
    67a6:	b7 01       	movw	r22, r14
    67a8:	25 e3       	ldi	r18, 0x35	; 53
    67aa:	3a ef       	ldi	r19, 0xFA	; 250
    67ac:	4e e8       	ldi	r20, 0x8E	; 142
    67ae:	5c e3       	ldi	r21, 0x3C	; 60
    67b0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    67b4:	0e 94 02 65 	call	0xca04	; 0xca04 <tan>
    67b8:	69 83       	std	Y+1, r22	; 0x01
    67ba:	7a 83       	std	Y+2, r23	; 0x02
    67bc:	8b 83       	std	Y+3, r24	; 0x03
    67be:	9c 83       	std	Y+4, r25	; 0x04
    67c0:	b5 01       	movw	r22, r10
    67c2:	c6 01       	movw	r24, r12
    67c4:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    67c8:	1b 01       	movw	r2, r22
    67ca:	2c 01       	movw	r4, r24
    67cc:	b3 01       	movw	r22, r6
    67ce:	c4 01       	movw	r24, r8
    67d0:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    67d4:	5b 01       	movw	r10, r22
    67d6:	6c 01       	movw	r12, r24
    67d8:	69 85       	ldd	r22, Y+9	; 0x09
    67da:	7a 85       	ldd	r23, Y+10	; 0x0a
    67dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    67de:	9c 85       	ldd	r25, Y+12	; 0x0c
    67e0:	2d 81       	ldd	r18, Y+5	; 0x05
    67e2:	3e 81       	ldd	r19, Y+6	; 0x06
    67e4:	4f 81       	ldd	r20, Y+7	; 0x07
    67e6:	58 85       	ldd	r21, Y+8	; 0x08
    67e8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    67ec:	7b 01       	movw	r14, r22
    67ee:	8c 01       	movw	r16, r24
    67f0:	69 81       	ldd	r22, Y+1	; 0x01
    67f2:	7a 81       	ldd	r23, Y+2	; 0x02
    67f4:	8b 81       	ldd	r24, Y+3	; 0x03
    67f6:	9c 81       	ldd	r25, Y+4	; 0x04
    67f8:	a2 01       	movw	r20, r4
    67fa:	91 01       	movw	r18, r2
    67fc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6800:	9b 01       	movw	r18, r22
    6802:	ac 01       	movw	r20, r24
    6804:	c8 01       	movw	r24, r16
    6806:	b7 01       	movw	r22, r14
    6808:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    680c:	a6 01       	movw	r20, r12
    680e:	95 01       	movw	r18, r10
    6810:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    6814:	20 ee       	ldi	r18, 0xE0	; 224
    6816:	3e e2       	ldi	r19, 0x2E	; 46
    6818:	45 e6       	ldi	r20, 0x65	; 101
    681a:	52 e4       	ldi	r21, 0x42	; 66
    681c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6820:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>
                                       tan(deg2rad(beta))*sin(epsilon_rad), cos(lamda_rad))));
}
    6824:	2c 96       	adiw	r28, 0x0c	; 12
    6826:	0f b6       	in	r0, 0x3f	; 63
    6828:	f8 94       	cli
    682a:	de bf       	out	0x3e, r29	; 62
    682c:	0f be       	out	0x3f, r0	; 63
    682e:	cd bf       	out	0x3d, r28	; 61
    6830:	cf 91       	pop	r28
    6832:	df 91       	pop	r29
    6834:	1f 91       	pop	r17
    6836:	0f 91       	pop	r16
    6838:	ff 90       	pop	r15
    683a:	ef 90       	pop	r14
    683c:	df 90       	pop	r13
    683e:	cf 90       	pop	r12
    6840:	bf 90       	pop	r11
    6842:	af 90       	pop	r10
    6844:	9f 90       	pop	r9
    6846:	8f 90       	pop	r8
    6848:	7f 90       	pop	r7
    684a:	6f 90       	pop	r6
    684c:	5f 90       	pop	r5
    684e:	4f 90       	pop	r4
    6850:	3f 90       	pop	r3
    6852:	2f 90       	pop	r2
    6854:	08 95       	ret

00006856 <greenwich_mean_sidereal_time>:
{
    return theta + delta_psi + delta_tau;
}

double greenwich_mean_sidereal_time (double jd, double jc)
{
    6856:	6f 92       	push	r6
    6858:	7f 92       	push	r7
    685a:	8f 92       	push	r8
    685c:	9f 92       	push	r9
    685e:	af 92       	push	r10
    6860:	bf 92       	push	r11
    6862:	cf 92       	push	r12
    6864:	df 92       	push	r13
    6866:	ef 92       	push	r14
    6868:	ff 92       	push	r15
    686a:	0f 93       	push	r16
    686c:	1f 93       	push	r17
    686e:	79 01       	movw	r14, r18
    6870:	8a 01       	movw	r16, r20
    return limit_degrees(280.46061837 + 360.98564736629 * (jd - 2451545.0) +
    6872:	24 e6       	ldi	r18, 0x64	; 100
    6874:	31 ea       	ldi	r19, 0xA1	; 161
    6876:	45 e1       	ldi	r20, 0x15	; 21
    6878:	5a e4       	ldi	r21, 0x4A	; 74
    687a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    687e:	2a e2       	ldi	r18, 0x2A	; 42
    6880:	3e e7       	ldi	r19, 0x7E	; 126
    6882:	44 eb       	ldi	r20, 0xB4	; 180
    6884:	53 e4       	ldi	r21, 0x43	; 67
    6886:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    688a:	26 ef       	ldi	r18, 0xF6	; 246
    688c:	3a e3       	ldi	r19, 0x3A	; 58
    688e:	4c e8       	ldi	r20, 0x8C	; 140
    6890:	53 e4       	ldi	r21, 0x43	; 67
    6892:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6896:	3b 01       	movw	r6, r22
    6898:	4c 01       	movw	r8, r24
    689a:	c8 01       	movw	r24, r16
    689c:	b7 01       	movw	r22, r14
    689e:	a8 01       	movw	r20, r16
    68a0:	97 01       	movw	r18, r14
    68a2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    68a6:	5b 01       	movw	r10, r22
    68a8:	6c 01       	movw	r12, r24
    68aa:	c8 01       	movw	r24, r16
    68ac:	b7 01       	movw	r22, r14
    68ae:	2c eb       	ldi	r18, 0xBC	; 188
    68b0:	3a ea       	ldi	r19, 0xAA	; 170
    68b2:	43 e1       	ldi	r20, 0x13	; 19
    68b4:	5c ec       	ldi	r21, 0xCC	; 204
    68b6:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    68ba:	2c e7       	ldi	r18, 0x7C	; 124
    68bc:	33 e6       	ldi	r19, 0x63	; 99
    68be:	4b ec       	ldi	r20, 0xCB	; 203
    68c0:	59 e3       	ldi	r21, 0x39	; 57
    68c2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    68c6:	9b 01       	movw	r18, r22
    68c8:	ac 01       	movw	r20, r24
    68ca:	c6 01       	movw	r24, r12
    68cc:	b5 01       	movw	r22, r10
    68ce:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    68d2:	9b 01       	movw	r18, r22
    68d4:	ac 01       	movw	r20, r24
    68d6:	c4 01       	movw	r24, r8
    68d8:	b3 01       	movw	r22, r6
    68da:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    68de:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>
                                       jc*jc*(0.000387933 - jc/38710000.0));
}
    68e2:	1f 91       	pop	r17
    68e4:	0f 91       	pop	r16
    68e6:	ff 90       	pop	r15
    68e8:	ef 90       	pop	r14
    68ea:	df 90       	pop	r13
    68ec:	cf 90       	pop	r12
    68ee:	bf 90       	pop	r11
    68f0:	af 90       	pop	r10
    68f2:	9f 90       	pop	r9
    68f4:	8f 90       	pop	r8
    68f6:	7f 90       	pop	r7
    68f8:	6f 90       	pop	r6
    68fa:	08 95       	ret

000068fc <earth_heliocentric_longitude>:

    return sum;
}

double earth_heliocentric_longitude(double jme)
{
    68fc:	2f 92       	push	r2
    68fe:	3f 92       	push	r3
    6900:	4f 92       	push	r4
    6902:	5f 92       	push	r5
    6904:	6f 92       	push	r6
    6906:	7f 92       	push	r7
    6908:	8f 92       	push	r8
    690a:	9f 92       	push	r9
    690c:	af 92       	push	r10
    690e:	bf 92       	push	r11
    6910:	cf 92       	push	r12
    6912:	df 92       	push	r13
    6914:	ef 92       	push	r14
    6916:	ff 92       	push	r15
    6918:	0f 93       	push	r16
    691a:	1f 93       	push	r17
    691c:	df 93       	push	r29
    691e:	cf 93       	push	r28
    6920:	cd b7       	in	r28, 0x3d	; 61
    6922:	de b7       	in	r29, 0x3e	; 62
    6924:	a8 97       	sbiw	r28, 0x28	; 40
    6926:	0f b6       	in	r0, 0x3f	; 63
    6928:	f8 94       	cli
    692a:	de bf       	out	0x3e, r29	; 62
    692c:	0f be       	out	0x3f, r0	; 63
    692e:	cd bf       	out	0x3d, r28	; 61
    6930:	6d a3       	std	Y+37, r22	; 0x25
    6932:	7e a3       	std	Y+38, r23	; 0x26
    6934:	8f a3       	std	Y+39, r24	; 0x27
    6936:	98 a7       	std	Y+40, r25	; 0x28
    6938:	2c e0       	ldi	r18, 0x0C	; 12
    693a:	32 e0       	ldi	r19, 0x02	; 2
    693c:	3e 8f       	std	Y+30, r19	; 0x1e
    693e:	2d 8f       	std	Y+29, r18	; 0x1d
    6940:	ce 01       	movw	r24, r28
    6942:	01 96       	adiw	r24, 0x01	; 1
    6944:	9c 8f       	std	Y+28, r25	; 0x1c
    6946:	8b 8f       	std	Y+27, r24	; 0x1b
    6948:	e4 ee       	ldi	r30, 0xE4	; 228
    694a:	f2 e0       	ldi	r31, 0x02	; 2
    694c:	f8 a3       	std	Y+32, r31	; 0x20
    694e:	ef 8f       	std	Y+31, r30	; 0x1f
    6950:	66 c0       	rjmp	.+204    	; 0x6a1e <earth_heliocentric_longitude+0x122>
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < l_subcount[i]; j++)
	        sum_epts += (double)pgm_read_dword(&(L_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(L_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(L_TERMS[i][j][TERM_C]))*jme);
    6952:	e9 8d       	ldd	r30, Y+25	; 0x19
    6954:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6956:	65 90       	lpm	r6, Z+
    6958:	75 90       	lpm	r7, Z+
    695a:	85 90       	lpm	r8, Z+
    695c:	94 90       	lpm	r9, Z+
    695e:	e9 8d       	ldd	r30, Y+25	; 0x19
    6960:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6962:	34 96       	adiw	r30, 0x04	; 4
    6964:	65 91       	lpm	r22, Z+
    6966:	75 91       	lpm	r23, Z+
    6968:	85 91       	lpm	r24, Z+
    696a:	94 91       	lpm	r25, Z+
    696c:	e9 8d       	ldd	r30, Y+25	; 0x19
    696e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6970:	38 96       	adiw	r30, 0x08	; 8
    6972:	e5 90       	lpm	r14, Z+
    6974:	f5 90       	lpm	r15, Z+
    6976:	05 91       	lpm	r16, Z+
    6978:	14 91       	lpm	r17, Z+
    697a:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    697e:	5b 01       	movw	r10, r22
    6980:	6c 01       	movw	r12, r24
    6982:	c8 01       	movw	r24, r16
    6984:	b7 01       	movw	r22, r14
    6986:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    698a:	2d a1       	ldd	r18, Y+37	; 0x25
    698c:	3e a1       	ldd	r19, Y+38	; 0x26
    698e:	4f a1       	ldd	r20, Y+39	; 0x27
    6990:	58 a5       	ldd	r21, Y+40	; 0x28
    6992:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6996:	9b 01       	movw	r18, r22
    6998:	ac 01       	movw	r20, r24
    699a:	c6 01       	movw	r24, r12
    699c:	b5 01       	movw	r22, r10
    699e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    69a2:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    69a6:	7b 01       	movw	r14, r22
    69a8:	8c 01       	movw	r16, r24
    69aa:	c4 01       	movw	r24, r8
    69ac:	b3 01       	movw	r22, r6
    69ae:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    69b2:	a8 01       	movw	r20, r16
    69b4:	97 01       	movw	r18, r14
    69b6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    69ba:	9b 01       	movw	r18, r22
    69bc:	ac 01       	movw	r20, r24
    69be:	c2 01       	movw	r24, r4
    69c0:	b1 01       	movw	r22, r2
    69c2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    69c6:	1b 01       	movw	r2, r22
    69c8:	2c 01       	movw	r4, r24
    for (i = 0; i < L_COUNT; i++)
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < l_subcount[i]; j++)
    69ca:	29 a1       	ldd	r18, Y+33	; 0x21
    69cc:	3a a1       	ldd	r19, Y+34	; 0x22
    69ce:	2f 5f       	subi	r18, 0xFF	; 255
    69d0:	3f 4f       	sbci	r19, 0xFF	; 255
    69d2:	3a a3       	std	Y+34, r19	; 0x22
    69d4:	29 a3       	std	Y+33, r18	; 0x21
    69d6:	89 8d       	ldd	r24, Y+25	; 0x19
    69d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    69da:	0c 96       	adiw	r24, 0x0c	; 12
    69dc:	9a 8f       	std	Y+26, r25	; 0x1a
    69de:	89 8f       	std	Y+25, r24	; 0x19
    69e0:	e9 a1       	ldd	r30, Y+33	; 0x21
    69e2:	fa a1       	ldd	r31, Y+34	; 0x22
    69e4:	2b a1       	ldd	r18, Y+35	; 0x23
    69e6:	3c a1       	ldd	r19, Y+36	; 0x24
    69e8:	e2 17       	cp	r30, r18
    69ea:	f3 07       	cpc	r31, r19
    69ec:	0c f4       	brge	.+2      	; 0x69f0 <earth_heliocentric_longitude+0xf4>
    69ee:	b1 cf       	rjmp	.-158    	; 0x6952 <earth_heliocentric_longitude+0x56>
	        sum_epts += (double)pgm_read_dword(&(L_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(L_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(L_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
    69f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    69f2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    69f4:	21 92       	st	Z+, r2
    69f6:	31 92       	st	Z+, r3
    69f8:	41 92       	st	Z+, r4
    69fa:	51 92       	st	Z+, r5
    69fc:	fc 8f       	std	Y+28, r31	; 0x1c
    69fe:	eb 8f       	std	Y+27, r30	; 0x1b
    6a00:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6a02:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6a04:	2e 5f       	subi	r18, 0xFE	; 254
    6a06:	3f 4f       	sbci	r19, 0xFF	; 255
    6a08:	3e 8f       	std	Y+30, r19	; 0x1e
    6a0a:	2d 8f       	std	Y+29, r18	; 0x1d
    6a0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a0e:	98 a1       	ldd	r25, Y+32	; 0x20
    6a10:	80 50       	subi	r24, 0x00	; 0
    6a12:	9d 4f       	sbci	r25, 0xFD	; 253
    6a14:	98 a3       	std	Y+32, r25	; 0x20
    6a16:	8f 8f       	std	Y+31, r24	; 0x1f
double earth_heliocentric_longitude(double jme)
{
    double sum[L_COUNT];
    int i;

    for (i = 0; i < L_COUNT; i++)
    6a18:	28 51       	subi	r18, 0x18	; 24
    6a1a:	32 40       	sbci	r19, 0x02	; 2
    6a1c:	c1 f0       	breq	.+48     	; 0x6a4e <earth_heliocentric_longitude+0x152>
	{
	    int j;
	    double sum_epts=0;

	    for (j = 0; j < l_subcount[i]; j++)
    6a1e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    6a20:	fe 8d       	ldd	r31, Y+30	; 0x1e
    6a22:	01 90       	ld	r0, Z+
    6a24:	f0 81       	ld	r31, Z
    6a26:	e0 2d       	mov	r30, r0
    6a28:	fc a3       	std	Y+36, r31	; 0x24
    6a2a:	eb a3       	std	Y+35, r30	; 0x23
    6a2c:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6a2e:	38 a1       	ldd	r19, Y+32	; 0x20
    6a30:	3a 8f       	std	Y+26, r19	; 0x1a
    6a32:	29 8f       	std	Y+25, r18	; 0x19
    6a34:	1a a2       	std	Y+34, r1	; 0x22
    6a36:	19 a2       	std	Y+33, r1	; 0x21
    6a38:	0f 2e       	mov	r0, r31
    6a3a:	f0 e0       	ldi	r31, 0x00	; 0
    6a3c:	2f 2e       	mov	r2, r31
    6a3e:	f0 e0       	ldi	r31, 0x00	; 0
    6a40:	3f 2e       	mov	r3, r31
    6a42:	f0 e0       	ldi	r31, 0x00	; 0
    6a44:	4f 2e       	mov	r4, r31
    6a46:	f0 e0       	ldi	r31, 0x00	; 0
    6a48:	5f 2e       	mov	r5, r31
    6a4a:	f0 2d       	mov	r31, r0
    6a4c:	c9 cf       	rjmp	.-110    	; 0x69e0 <earth_heliocentric_longitude+0xe4>
	        sum_epts += (double)pgm_read_dword(&(L_TERMS[i][j][TERM_A]))*cos((double)pgm_read_dword(&(L_TERMS[i][j][TERM_B]))+(double)pgm_read_dword(&(L_TERMS[i][j][TERM_C]))*jme);

	    sum[i] = sum_epts;
	}
    return limit_degrees(rad2deg(earth_values(sum, L_COUNT, jme)));
    6a4e:	ce 01       	movw	r24, r28
    6a50:	01 96       	adiw	r24, 0x01	; 1
    6a52:	66 e0       	ldi	r22, 0x06	; 6
    6a54:	70 e0       	ldi	r23, 0x00	; 0
    6a56:	2d a1       	ldd	r18, Y+37	; 0x25
    6a58:	3e a1       	ldd	r19, Y+38	; 0x26
    6a5a:	4f a1       	ldd	r20, Y+39	; 0x27
    6a5c:	58 a5       	ldd	r21, Y+40	; 0x28
    6a5e:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <earth_values>
    6a62:	20 ee       	ldi	r18, 0xE0	; 224
    6a64:	3e e2       	ldi	r19, 0x2E	; 46
    6a66:	45 e6       	ldi	r20, 0x65	; 101
    6a68:	52 e4       	ldi	r21, 0x42	; 66
    6a6a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6a6e:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>

}
    6a72:	a8 96       	adiw	r28, 0x28	; 40
    6a74:	0f b6       	in	r0, 0x3f	; 63
    6a76:	f8 94       	cli
    6a78:	de bf       	out	0x3e, r29	; 62
    6a7a:	0f be       	out	0x3f, r0	; 63
    6a7c:	cd bf       	out	0x3d, r28	; 61
    6a7e:	cf 91       	pop	r28
    6a80:	df 91       	pop	r29
    6a82:	1f 91       	pop	r17
    6a84:	0f 91       	pop	r16
    6a86:	ff 90       	pop	r15
    6a88:	ef 90       	pop	r14
    6a8a:	df 90       	pop	r13
    6a8c:	cf 90       	pop	r12
    6a8e:	bf 90       	pop	r11
    6a90:	af 90       	pop	r10
    6a92:	9f 90       	pop	r9
    6a94:	8f 90       	pop	r8
    6a96:	7f 90       	pop	r7
    6a98:	6f 90       	pop	r6
    6a9a:	5f 90       	pop	r5
    6a9c:	4f 90       	pop	r4
    6a9e:	3f 90       	pop	r3
    6aa0:	2f 90       	pop	r2
    6aa2:	08 95       	ret

00006aa4 <calculate_geocentric_sun_right_ascension_and_declination>:
////////////////////////////////////////////////////////////////////////////////////////////////
// Calculate required SPA parameters to get the right ascension (alpha) and declination (delta)
// Note: JD must be already calculated and in structure
////////////////////////////////////////////////////////////////////////////////////////////////
void calculate_geocentric_sun_right_ascension_and_declination(spa_data *spa)
{
    6aa4:	2f 92       	push	r2
    6aa6:	3f 92       	push	r3
    6aa8:	4f 92       	push	r4
    6aaa:	5f 92       	push	r5
    6aac:	6f 92       	push	r6
    6aae:	7f 92       	push	r7
    6ab0:	8f 92       	push	r8
    6ab2:	9f 92       	push	r9
    6ab4:	af 92       	push	r10
    6ab6:	bf 92       	push	r11
    6ab8:	cf 92       	push	r12
    6aba:	df 92       	push	r13
    6abc:	ef 92       	push	r14
    6abe:	ff 92       	push	r15
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	df 93       	push	r29
    6ac6:	cf 93       	push	r28
    6ac8:	cd b7       	in	r28, 0x3d	; 61
    6aca:	de b7       	in	r29, 0x3e	; 62
    6acc:	64 97       	sbiw	r28, 0x14	; 20
    6ace:	0f b6       	in	r0, 0x3f	; 63
    6ad0:	f8 94       	cli
    6ad2:	de bf       	out	0x3e, r29	; 62
    6ad4:	0f be       	out	0x3f, r0	; 63
    6ad6:	cd bf       	out	0x3d, r28	; 61
    6ad8:	1c 01       	movw	r2, r24
    double x[TERM_X_COUNT];

    spa->jc = julian_century(spa->jd);
    6ada:	fc 01       	movw	r30, r24
    6adc:	e6 a8       	ldd	r14, Z+54	; 0x36
    6ade:	f7 a8       	ldd	r15, Z+55	; 0x37
    6ae0:	00 ad       	ldd	r16, Z+56	; 0x38
    6ae2:	11 ad       	ldd	r17, Z+57	; 0x39
    6ae4:	c8 01       	movw	r24, r16
    6ae6:	b7 01       	movw	r22, r14
    6ae8:	0e 94 a6 23 	call	0x474c	; 0x474c <julian_century>
    6aec:	f1 01       	movw	r30, r2
    6aee:	62 af       	std	Z+58, r22	; 0x3a
    6af0:	73 af       	std	Z+59, r23	; 0x3b
    6af2:	84 af       	std	Z+60, r24	; 0x3c
    6af4:	95 af       	std	Z+61, r25	; 0x3d

    spa->jde = julian_ephemeris_day(spa->jd, spa->delta_t);
    6af6:	24 85       	ldd	r18, Z+12	; 0x0c
    6af8:	35 85       	ldd	r19, Z+13	; 0x0d
    6afa:	46 85       	ldd	r20, Z+14	; 0x0e
    6afc:	57 85       	ldd	r21, Z+15	; 0x0f
    6afe:	c8 01       	movw	r24, r16
    6b00:	b7 01       	movw	r22, r14
    6b02:	0e 94 b3 23 	call	0x4766	; 0x4766 <julian_ephemeris_day>
    6b06:	2e e3       	ldi	r18, 0x3E	; 62
    6b08:	30 e0       	ldi	r19, 0x00	; 0
    6b0a:	22 0e       	add	r2, r18
    6b0c:	33 1e       	adc	r3, r19
    6b0e:	f1 01       	movw	r30, r2
    6b10:	61 93       	st	Z+, r22
    6b12:	71 93       	st	Z+, r23
    6b14:	81 93       	st	Z+, r24
    6b16:	91 93       	st	Z+, r25
    6b18:	1f 01       	movw	r2, r30
    spa->jce = julian_ephemeris_century(spa->jde);
    6b1a:	0e 94 cc 23 	call	0x4798	; 0x4798 <julian_ephemeris_century>
    6b1e:	f1 01       	movw	r30, r2
    6b20:	60 83       	st	Z, r22
    6b22:	71 83       	std	Z+1, r23	; 0x01
    6b24:	82 83       	std	Z+2, r24	; 0x02
    6b26:	93 83       	std	Z+3, r25	; 0x03
    6b28:	2e eb       	ldi	r18, 0xBE	; 190
    6b2a:	3f ef       	ldi	r19, 0xFF	; 255
    6b2c:	22 0e       	add	r2, r18
    6b2e:	33 1e       	adc	r3, r19
    spa->jme = julian_ephemeris_millennium(spa->jce);
    6b30:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <julian_ephemeris_millennium>
    6b34:	81 01       	movw	r16, r2
    6b36:	0a 5b       	subi	r16, 0xBA	; 186
    6b38:	1f 4f       	sbci	r17, 0xFF	; 255
    6b3a:	f8 01       	movw	r30, r16
    6b3c:	60 83       	st	Z, r22
    6b3e:	71 83       	std	Z+1, r23	; 0x01
    6b40:	82 83       	std	Z+2, r24	; 0x02
    6b42:	93 83       	std	Z+3, r25	; 0x03

    spa->l = earth_heliocentric_longitude(spa->jme);
    6b44:	0e 94 7e 34 	call	0x68fc	; 0x68fc <earth_heliocentric_longitude>
    6b48:	fa e4       	ldi	r31, 0x4A	; 74
    6b4a:	ef 2e       	mov	r14, r31
    6b4c:	f1 2c       	mov	r15, r1
    6b4e:	e2 0c       	add	r14, r2
    6b50:	f3 1c       	adc	r15, r3
    6b52:	f7 01       	movw	r30, r14
    6b54:	60 83       	st	Z, r22
    6b56:	71 83       	std	Z+1, r23	; 0x01
    6b58:	82 83       	std	Z+2, r24	; 0x02
    6b5a:	93 83       	std	Z+3, r25	; 0x03
    spa->b = earth_heliocentric_latitude(spa->jme);
    6b5c:	f8 01       	movw	r30, r16
    6b5e:	60 81       	ld	r22, Z
    6b60:	71 81       	ldd	r23, Z+1	; 0x01
    6b62:	82 81       	ldd	r24, Z+2	; 0x02
    6b64:	93 81       	ldd	r25, Z+3	; 0x03
    6b66:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <earth_heliocentric_latitude>
    6b6a:	2e e4       	ldi	r18, 0x4E	; 78
    6b6c:	30 e0       	ldi	r19, 0x00	; 0
    6b6e:	22 0e       	add	r2, r18
    6b70:	33 1e       	adc	r3, r19
    6b72:	f1 01       	movw	r30, r2
    6b74:	61 93       	st	Z+, r22
    6b76:	71 93       	st	Z+, r23
    6b78:	81 93       	st	Z+, r24
    6b7a:	91 93       	st	Z+, r25
    6b7c:	1f 01       	movw	r2, r30
    spa->r = earth_radius_vector(spa->jme);
    6b7e:	f8 01       	movw	r30, r16
    6b80:	60 81       	ld	r22, Z
    6b82:	71 81       	ldd	r23, Z+1	; 0x01
    6b84:	82 81       	ldd	r24, Z+2	; 0x02
    6b86:	93 81       	ldd	r25, Z+3	; 0x03
    6b88:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <earth_radius_vector>
    6b8c:	f1 01       	movw	r30, r2
    6b8e:	60 83       	st	Z, r22
    6b90:	71 83       	std	Z+1, r23	; 0x01
    6b92:	82 83       	std	Z+2, r24	; 0x02
    6b94:	93 83       	std	Z+3, r25	; 0x03
    6b96:	2e ea       	ldi	r18, 0xAE	; 174
    6b98:	3f ef       	ldi	r19, 0xFF	; 255
    6b9a:	22 0e       	add	r2, r18
    6b9c:	33 1e       	adc	r3, r19

}

double geocentric_longitude(double l)
{
    double theta = l + 180.0;
    6b9e:	f7 01       	movw	r30, r14
    6ba0:	60 81       	ld	r22, Z
    6ba2:	71 81       	ldd	r23, Z+1	; 0x01
    6ba4:	82 81       	ldd	r24, Z+2	; 0x02
    6ba6:	93 81       	ldd	r25, Z+3	; 0x03
    6ba8:	20 e0       	ldi	r18, 0x00	; 0
    6baa:	30 e0       	ldi	r19, 0x00	; 0
    6bac:	44 e3       	ldi	r20, 0x34	; 52
    6bae:	53 e4       	ldi	r21, 0x43	; 67
    6bb0:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6bb4:	7b 01       	movw	r14, r22
    6bb6:	8c 01       	movw	r16, r24

    if (theta >= 360.0) theta -= 360.0;
    6bb8:	20 e0       	ldi	r18, 0x00	; 0
    6bba:	30 e0       	ldi	r19, 0x00	; 0
    6bbc:	44 eb       	ldi	r20, 0xB4	; 180
    6bbe:	53 e4       	ldi	r21, 0x43	; 67
    6bc0:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    6bc4:	88 23       	and	r24, r24
    6bc6:	54 f0       	brlt	.+20     	; 0x6bdc <calculate_geocentric_sun_right_ascension_and_declination+0x138>
    6bc8:	c8 01       	movw	r24, r16
    6bca:	b7 01       	movw	r22, r14
    6bcc:	20 e0       	ldi	r18, 0x00	; 0
    6bce:	30 e0       	ldi	r19, 0x00	; 0
    6bd0:	44 eb       	ldi	r20, 0xB4	; 180
    6bd2:	53 e4       	ldi	r21, 0x43	; 67
    6bd4:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6bd8:	7b 01       	movw	r14, r22
    6bda:	8c 01       	movw	r16, r24

    spa->l = earth_heliocentric_longitude(spa->jme);
    spa->b = earth_heliocentric_latitude(spa->jme);
    spa->r = earth_radius_vector(spa->jme);

    spa->theta = geocentric_longitude(spa->l);
    6bdc:	e6 e5       	ldi	r30, 0x56	; 86
    6bde:	4e 2e       	mov	r4, r30
    6be0:	51 2c       	mov	r5, r1
    6be2:	42 0c       	add	r4, r2
    6be4:	53 1c       	adc	r5, r3
    6be6:	f2 01       	movw	r30, r4
    6be8:	e0 82       	st	Z, r14
    6bea:	f1 82       	std	Z+1, r15	; 0x01
    6bec:	02 83       	std	Z+2, r16	; 0x02
    6bee:	13 83       	std	Z+3, r17	; 0x03
    spa->beta  = geocentric_latitude(spa->b);
    6bf0:	7a e5       	ldi	r23, 0x5A	; 90
    6bf2:	67 2e       	mov	r6, r23
    6bf4:	71 2c       	mov	r7, r1
    6bf6:	62 0c       	add	r6, r2
    6bf8:	73 1c       	adc	r7, r3
    6bfa:	2e e4       	ldi	r18, 0x4E	; 78
    6bfc:	30 e0       	ldi	r19, 0x00	; 0
    6bfe:	22 0e       	add	r2, r18
    6c00:	33 1e       	adc	r3, r19
    6c02:	f1 01       	movw	r30, r2
    6c04:	80 81       	ld	r24, Z
    6c06:	91 81       	ldd	r25, Z+1	; 0x01
    6c08:	a2 81       	ldd	r26, Z+2	; 0x02
    6c0a:	b3 81       	ldd	r27, Z+3	; 0x03
    6c0c:	b0 58       	subi	r27, 0x80	; 128
    6c0e:	f3 01       	movw	r30, r6
    6c10:	80 83       	st	Z, r24
    6c12:	91 83       	std	Z+1, r25	; 0x01
    6c14:	a2 83       	std	Z+2, r26	; 0x02
    6c16:	b3 83       	std	Z+3, r27	; 0x03

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    6c18:	24 ef       	ldi	r18, 0xF4	; 244
    6c1a:	3f ef       	ldi	r19, 0xFF	; 255
    6c1c:	22 0e       	add	r2, r18
    6c1e:	33 1e       	adc	r3, r19
    6c20:	f1 01       	movw	r30, r2
    6c22:	e0 80       	ld	r14, Z
    6c24:	f1 80       	ldd	r15, Z+1	; 0x01
    6c26:	02 81       	ldd	r16, Z+2	; 0x02
    6c28:	13 81       	ldd	r17, Z+3	; 0x03
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    return ((a*x + b)*x + c)*x + d;
    6c2a:	c8 01       	movw	r24, r16
    6c2c:	b7 01       	movw	r22, r14
    6c2e:	21 eb       	ldi	r18, 0xB1	; 177
    6c30:	37 e1       	ldi	r19, 0x17	; 23
    6c32:	41 eb       	ldi	r20, 0xB1	; 177
    6c34:	56 e3       	ldi	r21, 0x36	; 54
    6c36:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6c3a:	25 ee       	ldi	r18, 0xE5	; 229
    6c3c:	35 ee       	ldi	r19, 0xE5	; 229
    6c3e:	4a ef       	ldi	r20, 0xFA	; 250
    6c40:	5a e3       	ldi	r21, 0x3A	; 58
    6c42:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6c46:	a8 01       	movw	r20, r16
    6c48:	97 01       	movw	r18, r14
    6c4a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6c4e:	24 e6       	ldi	r18, 0x64	; 100
    6c50:	3a e6       	ldi	r19, 0x6A	; 106
    6c52:	49 ed       	ldi	r20, 0xD9	; 217
    6c54:	58 e4       	ldi	r21, 0x48	; 72
    6c56:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6c5a:	a8 01       	movw	r20, r16
    6c5c:	97 01       	movw	r18, r14
    6c5e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6c62:	29 ed       	ldi	r18, 0xD9	; 217
    6c64:	3c ee       	ldi	r19, 0xEC	; 236
    6c66:	44 e9       	ldi	r20, 0x94	; 148
    6c68:	53 e4       	ldi	r21, 0x43	; 67
    6c6a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    spa->r = earth_radius_vector(spa->jme);

    spa->theta = geocentric_longitude(spa->l);
    spa->beta  = geocentric_latitude(spa->b);

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    6c6e:	2c e1       	ldi	r18, 0x1C	; 28
    6c70:	30 e0       	ldi	r19, 0x00	; 0
    6c72:	22 0e       	add	r2, r18
    6c74:	33 1e       	adc	r3, r19
    6c76:	9b 01       	movw	r18, r22
    6c78:	ac 01       	movw	r20, r24
    6c7a:	f1 01       	movw	r30, r2
    6c7c:	21 93       	st	Z+, r18
    6c7e:	31 93       	st	Z+, r19
    6c80:	41 93       	st	Z+, r20
    6c82:	51 93       	st	Z+, r21
    6c84:	1f 01       	movw	r2, r30
    6c86:	cb 01       	movw	r24, r22
    6c88:	da 01       	movw	r26, r20
    6c8a:	89 83       	std	Y+1, r24	; 0x01
    6c8c:	9a 83       	std	Y+2, r25	; 0x02
    6c8e:	ab 83       	std	Y+3, r26	; 0x03
    6c90:	bc 83       	std	Y+4, r27	; 0x04
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    return ((a*x + b)*x + c)*x + d;
    6c92:	c8 01       	movw	r24, r16
    6c94:	b7 01       	movw	r22, r14
    6c96:	2b e3       	ldi	r18, 0x3B	; 59
    6c98:	32 eb       	ldi	r19, 0xB2	; 178
    6c9a:	4f e5       	ldi	r20, 0x5F	; 95
    6c9c:	56 eb       	ldi	r21, 0xB6	; 182
    6c9e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6ca2:	24 e3       	ldi	r18, 0x34	; 52
    6ca4:	36 e1       	ldi	r19, 0x16	; 22
    6ca6:	48 e2       	ldi	r20, 0x28	; 40
    6ca8:	59 e3       	ldi	r21, 0x39	; 57
    6caa:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6cae:	a8 01       	movw	r20, r16
    6cb0:	97 01       	movw	r18, r14
    6cb2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6cb6:	2d e0       	ldi	r18, 0x0D	; 13
    6cb8:	3f e9       	ldi	r19, 0x9F	; 159
    6cba:	4c e0       	ldi	r20, 0x0C	; 12
    6cbc:	57 e4       	ldi	r21, 0x47	; 71
    6cbe:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6cc2:	a8 01       	movw	r20, r16
    6cc4:	97 01       	movw	r18, r14
    6cc6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6cca:	2c e8       	ldi	r18, 0x8C	; 140
    6ccc:	33 ec       	ldi	r19, 0xC3	; 195
    6cce:	42 eb       	ldi	r20, 0xB2	; 178
    6cd0:	53 e4       	ldi	r21, 0x43	; 67
    6cd2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>

    spa->theta = geocentric_longitude(spa->l);
    spa->beta  = geocentric_latitude(spa->b);

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    x[TERM_X1] = spa->x1 = mean_anomaly_sun(spa->jce);
    6cd6:	9b 01       	movw	r18, r22
    6cd8:	ac 01       	movw	r20, r24
    6cda:	f1 01       	movw	r30, r2
    6cdc:	21 93       	st	Z+, r18
    6cde:	31 93       	st	Z+, r19
    6ce0:	41 93       	st	Z+, r20
    6ce2:	51 93       	st	Z+, r21
    6ce4:	1f 01       	movw	r2, r30
    6ce6:	cb 01       	movw	r24, r22
    6ce8:	da 01       	movw	r26, r20
    6cea:	8d 83       	std	Y+5, r24	; 0x05
    6cec:	9e 83       	std	Y+6, r25	; 0x06
    6cee:	af 83       	std	Y+7, r26	; 0x07
    6cf0:	b8 87       	std	Y+8, r27	; 0x08
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    return ((a*x + b)*x + c)*x + d;
    6cf2:	c8 01       	movw	r24, r16
    6cf4:	b7 01       	movw	r22, r14
    6cf6:	2d e7       	ldi	r18, 0x7D	; 125
    6cf8:	31 e2       	ldi	r19, 0x21	; 33
    6cfa:	45 e9       	ldi	r20, 0x95	; 149
    6cfc:	57 e3       	ldi	r21, 0x37	; 55
    6cfe:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d02:	23 eb       	ldi	r18, 0xB3	; 179
    6d04:	3e e7       	ldi	r19, 0x7E	; 126
    6d06:	4e e0       	ldi	r20, 0x0E	; 14
    6d08:	5c e3       	ldi	r21, 0x3C	; 60
    6d0a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6d0e:	a8 01       	movw	r20, r16
    6d10:	97 01       	movw	r18, r14
    6d12:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d16:	2c ed       	ldi	r18, 0xDC	; 220
    6d18:	31 e0       	ldi	r19, 0x01	; 1
    6d1a:	49 ee       	ldi	r20, 0xE9	; 233
    6d1c:	58 e4       	ldi	r21, 0x48	; 72
    6d1e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6d22:	a8 01       	movw	r20, r16
    6d24:	97 01       	movw	r18, r14
    6d26:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d2a:	26 e8       	ldi	r18, 0x86	; 134
    6d2c:	36 ef       	ldi	r19, 0xF6	; 246
    6d2e:	46 e0       	ldi	r20, 0x06	; 6
    6d30:	53 e4       	ldi	r21, 0x43	; 67
    6d32:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    spa->theta = geocentric_longitude(spa->l);
    spa->beta  = geocentric_latitude(spa->b);

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    x[TERM_X1] = spa->x1 = mean_anomaly_sun(spa->jce);
    x[TERM_X2] = spa->x2 = mean_anomaly_moon(spa->jce);
    6d36:	9b 01       	movw	r18, r22
    6d38:	ac 01       	movw	r20, r24
    6d3a:	f1 01       	movw	r30, r2
    6d3c:	21 93       	st	Z+, r18
    6d3e:	31 93       	st	Z+, r19
    6d40:	41 93       	st	Z+, r20
    6d42:	51 93       	st	Z+, r21
    6d44:	1f 01       	movw	r2, r30
    6d46:	cb 01       	movw	r24, r22
    6d48:	da 01       	movw	r26, r20
    6d4a:	89 87       	std	Y+9, r24	; 0x09
    6d4c:	9a 87       	std	Y+10, r25	; 0x0a
    6d4e:	ab 87       	std	Y+11, r26	; 0x0b
    6d50:	bc 87       	std	Y+12, r27	; 0x0c
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    return ((a*x + b)*x + c)*x + d;
    6d52:	c8 01       	movw	r24, r16
    6d54:	b7 01       	movw	r22, r14
    6d56:	2b e7       	ldi	r18, 0x7B	; 123
    6d58:	3e e0       	ldi	r19, 0x0E	; 14
    6d5a:	4d e4       	ldi	r20, 0x4D	; 77
    6d5c:	56 e3       	ldi	r21, 0x36	; 54
    6d5e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d62:	29 e1       	ldi	r18, 0x19	; 25
    6d64:	36 e5       	ldi	r19, 0x56	; 86
    6d66:	41 e7       	ldi	r20, 0x71	; 113
    6d68:	5b e3       	ldi	r21, 0x3B	; 59
    6d6a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6d6e:	a8 01       	movw	r20, r16
    6d70:	97 01       	movw	r18, r14
    6d72:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d76:	21 e4       	ldi	r18, 0x41	; 65
    6d78:	30 ef       	ldi	r19, 0xF0	; 240
    6d7a:	4b ee       	ldi	r20, 0xEB	; 235
    6d7c:	58 e4       	ldi	r21, 0x48	; 72
    6d7e:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6d82:	a8 01       	movw	r20, r16
    6d84:	97 01       	movw	r18, r14
    6d86:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6d8a:	28 e3       	ldi	r18, 0x38	; 56
    6d8c:	3b e8       	ldi	r19, 0x8B	; 139
    6d8e:	4a eb       	ldi	r20, 0xBA	; 186
    6d90:	52 e4       	ldi	r21, 0x42	; 66
    6d92:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    spa->beta  = geocentric_latitude(spa->b);

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    x[TERM_X1] = spa->x1 = mean_anomaly_sun(spa->jce);
    x[TERM_X2] = spa->x2 = mean_anomaly_moon(spa->jce);
    x[TERM_X3] = spa->x3 = argument_latitude_moon(spa->jce);
    6d96:	9b 01       	movw	r18, r22
    6d98:	ac 01       	movw	r20, r24
    6d9a:	f1 01       	movw	r30, r2
    6d9c:	21 93       	st	Z+, r18
    6d9e:	31 93       	st	Z+, r19
    6da0:	41 93       	st	Z+, r20
    6da2:	51 93       	st	Z+, r21
    6da4:	1f 01       	movw	r2, r30
    6da6:	cb 01       	movw	r24, r22
    6da8:	da 01       	movw	r26, r20
    6daa:	8d 87       	std	Y+13, r24	; 0x0d
    6dac:	9e 87       	std	Y+14, r25	; 0x0e
    6dae:	af 87       	std	Y+15, r26	; 0x0f
    6db0:	b8 8b       	std	Y+16, r27	; 0x10
    return 24.0*limit_zero2one(dayfrac + timezone/24.0);
}

double third_order_polynomial(double a, double b, double c, double d, double x)
{
    return ((a*x + b)*x + c)*x + d;
    6db2:	c8 01       	movw	r24, r16
    6db4:	b7 01       	movw	r22, r14
    6db6:	2d e7       	ldi	r18, 0x7D	; 125
    6db8:	31 e2       	ldi	r19, 0x21	; 33
    6dba:	45 e1       	ldi	r20, 0x15	; 21
    6dbc:	56 e3       	ldi	r21, 0x36	; 54
    6dbe:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6dc2:	22 e4       	ldi	r18, 0x42	; 66
    6dc4:	36 eb       	ldi	r19, 0xB6	; 182
    6dc6:	47 e0       	ldi	r20, 0x07	; 7
    6dc8:	5b e3       	ldi	r21, 0x3B	; 59
    6dca:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6dce:	a8 01       	movw	r20, r16
    6dd0:	97 01       	movw	r18, r14
    6dd2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6dd6:	2c e5       	ldi	r18, 0x5C	; 92
    6dd8:	34 ec       	ldi	r19, 0xC4	; 196
    6dda:	41 ef       	ldi	r20, 0xF1	; 241
    6ddc:	54 e4       	ldi	r21, 0x44	; 68
    6dde:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    6de2:	a8 01       	movw	r20, r16
    6de4:	97 01       	movw	r18, r14
    6de6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6dea:	2b ec       	ldi	r18, 0xCB	; 203
    6dec:	36 e1       	ldi	r19, 0x16	; 22
    6dee:	4a ef       	ldi	r20, 0xFA	; 250
    6df0:	52 e4       	ldi	r21, 0x42	; 66
    6df2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>

    x[TERM_X0] = spa->x0 = mean_elongation_moon_sun(spa->jce);
    x[TERM_X1] = spa->x1 = mean_anomaly_sun(spa->jce);
    x[TERM_X2] = spa->x2 = mean_anomaly_moon(spa->jce);
    x[TERM_X3] = spa->x3 = argument_latitude_moon(spa->jce);
    x[TERM_X4] = spa->x4 = ascending_longitude_moon(spa->jce);
    6df6:	dc 01       	movw	r26, r24
    6df8:	9b 01       	movw	r18, r22
    6dfa:	ac 01       	movw	r20, r24
    6dfc:	f1 01       	movw	r30, r2
    6dfe:	20 83       	st	Z, r18
    6e00:	31 83       	std	Z+1, r19	; 0x01
    6e02:	42 83       	std	Z+2, r20	; 0x02
    6e04:	53 83       	std	Z+3, r21	; 0x03
    6e06:	22 e9       	ldi	r18, 0x92	; 146
    6e08:	3f ef       	ldi	r19, 0xFF	; 255
    6e0a:	22 0e       	add	r2, r18
    6e0c:	33 1e       	adc	r3, r19
    6e0e:	cb 01       	movw	r24, r22
    6e10:	89 8b       	std	Y+17, r24	; 0x11
    6e12:	9a 8b       	std	Y+18, r25	; 0x12
    6e14:	ab 8b       	std	Y+19, r26	; 0x13
    6e16:	bc 8b       	std	Y+20, r27	; 0x14

    nutation_longitude_and_obliquity(spa->jce, x, &(spa->del_psi), &(spa->del_epsilon));
    6e18:	62 e7       	ldi	r22, 0x72	; 114
    6e1a:	86 2e       	mov	r8, r22
    6e1c:	91 2c       	mov	r9, r1
    6e1e:	82 0c       	add	r8, r2
    6e20:	93 1c       	adc	r9, r3
    6e22:	56 e7       	ldi	r21, 0x76	; 118
    6e24:	c5 2e       	mov	r12, r21
    6e26:	d1 2c       	mov	r13, r1
    6e28:	c2 0c       	add	r12, r2
    6e2a:	d3 1c       	adc	r13, r3
    6e2c:	c8 01       	movw	r24, r16
    6e2e:	b7 01       	movw	r22, r14
    6e30:	ae 01       	movw	r20, r28
    6e32:	4f 5f       	subi	r20, 0xFF	; 255
    6e34:	5f 4f       	sbci	r21, 0xFF	; 255
    6e36:	94 01       	movw	r18, r8
    6e38:	86 01       	movw	r16, r12
    6e3a:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <nutation_longitude_and_obliquity>

    spa->epsilon0 = ecliptic_mean_obliquity(spa->jme);
    6e3e:	86 e4       	ldi	r24, 0x46	; 70
    6e40:	90 e0       	ldi	r25, 0x00	; 0
    6e42:	28 0e       	add	r2, r24
    6e44:	39 1e       	adc	r3, r25
    6e46:	f1 01       	movw	r30, r2
    6e48:	60 81       	ld	r22, Z
    6e4a:	71 81       	ldd	r23, Z+1	; 0x01
    6e4c:	82 81       	ldd	r24, Z+2	; 0x02
    6e4e:	93 81       	ldd	r25, Z+3	; 0x03
    6e50:	0e 94 37 25 	call	0x4a6e	; 0x4a6e <ecliptic_mean_obliquity>
    6e54:	9b 01       	movw	r18, r22
    6e56:	ac 01       	movw	r20, r24
    6e58:	84 e3       	ldi	r24, 0x34	; 52
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	28 0e       	add	r2, r24
    6e5e:	39 1e       	adc	r3, r25
    6e60:	f1 01       	movw	r30, r2
    6e62:	20 83       	st	Z, r18
    6e64:	31 83       	std	Z+1, r19	; 0x01
    6e66:	42 83       	std	Z+2, r20	; 0x02
    6e68:	53 83       	std	Z+3, r21	; 0x03
    6e6a:	86 e8       	ldi	r24, 0x86	; 134
    6e6c:	9f ef       	ldi	r25, 0xFF	; 255
    6e6e:	28 0e       	add	r2, r24
    6e70:	39 1e       	adc	r3, r25
    spa->epsilon  = ecliptic_true_obliquity(spa->del_epsilon, spa->epsilon0);
    6e72:	f6 01       	movw	r30, r12
    6e74:	60 81       	ld	r22, Z
    6e76:	71 81       	ldd	r23, Z+1	; 0x01
    6e78:	82 81       	ldd	r24, Z+2	; 0x02
    6e7a:	93 81       	ldd	r25, Z+3	; 0x03
    6e7c:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <ecliptic_true_obliquity>
    6e80:	4e e7       	ldi	r20, 0x7E	; 126
    6e82:	c4 2e       	mov	r12, r20
    6e84:	d1 2c       	mov	r13, r1
    6e86:	c2 0c       	add	r12, r2
    6e88:	d3 1c       	adc	r13, r3
    6e8a:	f6 01       	movw	r30, r12
    6e8c:	60 83       	st	Z, r22
    6e8e:	71 83       	std	Z+1, r23	; 0x01
    6e90:	82 83       	std	Z+2, r24	; 0x02
    6e92:	93 83       	std	Z+3, r25	; 0x03

    spa->del_tau   = aberration_correction(spa->r);
    6e94:	22 e5       	ldi	r18, 0x52	; 82
    6e96:	30 e0       	ldi	r19, 0x00	; 0
    6e98:	22 0e       	add	r2, r18
    6e9a:	33 1e       	adc	r3, r19
    6e9c:	f1 01       	movw	r30, r2
    6e9e:	60 81       	ld	r22, Z
    6ea0:	71 81       	ldd	r23, Z+1	; 0x01
    6ea2:	82 81       	ldd	r24, Z+2	; 0x02
    6ea4:	93 81       	ldd	r25, Z+3	; 0x03
    6ea6:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <aberration_correction>
    6eaa:	7b 01       	movw	r14, r22
    6eac:	8c 01       	movw	r16, r24
    6eae:	20 e3       	ldi	r18, 0x30	; 48
    6eb0:	30 e0       	ldi	r19, 0x00	; 0
    6eb2:	22 0e       	add	r2, r18
    6eb4:	33 1e       	adc	r3, r19
    6eb6:	f1 01       	movw	r30, r2
    6eb8:	60 83       	st	Z, r22
    6eba:	71 83       	std	Z+1, r23	; 0x01
    6ebc:	82 83       	std	Z+2, r24	; 0x02
    6ebe:	93 83       	std	Z+3, r25	; 0x03
    6ec0:	2e e7       	ldi	r18, 0x7E	; 126
    6ec2:	3f ef       	ldi	r19, 0xFF	; 255
    6ec4:	22 0e       	add	r2, r18
    6ec6:	33 1e       	adc	r3, r19
    spa->lamda     = apparent_sun_longitude(spa->theta, spa->del_psi, spa->del_tau);
    6ec8:	36 e8       	ldi	r19, 0x86	; 134
    6eca:	a3 2e       	mov	r10, r19
    6ecc:	b1 2c       	mov	r11, r1
    6ece:	a2 0c       	add	r10, r2
    6ed0:	b3 1c       	adc	r11, r3
    6ed2:	f2 01       	movw	r30, r4
    6ed4:	60 81       	ld	r22, Z
    6ed6:	71 81       	ldd	r23, Z+1	; 0x01
    6ed8:	82 81       	ldd	r24, Z+2	; 0x02
    6eda:	93 81       	ldd	r25, Z+3	; 0x03
    6edc:	f4 01       	movw	r30, r8
    6ede:	20 81       	ld	r18, Z
    6ee0:	31 81       	ldd	r19, Z+1	; 0x01
    6ee2:	42 81       	ldd	r20, Z+2	; 0x02
    6ee4:	53 81       	ldd	r21, Z+3	; 0x03
    6ee6:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6eea:	a8 01       	movw	r20, r16
    6eec:	97 01       	movw	r18, r14
    6eee:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6ef2:	f5 01       	movw	r30, r10
    6ef4:	60 83       	st	Z, r22
    6ef6:	71 83       	std	Z+1, r23	; 0x01
    6ef8:	82 83       	std	Z+2, r24	; 0x02
    6efa:	93 83       	std	Z+3, r25	; 0x03
    spa->nu0       = greenwich_mean_sidereal_time (spa->jd, spa->jc);
    6efc:	f1 01       	movw	r30, r2
    6efe:	66 a9       	ldd	r22, Z+54	; 0x36
    6f00:	77 a9       	ldd	r23, Z+55	; 0x37
    6f02:	80 ad       	ldd	r24, Z+56	; 0x38
    6f04:	91 ad       	ldd	r25, Z+57	; 0x39
    6f06:	22 ad       	ldd	r18, Z+58	; 0x3a
    6f08:	33 ad       	ldd	r19, Z+59	; 0x3b
    6f0a:	44 ad       	ldd	r20, Z+60	; 0x3c
    6f0c:	55 ad       	ldd	r21, Z+61	; 0x3d
    6f0e:	0e 94 2b 34 	call	0x6856	; 0x6856 <greenwich_mean_sidereal_time>
    6f12:	7b 01       	movw	r14, r22
    6f14:	8c 01       	movw	r16, r24
    6f16:	2a e8       	ldi	r18, 0x8A	; 138
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	22 0e       	add	r2, r18
    6f1c:	33 1e       	adc	r3, r19
    6f1e:	f1 01       	movw	r30, r2
    6f20:	61 93       	st	Z+, r22
    6f22:	71 93       	st	Z+, r23
    6f24:	81 93       	st	Z+, r24
    6f26:	91 93       	st	Z+, r25
    6f28:	1f 01       	movw	r2, r30
                                       jc*jc*(0.000387933 - jc/38710000.0));
}

double greenwich_sidereal_time (double nu0, double delta_psi, double epsilon)
{
    return nu0 + delta_psi*cos(deg2rad(epsilon));
    6f2a:	f6 01       	movw	r30, r12
    6f2c:	60 81       	ld	r22, Z
    6f2e:	71 81       	ldd	r23, Z+1	; 0x01
    6f30:	82 81       	ldd	r24, Z+2	; 0x02
    6f32:	93 81       	ldd	r25, Z+3	; 0x03
    6f34:	25 e3       	ldi	r18, 0x35	; 53
    6f36:	3a ef       	ldi	r19, 0xFA	; 250
    6f38:	4e e8       	ldi	r20, 0x8E	; 142
    6f3a:	5c e3       	ldi	r21, 0x3C	; 60
    6f3c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6f40:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    spa->epsilon  = ecliptic_true_obliquity(spa->del_epsilon, spa->epsilon0);

    spa->del_tau   = aberration_correction(spa->r);
    spa->lamda     = apparent_sun_longitude(spa->theta, spa->del_psi, spa->del_tau);
    spa->nu0       = greenwich_mean_sidereal_time (spa->jd, spa->jc);
    spa->nu        = greenwich_sidereal_time (spa->nu0, spa->del_psi, spa->epsilon);
    6f44:	f4 01       	movw	r30, r8
    6f46:	20 81       	ld	r18, Z
    6f48:	31 81       	ldd	r19, Z+1	; 0x01
    6f4a:	42 81       	ldd	r20, Z+2	; 0x02
    6f4c:	53 81       	ldd	r21, Z+3	; 0x03
    6f4e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    6f52:	9b 01       	movw	r18, r22
    6f54:	ac 01       	movw	r20, r24
    6f56:	c8 01       	movw	r24, r16
    6f58:	b7 01       	movw	r22, r14
    6f5a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    6f5e:	f1 01       	movw	r30, r2
    6f60:	61 93       	st	Z+, r22
    6f62:	71 93       	st	Z+, r23
    6f64:	81 93       	st	Z+, r24
    6f66:	91 93       	st	Z+, r25
    6f68:	1f 01       	movw	r2, r30

    spa->alpha = geocentric_sun_right_ascension(spa->lamda, spa->epsilon, spa->beta);
    6f6a:	f5 01       	movw	r30, r10
    6f6c:	60 81       	ld	r22, Z
    6f6e:	71 81       	ldd	r23, Z+1	; 0x01
    6f70:	82 81       	ldd	r24, Z+2	; 0x02
    6f72:	93 81       	ldd	r25, Z+3	; 0x03
    6f74:	f6 01       	movw	r30, r12
    6f76:	20 81       	ld	r18, Z
    6f78:	31 81       	ldd	r19, Z+1	; 0x01
    6f7a:	42 81       	ldd	r20, Z+2	; 0x02
    6f7c:	53 81       	ldd	r21, Z+3	; 0x03
    6f7e:	f3 01       	movw	r30, r6
    6f80:	e0 80       	ld	r14, Z
    6f82:	f1 80       	ldd	r15, Z+1	; 0x01
    6f84:	02 81       	ldd	r16, Z+2	; 0x02
    6f86:	13 81       	ldd	r17, Z+3	; 0x03
    6f88:	0e 94 94 33 	call	0x6728	; 0x6728 <geocentric_sun_right_ascension>
    6f8c:	f1 01       	movw	r30, r2
    6f8e:	61 93       	st	Z+, r22
    6f90:	71 93       	st	Z+, r23
    6f92:	81 93       	st	Z+, r24
    6f94:	91 93       	st	Z+, r25
    6f96:	1f 01       	movw	r2, r30
    spa->delta = geocentric_sun_declination(spa->beta, spa->epsilon, spa->lamda);
    6f98:	f3 01       	movw	r30, r6
    6f9a:	60 81       	ld	r22, Z
    6f9c:	71 81       	ldd	r23, Z+1	; 0x01
    6f9e:	82 81       	ldd	r24, Z+2	; 0x02
    6fa0:	93 81       	ldd	r25, Z+3	; 0x03
    6fa2:	f6 01       	movw	r30, r12
    6fa4:	20 81       	ld	r18, Z
    6fa6:	31 81       	ldd	r19, Z+1	; 0x01
    6fa8:	42 81       	ldd	r20, Z+2	; 0x02
    6faa:	53 81       	ldd	r21, Z+3	; 0x03
    6fac:	f5 01       	movw	r30, r10
    6fae:	e0 80       	ld	r14, Z
    6fb0:	f1 80       	ldd	r15, Z+1	; 0x01
    6fb2:	02 81       	ldd	r16, Z+2	; 0x02
    6fb4:	13 81       	ldd	r17, Z+3	; 0x03
    6fb6:	0e 94 10 2a 	call	0x5420	; 0x5420 <geocentric_sun_declination>
    6fba:	f1 01       	movw	r30, r2
    6fbc:	60 83       	st	Z, r22
    6fbe:	71 83       	std	Z+1, r23	; 0x01
    6fc0:	82 83       	std	Z+2, r24	; 0x02
    6fc2:	93 83       	std	Z+3, r25	; 0x03
}
    6fc4:	64 96       	adiw	r28, 0x14	; 20
    6fc6:	0f b6       	in	r0, 0x3f	; 63
    6fc8:	f8 94       	cli
    6fca:	de bf       	out	0x3e, r29	; 62
    6fcc:	0f be       	out	0x3f, r0	; 63
    6fce:	cd bf       	out	0x3d, r28	; 61
    6fd0:	cf 91       	pop	r28
    6fd2:	df 91       	pop	r29
    6fd4:	1f 91       	pop	r17
    6fd6:	0f 91       	pop	r16
    6fd8:	ff 90       	pop	r15
    6fda:	ef 90       	pop	r14
    6fdc:	df 90       	pop	r13
    6fde:	cf 90       	pop	r12
    6fe0:	bf 90       	pop	r11
    6fe2:	af 90       	pop	r10
    6fe4:	9f 90       	pop	r9
    6fe6:	8f 90       	pop	r8
    6fe8:	7f 90       	pop	r7
    6fea:	6f 90       	pop	r6
    6fec:	5f 90       	pop	r5
    6fee:	4f 90       	pop	r4
    6ff0:	3f 90       	pop	r3
    6ff2:	2f 90       	pop	r2
    6ff4:	08 95       	ret

00006ff6 <calculate_eot_and_sun_rise_transit_set>:
////////////////////////////////////////////////////////////////////////
// Calculate Equation of Time (EOT) and Sun Rise, Transit, & Set (RTS)
////////////////////////////////////////////////////////////////////////

void calculate_eot_and_sun_rise_transit_set(spa_data *spa)
{
    6ff6:	2f 92       	push	r2
    6ff8:	3f 92       	push	r3
    6ffa:	4f 92       	push	r4
    6ffc:	5f 92       	push	r5
    6ffe:	6f 92       	push	r6
    7000:	7f 92       	push	r7
    7002:	8f 92       	push	r8
    7004:	9f 92       	push	r9
    7006:	af 92       	push	r10
    7008:	bf 92       	push	r11
    700a:	cf 92       	push	r12
    700c:	df 92       	push	r13
    700e:	ef 92       	push	r14
    7010:	ff 92       	push	r15
    7012:	0f 93       	push	r16
    7014:	1f 93       	push	r17
    7016:	df 93       	push	r29
    7018:	cf 93       	push	r28
    701a:	cd b7       	in	r28, 0x3d	; 61
    701c:	de b7       	in	r29, 0x3e	; 62
    701e:	cc 53       	subi	r28, 0x3C	; 60
    7020:	d1 40       	sbci	r29, 0x01	; 1
    7022:	0f b6       	in	r0, 0x3f	; 63
    7024:	f8 94       	cli
    7026:	de bf       	out	0x3e, r29	; 62
    7028:	0f be       	out	0x3f, r0	; 63
    702a:	cd bf       	out	0x3d, r28	; 61
    702c:	1c 01       	movw	r2, r24
    spa_data sun_rts;
    double nu, m, h0, n;
    double alpha[JD_COUNT], delta[JD_COUNT];
    double m_rts[SUN_COUNT], nu_rts[SUN_COUNT], h_rts[SUN_COUNT];
    double alpha_prime[SUN_COUNT], delta_prime[SUN_COUNT], h_prime[SUN_COUNT];
    double h0_prime = -1*(SUN_RADIUS + spa->atmos_refract);
    702e:	dc 01       	movw	r26, r24
    7030:	d0 96       	adiw	r26, 0x30	; 48
    7032:	6d 91       	ld	r22, X+
    7034:	7d 91       	ld	r23, X+
    7036:	8d 91       	ld	r24, X+
    7038:	9c 91       	ld	r25, X
    703a:	d3 97       	sbiw	r26, 0x33	; 51
    703c:	28 ef       	ldi	r18, 0xF8	; 248
    703e:	38 e8       	ldi	r19, 0x88	; 136
    7040:	48 e8       	ldi	r20, 0x88	; 136
    7042:	5e e3       	ldi	r21, 0x3E	; 62
    7044:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    7048:	9b 01       	movw	r18, r22
    704a:	ac 01       	movw	r20, r24
    704c:	50 58       	subi	r21, 0x80	; 128
    704e:	cb 5c       	subi	r28, 0xCB	; 203
    7050:	de 4f       	sbci	r29, 0xFE	; 254
    7052:	28 83       	st	Y, r18
    7054:	39 83       	std	Y+1, r19	; 0x01
    7056:	4a 83       	std	Y+2, r20	; 0x02
    7058:	5b 83       	std	Y+3, r21	; 0x03
    705a:	c5 53       	subi	r28, 0x35	; 53
    705c:	d1 40       	sbci	r29, 0x01	; 1
    int i;

	sun_rts  = *spa;
    705e:	de 01       	movw	r26, r28
    7060:	a7 5b       	subi	r26, 0xB7	; 183
    7062:	bf 4f       	sbci	r27, 0xFF	; 255
    7064:	f1 01       	movw	r30, r2
    7066:	8a ee       	ldi	r24, 0xEA	; 234
    7068:	01 90       	ld	r0, Z+
    706a:	0d 92       	st	X+, r0
    706c:	81 50       	subi	r24, 0x01	; 1
    706e:	e1 f7       	brne	.-8      	; 0x7068 <calculate_eot_and_sun_rise_transit_set+0x72>
    m        = sun_mean_longitude(spa->jme);
    7070:	46 e4       	ldi	r20, 0x46	; 70
    7072:	50 e0       	ldi	r21, 0x00	; 0
    7074:	24 0e       	add	r2, r20
    7076:	35 1e       	adc	r3, r21
    7078:	d1 01       	movw	r26, r2
    707a:	6d 91       	ld	r22, X+
    707c:	7d 91       	ld	r23, X+
    707e:	8d 91       	ld	r24, X+
    7080:	9c 91       	ld	r25, X
    7082:	0e 94 3a 33 	call	0x6674	; 0x6674 <sun_mean_longitude>
    spa->eot = eot(m, spa->alpha, spa->del_psi, spa->epsilon);
    7086:	ec e4       	ldi	r30, 0x4C	; 76
    7088:	f0 e0       	ldi	r31, 0x00	; 0
    708a:	2e 0e       	add	r2, r30
    708c:	3f 1e       	adc	r3, r31
    708e:	d1 01       	movw	r26, r2
    7090:	2d 91       	ld	r18, X+
    7092:	3d 91       	ld	r19, X+
    7094:	4d 91       	ld	r20, X+
    7096:	5c 91       	ld	r21, X
    7098:	e0 ee       	ldi	r30, 0xE0	; 224
    709a:	ff ef       	ldi	r31, 0xFF	; 255
    709c:	2e 0e       	add	r2, r30
    709e:	3f 1e       	adc	r3, r31
    70a0:	d1 01       	movw	r26, r2
    70a2:	ed 90       	ld	r14, X+
    70a4:	fd 90       	ld	r15, X+
    70a6:	0d 91       	ld	r16, X+
    70a8:	1c 91       	ld	r17, X
    70aa:	ec e0       	ldi	r30, 0x0C	; 12
    70ac:	f0 e0       	ldi	r31, 0x00	; 0
    70ae:	2e 0e       	add	r2, r30
    70b0:	3f 1e       	adc	r3, r31
    70b2:	d1 01       	movw	r26, r2
    70b4:	ad 90       	ld	r10, X+
    70b6:	bd 90       	ld	r11, X+
    70b8:	cd 90       	ld	r12, X+
    70ba:	dc 90       	ld	r13, X
    70bc:	0e 94 34 26 	call	0x4c68	; 0x4c68 <eot>
    70c0:	e0 e4       	ldi	r30, 0x40	; 64
    70c2:	f0 e0       	ldi	r31, 0x00	; 0
    70c4:	2e 0e       	add	r2, r30
    70c6:	3f 1e       	adc	r3, r31
    70c8:	d1 01       	movw	r26, r2
    70ca:	6d 93       	st	X+, r22
    70cc:	7d 93       	st	X+, r23
    70ce:	8d 93       	st	X+, r24
    70d0:	9c 93       	st	X, r25
    70d2:	13 97       	sbiw	r26, 0x03	; 3
    70d4:	e2 e4       	ldi	r30, 0x42	; 66
    70d6:	ff ef       	ldi	r31, 0xFF	; 255
    70d8:	2e 0e       	add	r2, r30
    70da:	3f 1e       	adc	r3, r31

    sun_rts.hour = sun_rts.minute = sun_rts.second = 0;
    70dc:	29 e4       	ldi	r18, 0x49	; 73
    70de:	82 2e       	mov	r8, r18
    70e0:	91 2c       	mov	r9, r1
    70e2:	8c 0e       	add	r8, r28
    70e4:	9d 1e       	adc	r9, r29
    70e6:	d4 01       	movw	r26, r8
    70e8:	1b 96       	adiw	r26, 0x0b	; 11
    70ea:	1c 92       	st	X, r1
    70ec:	1e 92       	st	-X, r1
    70ee:	1a 97       	sbiw	r26, 0x0a	; 10
    70f0:	19 96       	adiw	r26, 0x09	; 9
    70f2:	1c 92       	st	X, r1
    70f4:	1e 92       	st	-X, r1
    70f6:	18 97       	sbiw	r26, 0x08	; 8
    70f8:	17 96       	adiw	r26, 0x07	; 7
    70fa:	1c 92       	st	X, r1
    70fc:	1e 92       	st	-X, r1
    70fe:	16 97       	sbiw	r26, 0x06	; 6
	sun_rts.timezone = 0.0;
    7100:	0f 2e       	mov	r0, r31
    7102:	f0 e0       	ldi	r31, 0x00	; 0
    7104:	4f 2e       	mov	r4, r31
    7106:	f0 e0       	ldi	r31, 0x00	; 0
    7108:	5f 2e       	mov	r5, r31
    710a:	f0 e0       	ldi	r31, 0x00	; 0
    710c:	6f 2e       	mov	r6, r31
    710e:	f0 e0       	ldi	r31, 0x00	; 0
    7110:	7f 2e       	mov	r7, r31
    7112:	f0 2d       	mov	r31, r0
    7114:	f4 01       	movw	r30, r8
    7116:	40 8a       	std	Z+16, r4	; 0x10
    7118:	51 8a       	std	Z+17, r5	; 0x11
    711a:	62 8a       	std	Z+18, r6	; 0x12
    711c:	73 8a       	std	Z+19, r7	; 0x13

    sun_rts.jd = julian_day (sun_rts.year, sun_rts.month,  sun_rts.day,
    711e:	62 81       	ldd	r22, Z+2	; 0x02
    7120:	73 81       	ldd	r23, Z+3	; 0x03
    7122:	44 81       	ldd	r20, Z+4	; 0x04
    7124:	55 81       	ldd	r21, Z+5	; 0x05
    7126:	80 81       	ld	r24, Z
    7128:	91 81       	ldd	r25, Z+1	; 0x01
    712a:	20 e0       	ldi	r18, 0x00	; 0
    712c:	30 e0       	ldi	r19, 0x00	; 0
    712e:	00 e0       	ldi	r16, 0x00	; 0
    7130:	10 e0       	ldi	r17, 0x00	; 0
    7132:	ee 24       	eor	r14, r14
    7134:	ff 24       	eor	r15, r15
    7136:	63 01       	movw	r12, r6
    7138:	52 01       	movw	r10, r4
    713a:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <julian_day>
    713e:	d4 01       	movw	r26, r8
    7140:	d6 96       	adiw	r26, 0x36	; 54
    7142:	6d 93       	st	X+, r22
    7144:	7d 93       	st	X+, r23
    7146:	8d 93       	st	X+, r24
    7148:	9c 93       	st	X, r25
    714a:	d9 97       	sbiw	r26, 0x39	; 57
                             sun_rts.hour, sun_rts.minute, sun_rts.second, sun_rts.timezone);

    calculate_geocentric_sun_right_ascension_and_declination(&sun_rts);
    714c:	c4 01       	movw	r24, r8
    714e:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <calculate_geocentric_sun_right_ascension_and_declination>
    nu = sun_rts.nu;
    7152:	fe 01       	movw	r30, r28
    7154:	e9 52       	subi	r30, 0x29	; 41
    7156:	ff 4f       	sbci	r31, 0xFF	; 255
    7158:	20 81       	ld	r18, Z
    715a:	31 81       	ldd	r19, Z+1	; 0x01
    715c:	42 81       	ldd	r20, Z+2	; 0x02
    715e:	53 81       	ldd	r21, Z+3	; 0x03
    7160:	c7 5c       	subi	r28, 0xC7	; 199
    7162:	de 4f       	sbci	r29, 0xFE	; 254
    7164:	28 83       	st	Y, r18
    7166:	39 83       	std	Y+1, r19	; 0x01
    7168:	4a 83       	std	Y+2, r20	; 0x02
    716a:	5b 83       	std	Y+3, r21	; 0x03
    716c:	c9 53       	subi	r28, 0x39	; 57
    716e:	d1 40       	sbci	r29, 0x01	; 1

    sun_rts.delta_t = 0;
    7170:	d4 01       	movw	r26, r8
    7172:	1c 96       	adiw	r26, 0x0c	; 12
    7174:	4d 92       	st	X+, r4
    7176:	5d 92       	st	X+, r5
    7178:	6d 92       	st	X+, r6
    717a:	7c 92       	st	X, r7
    717c:	1f 97       	sbiw	r26, 0x0f	; 15
    sun_rts.jd--;
    717e:	d6 96       	adiw	r26, 0x36	; 54
    7180:	6d 91       	ld	r22, X+
    7182:	7d 91       	ld	r23, X+
    7184:	8d 91       	ld	r24, X+
    7186:	9c 91       	ld	r25, X
    7188:	d9 97       	sbiw	r26, 0x39	; 57
    718a:	20 e0       	ldi	r18, 0x00	; 0
    718c:	30 e0       	ldi	r19, 0x00	; 0
    718e:	40 e8       	ldi	r20, 0x80	; 128
    7190:	5f e3       	ldi	r21, 0x3F	; 63
    7192:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    7196:	f4 01       	movw	r30, r8
    7198:	66 ab       	std	Z+54, r22	; 0x36
    719a:	77 ab       	std	Z+55, r23	; 0x37
    719c:	80 af       	std	Z+56, r24	; 0x38
    719e:	91 af       	std	Z+57, r25	; 0x39
    for (i = 0; i < JD_COUNT; i++) {
        calculate_geocentric_sun_right_ascension_and_declination(&sun_rts);
    71a0:	74 01       	movw	r14, r8
        alpha[i] = sun_rts.alpha;
    71a2:	2e 01       	movw	r4, r28
    71a4:	08 94       	sec
    71a6:	41 1c       	adc	r4, r1
    71a8:	51 1c       	adc	r5, r1
    71aa:	9b ed       	ldi	r25, 0xDB	; 219
    71ac:	89 2e       	mov	r8, r25
    71ae:	91 2c       	mov	r9, r1
    71b0:	8c 0e       	add	r8, r28
    71b2:	9d 1e       	adc	r9, r29
        delta[i] = sun_rts.delta;
    71b4:	8d e0       	ldi	r24, 0x0D	; 13
    71b6:	a8 2e       	mov	r10, r24
    71b8:	b1 2c       	mov	r11, r1
    71ba:	ac 0e       	add	r10, r28
    71bc:	bd 1e       	adc	r11, r29
    71be:	bf ed       	ldi	r27, 0xDF	; 223
    71c0:	cb 2e       	mov	r12, r27
    71c2:	d1 2c       	mov	r13, r1
    71c4:	cc 0e       	add	r12, r28
    71c6:	dd 1e       	adc	r13, r29
    nu = sun_rts.nu;

    sun_rts.delta_t = 0;
    sun_rts.jd--;
    for (i = 0; i < JD_COUNT; i++) {
        calculate_geocentric_sun_right_ascension_and_declination(&sun_rts);
    71c8:	c7 01       	movw	r24, r14
    71ca:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <calculate_geocentric_sun_right_ascension_and_declination>
        alpha[i] = sun_rts.alpha;
    71ce:	92 01       	movw	r18, r4
    71d0:	20 0f       	add	r18, r16
    71d2:	31 1f       	adc	r19, r17
    71d4:	f4 01       	movw	r30, r8
    71d6:	80 81       	ld	r24, Z
    71d8:	91 81       	ldd	r25, Z+1	; 0x01
    71da:	a2 81       	ldd	r26, Z+2	; 0x02
    71dc:	b3 81       	ldd	r27, Z+3	; 0x03
    71de:	f9 01       	movw	r30, r18
    71e0:	80 83       	st	Z, r24
    71e2:	91 83       	std	Z+1, r25	; 0x01
    71e4:	a2 83       	std	Z+2, r26	; 0x02
    71e6:	b3 83       	std	Z+3, r27	; 0x03
        delta[i] = sun_rts.delta;
    71e8:	95 01       	movw	r18, r10
    71ea:	20 0f       	add	r18, r16
    71ec:	31 1f       	adc	r19, r17
    71ee:	f6 01       	movw	r30, r12
    71f0:	80 81       	ld	r24, Z
    71f2:	91 81       	ldd	r25, Z+1	; 0x01
    71f4:	a2 81       	ldd	r26, Z+2	; 0x02
    71f6:	b3 81       	ldd	r27, Z+3	; 0x03
    71f8:	f9 01       	movw	r30, r18
    71fa:	80 83       	st	Z, r24
    71fc:	91 83       	std	Z+1, r25	; 0x01
    71fe:	a2 83       	std	Z+2, r26	; 0x02
    7200:	b3 83       	std	Z+3, r27	; 0x03
        sun_rts.jd++;
    7202:	d7 01       	movw	r26, r14
    7204:	d6 96       	adiw	r26, 0x36	; 54
    7206:	6d 91       	ld	r22, X+
    7208:	7d 91       	ld	r23, X+
    720a:	8d 91       	ld	r24, X+
    720c:	9c 91       	ld	r25, X
    720e:	d9 97       	sbiw	r26, 0x39	; 57
    7210:	20 e0       	ldi	r18, 0x00	; 0
    7212:	30 e0       	ldi	r19, 0x00	; 0
    7214:	40 e8       	ldi	r20, 0x80	; 128
    7216:	5f e3       	ldi	r21, 0x3F	; 63
    7218:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    721c:	f7 01       	movw	r30, r14
    721e:	66 ab       	std	Z+54, r22	; 0x36
    7220:	77 ab       	std	Z+55, r23	; 0x37
    7222:	80 af       	std	Z+56, r24	; 0x38
    7224:	91 af       	std	Z+57, r25	; 0x39
    7226:	0c 5f       	subi	r16, 0xFC	; 252
    7228:	1f 4f       	sbci	r17, 0xFF	; 255
    calculate_geocentric_sun_right_ascension_and_declination(&sun_rts);
    nu = sun_rts.nu;

    sun_rts.delta_t = 0;
    sun_rts.jd--;
    for (i = 0; i < JD_COUNT; i++) {
    722a:	0c 30       	cpi	r16, 0x0C	; 12
    722c:	11 05       	cpc	r17, r1
    722e:	61 f6       	brne	.-104    	; 0x71c8 <calculate_eot_and_sun_rise_transit_set+0x1d2>
        alpha[i] = sun_rts.alpha;
        delta[i] = sun_rts.delta;
        sun_rts.jd++;
    }

    m_rts[SUN_TRANSIT] = approx_sun_transit_time(alpha[JD_ZERO], spa->longitude, nu);
    7230:	6d 81       	ldd	r22, Y+5	; 0x05
    7232:	7e 81       	ldd	r23, Y+6	; 0x06
    7234:	8f 81       	ldd	r24, Y+7	; 0x07
    7236:	98 85       	ldd	r25, Y+8	; 0x08
    7238:	d1 01       	movw	r26, r2
    723a:	54 96       	adiw	r26, 0x14	; 20
    723c:	2d 91       	ld	r18, X+
    723e:	3d 91       	ld	r19, X+
    7240:	4d 91       	ld	r20, X+
    7242:	5c 91       	ld	r21, X
    7244:	57 97       	sbiw	r26, 0x17	; 23
    7246:	c7 5c       	subi	r28, 0xC7	; 199
    7248:	de 4f       	sbci	r29, 0xFE	; 254
    724a:	e8 80       	ld	r14, Y
    724c:	f9 80       	ldd	r15, Y+1	; 0x01
    724e:	0a 81       	ldd	r16, Y+2	; 0x02
    7250:	1b 81       	ldd	r17, Y+3	; 0x03
    7252:	c9 53       	subi	r28, 0x39	; 57
    7254:	d1 40       	sbci	r29, 0x01	; 1
    7256:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <approx_sun_transit_time>
    725a:	69 8f       	std	Y+25, r22	; 0x19
    725c:	7a 8f       	std	Y+26, r23	; 0x1a
    725e:	8b 8f       	std	Y+27, r24	; 0x1b
    7260:	9c 8f       	std	Y+28, r25	; 0x1c
    h0 = sun_hour_angle_at_rise_set(spa->latitude, delta[JD_ZERO], h0_prime);
    7262:	f1 01       	movw	r30, r2
    7264:	60 8d       	ldd	r22, Z+24	; 0x18
    7266:	71 8d       	ldd	r23, Z+25	; 0x19
    7268:	82 8d       	ldd	r24, Z+26	; 0x1a
    726a:	93 8d       	ldd	r25, Z+27	; 0x1b
    726c:	29 89       	ldd	r18, Y+17	; 0x11
    726e:	3a 89       	ldd	r19, Y+18	; 0x12
    7270:	4b 89       	ldd	r20, Y+19	; 0x13
    7272:	5c 89       	ldd	r21, Y+20	; 0x14
    7274:	cb 5c       	subi	r28, 0xCB	; 203
    7276:	de 4f       	sbci	r29, 0xFE	; 254
    7278:	e8 80       	ld	r14, Y
    727a:	f9 80       	ldd	r15, Y+1	; 0x01
    727c:	0a 81       	ldd	r16, Y+2	; 0x02
    727e:	1b 81       	ldd	r17, Y+3	; 0x03
    7280:	c5 53       	subi	r28, 0x35	; 53
    7282:	d1 40       	sbci	r29, 0x01	; 1
    7284:	0e 94 14 32 	call	0x6428	; 0x6428 <sun_hour_angle_at_rise_set>
    7288:	6b 01       	movw	r12, r22
    728a:	7c 01       	movw	r14, r24

    if (h0 >= 0) {
    728c:	20 e0       	ldi	r18, 0x00	; 0
    728e:	30 e0       	ldi	r19, 0x00	; 0
    7290:	40 e0       	ldi	r20, 0x00	; 0
    7292:	50 e0       	ldi	r21, 0x00	; 0
    7294:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    7298:	88 23       	and	r24, r24
    729a:	0c f4       	brge	.+2      	; 0x729e <calculate_eot_and_sun_rise_transit_set+0x2a8>
    729c:	60 c1       	rjmp	.+704    	; 0x755e <calculate_eot_and_sun_rise_transit_set+0x568>

        approx_sun_rise_and_set(m_rts, h0);
    729e:	8e 01       	movw	r16, r28
    72a0:	07 5e       	subi	r16, 0xE7	; 231
    72a2:	1f 4f       	sbci	r17, 0xFF	; 255
    72a4:	c8 01       	movw	r24, r16
    72a6:	b7 01       	movw	r22, r14
    72a8:	a6 01       	movw	r20, r12
    72aa:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <approx_sun_rise_and_set>
    72ae:	9e 01       	movw	r18, r28
    72b0:	2f 5c       	subi	r18, 0xCF	; 207
    72b2:	3f 4f       	sbci	r19, 0xFF	; 255
    72b4:	cd 5c       	subi	r28, 0xCD	; 205
    72b6:	de 4f       	sbci	r29, 0xFE	; 254
    72b8:	39 83       	std	Y+1, r19	; 0x01
    72ba:	28 83       	st	Y, r18
    72bc:	c3 53       	subi	r28, 0x33	; 51
    72be:	d1 40       	sbci	r29, 0x01	; 1
    72c0:	44 24       	eor	r4, r4
    72c2:	55 24       	eor	r5, r5

        for (i = 0; i < SUN_COUNT; i++) {

            nu_rts[i]      = nu + 360.985647*m_rts[i];
    72c4:	e9 e1       	ldi	r30, 0x19	; 25
    72c6:	f0 e0       	ldi	r31, 0x00	; 0
    72c8:	ec 0f       	add	r30, r28
    72ca:	fd 1f       	adc	r31, r29
    72cc:	e4 0d       	add	r30, r4
    72ce:	f5 1d       	adc	r31, r5
    72d0:	a0 80       	ld	r10, Z
    72d2:	b1 80       	ldd	r11, Z+1	; 0x01
    72d4:	c2 80       	ldd	r12, Z+2	; 0x02
    72d6:	d3 80       	ldd	r13, Z+3	; 0x03

            n              = m_rts[i] + spa->delta_t/86400.0;
    72d8:	d1 01       	movw	r26, r2
    72da:	1c 96       	adiw	r26, 0x0c	; 12
    72dc:	6d 91       	ld	r22, X+
    72de:	7d 91       	ld	r23, X+
    72e0:	8d 91       	ld	r24, X+
    72e2:	9c 91       	ld	r25, X
    72e4:	1f 97       	sbiw	r26, 0x0f	; 15
    72e6:	20 e0       	ldi	r18, 0x00	; 0
    72e8:	30 ec       	ldi	r19, 0xC0	; 192
    72ea:	48 ea       	ldi	r20, 0xA8	; 168
    72ec:	57 e4       	ldi	r21, 0x47	; 71
    72ee:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    72f2:	9b 01       	movw	r18, r22
    72f4:	ac 01       	movw	r20, r24
    72f6:	c6 01       	movw	r24, r12
    72f8:	b5 01       	movw	r22, r10
    72fa:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    72fe:	7b 01       	movw	r14, r22
    7300:	8c 01       	movw	r16, r24
            alpha_prime[i] = rts_alpha_delta_prime(alpha, n);
    7302:	ce 01       	movw	r24, r28
    7304:	01 96       	adiw	r24, 0x01	; 1
    7306:	a7 01       	movw	r20, r14
    7308:	b8 01       	movw	r22, r16
    730a:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <rts_alpha_delta_prime>
    730e:	3b 01       	movw	r6, r22
    7310:	4c 01       	movw	r8, r24
            delta_prime[i] = rts_alpha_delta_prime(delta, n);
    7312:	ce 01       	movw	r24, r28
    7314:	0d 96       	adiw	r24, 0x0d	; 13
    7316:	a7 01       	movw	r20, r14
    7318:	b8 01       	movw	r22, r16
    731a:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <rts_alpha_delta_prime>
    731e:	cd 5c       	subi	r28, 0xCD	; 205
    7320:	de 4f       	sbci	r29, 0xFE	; 254
    7322:	e8 81       	ld	r30, Y
    7324:	f9 81       	ldd	r31, Y+1	; 0x01
    7326:	c3 53       	subi	r28, 0x33	; 51
    7328:	d1 40       	sbci	r29, 0x01	; 1
    732a:	60 83       	st	Z, r22
    732c:	71 83       	std	Z+1, r23	; 0x01
    732e:	82 83       	std	Z+2, r24	; 0x02
    7330:	93 83       	std	Z+3, r25	; 0x03

            h_prime[i]     = limit_degrees180pm(nu_rts[i] + spa->longitude - alpha_prime[i]);
    7332:	c6 01       	movw	r24, r12
    7334:	b5 01       	movw	r22, r10
    7336:	2a e2       	ldi	r18, 0x2A	; 42
    7338:	3e e7       	ldi	r19, 0x7E	; 126
    733a:	44 eb       	ldi	r20, 0xB4	; 180
    733c:	53 e4       	ldi	r21, 0x43	; 67
    733e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7342:	9b 01       	movw	r18, r22
    7344:	ac 01       	movw	r20, r24
    7346:	c7 5c       	subi	r28, 0xC7	; 199
    7348:	de 4f       	sbci	r29, 0xFE	; 254
    734a:	68 81       	ld	r22, Y
    734c:	79 81       	ldd	r23, Y+1	; 0x01
    734e:	8a 81       	ldd	r24, Y+2	; 0x02
    7350:	9b 81       	ldd	r25, Y+3	; 0x03
    7352:	c9 53       	subi	r28, 0x39	; 57
    7354:	d1 40       	sbci	r29, 0x01	; 1
    7356:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    735a:	d1 01       	movw	r26, r2
    735c:	54 96       	adiw	r26, 0x14	; 20
    735e:	2d 91       	ld	r18, X+
    7360:	3d 91       	ld	r19, X+
    7362:	4d 91       	ld	r20, X+
    7364:	5c 91       	ld	r21, X
    7366:	57 97       	sbiw	r26, 0x17	; 23
    7368:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    736c:	a4 01       	movw	r20, r8
    736e:	93 01       	movw	r18, r6
    7370:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    7374:	0e 94 bd 32 	call	0x657a	; 0x657a <limit_degrees180pm>
    7378:	7b 01       	movw	r14, r22
    737a:	8c 01       	movw	r16, r24
    737c:	ed e3       	ldi	r30, 0x3D	; 61
    737e:	f0 e0       	ldi	r31, 0x00	; 0
    7380:	ec 0f       	add	r30, r28
    7382:	fd 1f       	adc	r31, r29
    7384:	e4 0d       	add	r30, r4
    7386:	f5 1d       	adc	r31, r5
    7388:	60 83       	st	Z, r22
    738a:	71 83       	std	Z+1, r23	; 0x01
    738c:	82 83       	std	Z+2, r24	; 0x02
    738e:	93 83       	std	Z+3, r25	; 0x03

            h_rts[i]       = rts_sun_altitude(spa->latitude, delta_prime[i], h_prime[i]);
    7390:	f1 01       	movw	r30, r2
    7392:	60 8d       	ldd	r22, Z+24	; 0x18
    7394:	71 8d       	ldd	r23, Z+25	; 0x19
    7396:	82 8d       	ldd	r24, Z+26	; 0x1a
    7398:	93 8d       	ldd	r25, Z+27	; 0x1b
    739a:	cd 5c       	subi	r28, 0xCD	; 205
    739c:	de 4f       	sbci	r29, 0xFE	; 254
    739e:	a8 81       	ld	r26, Y
    73a0:	b9 81       	ldd	r27, Y+1	; 0x01
    73a2:	c3 53       	subi	r28, 0x33	; 51
    73a4:	d1 40       	sbci	r29, 0x01	; 1
    73a6:	2d 91       	ld	r18, X+
    73a8:	3d 91       	ld	r19, X+
    73aa:	4d 91       	ld	r20, X+
    73ac:	5d 91       	ld	r21, X+
    73ae:	cd 5c       	subi	r28, 0xCD	; 205
    73b0:	de 4f       	sbci	r29, 0xFE	; 254
    73b2:	b9 83       	std	Y+1, r27	; 0x01
    73b4:	a8 83       	st	Y, r26
    73b6:	c3 53       	subi	r28, 0x33	; 51
    73b8:	d1 40       	sbci	r29, 0x01	; 1
    73ba:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <rts_sun_altitude>
    73be:	e5 e2       	ldi	r30, 0x25	; 37
    73c0:	f0 e0       	ldi	r31, 0x00	; 0
    73c2:	ec 0f       	add	r30, r28
    73c4:	fd 1f       	adc	r31, r29
    73c6:	e4 0d       	add	r30, r4
    73c8:	f5 1d       	adc	r31, r5
    73ca:	60 83       	st	Z, r22
    73cc:	71 83       	std	Z+1, r23	; 0x01
    73ce:	82 83       	std	Z+2, r24	; 0x02
    73d0:	93 83       	std	Z+3, r25	; 0x03
    73d2:	e4 e0       	ldi	r30, 0x04	; 4
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	4e 0e       	add	r4, r30
    73d8:	5f 1e       	adc	r5, r31

    if (h0 >= 0) {

        approx_sun_rise_and_set(m_rts, h0);

        for (i = 0; i < SUN_COUNT; i++) {
    73da:	fc e0       	ldi	r31, 0x0C	; 12
    73dc:	4f 16       	cp	r4, r31
    73de:	51 04       	cpc	r5, r1
    73e0:	09 f0       	breq	.+2      	; 0x73e4 <calculate_eot_and_sun_rise_transit_set+0x3ee>
    73e2:	70 cf       	rjmp	.-288    	; 0x72c4 <calculate_eot_and_sun_rise_transit_set+0x2ce>
            h_prime[i]     = limit_degrees180pm(nu_rts[i] + spa->longitude - alpha_prime[i]);

            h_rts[i]       = rts_sun_altitude(spa->latitude, delta_prime[i], h_prime[i]);
        }

        spa->srha = h_prime[SUN_RISE];
    73e4:	22 ec       	ldi	r18, 0xC2	; 194
    73e6:	30 e0       	ldi	r19, 0x00	; 0
    73e8:	22 0e       	add	r2, r18
    73ea:	33 1e       	adc	r3, r19
    73ec:	fe 01       	movw	r30, r28
    73ee:	ef 5b       	subi	r30, 0xBF	; 191
    73f0:	ff 4f       	sbci	r31, 0xFF	; 255
    73f2:	80 81       	ld	r24, Z
    73f4:	91 81       	ldd	r25, Z+1	; 0x01
    73f6:	a2 81       	ldd	r26, Z+2	; 0x02
    73f8:	b3 81       	ldd	r27, Z+3	; 0x03
    73fa:	f1 01       	movw	r30, r2
    73fc:	81 93       	st	Z+, r24
    73fe:	91 93       	st	Z+, r25
    7400:	a1 93       	st	Z+, r26
    7402:	b1 93       	st	Z+, r27
    7404:	1f 01       	movw	r2, r30
        spa->ssha = h_prime[SUN_SET];
    7406:	fe 01       	movw	r30, r28
    7408:	eb 5b       	subi	r30, 0xBB	; 187
    740a:	ff 4f       	sbci	r31, 0xFF	; 255
    740c:	80 81       	ld	r24, Z
    740e:	91 81       	ldd	r25, Z+1	; 0x01
    7410:	a2 81       	ldd	r26, Z+2	; 0x02
    7412:	b3 81       	ldd	r27, Z+3	; 0x03
    7414:	f1 01       	movw	r30, r2
    7416:	81 93       	st	Z+, r24
    7418:	91 93       	st	Z+, r25
    741a:	a1 93       	st	Z+, r26
    741c:	b1 93       	st	Z+, r27
    741e:	1f 01       	movw	r2, r30
        spa->sta  = h_rts[SUN_TRANSIT];
    7420:	8d a1       	ldd	r24, Y+37	; 0x25
    7422:	9e a1       	ldd	r25, Y+38	; 0x26
    7424:	af a1       	ldd	r26, Y+39	; 0x27
    7426:	b8 a5       	ldd	r27, Y+40	; 0x28
    7428:	80 83       	st	Z, r24
    742a:	91 83       	std	Z+1, r25	; 0x01
    742c:	a2 83       	std	Z+2, r26	; 0x02
    742e:	b3 83       	std	Z+3, r27	; 0x03
    7430:	26 e3       	ldi	r18, 0x36	; 54
    7432:	3f ef       	ldi	r19, 0xFF	; 255
    7434:	22 0e       	add	r2, r18
    7436:	33 1e       	adc	r3, r19

        spa->suntransit = dayfrac_to_local_hr(m_rts[SUN_TRANSIT] - h_prime[SUN_TRANSIT] / 360.0,
    7438:	21 96       	adiw	r28, 0x01	; 1
    743a:	6c ad       	ldd	r22, Y+60	; 0x3c
    743c:	7d ad       	ldd	r23, Y+61	; 0x3d
    743e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7440:	9f ad       	ldd	r25, Y+63	; 0x3f
    7442:	21 97       	sbiw	r28, 0x01	; 1
    7444:	20 e0       	ldi	r18, 0x00	; 0
    7446:	30 e0       	ldi	r19, 0x00	; 0
    7448:	44 eb       	ldi	r20, 0xB4	; 180
    744a:	53 ec       	ldi	r21, 0xC3	; 195
    744c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    7450:	29 8d       	ldd	r18, Y+25	; 0x19
    7452:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7454:	4b 8d       	ldd	r20, Y+27	; 0x1b
    7456:	5c 8d       	ldd	r21, Y+28	; 0x1c
    7458:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    745c:	d1 01       	movw	r26, r2
    745e:	50 96       	adiw	r26, 0x10	; 16
    7460:	2d 91       	ld	r18, X+
    7462:	3d 91       	ld	r19, X+
    7464:	4d 91       	ld	r20, X+
    7466:	5c 91       	ld	r21, X
    7468:	53 97       	sbiw	r26, 0x13	; 19
    746a:	0e 94 be 31 	call	0x637c	; 0x637c <dayfrac_to_local_hr>
    746e:	ee ed       	ldi	r30, 0xDE	; 222
    7470:	f0 e0       	ldi	r31, 0x00	; 0
    7472:	2e 0e       	add	r2, r30
    7474:	3f 1e       	adc	r3, r31
    7476:	d1 01       	movw	r26, r2
    7478:	6d 93       	st	X+, r22
    747a:	7d 93       	st	X+, r23
    747c:	8d 93       	st	X+, r24
    747e:	9c 93       	st	X, r25
    7480:	13 97       	sbiw	r26, 0x03	; 3
    7482:	e2 e2       	ldi	r30, 0x22	; 34
    7484:	ff ef       	ldi	r31, 0xFF	; 255
    7486:	2e 0e       	add	r2, r30
    7488:	3f 1e       	adc	r3, r31
                                              spa->timezone);

        spa->sunrise = dayfrac_to_local_hr(sun_rise_and_set(m_rts, h_rts, delta_prime,
    748a:	a1 e3       	ldi	r26, 0x31	; 49
    748c:	6a 2e       	mov	r6, r26
    748e:	71 2c       	mov	r7, r1
    7490:	6c 0e       	add	r6, r28
    7492:	7d 1e       	adc	r7, r29
    7494:	d1 01       	movw	r26, r2
    7496:	58 96       	adiw	r26, 0x18	; 24
    7498:	0d 91       	ld	r16, X+
    749a:	1d 91       	ld	r17, X+
    749c:	2d 91       	ld	r18, X+
    749e:	3c 91       	ld	r19, X
    74a0:	5b 97       	sbiw	r26, 0x1b	; 27
    74a2:	ce 01       	movw	r24, r28
    74a4:	49 96       	adiw	r24, 0x19	; 25
    74a6:	be 01       	movw	r22, r28
    74a8:	6b 5d       	subi	r22, 0xDB	; 219
    74aa:	7f 4f       	sbci	r23, 0xFF	; 255
    74ac:	a3 01       	movw	r20, r6
    74ae:	fd e3       	ldi	r31, 0x3D	; 61
    74b0:	ef 2e       	mov	r14, r31
    74b2:	f1 2c       	mov	r15, r1
    74b4:	ec 0e       	add	r14, r28
    74b6:	fd 1e       	adc	r15, r29
    74b8:	cb 5c       	subi	r28, 0xCB	; 203
    74ba:	de 4f       	sbci	r29, 0xFE	; 254
    74bc:	a8 80       	ld	r10, Y
    74be:	b9 80       	ldd	r11, Y+1	; 0x01
    74c0:	ca 80       	ldd	r12, Y+2	; 0x02
    74c2:	db 80       	ldd	r13, Y+3	; 0x03
    74c4:	c5 53       	subi	r28, 0x35	; 53
    74c6:	d1 40       	sbci	r29, 0x01	; 1
    74c8:	e1 e0       	ldi	r30, 0x01	; 1
    74ca:	8e 2e       	mov	r8, r30
    74cc:	91 2c       	mov	r9, r1
    74ce:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sun_rise_and_set>
    74d2:	f1 01       	movw	r30, r2
    74d4:	20 89       	ldd	r18, Z+16	; 0x10
    74d6:	31 89       	ldd	r19, Z+17	; 0x11
    74d8:	42 89       	ldd	r20, Z+18	; 0x12
    74da:	53 89       	ldd	r21, Z+19	; 0x13
    74dc:	0e 94 be 31 	call	0x637c	; 0x637c <dayfrac_to_local_hr>
    74e0:	22 ee       	ldi	r18, 0xE2	; 226
    74e2:	30 e0       	ldi	r19, 0x00	; 0
    74e4:	22 0e       	add	r2, r18
    74e6:	33 1e       	adc	r3, r19
    74e8:	d1 01       	movw	r26, r2
    74ea:	6d 93       	st	X+, r22
    74ec:	7d 93       	st	X+, r23
    74ee:	8d 93       	st	X+, r24
    74f0:	9c 93       	st	X, r25
    74f2:	13 97       	sbiw	r26, 0x03	; 3
    74f4:	ee e1       	ldi	r30, 0x1E	; 30
    74f6:	ff ef       	ldi	r31, 0xFF	; 255
    74f8:	2e 0e       	add	r2, r30
    74fa:	3f 1e       	adc	r3, r31
                          spa->latitude, h_prime, h0_prime, SUN_RISE), spa->timezone);

        spa->sunset  = dayfrac_to_local_hr(sun_rise_and_set(m_rts, h_rts, delta_prime,
    74fc:	d1 01       	movw	r26, r2
    74fe:	58 96       	adiw	r26, 0x18	; 24
    7500:	0d 91       	ld	r16, X+
    7502:	1d 91       	ld	r17, X+
    7504:	2d 91       	ld	r18, X+
    7506:	3c 91       	ld	r19, X
    7508:	5b 97       	sbiw	r26, 0x1b	; 27
    750a:	ce 01       	movw	r24, r28
    750c:	49 96       	adiw	r24, 0x19	; 25
    750e:	be 01       	movw	r22, r28
    7510:	6b 5d       	subi	r22, 0xDB	; 219
    7512:	7f 4f       	sbci	r23, 0xFF	; 255
    7514:	a3 01       	movw	r20, r6
    7516:	bd e3       	ldi	r27, 0x3D	; 61
    7518:	eb 2e       	mov	r14, r27
    751a:	f1 2c       	mov	r15, r1
    751c:	ec 0e       	add	r14, r28
    751e:	fd 1e       	adc	r15, r29
    7520:	cb 5c       	subi	r28, 0xCB	; 203
    7522:	de 4f       	sbci	r29, 0xFE	; 254
    7524:	a8 80       	ld	r10, Y
    7526:	b9 80       	ldd	r11, Y+1	; 0x01
    7528:	ca 80       	ldd	r12, Y+2	; 0x02
    752a:	db 80       	ldd	r13, Y+3	; 0x03
    752c:	c5 53       	subi	r28, 0x35	; 53
    752e:	d1 40       	sbci	r29, 0x01	; 1
    7530:	a2 e0       	ldi	r26, 0x02	; 2
    7532:	8a 2e       	mov	r8, r26
    7534:	91 2c       	mov	r9, r1
    7536:	0e 94 46 27 	call	0x4e8c	; 0x4e8c <sun_rise_and_set>
    753a:	f1 01       	movw	r30, r2
    753c:	20 89       	ldd	r18, Z+16	; 0x10
    753e:	31 89       	ldd	r19, Z+17	; 0x11
    7540:	42 89       	ldd	r20, Z+18	; 0x12
    7542:	53 89       	ldd	r21, Z+19	; 0x13
    7544:	0e 94 be 31 	call	0x637c	; 0x637c <dayfrac_to_local_hr>
    7548:	26 ee       	ldi	r18, 0xE6	; 230
    754a:	30 e0       	ldi	r19, 0x00	; 0
    754c:	22 0e       	add	r2, r18
    754e:	33 1e       	adc	r3, r19
    7550:	d1 01       	movw	r26, r2
    7552:	6d 93       	st	X+, r22
    7554:	7d 93       	st	X+, r23
    7556:	8d 93       	st	X+, r24
    7558:	9c 93       	st	X, r25
    755a:	13 97       	sbiw	r26, 0x03	; 3
    755c:	27 c0       	rjmp	.+78     	; 0x75ac <calculate_eot_and_sun_rise_transit_set+0x5b6>
                          spa->latitude, h_prime, h0_prime, SUN_SET),  spa->timezone);

    } else spa->srha= spa->ssha= spa->sta= spa->suntransit= spa->sunrise= spa->sunset= -99999;
    755e:	e6 ee       	ldi	r30, 0xE6	; 230
    7560:	f0 e0       	ldi	r31, 0x00	; 0
    7562:	2e 0e       	add	r2, r30
    7564:	3f 1e       	adc	r3, r31
    7566:	80 e8       	ldi	r24, 0x80	; 128
    7568:	9f e4       	ldi	r25, 0x4F	; 79
    756a:	a3 ec       	ldi	r26, 0xC3	; 195
    756c:	b7 ec       	ldi	r27, 0xC7	; 199
    756e:	f1 01       	movw	r30, r2
    7570:	80 83       	st	Z, r24
    7572:	91 83       	std	Z+1, r25	; 0x01
    7574:	a2 83       	std	Z+2, r26	; 0x02
    7576:	b3 83       	std	Z+3, r27	; 0x03
    7578:	b2 93       	st	-Z, r27
    757a:	a2 93       	st	-Z, r26
    757c:	92 93       	st	-Z, r25
    757e:	82 93       	st	-Z, r24
    7580:	b2 93       	st	-Z, r27
    7582:	a2 93       	st	-Z, r26
    7584:	92 93       	st	-Z, r25
    7586:	82 93       	st	-Z, r24
    7588:	1f 01       	movw	r2, r30
    758a:	2c ee       	ldi	r18, 0xEC	; 236
    758c:	3f ef       	ldi	r19, 0xFF	; 255
    758e:	22 0e       	add	r2, r18
    7590:	33 1e       	adc	r3, r19
    7592:	f1 01       	movw	r30, r2
    7594:	80 83       	st	Z, r24
    7596:	91 83       	std	Z+1, r25	; 0x01
    7598:	a2 83       	std	Z+2, r26	; 0x02
    759a:	b3 83       	std	Z+3, r27	; 0x03
    759c:	b2 93       	st	-Z, r27
    759e:	a2 93       	st	-Z, r26
    75a0:	92 93       	st	-Z, r25
    75a2:	82 93       	st	-Z, r24
    75a4:	b2 93       	st	-Z, r27
    75a6:	a2 93       	st	-Z, r26
    75a8:	92 93       	st	-Z, r25
    75aa:	82 93       	st	-Z, r24

}
    75ac:	c4 5c       	subi	r28, 0xC4	; 196
    75ae:	de 4f       	sbci	r29, 0xFE	; 254
    75b0:	0f b6       	in	r0, 0x3f	; 63
    75b2:	f8 94       	cli
    75b4:	de bf       	out	0x3e, r29	; 62
    75b6:	0f be       	out	0x3f, r0	; 63
    75b8:	cd bf       	out	0x3d, r28	; 61
    75ba:	cf 91       	pop	r28
    75bc:	df 91       	pop	r29
    75be:	1f 91       	pop	r17
    75c0:	0f 91       	pop	r16
    75c2:	ff 90       	pop	r15
    75c4:	ef 90       	pop	r14
    75c6:	df 90       	pop	r13
    75c8:	cf 90       	pop	r12
    75ca:	bf 90       	pop	r11
    75cc:	af 90       	pop	r10
    75ce:	9f 90       	pop	r9
    75d0:	8f 90       	pop	r8
    75d2:	7f 90       	pop	r7
    75d4:	6f 90       	pop	r6
    75d6:	5f 90       	pop	r5
    75d8:	4f 90       	pop	r4
    75da:	3f 90       	pop	r3
    75dc:	2f 90       	pop	r2
    75de:	08 95       	ret

000075e0 <spa_calculate>:
///////////////////////////////////////////////////////////////////////////////////////////
// Calculate all SPA parameters and put into structure
// Note: All inputs values (listed in header file) must already be in structure
///////////////////////////////////////////////////////////////////////////////////////////
int spa_calculate(spa_data *spa)
{
    75e0:	2f 92       	push	r2
    75e2:	3f 92       	push	r3
    75e4:	4f 92       	push	r4
    75e6:	5f 92       	push	r5
    75e8:	6f 92       	push	r6
    75ea:	7f 92       	push	r7
    75ec:	8f 92       	push	r8
    75ee:	9f 92       	push	r9
    75f0:	af 92       	push	r10
    75f2:	bf 92       	push	r11
    75f4:	cf 92       	push	r12
    75f6:	df 92       	push	r13
    75f8:	ef 92       	push	r14
    75fa:	ff 92       	push	r15
    75fc:	0f 93       	push	r16
    75fe:	1f 93       	push	r17
    7600:	df 93       	push	r29
    7602:	cf 93       	push	r28
    7604:	00 d0       	rcall	.+0      	; 0x7606 <spa_calculate+0x26>
    7606:	00 d0       	rcall	.+0      	; 0x7608 <spa_calculate+0x28>
    7608:	cd b7       	in	r28, 0x3d	; 61
    760a:	de b7       	in	r29, 0x3e	; 62
    760c:	9c 83       	std	Y+4, r25	; 0x04
    760e:	8b 83       	std	Y+3, r24	; 0x03
    int result;

    result = validate_inputs(spa);
    7610:	0e 94 87 22 	call	0x450e	; 0x450e <validate_inputs>
    7614:	9a 83       	std	Y+2, r25	; 0x02
    7616:	89 83       	std	Y+1, r24	; 0x01

    if (result == 0)
    7618:	89 2b       	or	r24, r25
    761a:	09 f0       	breq	.+2      	; 0x761e <spa_calculate+0x3e>
    761c:	b4 c1       	rjmp	.+872    	; 0x7986 <spa_calculate+0x3a6>
    {
        spa->jd = julian_day (spa->year, spa->month,  spa->day,
    761e:	ab 81       	ldd	r26, Y+3	; 0x03
    7620:	bc 81       	ldd	r27, Y+4	; 0x04
    7622:	12 96       	adiw	r26, 0x02	; 2
    7624:	6d 91       	ld	r22, X+
    7626:	7c 91       	ld	r23, X
    7628:	13 97       	sbiw	r26, 0x03	; 3
    762a:	14 96       	adiw	r26, 0x04	; 4
    762c:	4d 91       	ld	r20, X+
    762e:	5c 91       	ld	r21, X
    7630:	15 97       	sbiw	r26, 0x05	; 5
    7632:	16 96       	adiw	r26, 0x06	; 6
    7634:	2d 91       	ld	r18, X+
    7636:	3c 91       	ld	r19, X
    7638:	17 97       	sbiw	r26, 0x07	; 7
    763a:	18 96       	adiw	r26, 0x08	; 8
    763c:	0d 91       	ld	r16, X+
    763e:	1c 91       	ld	r17, X
    7640:	19 97       	sbiw	r26, 0x09	; 9
    7642:	1a 96       	adiw	r26, 0x0a	; 10
    7644:	ed 90       	ld	r14, X+
    7646:	fc 90       	ld	r15, X
    7648:	1b 97       	sbiw	r26, 0x0b	; 11
    764a:	50 96       	adiw	r26, 0x10	; 16
    764c:	ad 90       	ld	r10, X+
    764e:	bd 90       	ld	r11, X+
    7650:	cd 90       	ld	r12, X+
    7652:	dc 90       	ld	r13, X
    7654:	53 97       	sbiw	r26, 0x13	; 19
    7656:	8d 91       	ld	r24, X+
    7658:	9c 91       	ld	r25, X
    765a:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <julian_day>
    765e:	eb 81       	ldd	r30, Y+3	; 0x03
    7660:	fc 81       	ldd	r31, Y+4	; 0x04
    7662:	66 ab       	std	Z+54, r22	; 0x36
    7664:	77 ab       	std	Z+55, r23	; 0x37
    7666:	80 af       	std	Z+56, r24	; 0x38
    7668:	91 af       	std	Z+57, r25	; 0x39
                              spa->hour, spa->minute, spa->second, spa->timezone);

        calculate_geocentric_sun_right_ascension_and_declination(spa);
    766a:	cf 01       	movw	r24, r30
    766c:	0e 94 52 35 	call	0x6aa4	; 0x6aa4 <calculate_geocentric_sun_right_ascension_and_declination>
                        cos(beta_rad)*sin(epsilon_rad)*sin(deg2rad(lamda))));
}

double observer_hour_angle(double nu, double longitude, double alpha_deg)
{
    return limit_degrees(nu + longitude - alpha_deg);
    7670:	eb 81       	ldd	r30, Y+3	; 0x03
    7672:	fc 81       	ldd	r31, Y+4	; 0x04
    7674:	e2 57       	subi	r30, 0x72	; 114
    7676:	ff 4f       	sbci	r31, 0xFF	; 255
    7678:	60 81       	ld	r22, Z
    767a:	71 81       	ldd	r23, Z+1	; 0x01
    767c:	82 81       	ldd	r24, Z+2	; 0x02
    767e:	93 81       	ldd	r25, Z+3	; 0x03
    7680:	ab 81       	ldd	r26, Y+3	; 0x03
    7682:	bc 81       	ldd	r27, Y+4	; 0x04
    7684:	54 96       	adiw	r26, 0x14	; 20
    7686:	2d 91       	ld	r18, X+
    7688:	3d 91       	ld	r19, X+
    768a:	4d 91       	ld	r20, X+
    768c:	5c 91       	ld	r21, X
    768e:	57 97       	sbiw	r26, 0x17	; 23
    7690:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    7694:	12 e9       	ldi	r17, 0x92	; 146
    7696:	21 2e       	mov	r2, r17
    7698:	31 2c       	mov	r3, r1
    769a:	eb 81       	ldd	r30, Y+3	; 0x03
    769c:	fc 81       	ldd	r31, Y+4	; 0x04
    769e:	2e 0e       	add	r2, r30
    76a0:	3f 1e       	adc	r3, r31
    76a2:	d1 01       	movw	r26, r2
    76a4:	2d 91       	ld	r18, X+
    76a6:	3d 91       	ld	r19, X+
    76a8:	4d 91       	ld	r20, X+
    76aa:	5c 91       	ld	r21, X
    76ac:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    76b0:	0e 94 05 33 	call	0x660a	; 0x660a <limit_degrees>
    76b4:	5b 01       	movw	r10, r22
    76b6:	6c 01       	movw	r12, r24
        spa->jd = julian_day (spa->year, spa->month,  spa->day,
                              spa->hour, spa->minute, spa->second, spa->timezone);

        calculate_geocentric_sun_right_ascension_and_declination(spa);

        spa->h  = observer_hour_angle(spa->nu, spa->longitude, spa->alpha);
    76b8:	ba e9       	ldi	r27, 0x9A	; 154
    76ba:	4b 2e       	mov	r4, r27
    76bc:	51 2c       	mov	r5, r1
    76be:	eb 81       	ldd	r30, Y+3	; 0x03
    76c0:	fc 81       	ldd	r31, Y+4	; 0x04
    76c2:	4e 0e       	add	r4, r30
    76c4:	5f 1e       	adc	r5, r31
    76c6:	d2 01       	movw	r26, r4
    76c8:	6d 93       	st	X+, r22
    76ca:	7d 93       	st	X+, r23
    76cc:	8d 93       	st	X+, r24
    76ce:	9c 93       	st	X, r25
    76d0:	13 97       	sbiw	r26, 0x03	; 3
        spa->xi = sun_equatorial_horizontal_parallax(spa->r);
    76d2:	ee 5a       	subi	r30, 0xAE	; 174
    76d4:	ff 4f       	sbci	r31, 0xFF	; 255
    76d6:	fc 83       	std	Y+4, r31	; 0x04
    76d8:	eb 83       	std	Y+3, r30	; 0x03
    76da:	60 81       	ld	r22, Z
    76dc:	71 81       	ldd	r23, Z+1	; 0x01
    76de:	82 81       	ldd	r24, Z+2	; 0x02
    76e0:	93 81       	ldd	r25, Z+3	; 0x03
    76e2:	0e 94 f7 25 	call	0x4bee	; 0x4bee <sun_equatorial_horizontal_parallax>
    76e6:	7b 01       	movw	r14, r22
    76e8:	8c 01       	movw	r16, r24
    76ea:	eb 81       	ldd	r30, Y+3	; 0x03
    76ec:	fc 81       	ldd	r31, Y+4	; 0x04
    76ee:	e4 5b       	subi	r30, 0xB4	; 180
    76f0:	ff 4f       	sbci	r31, 0xFF	; 255
    76f2:	df 01       	movw	r26, r30
    76f4:	6d 93       	st	X+, r22
    76f6:	7d 93       	st	X+, r23
    76f8:	8d 93       	st	X+, r24
    76fa:	9c 93       	st	X, r25
    76fc:	13 97       	sbiw	r26, 0x03	; 3
    76fe:	ae 59       	subi	r26, 0x9E	; 158
    7700:	b0 40       	sbci	r27, 0x00	; 0

        sun_right_ascension_parallax_and_topocentric_dec(spa->latitude, spa->elevation, spa->xi,
    7702:	ed b7       	in	r30, 0x3d	; 61
    7704:	fe b7       	in	r31, 0x3e	; 62
    7706:	38 97       	sbiw	r30, 0x08	; 8
    7708:	0f b6       	in	r0, 0x3f	; 63
    770a:	f8 94       	cli
    770c:	fe bf       	out	0x3e, r31	; 62
    770e:	0f be       	out	0x3f, r0	; 63
    7710:	ed bf       	out	0x3d, r30	; 61
    7712:	31 96       	adiw	r30, 0x01	; 1
    7714:	58 96       	adiw	r26, 0x18	; 24
    7716:	6d 91       	ld	r22, X+
    7718:	7d 91       	ld	r23, X+
    771a:	8d 91       	ld	r24, X+
    771c:	9c 91       	ld	r25, X
    771e:	5b 97       	sbiw	r26, 0x1b	; 27
    7720:	5c 96       	adiw	r26, 0x1c	; 28
    7722:	2d 91       	ld	r18, X+
    7724:	3d 91       	ld	r19, X+
    7726:	4d 91       	ld	r20, X+
    7728:	5c 91       	ld	r21, X
    772a:	5f 97       	sbiw	r26, 0x1f	; 31
    772c:	aa 56       	subi	r26, 0x6A	; 106
    772e:	bf 4f       	sbci	r27, 0xFF	; 255
    7730:	6d 90       	ld	r6, X+
    7732:	7d 90       	ld	r7, X+
    7734:	8d 90       	ld	r8, X+
    7736:	9c 90       	ld	r9, X
    7738:	13 97       	sbiw	r26, 0x03	; 3
    773a:	a6 59       	subi	r26, 0x96	; 150
    773c:	b0 40       	sbci	r27, 0x00	; 0
    773e:	bc 83       	std	Y+4, r27	; 0x04
    7740:	ab 83       	std	Y+3, r26	; 0x03
    7742:	ad b7       	in	r26, 0x3d	; 61
    7744:	be b7       	in	r27, 0x3e	; 62
    7746:	11 96       	adiw	r26, 0x01	; 1
    7748:	6d 92       	st	X+, r6
    774a:	7d 92       	st	X+, r7
    774c:	8d 92       	st	X+, r8
    774e:	9c 92       	st	X, r9
    7750:	14 97       	sbiw	r26, 0x04	; 4
    7752:	a2 ea       	ldi	r26, 0xA2	; 162
    7754:	8a 2e       	mov	r8, r26
    7756:	91 2c       	mov	r9, r1
    7758:	ab 81       	ldd	r26, Y+3	; 0x03
    775a:	bc 81       	ldd	r27, Y+4	; 0x04
    775c:	8a 0e       	add	r8, r26
    775e:	9b 1e       	adc	r9, r27
    7760:	95 82       	std	Z+5, r9	; 0x05
    7762:	84 82       	std	Z+4, r8	; 0x04
    7764:	0f 2e       	mov	r0, r31
    7766:	f6 ea       	ldi	r31, 0xA6	; 166
    7768:	6f 2e       	mov	r6, r31
    776a:	77 24       	eor	r7, r7
    776c:	f0 2d       	mov	r31, r0
    776e:	6a 0e       	add	r6, r26
    7770:	7b 1e       	adc	r7, r27
    7772:	77 82       	std	Z+7, r7	; 0x07
    7774:	66 82       	std	Z+6, r6	; 0x06
    7776:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <sun_right_ascension_parallax_and_topocentric_dec>
                                    spa->h, spa->delta, &(spa->del_alpha), &(spa->delta_prime));

        spa->alpha_prime = topocentric_sun_right_ascension(spa->alpha, spa->del_alpha);
    777a:	eb 81       	ldd	r30, Y+3	; 0x03
    777c:	fc 81       	ldd	r31, Y+4	; 0x04
    777e:	e6 55       	subi	r30, 0x56	; 86
    7780:	ff 4f       	sbci	r31, 0xFF	; 255
    7782:	fc 83       	std	Y+4, r31	; 0x04
    7784:	eb 83       	std	Y+3, r30	; 0x03
    7786:	d1 01       	movw	r26, r2
    7788:	6d 91       	ld	r22, X+
    778a:	7d 91       	ld	r23, X+
    778c:	8d 91       	ld	r24, X+
    778e:	9c 91       	ld	r25, X
    7790:	f4 01       	movw	r30, r8
    7792:	20 81       	ld	r18, Z
    7794:	31 81       	ldd	r19, Z+1	; 0x01
    7796:	42 81       	ldd	r20, Z+2	; 0x02
    7798:	53 81       	ldd	r21, Z+3	; 0x03
    779a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    779e:	ab 81       	ldd	r26, Y+3	; 0x03
    77a0:	bc 81       	ldd	r27, Y+4	; 0x04
    77a2:	6d 93       	st	X+, r22
    77a4:	7d 93       	st	X+, r23
    77a6:	8d 93       	st	X+, r24
    77a8:	9c 93       	st	X, r25
    77aa:	13 97       	sbiw	r26, 0x03	; 3
    77ac:	aa 5a       	subi	r26, 0xAA	; 170
    77ae:	b0 40       	sbci	r27, 0x00	; 0
    77b0:	bc 83       	std	Y+4, r27	; 0x04
    77b2:	ab 83       	std	Y+3, r26	; 0x03
    return alpha_deg + delta_alpha;
}

double topocentric_local_hour_angle(double h, double delta_alpha)
{
    return h - delta_alpha;
    77b4:	f2 01       	movw	r30, r4
    77b6:	60 81       	ld	r22, Z
    77b8:	71 81       	ldd	r23, Z+1	; 0x01
    77ba:	82 81       	ldd	r24, Z+2	; 0x02
    77bc:	93 81       	ldd	r25, Z+3	; 0x03
    77be:	d4 01       	movw	r26, r8
    77c0:	2d 91       	ld	r18, X+
    77c2:	3d 91       	ld	r19, X+
    77c4:	4d 91       	ld	r20, X+
    77c6:	5c 91       	ld	r21, X
    77c8:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    77cc:	7b 01       	movw	r14, r22
    77ce:	8c 01       	movw	r16, r24

        sun_right_ascension_parallax_and_topocentric_dec(spa->latitude, spa->elevation, spa->xi,
                                    spa->h, spa->delta, &(spa->del_alpha), &(spa->delta_prime));

        spa->alpha_prime = topocentric_sun_right_ascension(spa->alpha, spa->del_alpha);
        spa->h_prime     = topocentric_local_hour_angle(spa->h, spa->del_alpha);
    77d0:	4e ea       	ldi	r20, 0xAE	; 174
    77d2:	44 2e       	mov	r4, r20
    77d4:	51 2c       	mov	r5, r1
    77d6:	eb 81       	ldd	r30, Y+3	; 0x03
    77d8:	fc 81       	ldd	r31, Y+4	; 0x04
    77da:	4e 0e       	add	r4, r30
    77dc:	5f 1e       	adc	r5, r31
    77de:	cb 01       	movw	r24, r22
    77e0:	d8 01       	movw	r26, r16
    77e2:	f2 01       	movw	r30, r4
    77e4:	80 83       	st	Z, r24
    77e6:	91 83       	std	Z+1, r25	; 0x01
    77e8:	a2 83       	std	Z+2, r26	; 0x02
    77ea:	b3 83       	std	Z+3, r27	; 0x03

        spa->e0      = topocentric_elevation_angle(spa->latitude, spa->delta_prime, spa->h_prime);
    77ec:	2d b7       	in	r18, 0x3d	; 61
    77ee:	3e b7       	in	r19, 0x3e	; 62
    77f0:	28 5f       	subi	r18, 0xF8	; 248
    77f2:	3f 4f       	sbci	r19, 0xFF	; 255
    77f4:	0f b6       	in	r0, 0x3f	; 63
    77f6:	f8 94       	cli
    77f8:	3e bf       	out	0x3e, r19	; 62
    77fa:	0f be       	out	0x3f, r0	; 63
    77fc:	2d bf       	out	0x3d, r18	; 61
    77fe:	ab 81       	ldd	r26, Y+3	; 0x03
    7800:	bc 81       	ldd	r27, Y+4	; 0x04
    7802:	58 96       	adiw	r26, 0x18	; 24
    7804:	6d 91       	ld	r22, X+
    7806:	7d 91       	ld	r23, X+
    7808:	8d 91       	ld	r24, X+
    780a:	9c 91       	ld	r25, X
    780c:	5b 97       	sbiw	r26, 0x1b	; 27
    780e:	f3 01       	movw	r30, r6
    7810:	20 81       	ld	r18, Z
    7812:	31 81       	ldd	r19, Z+1	; 0x01
    7814:	42 81       	ldd	r20, Z+2	; 0x02
    7816:	53 81       	ldd	r21, Z+3	; 0x03
    7818:	0e 94 7d 29 	call	0x52fa	; 0x52fa <topocentric_elevation_angle>
    781c:	5b 01       	movw	r10, r22
    781e:	6c 01       	movw	r12, r24
    7820:	32 eb       	ldi	r19, 0xB2	; 178
    7822:	83 2e       	mov	r8, r19
    7824:	91 2c       	mov	r9, r1
    7826:	2b 81       	ldd	r18, Y+3	; 0x03
    7828:	3c 81       	ldd	r19, Y+4	; 0x04
    782a:	82 0e       	add	r8, r18
    782c:	93 1e       	adc	r9, r19
    782e:	d4 01       	movw	r26, r8
    7830:	6d 93       	st	X+, r22
    7832:	7d 93       	st	X+, r23
    7834:	8d 93       	st	X+, r24
    7836:	9c 93       	st	X, r25
    7838:	13 97       	sbiw	r26, 0x03	; 3
        spa->del_e   = atmospheric_refraction_correction(spa->pressure, spa->temperature,
    783a:	f9 01       	movw	r30, r18
    783c:	60 a1       	ldd	r22, Z+32	; 0x20
    783e:	71 a1       	ldd	r23, Z+33	; 0x21
    7840:	82 a1       	ldd	r24, Z+34	; 0x22
    7842:	93 a1       	ldd	r25, Z+35	; 0x23
    7844:	24 a1       	ldd	r18, Z+36	; 0x24
    7846:	35 a1       	ldd	r19, Z+37	; 0x25
    7848:	46 a1       	ldd	r20, Z+38	; 0x26
    784a:	57 a1       	ldd	r21, Z+39	; 0x27
    784c:	e0 a8       	ldd	r14, Z+48	; 0x30
    784e:	f1 a8       	ldd	r15, Z+49	; 0x31
    7850:	02 a9       	ldd	r16, Z+50	; 0x32
    7852:	13 a9       	ldd	r17, Z+51	; 0x33
    7854:	0e 94 3e 2b 	call	0x567c	; 0x567c <atmospheric_refraction_correction>
    7858:	2b 81       	ldd	r18, Y+3	; 0x03
    785a:	3c 81       	ldd	r19, Y+4	; 0x04
    785c:	2a 54       	subi	r18, 0x4A	; 74
    785e:	3f 4f       	sbci	r19, 0xFF	; 255
    7860:	d9 01       	movw	r26, r18
    7862:	6d 93       	st	X+, r22
    7864:	7d 93       	st	X+, r23
    7866:	8d 93       	st	X+, r24
    7868:	9d 93       	st	X+, r25
    786a:	bc 83       	std	Y+4, r27	; 0x04
    786c:	ab 83       	std	Y+3, r26	; 0x03
    return del_e;
}

double topocentric_elevation_angle_corrected(double e0, double delta_e)
{
    return e0 + delta_e;
    786e:	f4 01       	movw	r30, r8
    7870:	20 81       	ld	r18, Z
    7872:	31 81       	ldd	r19, Z+1	; 0x01
    7874:	42 81       	ldd	r20, Z+2	; 0x02
    7876:	53 81       	ldd	r21, Z+3	; 0x03
    7878:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    787c:	9b 01       	movw	r18, r22
    787e:	ac 01       	movw	r20, r24
        spa->h_prime     = topocentric_local_hour_angle(spa->h, spa->del_alpha);

        spa->e0      = topocentric_elevation_angle(spa->latitude, spa->delta_prime, spa->h_prime);
        spa->del_e   = atmospheric_refraction_correction(spa->pressure, spa->temperature,
                                                         spa->atmos_refract, spa->e0);
        spa->e       = topocentric_elevation_angle_corrected(spa->e0, spa->del_e);
    7880:	ab 81       	ldd	r26, Y+3	; 0x03
    7882:	bc 81       	ldd	r27, Y+4	; 0x04
    7884:	6d 93       	st	X+, r22
    7886:	7d 93       	st	X+, r23
    7888:	8d 93       	st	X+, r24
    788a:	9c 93       	st	X, r25
    788c:	13 97       	sbiw	r26, 0x03	; 3

        spa->zenith     = topocentric_zenith_angle(spa->e);
    788e:	54 96       	adiw	r26, 0x14	; 20
    7890:	bc 83       	std	Y+4, r27	; 0x04
    7892:	ab 83       	std	Y+3, r26	; 0x03
    7894:	60 e0       	ldi	r22, 0x00	; 0
    7896:	70 e0       	ldi	r23, 0x00	; 0
    7898:	84 eb       	ldi	r24, 0xB4	; 180
    789a:	92 e4       	ldi	r25, 0x42	; 66
    789c:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    78a0:	eb 81       	ldd	r30, Y+3	; 0x03
    78a2:	fc 81       	ldd	r31, Y+4	; 0x04
    78a4:	60 83       	st	Z, r22
    78a6:	71 83       	std	Z+1, r23	; 0x01
    78a8:	82 83       	std	Z+2, r24	; 0x02
    78aa:	93 83       	std	Z+3, r25	; 0x03
    78ac:	ee 5c       	subi	r30, 0xCE	; 206
    78ae:	f0 40       	sbci	r31, 0x00	; 0
    78b0:	fc 83       	std	Y+4, r31	; 0x04
    78b2:	eb 83       	std	Y+3, r30	; 0x03
        spa->azimuth180 = topocentric_azimuth_angle_neg180_180(spa->h_prime, spa->latitude,
    78b4:	d2 01       	movw	r26, r4
    78b6:	6d 91       	ld	r22, X+
    78b8:	7d 91       	ld	r23, X+
    78ba:	8d 91       	ld	r24, X+
    78bc:	9c 91       	ld	r25, X
    78be:	20 8d       	ldd	r18, Z+24	; 0x18
    78c0:	31 8d       	ldd	r19, Z+25	; 0x19
    78c2:	42 8d       	ldd	r20, Z+26	; 0x1a
    78c4:	53 8d       	ldd	r21, Z+27	; 0x1b
    78c6:	f3 01       	movw	r30, r6
    78c8:	e0 80       	ld	r14, Z
    78ca:	f1 80       	ldd	r15, Z+1	; 0x01
    78cc:	02 81       	ldd	r16, Z+2	; 0x02
    78ce:	13 81       	ldd	r17, Z+3	; 0x03
    78d0:	0e 94 d7 2b 	call	0x57ae	; 0x57ae <topocentric_azimuth_angle_neg180_180>
    78d4:	2b 81       	ldd	r18, Y+3	; 0x03
    78d6:	3c 81       	ldd	r19, Y+4	; 0x04
    78d8:	2e 52       	subi	r18, 0x2E	; 46
    78da:	3f 4f       	sbci	r19, 0xFF	; 255
    78dc:	d9 01       	movw	r26, r18
    78de:	6d 93       	st	X+, r22
    78e0:	7d 93       	st	X+, r23
    78e2:	8d 93       	st	X+, r24
    78e4:	9d 93       	st	X+, r25
    78e6:	bc 83       	std	Y+4, r27	; 0x04
    78e8:	ab 83       	std	Y+3, r26	; 0x03
                                                                             spa->delta_prime);
        spa->azimuth    = topocentric_azimuth_angle_zero_360(spa->azimuth180);
    78ea:	20 e0       	ldi	r18, 0x00	; 0
    78ec:	30 e0       	ldi	r19, 0x00	; 0
    78ee:	44 e3       	ldi	r20, 0x34	; 52
    78f0:	53 e4       	ldi	r21, 0x43	; 67
    78f2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    78f6:	eb 81       	ldd	r30, Y+3	; 0x03
    78f8:	fc 81       	ldd	r31, Y+4	; 0x04
    78fa:	60 83       	st	Z, r22
    78fc:	71 83       	std	Z+1, r23	; 0x01
    78fe:	82 83       	std	Z+2, r24	; 0x02
    7900:	93 83       	std	Z+3, r25	; 0x03
    7902:	e6 5d       	subi	r30, 0xD6	; 214
    7904:	f0 40       	sbci	r31, 0x00	; 0
    7906:	fc 83       	std	Y+4, r31	; 0x04
    7908:	eb 83       	std	Y+3, r30	; 0x03

        if ((spa->function == SPA_ZA_INC) || (spa->function == SPA_ALL))
    790a:	84 a9       	ldd	r24, Z+52	; 0x34
    790c:	95 a9       	ldd	r25, Z+53	; 0x35
    790e:	81 30       	cpi	r24, 0x01	; 1
    7910:	91 05       	cpc	r25, r1
    7912:	11 f0       	breq	.+4      	; 0x7918 <spa_calculate+0x338>
    7914:	03 97       	sbiw	r24, 0x03	; 3
    7916:	69 f5       	brne	.+90     	; 0x7972 <spa_calculate+0x392>
            spa->incidence  = surface_incidence_angle(spa->zenith, spa->azimuth180,
    7918:	2b 81       	ldd	r18, Y+3	; 0x03
    791a:	3c 81       	ldd	r19, Y+4	; 0x04
    791c:	22 53       	subi	r18, 0x32	; 50
    791e:	3f 4f       	sbci	r19, 0xFF	; 255
    7920:	d9 01       	movw	r26, r18
    7922:	6d 91       	ld	r22, X+
    7924:	7d 91       	ld	r23, X+
    7926:	8d 91       	ld	r24, X+
    7928:	9d 91       	ld	r25, X+
    792a:	2d 91       	ld	r18, X+
    792c:	3d 91       	ld	r19, X+
    792e:	4d 91       	ld	r20, X+
    7930:	5c 91       	ld	r21, X
    7932:	13 97       	sbiw	r26, 0x03	; 3
    7934:	a2 5d       	subi	r26, 0xD2	; 210
    7936:	b0 40       	sbci	r27, 0x00	; 0
    7938:	bc 83       	std	Y+4, r27	; 0x04
    793a:	ab 83       	std	Y+3, r26	; 0x03
    793c:	9c 96       	adiw	r26, 0x2c	; 44
    793e:	ed 90       	ld	r14, X+
    7940:	fd 90       	ld	r15, X+
    7942:	0d 91       	ld	r16, X+
    7944:	1c 91       	ld	r17, X
    7946:	9f 97       	sbiw	r26, 0x2f	; 47
    7948:	98 96       	adiw	r26, 0x28	; 40
    794a:	ad 90       	ld	r10, X+
    794c:	bd 90       	ld	r11, X+
    794e:	cd 90       	ld	r12, X+
    7950:	dc 90       	ld	r13, X
    7952:	9b 97       	sbiw	r26, 0x2b	; 43
    7954:	0e 94 a3 2a 	call	0x5546	; 0x5546 <surface_incidence_angle>
    7958:	eb 81       	ldd	r30, Y+3	; 0x03
    795a:	fc 81       	ldd	r31, Y+4	; 0x04
    795c:	e6 52       	subi	r30, 0x26	; 38
    795e:	ff 4f       	sbci	r31, 0xFF	; 255
    7960:	df 01       	movw	r26, r30
    7962:	60 83       	st	Z, r22
    7964:	71 83       	std	Z+1, r23	; 0x01
    7966:	82 83       	std	Z+2, r24	; 0x02
    7968:	93 83       	std	Z+3, r25	; 0x03
    796a:	aa 5d       	subi	r26, 0xDA	; 218
    796c:	b0 40       	sbci	r27, 0x00	; 0
    796e:	bc 83       	std	Y+4, r27	; 0x04
    7970:	ab 83       	std	Y+3, r26	; 0x03
                                                      spa->azm_rotation, spa->slope);

        if ((spa->function == SPA_ZA_RTS) || (spa->function == SPA_ALL))
    7972:	eb 81       	ldd	r30, Y+3	; 0x03
    7974:	fc 81       	ldd	r31, Y+4	; 0x04
    7976:	84 a9       	ldd	r24, Z+52	; 0x34
    7978:	95 a9       	ldd	r25, Z+53	; 0x35
    797a:	02 97       	sbiw	r24, 0x02	; 2
    797c:	02 97       	sbiw	r24, 0x02	; 2
    797e:	18 f4       	brcc	.+6      	; 0x7986 <spa_calculate+0x3a6>
            calculate_eot_and_sun_rise_transit_set(spa);
    7980:	cf 01       	movw	r24, r30
    7982:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <calculate_eot_and_sun_rise_transit_set>
    }

    return result;
}
    7986:	89 81       	ldd	r24, Y+1	; 0x01
    7988:	9a 81       	ldd	r25, Y+2	; 0x02
    798a:	0f 90       	pop	r0
    798c:	0f 90       	pop	r0
    798e:	0f 90       	pop	r0
    7990:	0f 90       	pop	r0
    7992:	cf 91       	pop	r28
    7994:	df 91       	pop	r29
    7996:	1f 91       	pop	r17
    7998:	0f 91       	pop	r16
    799a:	ff 90       	pop	r15
    799c:	ef 90       	pop	r14
    799e:	df 90       	pop	r13
    79a0:	cf 90       	pop	r12
    79a2:	bf 90       	pop	r11
    79a4:	af 90       	pop	r10
    79a6:	9f 90       	pop	r9
    79a8:	8f 90       	pop	r8
    79aa:	7f 90       	pop	r7
    79ac:	6f 90       	pop	r6
    79ae:	5f 90       	pop	r5
    79b0:	4f 90       	pop	r4
    79b2:	3f 90       	pop	r3
    79b4:	2f 90       	pop	r2
    79b6:	08 95       	ret

000079b8 <readchar>:

/** simulate character by character IO */
int readchar() 
{
    int ch;
    if (*pvec == 0) {
    79b8:	e0 91 6f 12 	lds	r30, 0x126F
    79bc:	f0 91 70 12 	lds	r31, 0x1270
    79c0:	80 81       	ld	r24, Z
    79c2:	88 23       	and	r24, r24
    79c4:	19 f4       	brne	.+6      	; 0x79cc <readchar+0x14>
    79c6:	2f ef       	ldi	r18, 0xFF	; 255
    79c8:	3f ef       	ldi	r19, 0xFF	; 255
    79ca:	07 c0       	rjmp	.+14     	; 0x79da <readchar+0x22>
        ch = -1;
    }
    else {
        ch = *pvec++;
    79cc:	28 2f       	mov	r18, r24
    79ce:	30 e0       	ldi	r19, 0x00	; 0
    79d0:	31 96       	adiw	r30, 0x01	; 1
    79d2:	f0 93 70 12 	sts	0x1270, r31
    79d6:	e0 93 6f 12 	sts	0x126F, r30
    }
    return ch;
}
    79da:	c9 01       	movw	r24, r18
    79dc:	08 95       	ret

000079de <gga_getLatitude>:
}

//Getter functions from GGA sentence.

double gga_getLatitude(nmeap_gga_t *gga)
{
    79de:	fc 01       	movw	r30, r24
	return gga->latitude;
}
    79e0:	20 81       	ld	r18, Z
    79e2:	31 81       	ldd	r19, Z+1	; 0x01
    79e4:	42 81       	ldd	r20, Z+2	; 0x02
    79e6:	53 81       	ldd	r21, Z+3	; 0x03
    79e8:	b9 01       	movw	r22, r18
    79ea:	ca 01       	movw	r24, r20
    79ec:	08 95       	ret

000079ee <gga_getLongitude>:

double gga_getLongitude(nmeap_gga_t *gga)
{
    79ee:	fc 01       	movw	r30, r24
	return gga->longitude;
}
    79f0:	24 81       	ldd	r18, Z+4	; 0x04
    79f2:	35 81       	ldd	r19, Z+5	; 0x05
    79f4:	46 81       	ldd	r20, Z+6	; 0x06
    79f6:	57 81       	ldd	r21, Z+7	; 0x07
    79f8:	b9 01       	movw	r22, r18
    79fa:	ca 01       	movw	r24, r20
    79fc:	08 95       	ret

000079fe <gga_getAltitude>:

double gga_getAltitude(nmeap_gga_t *gga)
{
    79fe:	fc 01       	movw	r30, r24
	return gga->altitude;
}
    7a00:	20 85       	ldd	r18, Z+8	; 0x08
    7a02:	31 85       	ldd	r19, Z+9	; 0x09
    7a04:	42 85       	ldd	r20, Z+10	; 0x0a
    7a06:	53 85       	ldd	r21, Z+11	; 0x0b
    7a08:	b9 01       	movw	r22, r18
    7a0a:	ca 01       	movw	r24, r20
    7a0c:	08 95       	ret

00007a0e <gga_getUtcTime>:

uint32_t gga_getUtcTime(nmeap_gga_t *gga)
{
    7a0e:	fc 01       	movw	r30, r24
    7a10:	64 85       	ldd	r22, Z+12	; 0x0c
    7a12:	75 85       	ldd	r23, Z+13	; 0x0d
	return gga->time;
}
    7a14:	86 85       	ldd	r24, Z+14	; 0x0e
    7a16:	97 85       	ldd	r25, Z+15	; 0x0f
    7a18:	08 95       	ret

00007a1a <gga_getNumSatellites>:

int gga_getNumSatellites(nmeap_gga_t *gga)
{
    7a1a:	fc 01       	movw	r30, r24
	return gga->satellites;
}
    7a1c:	80 89       	ldd	r24, Z+16	; 0x10
    7a1e:	91 89       	ldd	r25, Z+17	; 0x11
    7a20:	08 95       	ret

00007a22 <accelToAngle>:
// Functions -- Physical Math
//*****************************************************************************

//Converts acclerometer value to panel angle.
int accelToAngle(float accel)
{
    7a22:	2d e1       	ldi	r18, 0x1D	; 29
    7a24:	38 e3       	ldi	r19, 0x38	; 56
    7a26:	47 ee       	ldi	r20, 0xE7	; 231
    7a28:	5e eb       	ldi	r21, 0xBE	; 190
    7a2a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7a2e:	2c e5       	ldi	r18, 0x5C	; 92
    7a30:	3f e8       	ldi	r19, 0x8F	; 143
    7a32:	4c e5       	ldi	r20, 0x5C	; 92
    7a34:	53 e4       	ldi	r21, 0x43	; 67
    7a36:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    7a3a:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
	return (int)(CALIB_M*accel + CALIB_B);
}
    7a3e:	cb 01       	movw	r24, r22
    7a40:	08 95       	ret

00007a42 <angleToAccel>:

//Converts panel angle to accelerometer value.
float angleToAccel(int angle)
{
    7a42:	aa 27       	eor	r26, r26
    7a44:	97 fd       	sbrc	r25, 7
    7a46:	a0 95       	com	r26
    7a48:	ba 2f       	mov	r27, r26
    7a4a:	bc 01       	movw	r22, r24
    7a4c:	cd 01       	movw	r24, r26
    7a4e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7a52:	2c e5       	ldi	r18, 0x5C	; 92
    7a54:	3f e8       	ldi	r19, 0x8F	; 143
    7a56:	4c e5       	ldi	r20, 0x5C	; 92
    7a58:	53 e4       	ldi	r21, 0x43	; 67
    7a5a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    7a5e:	2d e1       	ldi	r18, 0x1D	; 29
    7a60:	38 e3       	ldi	r19, 0x38	; 56
    7a62:	47 ee       	ldi	r20, 0xE7	; 231
    7a64:	5e eb       	ldi	r21, 0xBE	; 190
    7a66:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
	return (float)((angle-CALIB_B)/(CALIB_M));
}
    7a6a:	08 95       	ret

00007a6c <screwToRot>:
	return screw;
}

//Converts screw value to rotational angle.
float screwToRot(int screw)
{
    7a6c:	9c 01       	movw	r18, r24
	float rot;
	if(screw <= 6)
    7a6e:	87 30       	cpi	r24, 0x07	; 7
    7a70:	91 05       	cpc	r25, r1
    7a72:	64 f4       	brge	.+24     	; 0x7a8c <screwToRot+0x20>
	{
		rot = (float)(screw*(180.0/6.0));
    7a74:	b9 01       	movw	r22, r18
    7a76:	88 27       	eor	r24, r24
    7a78:	77 fd       	sbrc	r23, 7
    7a7a:	80 95       	com	r24
    7a7c:	98 2f       	mov	r25, r24
    7a7e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7a82:	20 e0       	ldi	r18, 0x00	; 0
    7a84:	30 e0       	ldi	r19, 0x00	; 0
    7a86:	40 ef       	ldi	r20, 0xF0	; 240
    7a88:	51 e4       	ldi	r21, 0x41	; 65
    7a8a:	0d c0       	rjmp	.+26     	; 0x7aa6 <screwToRot+0x3a>
	}
	else
	{
		rot = (float)((screw-6)*(-180.0/6.0));
    7a8c:	26 50       	subi	r18, 0x06	; 6
    7a8e:	30 40       	sbci	r19, 0x00	; 0
    7a90:	b9 01       	movw	r22, r18
    7a92:	88 27       	eor	r24, r24
    7a94:	77 fd       	sbrc	r23, 7
    7a96:	80 95       	com	r24
    7a98:	98 2f       	mov	r25, r24
    7a9a:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7a9e:	20 e0       	ldi	r18, 0x00	; 0
    7aa0:	30 e0       	ldi	r19, 0x00	; 0
    7aa2:	40 ef       	ldi	r20, 0xF0	; 240
    7aa4:	51 ec       	ldi	r21, 0xC1	; 193
    7aa6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7aaa:	e6 2f       	mov	r30, r22
	}
	return rot;
}
    7aac:	2e 2f       	mov	r18, r30
    7aae:	37 2f       	mov	r19, r23
    7ab0:	48 2f       	mov	r20, r24
    7ab2:	59 2f       	mov	r21, r25
    7ab4:	b9 01       	movw	r22, r18
    7ab6:	ca 01       	movw	r24, r20
    7ab8:	08 95       	ret

00007aba <incrementCurrScrew>:

//Increment the screw value (i.e., one clockwise turn)
void incrementCurrScrew(void)
{
	if(curr_screw<11)
    7aba:	80 91 54 13 	lds	r24, 0x1354
    7abe:	90 91 55 13 	lds	r25, 0x1355
    7ac2:	8b 30       	cpi	r24, 0x0B	; 11
    7ac4:	91 05       	cpc	r25, r1
    7ac6:	34 f4       	brge	.+12     	; 0x7ad4 <incrementCurrScrew+0x1a>
	{
		curr_screw++;
    7ac8:	01 96       	adiw	r24, 0x01	; 1
    7aca:	90 93 55 13 	sts	0x1355, r25
    7ace:	80 93 54 13 	sts	0x1354, r24
    7ad2:	08 95       	ret
	}
	else
	{
		curr_screw = 0;
    7ad4:	10 92 55 13 	sts	0x1355, r1
    7ad8:	10 92 54 13 	sts	0x1354, r1
    7adc:	08 95       	ret

00007ade <decrementCurrScrew>:
}

//Decrement the screw value (i.e., one counter-clockwise turn)
void decrementCurrScrew(void)
{
	if(curr_screw == 0)
    7ade:	80 91 54 13 	lds	r24, 0x1354
    7ae2:	90 91 55 13 	lds	r25, 0x1355
    7ae6:	00 97       	sbiw	r24, 0x00	; 0
    7ae8:	19 f4       	brne	.+6      	; 0x7af0 <decrementCurrScrew+0x12>
	{
		curr_screw = 11;
    7aea:	8b e0       	ldi	r24, 0x0B	; 11
    7aec:	90 e0       	ldi	r25, 0x00	; 0
    7aee:	01 c0       	rjmp	.+2      	; 0x7af2 <decrementCurrScrew+0x14>
	}
	else
	{
		curr_screw--;
    7af0:	01 97       	sbiw	r24, 0x01	; 1
    7af2:	90 93 55 13 	sts	0x1355, r25
    7af6:	80 93 54 13 	sts	0x1354, r24
    7afa:	08 95       	ret

00007afc <distanceBetweenScrewsCW>:
	}
}

//Calculates screw distance between two screws via a CW path
int distanceBetweenScrewsCW(int screw1, int screw2)
{
    7afc:	9b 01       	movw	r18, r22
    7afe:	28 1b       	sub	r18, r24
    7b00:	39 0b       	sbc	r19, r25
	if(screw2 >= screw1)
    7b02:	68 17       	cp	r22, r24
    7b04:	79 07       	cpc	r23, r25
    7b06:	14 f0       	brlt	.+4      	; 0x7b0c <distanceBetweenScrewsCW+0x10>
	{
		return (screw2 - screw1);
    7b08:	b9 01       	movw	r22, r18
    7b0a:	03 c0       	rjmp	.+6      	; 0x7b12 <distanceBetweenScrewsCW+0x16>
	}
	else
	{
		return ((screw2+12)-screw1);
    7b0c:	b9 01       	movw	r22, r18
    7b0e:	64 5f       	subi	r22, 0xF4	; 244
    7b10:	7f 4f       	sbci	r23, 0xFF	; 255
	}
}
    7b12:	cb 01       	movw	r24, r22
    7b14:	08 95       	ret

00007b16 <distanceBetweenScrewsCCW>:

//Calculates screw distance between two screws via a CCW path
int distanceBetweenScrewsCCW(int screw1, int screw2)
{
	if(screw2 <= screw1)
    7b16:	86 17       	cp	r24, r22
    7b18:	97 07       	cpc	r25, r23
    7b1a:	14 f0       	brlt	.+4      	; 0x7b20 <distanceBetweenScrewsCCW+0xa>
	{
		return (screw1 - screw2);
    7b1c:	9c 01       	movw	r18, r24
    7b1e:	03 c0       	rjmp	.+6      	; 0x7b26 <distanceBetweenScrewsCCW+0x10>
	}
	else
	{
		return ((screw1+12)-screw2);
    7b20:	9c 01       	movw	r18, r24
    7b22:	24 5f       	subi	r18, 0xF4	; 244
    7b24:	3f 4f       	sbci	r19, 0xFF	; 255
    7b26:	26 1b       	sub	r18, r22
    7b28:	37 0b       	sbc	r19, r23
	}
}
    7b2a:	c9 01       	movw	r24, r18
    7b2c:	08 95       	ret

00007b2e <getAdjDeg>:

//Gets adjustment factor given two quadrature voltages
float getAdjDeg(float voltage1, float voltage2)
{
    7b2e:	6f 92       	push	r6
    7b30:	7f 92       	push	r7
    7b32:	8f 92       	push	r8
    7b34:	9f 92       	push	r9
    7b36:	af 92       	push	r10
    7b38:	bf 92       	push	r11
    7b3a:	cf 92       	push	r12
    7b3c:	df 92       	push	r13
    7b3e:	ef 92       	push	r14
    7b40:	ff 92       	push	r15
    7b42:	0f 93       	push	r16
    7b44:	1f 93       	push	r17
    7b46:	7b 01       	movw	r14, r22
    7b48:	8c 01       	movw	r16, r24
    7b4a:	39 01       	movw	r6, r18
    7b4c:	4a 01       	movw	r8, r20
    7b4e:	20 e0       	ldi	r18, 0x00	; 0
    7b50:	30 e0       	ldi	r19, 0x00	; 0
    7b52:	44 e3       	ldi	r20, 0x34	; 52
    7b54:	53 e4       	ldi	r21, 0x43	; 67
    7b56:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7b5a:	5b 01       	movw	r10, r22
    7b5c:	6c 01       	movw	r12, r24
    7b5e:	c8 01       	movw	r24, r16
    7b60:	b7 01       	movw	r22, r14
    7b62:	a4 01       	movw	r20, r8
    7b64:	93 01       	movw	r18, r6
    7b66:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    7b6a:	9b 01       	movw	r18, r22
    7b6c:	ac 01       	movw	r20, r24
    7b6e:	c6 01       	movw	r24, r12
    7b70:	b5 01       	movw	r22, r10
    7b72:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    7b76:	20 e0       	ldi	r18, 0x00	; 0
    7b78:	30 e0       	ldi	r19, 0x00	; 0
    7b7a:	44 eb       	ldi	r20, 0xB4	; 180
    7b7c:	52 e4       	ldi	r21, 0x42	; 66
    7b7e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
	return (float)QUAD_ADJ_SCALE*((180.0*voltage1/(voltage1+voltage2))-90.0);
}
    7b82:	1f 91       	pop	r17
    7b84:	0f 91       	pop	r16
    7b86:	ff 90       	pop	r15
    7b88:	ef 90       	pop	r14
    7b8a:	df 90       	pop	r13
    7b8c:	cf 90       	pop	r12
    7b8e:	bf 90       	pop	r11
    7b90:	af 90       	pop	r10
    7b92:	9f 90       	pop	r9
    7b94:	8f 90       	pop	r8
    7b96:	7f 90       	pop	r7
    7b98:	6f 90       	pop	r6
    7b9a:	08 95       	ret

00007b9c <updateAccel>:
}

//Reads data from the accelerometer.
void updateAccel(void)
{
	sleep_cpu();
    7b9c:	88 95       	sleep
    curr_accel = (float)Ain ;
    7b9e:	60 91 29 17 	lds	r22, 0x1729
    7ba2:	70 91 2a 17 	lds	r23, 0x172A
    7ba6:	88 27       	eor	r24, r24
    7ba8:	77 fd       	sbrc	r23, 7
    7baa:	80 95       	com	r24
    7bac:	98 2f       	mov	r25, r24
    7bae:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7bb2:	60 93 7f 16 	sts	0x167F, r22
    7bb6:	70 93 80 16 	sts	0x1680, r23
    7bba:	80 93 81 16 	sts	0x1681, r24
    7bbe:	90 93 82 16 	sts	0x1682, r25
    7bc2:	88 ee       	ldi	r24, 0xE8	; 232
    7bc4:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7bc6:	20 e9       	ldi	r18, 0x90	; 144
    7bc8:	31 e0       	ldi	r19, 0x01	; 1
    7bca:	f9 01       	movw	r30, r18
    7bcc:	31 97       	sbiw	r30, 0x01	; 1
    7bce:	f1 f7       	brne	.-4      	; 0x7bcc <updateAccel+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7bd0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bd2:	d9 f7       	brne	.-10     	; 0x7bca <updateAccel+0x2e>
	_delay_ms(100);
	
}
    7bd4:	08 95       	ret

00007bd6 <updateQuad>:

}

//Update values from the quadrature
void updateQuad(void)
{
    7bd6:	ef 92       	push	r14
    7bd8:	ff 92       	push	r15
    7bda:	0f 93       	push	r16
    7bdc:	1f 93       	push	r17

	ADCSRB &= ~0b00001000; //disable highest mux bit
    7bde:	80 91 7b 00 	lds	r24, 0x007B
    7be2:	87 7f       	andi	r24, 0xF7	; 247
    7be4:	80 93 7b 00 	sts	0x007B, r24

	ADMUX = ADMUXU;
    7be8:	80 e4       	ldi	r24, 0x40	; 64
    7bea:	80 93 7c 00 	sts	0x007C, r24

    sleep_cpu();
    7bee:	88 95       	sleep
    Uvoltage = (float)Ain ;
    7bf0:	60 91 29 17 	lds	r22, 0x1729
    7bf4:	70 91 2a 17 	lds	r23, 0x172A
    7bf8:	88 27       	eor	r24, r24
    7bfa:	77 fd       	sbrc	r23, 7
    7bfc:	80 95       	com	r24
    7bfe:	98 2f       	mov	r25, r24
    7c00:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7c04:	60 93 93 16 	sts	0x1693, r22
    7c08:	70 93 94 16 	sts	0x1694, r23
    7c0c:	80 93 95 16 	sts	0x1695, r24
    7c10:	90 93 96 16 	sts	0x1696, r25
    7c14:	88 ee       	ldi	r24, 0xE8	; 232
    7c16:	93 e0       	ldi	r25, 0x03	; 3
    7c18:	20 e9       	ldi	r18, 0x90	; 144
    7c1a:	31 e0       	ldi	r19, 0x01	; 1
    7c1c:	f9 01       	movw	r30, r18
    7c1e:	31 97       	sbiw	r30, 0x01	; 1
    7c20:	f1 f7       	brne	.-4      	; 0x7c1e <updateQuad+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c22:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c24:	d9 f7       	brne	.-10     	; 0x7c1c <updateQuad+0x46>
	_delay_ms(100);

    Uvoltage = 1000*(Uvoltage/1024.0)*Vref ;   //(fraction of full scale)*Vref
    7c26:	60 91 93 16 	lds	r22, 0x1693
    7c2a:	70 91 94 16 	lds	r23, 0x1694
    7c2e:	80 91 95 16 	lds	r24, 0x1695
    7c32:	90 91 96 16 	lds	r25, 0x1696
    7c36:	e0 90 35 11 	lds	r14, 0x1135
    7c3a:	f0 90 36 11 	lds	r15, 0x1136
    7c3e:	00 91 37 11 	lds	r16, 0x1137
    7c42:	10 91 38 11 	lds	r17, 0x1138
    7c46:	20 e0       	ldi	r18, 0x00	; 0
    7c48:	30 e0       	ldi	r19, 0x00	; 0
    7c4a:	40 e8       	ldi	r20, 0x80	; 128
    7c4c:	5a e3       	ldi	r21, 0x3A	; 58
    7c4e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7c52:	20 e0       	ldi	r18, 0x00	; 0
    7c54:	30 e0       	ldi	r19, 0x00	; 0
    7c56:	4a e7       	ldi	r20, 0x7A	; 122
    7c58:	54 e4       	ldi	r21, 0x44	; 68
    7c5a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7c5e:	a8 01       	movw	r20, r16
    7c60:	97 01       	movw	r18, r14
    7c62:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7c66:	60 93 93 16 	sts	0x1693, r22
    7c6a:	70 93 94 16 	sts	0x1694, r23
    7c6e:	80 93 95 16 	sts	0x1695, r24
    7c72:	90 93 96 16 	sts	0x1696, r25

	ADMUX = ADMUXL;
    7c76:	81 e4       	ldi	r24, 0x41	; 65
    7c78:	80 93 7c 00 	sts	0x007C, r24

    sleep_cpu();
    7c7c:	88 95       	sleep
    Lvoltage = (float)Ain ;
    7c7e:	60 91 29 17 	lds	r22, 0x1729
    7c82:	70 91 2a 17 	lds	r23, 0x172A
    7c86:	88 27       	eor	r24, r24
    7c88:	77 fd       	sbrc	r23, 7
    7c8a:	80 95       	com	r24
    7c8c:	98 2f       	mov	r25, r24
    7c8e:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7c92:	60 93 97 16 	sts	0x1697, r22
    7c96:	70 93 98 16 	sts	0x1698, r23
    7c9a:	80 93 99 16 	sts	0x1699, r24
    7c9e:	90 93 9a 16 	sts	0x169A, r25
    7ca2:	88 ee       	ldi	r24, 0xE8	; 232
    7ca4:	93 e0       	ldi	r25, 0x03	; 3
    7ca6:	20 e9       	ldi	r18, 0x90	; 144
    7ca8:	31 e0       	ldi	r19, 0x01	; 1
    7caa:	f9 01       	movw	r30, r18
    7cac:	31 97       	sbiw	r30, 0x01	; 1
    7cae:	f1 f7       	brne	.-4      	; 0x7cac <updateQuad+0xd6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7cb0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7cb2:	d9 f7       	brne	.-10     	; 0x7caa <updateQuad+0xd4>
	_delay_ms(100);

    Lvoltage = 1000*(Lvoltage/1024.0)*Vref ;   //(fraction of full scale)
    7cb4:	60 91 97 16 	lds	r22, 0x1697
    7cb8:	70 91 98 16 	lds	r23, 0x1698
    7cbc:	80 91 99 16 	lds	r24, 0x1699
    7cc0:	90 91 9a 16 	lds	r25, 0x169A
    7cc4:	e0 90 35 11 	lds	r14, 0x1135
    7cc8:	f0 90 36 11 	lds	r15, 0x1136
    7ccc:	00 91 37 11 	lds	r16, 0x1137
    7cd0:	10 91 38 11 	lds	r17, 0x1138
    7cd4:	20 e0       	ldi	r18, 0x00	; 0
    7cd6:	30 e0       	ldi	r19, 0x00	; 0
    7cd8:	40 e8       	ldi	r20, 0x80	; 128
    7cda:	5a e3       	ldi	r21, 0x3A	; 58
    7cdc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7ce0:	20 e0       	ldi	r18, 0x00	; 0
    7ce2:	30 e0       	ldi	r19, 0x00	; 0
    7ce4:	4a e7       	ldi	r20, 0x7A	; 122
    7ce6:	54 e4       	ldi	r21, 0x44	; 68
    7ce8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7cec:	a8 01       	movw	r20, r16
    7cee:	97 01       	movw	r18, r14
    7cf0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7cf4:	60 93 97 16 	sts	0x1697, r22
    7cf8:	70 93 98 16 	sts	0x1698, r23
    7cfc:	80 93 99 16 	sts	0x1699, r24
    7d00:	90 93 9a 16 	sts	0x169A, r25

	ADMUX = ADMUXR;
    7d04:	85 e4       	ldi	r24, 0x45	; 69
    7d06:	80 93 7c 00 	sts	0x007C, r24

    sleep_cpu();
    7d0a:	88 95       	sleep
    Rvoltage = (float)Ain ;
    7d0c:	60 91 29 17 	lds	r22, 0x1729
    7d10:	70 91 2a 17 	lds	r23, 0x172A
    7d14:	88 27       	eor	r24, r24
    7d16:	77 fd       	sbrc	r23, 7
    7d18:	80 95       	com	r24
    7d1a:	98 2f       	mov	r25, r24
    7d1c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7d20:	60 93 c4 16 	sts	0x16C4, r22
    7d24:	70 93 c5 16 	sts	0x16C5, r23
    7d28:	80 93 c6 16 	sts	0x16C6, r24
    7d2c:	90 93 c7 16 	sts	0x16C7, r25
    7d30:	88 ee       	ldi	r24, 0xE8	; 232
    7d32:	93 e0       	ldi	r25, 0x03	; 3
    7d34:	20 e9       	ldi	r18, 0x90	; 144
    7d36:	31 e0       	ldi	r19, 0x01	; 1
    7d38:	f9 01       	movw	r30, r18
    7d3a:	31 97       	sbiw	r30, 0x01	; 1
    7d3c:	f1 f7       	brne	.-4      	; 0x7d3a <updateQuad+0x164>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d3e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d40:	d9 f7       	brne	.-10     	; 0x7d38 <updateQuad+0x162>

	_delay_ms(100);

    Rvoltage = 1000*(Rvoltage/1024.0)*Vref ;   //(fraction of full scale)  
    7d42:	60 91 c4 16 	lds	r22, 0x16C4
    7d46:	70 91 c5 16 	lds	r23, 0x16C5
    7d4a:	80 91 c6 16 	lds	r24, 0x16C6
    7d4e:	90 91 c7 16 	lds	r25, 0x16C7
    7d52:	e0 90 35 11 	lds	r14, 0x1135
    7d56:	f0 90 36 11 	lds	r15, 0x1136
    7d5a:	00 91 37 11 	lds	r16, 0x1137
    7d5e:	10 91 38 11 	lds	r17, 0x1138
    7d62:	20 e0       	ldi	r18, 0x00	; 0
    7d64:	30 e0       	ldi	r19, 0x00	; 0
    7d66:	40 e8       	ldi	r20, 0x80	; 128
    7d68:	5a e3       	ldi	r21, 0x3A	; 58
    7d6a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7d6e:	20 e0       	ldi	r18, 0x00	; 0
    7d70:	30 e0       	ldi	r19, 0x00	; 0
    7d72:	4a e7       	ldi	r20, 0x7A	; 122
    7d74:	54 e4       	ldi	r21, 0x44	; 68
    7d76:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7d7a:	a8 01       	movw	r20, r16
    7d7c:	97 01       	movw	r18, r14
    7d7e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7d82:	60 93 c4 16 	sts	0x16C4, r22
    7d86:	70 93 c5 16 	sts	0x16C5, r23
    7d8a:	80 93 c6 16 	sts	0x16C6, r24
    7d8e:	90 93 c7 16 	sts	0x16C7, r25

	ADMUX = ADMUXD;
    7d92:	84 e4       	ldi	r24, 0x44	; 68
    7d94:	80 93 7c 00 	sts	0x007C, r24

    sleep_cpu();
    7d98:	88 95       	sleep
    Dvoltage = (float)Ain ;
    7d9a:	60 91 29 17 	lds	r22, 0x1729
    7d9e:	70 91 2a 17 	lds	r23, 0x172A
    7da2:	88 27       	eor	r24, r24
    7da4:	77 fd       	sbrc	r23, 7
    7da6:	80 95       	com	r24
    7da8:	98 2f       	mov	r25, r24
    7daa:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7dae:	60 93 9b 16 	sts	0x169B, r22
    7db2:	70 93 9c 16 	sts	0x169C, r23
    7db6:	80 93 9d 16 	sts	0x169D, r24
    7dba:	90 93 9e 16 	sts	0x169E, r25
    7dbe:	88 ee       	ldi	r24, 0xE8	; 232
    7dc0:	93 e0       	ldi	r25, 0x03	; 3
    7dc2:	20 e9       	ldi	r18, 0x90	; 144
    7dc4:	31 e0       	ldi	r19, 0x01	; 1
    7dc6:	f9 01       	movw	r30, r18
    7dc8:	31 97       	sbiw	r30, 0x01	; 1
    7dca:	f1 f7       	brne	.-4      	; 0x7dc8 <updateQuad+0x1f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7dcc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7dce:	d9 f7       	brne	.-10     	; 0x7dc6 <updateQuad+0x1f0>

	_delay_ms(100);

    Dvoltage = 1000*(Dvoltage/1024.0)*Vref ;   //(fraction of full scale)
    7dd0:	60 91 9b 16 	lds	r22, 0x169B
    7dd4:	70 91 9c 16 	lds	r23, 0x169C
    7dd8:	80 91 9d 16 	lds	r24, 0x169D
    7ddc:	90 91 9e 16 	lds	r25, 0x169E
    7de0:	e0 90 35 11 	lds	r14, 0x1135
    7de4:	f0 90 36 11 	lds	r15, 0x1136
    7de8:	00 91 37 11 	lds	r16, 0x1137
    7dec:	10 91 38 11 	lds	r17, 0x1138
    7df0:	20 e0       	ldi	r18, 0x00	; 0
    7df2:	30 e0       	ldi	r19, 0x00	; 0
    7df4:	40 e8       	ldi	r20, 0x80	; 128
    7df6:	5a e3       	ldi	r21, 0x3A	; 58
    7df8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7dfc:	20 e0       	ldi	r18, 0x00	; 0
    7dfe:	30 e0       	ldi	r19, 0x00	; 0
    7e00:	4a e7       	ldi	r20, 0x7A	; 122
    7e02:	54 e4       	ldi	r21, 0x44	; 68
    7e04:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7e08:	a8 01       	movw	r20, r16
    7e0a:	97 01       	movw	r18, r14
    7e0c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7e10:	60 93 9b 16 	sts	0x169B, r22
    7e14:	70 93 9c 16 	sts	0x169C, r23
    7e18:	80 93 9d 16 	sts	0x169D, r24
    7e1c:	90 93 9e 16 	sts	0x169E, r25

	ADCSRB |= 0b00001000; //enable highest mux bit
    7e20:	80 91 7b 00 	lds	r24, 0x007B
    7e24:	88 60       	ori	r24, 0x08	; 8
    7e26:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = 0b01000110; //go back to accelerometer config
    7e2a:	86 e4       	ldi	r24, 0x46	; 70
    7e2c:	80 93 7c 00 	sts	0x007C, r24

}
    7e30:	1f 91       	pop	r17
    7e32:	0f 91       	pop	r16
    7e34:	ff 90       	pop	r15
    7e36:	ef 90       	pop	r14
    7e38:	08 95       	ret

00007e3a <updatePanel>:

//Updates panel voltage.
void updatePanel(void)
{
	ADMUX = 0b01000111; //pick panel
    7e3a:	87 e4       	ldi	r24, 0x47	; 71
    7e3c:	80 93 7c 00 	sts	0x007C, r24
	sleep_cpu();
    7e40:	88 95       	sleep
    panelVoltage = (float)(6.6*Ain*5/1024) ; //It's being passed through a voltage divider, see documentation.
    7e42:	60 91 29 17 	lds	r22, 0x1729
    7e46:	70 91 2a 17 	lds	r23, 0x172A
    7e4a:	88 27       	eor	r24, r24
    7e4c:	77 fd       	sbrc	r23, 7
    7e4e:	80 95       	com	r24
    7e50:	98 2f       	mov	r25, r24
    7e52:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    7e56:	23 e3       	ldi	r18, 0x33	; 51
    7e58:	33 e3       	ldi	r19, 0x33	; 51
    7e5a:	43 ed       	ldi	r20, 0xD3	; 211
    7e5c:	50 e4       	ldi	r21, 0x40	; 64
    7e5e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7e62:	20 e0       	ldi	r18, 0x00	; 0
    7e64:	30 e0       	ldi	r19, 0x00	; 0
    7e66:	40 ea       	ldi	r20, 0xA0	; 160
    7e68:	50 e4       	ldi	r21, 0x40	; 64
    7e6a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7e6e:	20 e0       	ldi	r18, 0x00	; 0
    7e70:	30 e0       	ldi	r19, 0x00	; 0
    7e72:	40 e8       	ldi	r20, 0x80	; 128
    7e74:	5a e3       	ldi	r21, 0x3A	; 58
    7e76:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    7e7a:	60 93 cc 16 	sts	0x16CC, r22
    7e7e:	70 93 cd 16 	sts	0x16CD, r23
    7e82:	80 93 ce 16 	sts	0x16CE, r24
    7e86:	90 93 cf 16 	sts	0x16CF, r25
    7e8a:	88 ee       	ldi	r24, 0xE8	; 232
    7e8c:	93 e0       	ldi	r25, 0x03	; 3
    7e8e:	20 e9       	ldi	r18, 0x90	; 144
    7e90:	31 e0       	ldi	r19, 0x01	; 1
    7e92:	f9 01       	movw	r30, r18
    7e94:	31 97       	sbiw	r30, 0x01	; 1
    7e96:	f1 f7       	brne	.-4      	; 0x7e94 <updatePanel+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e9a:	d9 f7       	brne	.-10     	; 0x7e92 <updatePanel+0x58>
	_delay_ms(100);
	ADMUX = 0b01000110; //go back to accelerometer config
    7e9c:	86 e4       	ldi	r24, 0x46	; 70
    7e9e:	80 93 7c 00 	sts	0x007C, r24
}
    7ea2:	08 95       	ret

00007ea4 <__vector_17>:
}

// Performs all RTC operations

ISR (TIMER1_COMPA_vect)
{
    7ea4:	1f 92       	push	r1
    7ea6:	0f 92       	push	r0
    7ea8:	0f b6       	in	r0, 0x3f	; 63
    7eaa:	0f 92       	push	r0
    7eac:	11 24       	eor	r1, r1
    7eae:	2f 93       	push	r18
    7eb0:	3f 93       	push	r19
    7eb2:	8f 93       	push	r24
    7eb4:	9f 93       	push	r25

	//fprintf(stdout,"Tick %u\n\r", TCNT1);

	
	if(UTC_msec < 999)
    7eb6:	80 91 5e 13 	lds	r24, 0x135E
    7eba:	90 91 5f 13 	lds	r25, 0x135F
    7ebe:	87 5e       	subi	r24, 0xE7	; 231
    7ec0:	93 40       	sbci	r25, 0x03	; 3
    7ec2:	54 f4       	brge	.+20     	; 0x7ed8 <__vector_17+0x34>
	{
		UTC_msec++;
    7ec4:	80 91 5e 13 	lds	r24, 0x135E
    7ec8:	90 91 5f 13 	lds	r25, 0x135F
    7ecc:	01 96       	adiw	r24, 0x01	; 1
    7ece:	90 93 5f 13 	sts	0x135F, r25
    7ed2:	80 93 5e 13 	sts	0x135E, r24
    7ed6:	0a c0       	rjmp	.+20     	; 0x7eec <__vector_17+0x48>
	} 
	else
	{
		UTC_msec = 0;
    7ed8:	10 92 5f 13 	sts	0x135F, r1
    7edc:	10 92 5e 13 	sts	0x135E, r1
		incSec = 1;
    7ee0:	81 e0       	ldi	r24, 0x01	; 1
    7ee2:	90 e0       	ldi	r25, 0x00	; 0
    7ee4:	90 93 61 13 	sts	0x1361, r25
    7ee8:	80 93 60 13 	sts	0x1360, r24
	}
	if(incSec == 1)
    7eec:	20 91 60 13 	lds	r18, 0x1360
    7ef0:	30 91 61 13 	lds	r19, 0x1361
    7ef4:	21 30       	cpi	r18, 0x01	; 1
    7ef6:	31 05       	cpc	r19, r1
    7ef8:	e1 f4       	brne	.+56     	; 0x7f32 <__vector_17+0x8e>
	{
		incSec = 0;
    7efa:	10 92 61 13 	sts	0x1361, r1
    7efe:	10 92 60 13 	sts	0x1360, r1
		if(UTC_sec < 59)
    7f02:	80 91 57 11 	lds	r24, 0x1157
    7f06:	90 91 58 11 	lds	r25, 0x1158
    7f0a:	cb 97       	sbiw	r24, 0x3b	; 59
    7f0c:	54 f4       	brge	.+20     	; 0x7f22 <__vector_17+0x7e>
		{
			UTC_sec++;
    7f0e:	80 91 57 11 	lds	r24, 0x1157
    7f12:	90 91 58 11 	lds	r25, 0x1158
    7f16:	01 96       	adiw	r24, 0x01	; 1
    7f18:	90 93 58 11 	sts	0x1158, r25
    7f1c:	80 93 57 11 	sts	0x1157, r24
    7f20:	08 c0       	rjmp	.+16     	; 0x7f32 <__vector_17+0x8e>
		}
		else
		{
			UTC_sec = 0;
    7f22:	10 92 58 11 	sts	0x1158, r1
    7f26:	10 92 57 11 	sts	0x1157, r1
			incMin = 1;
    7f2a:	30 93 63 13 	sts	0x1363, r19
    7f2e:	20 93 62 13 	sts	0x1362, r18
		}
		//fprintf(stdout, "second: %d\r\n", UTC_sec);
	}
	if(incMin == 1)
    7f32:	80 91 62 13 	lds	r24, 0x1362
    7f36:	90 91 63 13 	lds	r25, 0x1363
    7f3a:	01 97       	sbiw	r24, 0x01	; 1
    7f3c:	49 f5       	brne	.+82     	; 0x7f90 <__vector_17+0xec>
	{
		

		//movement
		if(autoMode == 1)
    7f3e:	80 91 48 13 	lds	r24, 0x1348
    7f42:	90 91 49 13 	lds	r25, 0x1349
    7f46:	81 30       	cpi	r24, 0x01	; 1
    7f48:	91 05       	cpc	r25, r1
    7f4a:	21 f4       	brne	.+8      	; 0x7f54 <__vector_17+0xb0>
			autoFlag = 1;
    7f4c:	90 93 4b 13 	sts	0x134B, r25
    7f50:	80 93 4a 13 	sts	0x134A, r24

		incMin = 0;
    7f54:	10 92 63 13 	sts	0x1363, r1
    7f58:	10 92 62 13 	sts	0x1362, r1
		if(UTC_min < 59)
    7f5c:	80 91 5c 13 	lds	r24, 0x135C
    7f60:	90 91 5d 13 	lds	r25, 0x135D
    7f64:	cb 97       	sbiw	r24, 0x3b	; 59
    7f66:	54 f4       	brge	.+20     	; 0x7f7c <__vector_17+0xd8>
		{
			UTC_min++;
    7f68:	80 91 5c 13 	lds	r24, 0x135C
    7f6c:	90 91 5d 13 	lds	r25, 0x135D
    7f70:	01 96       	adiw	r24, 0x01	; 1
    7f72:	90 93 5d 13 	sts	0x135D, r25
    7f76:	80 93 5c 13 	sts	0x135C, r24
    7f7a:	0a c0       	rjmp	.+20     	; 0x7f90 <__vector_17+0xec>
		}
		else
		{
			UTC_min = 0;
    7f7c:	10 92 5d 13 	sts	0x135D, r1
    7f80:	10 92 5c 13 	sts	0x135C, r1
			incHr = 1;
    7f84:	81 e0       	ldi	r24, 0x01	; 1
    7f86:	90 e0       	ldi	r25, 0x00	; 0
    7f88:	90 93 65 13 	sts	0x1365, r25
    7f8c:	80 93 64 13 	sts	0x1364, r24
		}
	}
	if(incHr == 1)
    7f90:	80 91 64 13 	lds	r24, 0x1364
    7f94:	90 91 65 13 	lds	r25, 0x1365
    7f98:	01 97       	sbiw	r24, 0x01	; 1
    7f9a:	c1 f4       	brne	.+48     	; 0x7fcc <__vector_17+0x128>
	{
		incHr = 0;
    7f9c:	10 92 65 13 	sts	0x1365, r1
    7fa0:	10 92 64 13 	sts	0x1364, r1
		if(UTC_hour < 23)
    7fa4:	80 91 55 11 	lds	r24, 0x1155
    7fa8:	90 91 56 11 	lds	r25, 0x1156
    7fac:	47 97       	sbiw	r24, 0x17	; 23
    7fae:	54 f4       	brge	.+20     	; 0x7fc4 <__vector_17+0x120>
		{
			UTC_hour++;
    7fb0:	80 91 55 11 	lds	r24, 0x1155
    7fb4:	90 91 56 11 	lds	r25, 0x1156
    7fb8:	01 96       	adiw	r24, 0x01	; 1
    7fba:	90 93 56 11 	sts	0x1156, r25
    7fbe:	80 93 55 11 	sts	0x1155, r24
    7fc2:	04 c0       	rjmp	.+8      	; 0x7fcc <__vector_17+0x128>
		}
		else
		{
			UTC_hour = 0;
    7fc4:	10 92 56 11 	sts	0x1156, r1
    7fc8:	10 92 55 11 	sts	0x1155, r1
		}
	}
}  
    7fcc:	9f 91       	pop	r25
    7fce:	8f 91       	pop	r24
    7fd0:	3f 91       	pop	r19
    7fd2:	2f 91       	pop	r18
    7fd4:	0f 90       	pop	r0
    7fd6:	0f be       	out	0x3f, r0	; 63
    7fd8:	0f 90       	pop	r0
    7fda:	1f 90       	pop	r1
    7fdc:	18 95       	reti

00007fde <__vector_29>:

ISR (ADC_vect)
{
    7fde:	1f 92       	push	r1
    7fe0:	0f 92       	push	r0
    7fe2:	0f b6       	in	r0, 0x3f	; 63
    7fe4:	0f 92       	push	r0
    7fe6:	11 24       	eor	r1, r1
    7fe8:	2f 93       	push	r18
    7fea:	3f 93       	push	r19
    7fec:	8f 93       	push	r24
    7fee:	9f 93       	push	r25
    //program ONLY gets here when ADC done flag is set
    //when reading 10-bit values
    //you MUST read the low byte first
    AinLow = (int)ADCL;
    7ff0:	80 91 78 00 	lds	r24, 0x0078
    7ff4:	90 e0       	ldi	r25, 0x00	; 0
    7ff6:	90 93 17 17 	sts	0x1717, r25
    7ffa:	80 93 16 17 	sts	0x1716, r24
    Ain = (int)ADCH*256;
    7ffe:	20 91 79 00 	lds	r18, 0x0079
    8002:	92 2f       	mov	r25, r18
    8004:	80 e0       	ldi	r24, 0x00	; 0
    8006:	90 93 2a 17 	sts	0x172A, r25
    800a:	80 93 29 17 	sts	0x1729, r24
    Ain = Ain + AinLow;
    800e:	20 91 29 17 	lds	r18, 0x1729
    8012:	30 91 2a 17 	lds	r19, 0x172A
    8016:	80 91 16 17 	lds	r24, 0x1716
    801a:	90 91 17 17 	lds	r25, 0x1717
    801e:	82 0f       	add	r24, r18
    8020:	93 1f       	adc	r25, r19
    8022:	90 93 2a 17 	sts	0x172A, r25
    8026:	80 93 29 17 	sts	0x1729, r24
}
    802a:	9f 91       	pop	r25
    802c:	8f 91       	pop	r24
    802e:	3f 91       	pop	r19
    8030:	2f 91       	pop	r18
    8032:	0f 90       	pop	r0
    8034:	0f be       	out	0x3f, r0	; 63
    8036:	0f 90       	pop	r0
    8038:	1f 90       	pop	r1
    803a:	18 95       	reti

0000803c <__vector_20>:
//*****************************************************************************
// Interrupt Service Routines
//*****************************************************************************

ISR (TIMER1_OVF_vect)
{
    803c:	1f 92       	push	r1
    803e:	0f 92       	push	r0
    8040:	0f b6       	in	r0, 0x3f	; 63
    8042:	0f 92       	push	r0
    8044:	0b b6       	in	r0, 0x3b	; 59
    8046:	0f 92       	push	r0
    8048:	11 24       	eor	r1, r1
    804a:	2f 93       	push	r18
    804c:	3f 93       	push	r19
    804e:	4f 93       	push	r20
    8050:	5f 93       	push	r21
    8052:	6f 93       	push	r22
    8054:	7f 93       	push	r23
    8056:	8f 93       	push	r24
    8058:	9f 93       	push	r25
    805a:	af 93       	push	r26
    805c:	bf 93       	push	r27
    805e:	ef 93       	push	r30
    8060:	ff 93       	push	r31
	fprintf(stdout, "Overflow!!!\n");
    8062:	60 91 2f 17 	lds	r22, 0x172F
    8066:	70 91 30 17 	lds	r23, 0x1730
    806a:	86 e2       	ldi	r24, 0x26	; 38
    806c:	92 e0       	ldi	r25, 0x02	; 2
    806e:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	
}
    8072:	ff 91       	pop	r31
    8074:	ef 91       	pop	r30
    8076:	bf 91       	pop	r27
    8078:	af 91       	pop	r26
    807a:	9f 91       	pop	r25
    807c:	8f 91       	pop	r24
    807e:	7f 91       	pop	r23
    8080:	6f 91       	pop	r22
    8082:	5f 91       	pop	r21
    8084:	4f 91       	pop	r20
    8086:	3f 91       	pop	r19
    8088:	2f 91       	pop	r18
    808a:	0f 90       	pop	r0
    808c:	0b be       	out	0x3b, r0	; 59
    808e:	0f 90       	pop	r0
    8090:	0f be       	out	0x3f, r0	; 63
    8092:	0f 90       	pop	r0
    8094:	1f 90       	pop	r1
    8096:	18 95       	reti

00008098 <goRight>:
	i2cSendA(TARGET_ADDR, 0, 1, buf);
	buf[0] = 0x00;   //zero vref
}

void goRight(int duration)
{
    8098:	0f 93       	push	r16
    809a:	1f 93       	push	r17
    809c:	df 93       	push	r29
    809e:	cf 93       	push	r28
    80a0:	0f 92       	push	r0
    80a2:	cd b7       	in	r28, 0x3d	; 61
    80a4:	de b7       	in	r29, 0x3e	; 62
    80a6:	8c 01       	movw	r16, r24
	u08 buf[1];
	buf[0] = 0x7F;   
    80a8:	8f e7       	ldi	r24, 0x7F	; 127
    80aa:	89 83       	std	Y+1, r24	; 0x01
	i2cSendA(TARGET_ADDR, 0, 1, buf);
    80ac:	8e e5       	ldi	r24, 0x5E	; 94
    80ae:	60 e0       	ldi	r22, 0x00	; 0
    80b0:	41 e0       	ldi	r20, 0x01	; 1
    80b2:	9e 01       	movw	r18, r28
    80b4:	2f 5f       	subi	r18, 0xFF	; 255
    80b6:	3f 4f       	sbci	r19, 0xFF	; 255
    80b8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <i2cSendA>
	PORTA &= ~0b00010000; //enable stepper
    80bc:	14 98       	cbi	0x02, 4	; 2
	PORTA |= 0b00000100;
    80be:	12 9a       	sbi	0x02, 2	; 2
    80c0:	80 91 91 16 	lds	r24, 0x1691
    80c4:	90 91 92 16 	lds	r25, 0x1692
    80c8:	40 e0       	ldi	r20, 0x00	; 0
    80ca:	50 e0       	ldi	r21, 0x00	; 0
    80cc:	60 ee       	ldi	r22, 0xE0	; 224
    80ce:	7e e2       	ldi	r23, 0x2E	; 46
    80d0:	11 c0       	rjmp	.+34     	; 0x80f4 <goRight+0x5c>
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
			PORTA |= 0b00001000;
    80d2:	13 9a       	sbi	0x02, 3	; 2
    80d4:	cb 01       	movw	r24, r22
    80d6:	01 97       	sbiw	r24, 0x01	; 1
    80d8:	f1 f7       	brne	.-4      	; 0x80d6 <goRight+0x3e>

			_delay_us(WHEEL_DELAY_US);

			PORTA &= ~0b00001000;
    80da:	13 98       	cbi	0x02, 3	; 2
    80dc:	cb 01       	movw	r24, r22
    80de:	01 97       	sbiw	r24, 0x01	; 1
    80e0:	f1 f7       	brne	.-4      	; 0x80de <goRight+0x46>
    80e2:	2f 5f       	subi	r18, 0xFF	; 255
    80e4:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[0] = 0x7F;   
	i2cSendA(TARGET_ADDR, 0, 1, buf);
	PORTA &= ~0b00010000; //enable stepper
	PORTA |= 0b00000100;
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
    80e6:	26 30       	cpi	r18, 0x06	; 6
    80e8:	31 05       	cpc	r19, r1
    80ea:	99 f7       	brne	.-26     	; 0x80d2 <goRight+0x3a>
    80ec:	4f 5f       	subi	r20, 0xFF	; 255
    80ee:	5f 4f       	sbci	r21, 0xFF	; 255
    80f0:	85 e0       	ldi	r24, 0x05	; 5
    80f2:	90 e0       	ldi	r25, 0x00	; 0
	u08 buf[1];
	buf[0] = 0x7F;   
	i2cSendA(TARGET_ADDR, 0, 1, buf);
	PORTA &= ~0b00010000; //enable stepper
	PORTA |= 0b00000100;
	for(i=0; i<duration; i++) {
    80f4:	40 17       	cp	r20, r16
    80f6:	51 07       	cpc	r21, r17
    80f8:	1c f4       	brge	.+6      	; 0x8100 <goRight+0x68>
    80fa:	20 e0       	ldi	r18, 0x00	; 0
    80fc:	30 e0       	ldi	r19, 0x00	; 0
    80fe:	f1 cf       	rjmp	.-30     	; 0x80e2 <goRight+0x4a>
    8100:	90 93 92 16 	sts	0x1692, r25
    8104:	80 93 91 16 	sts	0x1691, r24
    8108:	50 93 c3 16 	sts	0x16C3, r21
    810c:	40 93 c2 16 	sts	0x16C2, r20
			PORTA &= ~0b00001000;

			_delay_us(WHEEL_DELAY_US);
		}
	}
	PORTA |= 0b00010000; //disable stepper
    8110:	14 9a       	sbi	0x02, 4	; 2
	i2cInitA();
    8112:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <i2cInitA>
	buf[0] = 0x00;   //zero vref
    8116:	19 82       	std	Y+1, r1	; 0x01
	i2cSendA(TARGET_ADDR, 0, 1, buf);
    8118:	8e e5       	ldi	r24, 0x5E	; 94
    811a:	60 e0       	ldi	r22, 0x00	; 0
    811c:	41 e0       	ldi	r20, 0x01	; 1
    811e:	9e 01       	movw	r18, r28
    8120:	2f 5f       	subi	r18, 0xFF	; 255
    8122:	3f 4f       	sbci	r19, 0xFF	; 255
    8124:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <i2cSendA>
}
    8128:	0f 90       	pop	r0
    812a:	cf 91       	pop	r28
    812c:	df 91       	pop	r29
    812e:	1f 91       	pop	r17
    8130:	0f 91       	pop	r16
    8132:	08 95       	ret

00008134 <goLeft>:
		fprintf(stdout, "I'm sorry Dave, I'm afraid I can't do that...\r\n");
	}
}

void goLeft(int duration)
{
    8134:	0f 93       	push	r16
    8136:	1f 93       	push	r17
    8138:	df 93       	push	r29
    813a:	cf 93       	push	r28
    813c:	0f 92       	push	r0
    813e:	cd b7       	in	r28, 0x3d	; 61
    8140:	de b7       	in	r29, 0x3e	; 62
    8142:	8c 01       	movw	r16, r24
	u08 buf[1];
	buf[0] = 0x7F;   
    8144:	8f e7       	ldi	r24, 0x7F	; 127
    8146:	89 83       	std	Y+1, r24	; 0x01
	i2cSendA(TARGET_ADDR, 0, 1, buf);
    8148:	8e e5       	ldi	r24, 0x5E	; 94
    814a:	60 e0       	ldi	r22, 0x00	; 0
    814c:	41 e0       	ldi	r20, 0x01	; 1
    814e:	9e 01       	movw	r18, r28
    8150:	2f 5f       	subi	r18, 0xFF	; 255
    8152:	3f 4f       	sbci	r19, 0xFF	; 255
    8154:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <i2cSendA>
	PORTA &= ~0b00010000; //enable stepper
    8158:	14 98       	cbi	0x02, 4	; 2
	PORTA &= ~0b00000100;
    815a:	12 98       	cbi	0x02, 2	; 2
    815c:	80 91 91 16 	lds	r24, 0x1691
    8160:	90 91 92 16 	lds	r25, 0x1692
    8164:	40 e0       	ldi	r20, 0x00	; 0
    8166:	50 e0       	ldi	r21, 0x00	; 0
    8168:	60 ee       	ldi	r22, 0xE0	; 224
    816a:	7e e2       	ldi	r23, 0x2E	; 46
    816c:	11 c0       	rjmp	.+34     	; 0x8190 <goLeft+0x5c>
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
			PORTA |= 0b00001000;
    816e:	13 9a       	sbi	0x02, 3	; 2
    8170:	cb 01       	movw	r24, r22
    8172:	01 97       	sbiw	r24, 0x01	; 1
    8174:	f1 f7       	brne	.-4      	; 0x8172 <goLeft+0x3e>

			_delay_us(WHEEL_DELAY_US);

			PORTA &= ~0b00001000;
    8176:	13 98       	cbi	0x02, 3	; 2
    8178:	cb 01       	movw	r24, r22
    817a:	01 97       	sbiw	r24, 0x01	; 1
    817c:	f1 f7       	brne	.-4      	; 0x817a <goLeft+0x46>
    817e:	2f 5f       	subi	r18, 0xFF	; 255
    8180:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[0] = 0x7F;   
	i2cSendA(TARGET_ADDR, 0, 1, buf);
	PORTA &= ~0b00010000; //enable stepper
	PORTA &= ~0b00000100;
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
    8182:	26 30       	cpi	r18, 0x06	; 6
    8184:	31 05       	cpc	r19, r1
    8186:	99 f7       	brne	.-26     	; 0x816e <goLeft+0x3a>
    8188:	4f 5f       	subi	r20, 0xFF	; 255
    818a:	5f 4f       	sbci	r21, 0xFF	; 255
    818c:	85 e0       	ldi	r24, 0x05	; 5
    818e:	90 e0       	ldi	r25, 0x00	; 0
	u08 buf[1];
	buf[0] = 0x7F;   
	i2cSendA(TARGET_ADDR, 0, 1, buf);
	PORTA &= ~0b00010000; //enable stepper
	PORTA &= ~0b00000100;
	for(i=0; i<duration; i++) {
    8190:	40 17       	cp	r20, r16
    8192:	51 07       	cpc	r21, r17
    8194:	1c f4       	brge	.+6      	; 0x819c <goLeft+0x68>
    8196:	20 e0       	ldi	r18, 0x00	; 0
    8198:	30 e0       	ldi	r19, 0x00	; 0
    819a:	f1 cf       	rjmp	.-30     	; 0x817e <goLeft+0x4a>
    819c:	90 93 92 16 	sts	0x1692, r25
    81a0:	80 93 91 16 	sts	0x1691, r24
    81a4:	50 93 c3 16 	sts	0x16C3, r21
    81a8:	40 93 c2 16 	sts	0x16C2, r20
			PORTA &= ~0b00001000;

			_delay_us(WHEEL_DELAY_US);
		}
	}
	PORTA |= 0b00010000; //disable stepper
    81ac:	14 9a       	sbi	0x02, 4	; 2
	i2cInitA();
    81ae:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <i2cInitA>
	i2cSendA(TARGET_ADDR, 0, 1, buf);
    81b2:	8e e5       	ldi	r24, 0x5E	; 94
    81b4:	60 e0       	ldi	r22, 0x00	; 0
    81b6:	41 e0       	ldi	r20, 0x01	; 1
    81b8:	9e 01       	movw	r18, r28
    81ba:	2f 5f       	subi	r18, 0xFF	; 255
    81bc:	3f 4f       	sbci	r19, 0xFF	; 255
    81be:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <i2cSendA>
	buf[0] = 0x00;   //zero vref
}
    81c2:	0f 90       	pop	r0
    81c4:	cf 91       	pop	r28
    81c6:	df 91       	pop	r29
    81c8:	1f 91       	pop	r17
    81ca:	0f 91       	pop	r16
    81cc:	08 95       	ret

000081ce <goUp>:
	buf[0] = 0x00;   //zero vref
	i2cSendB(TARGET_ADDR, 0, 1, buf);
}

void goUp(int duration)
{
    81ce:	0f 93       	push	r16
    81d0:	1f 93       	push	r17
    81d2:	df 93       	push	r29
    81d4:	cf 93       	push	r28
    81d6:	0f 92       	push	r0
    81d8:	cd b7       	in	r28, 0x3d	; 61
    81da:	de b7       	in	r29, 0x3e	; 62
    81dc:	8c 01       	movw	r16, r24
	u08 buf[1];
	buf[0] = 0x7F;   
    81de:	8f e7       	ldi	r24, 0x7F	; 127
    81e0:	89 83       	std	Y+1, r24	; 0x01
	i2cSendB(TARGET_ADDR, 0, 1, buf);
    81e2:	8e e5       	ldi	r24, 0x5E	; 94
    81e4:	60 e0       	ldi	r22, 0x00	; 0
    81e6:	41 e0       	ldi	r20, 0x01	; 1
    81e8:	9e 01       	movw	r18, r28
    81ea:	2f 5f       	subi	r18, 0xFF	; 255
    81ec:	3f 4f       	sbci	r19, 0xFF	; 255
    81ee:	0e 94 c2 1a 	call	0x3584	; 0x3584 <i2cSendB>
	PORTG &= ~0b00000100; //enable stepper
    81f2:	a2 98       	cbi	0x14, 2	; 20
	PORTA &= ~0b01000000; //set direction up
    81f4:	16 98       	cbi	0x02, 6	; 2
    81f6:	80 91 91 16 	lds	r24, 0x1691
    81fa:	90 91 92 16 	lds	r25, 0x1692
    81fe:	40 e0       	ldi	r20, 0x00	; 0
    8200:	50 e0       	ldi	r21, 0x00	; 0
    8202:	60 e9       	ldi	r22, 0x90	; 144
    8204:	71 e0       	ldi	r23, 0x01	; 1
    8206:	11 c0       	rjmp	.+34     	; 0x822a <goUp+0x5c>
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
			PORTA |= 0b10000000;
    8208:	17 9a       	sbi	0x02, 7	; 2
    820a:	cb 01       	movw	r24, r22
    820c:	01 97       	sbiw	r24, 0x01	; 1
    820e:	f1 f7       	brne	.-4      	; 0x820c <goUp+0x3e>

			_delay_us(JACK_DELAY_US);

			PORTA &= ~0b10000000;
    8210:	17 98       	cbi	0x02, 7	; 2
    8212:	cb 01       	movw	r24, r22
    8214:	01 97       	sbiw	r24, 0x01	; 1
    8216:	f1 f7       	brne	.-4      	; 0x8214 <goUp+0x46>
    8218:	2f 5f       	subi	r18, 0xFF	; 255
    821a:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[0] = 0x7F;   
	i2cSendB(TARGET_ADDR, 0, 1, buf);
	PORTG &= ~0b00000100; //enable stepper
	PORTA &= ~0b01000000; //set direction up
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
    821c:	26 30       	cpi	r18, 0x06	; 6
    821e:	31 05       	cpc	r19, r1
    8220:	99 f7       	brne	.-26     	; 0x8208 <goUp+0x3a>
    8222:	4f 5f       	subi	r20, 0xFF	; 255
    8224:	5f 4f       	sbci	r21, 0xFF	; 255
    8226:	85 e0       	ldi	r24, 0x05	; 5
    8228:	90 e0       	ldi	r25, 0x00	; 0
	u08 buf[1];
	buf[0] = 0x7F;   
	i2cSendB(TARGET_ADDR, 0, 1, buf);
	PORTG &= ~0b00000100; //enable stepper
	PORTA &= ~0b01000000; //set direction up
	for(i=0; i<duration; i++) {
    822a:	40 17       	cp	r20, r16
    822c:	51 07       	cpc	r21, r17
    822e:	1c f4       	brge	.+6      	; 0x8236 <goUp+0x68>
    8230:	20 e0       	ldi	r18, 0x00	; 0
    8232:	30 e0       	ldi	r19, 0x00	; 0
    8234:	f1 cf       	rjmp	.-30     	; 0x8218 <goUp+0x4a>
    8236:	90 93 92 16 	sts	0x1692, r25
    823a:	80 93 91 16 	sts	0x1691, r24
    823e:	50 93 c3 16 	sts	0x16C3, r21
    8242:	40 93 c2 16 	sts	0x16C2, r20
			PORTA &= ~0b10000000;

			_delay_us(JACK_DELAY_US);
		}
	}
	PORTG |= 0b00000100; //disable stepper
    8246:	a2 9a       	sbi	0x14, 2	; 20
	i2cInitB();
    8248:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <i2cInitB>
	buf[0] = 0x00;   //zero vref
    824c:	19 82       	std	Y+1, r1	; 0x01
	i2cSendB(TARGET_ADDR, 0, 1, buf);
    824e:	8e e5       	ldi	r24, 0x5E	; 94
    8250:	60 e0       	ldi	r22, 0x00	; 0
    8252:	41 e0       	ldi	r20, 0x01	; 1
    8254:	9e 01       	movw	r18, r28
    8256:	2f 5f       	subi	r18, 0xFF	; 255
    8258:	3f 4f       	sbci	r19, 0xFF	; 255
    825a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <i2cSendB>
}
    825e:	0f 90       	pop	r0
    8260:	cf 91       	pop	r28
    8262:	df 91       	pop	r29
    8264:	1f 91       	pop	r17
    8266:	0f 91       	pop	r16
    8268:	08 95       	ret

0000826a <goDown>:

//These do what they say: move the stepper motors.
//How these operate will depend on JACK_DELAY_US and WHEEL_DELAY_US, so be careful.

void goDown(int duration)
{
    826a:	0f 93       	push	r16
    826c:	1f 93       	push	r17
    826e:	df 93       	push	r29
    8270:	cf 93       	push	r28
    8272:	0f 92       	push	r0
    8274:	cd b7       	in	r28, 0x3d	; 61
    8276:	de b7       	in	r29, 0x3e	; 62
    8278:	8c 01       	movw	r16, r24
	u08 buf[1];
	buf[0] = 0x7F;   
    827a:	8f e7       	ldi	r24, 0x7F	; 127
    827c:	89 83       	std	Y+1, r24	; 0x01
	i2cSendB(TARGET_ADDR, 0, 1, buf);
    827e:	8e e5       	ldi	r24, 0x5E	; 94
    8280:	60 e0       	ldi	r22, 0x00	; 0
    8282:	41 e0       	ldi	r20, 0x01	; 1
    8284:	9e 01       	movw	r18, r28
    8286:	2f 5f       	subi	r18, 0xFF	; 255
    8288:	3f 4f       	sbci	r19, 0xFF	; 255
    828a:	0e 94 c2 1a 	call	0x3584	; 0x3584 <i2cSendB>
	PORTG &= ~0b00000100; //enable stepper
    828e:	a2 98       	cbi	0x14, 2	; 20
	PORTA |= 0b01000000; //set direction down
    8290:	16 9a       	sbi	0x02, 6	; 2
    8292:	80 91 91 16 	lds	r24, 0x1691
    8296:	90 91 92 16 	lds	r25, 0x1692
    829a:	40 e0       	ldi	r20, 0x00	; 0
    829c:	50 e0       	ldi	r21, 0x00	; 0
    829e:	60 e9       	ldi	r22, 0x90	; 144
    82a0:	71 e0       	ldi	r23, 0x01	; 1
    82a2:	11 c0       	rjmp	.+34     	; 0x82c6 <goDown+0x5c>
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
			PORTA |= 0b10000000;
    82a4:	17 9a       	sbi	0x02, 7	; 2
    82a6:	cb 01       	movw	r24, r22
    82a8:	01 97       	sbiw	r24, 0x01	; 1
    82aa:	f1 f7       	brne	.-4      	; 0x82a8 <goDown+0x3e>

			_delay_us(JACK_DELAY_US);

			PORTA &= ~0b10000000;
    82ac:	17 98       	cbi	0x02, 7	; 2
    82ae:	cb 01       	movw	r24, r22
    82b0:	01 97       	sbiw	r24, 0x01	; 1
    82b2:	f1 f7       	brne	.-4      	; 0x82b0 <goDown+0x46>
    82b4:	2f 5f       	subi	r18, 0xFF	; 255
    82b6:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[0] = 0x7F;   
	i2cSendB(TARGET_ADDR, 0, 1, buf);
	PORTG &= ~0b00000100; //enable stepper
	PORTA |= 0b01000000; //set direction down
	for(i=0; i<duration; i++) {
		for (j=0; j<5; j++) {
    82b8:	26 30       	cpi	r18, 0x06	; 6
    82ba:	31 05       	cpc	r19, r1
    82bc:	99 f7       	brne	.-26     	; 0x82a4 <goDown+0x3a>
    82be:	4f 5f       	subi	r20, 0xFF	; 255
    82c0:	5f 4f       	sbci	r21, 0xFF	; 255
    82c2:	85 e0       	ldi	r24, 0x05	; 5
    82c4:	90 e0       	ldi	r25, 0x00	; 0
	u08 buf[1];
	buf[0] = 0x7F;   
	i2cSendB(TARGET_ADDR, 0, 1, buf);
	PORTG &= ~0b00000100; //enable stepper
	PORTA |= 0b01000000; //set direction down
	for(i=0; i<duration; i++) {
    82c6:	40 17       	cp	r20, r16
    82c8:	51 07       	cpc	r21, r17
    82ca:	1c f4       	brge	.+6      	; 0x82d2 <goDown+0x68>
    82cc:	20 e0       	ldi	r18, 0x00	; 0
    82ce:	30 e0       	ldi	r19, 0x00	; 0
    82d0:	f1 cf       	rjmp	.-30     	; 0x82b4 <goDown+0x4a>
    82d2:	90 93 92 16 	sts	0x1692, r25
    82d6:	80 93 91 16 	sts	0x1691, r24
    82da:	50 93 c3 16 	sts	0x16C3, r21
    82de:	40 93 c2 16 	sts	0x16C2, r20
			PORTA &= ~0b10000000;

			_delay_us(JACK_DELAY_US);
		}
	}
	PORTG |= 0b00000100; //disable stepper
    82e2:	a2 9a       	sbi	0x14, 2	; 20
	i2cInitB();
    82e4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <i2cInitB>
	buf[0] = 0x00;   //zero vref
    82e8:	19 82       	std	Y+1, r1	; 0x01
	i2cSendB(TARGET_ADDR, 0, 1, buf);
    82ea:	8e e5       	ldi	r24, 0x5E	; 94
    82ec:	60 e0       	ldi	r22, 0x00	; 0
    82ee:	41 e0       	ldi	r20, 0x01	; 1
    82f0:	9e 01       	movw	r18, r28
    82f2:	2f 5f       	subi	r18, 0xFF	; 255
    82f4:	3f 4f       	sbci	r19, 0xFF	; 255
    82f6:	0e 94 c2 1a 	call	0x3584	; 0x3584 <i2cSendB>
}
    82fa:	0f 90       	pop	r0
    82fc:	cf 91       	pop	r28
    82fe:	df 91       	pop	r29
    8300:	1f 91       	pop	r17
    8302:	0f 91       	pop	r16
    8304:	08 95       	ret

00008306 <goToAngle>:
	buf[0] = 0x00;   //zero vref
	i2cSendB(TARGET_ADDR, 0, 1, buf);
}

void goToAngle(int valNum)
{
    8306:	af 92       	push	r10
    8308:	bf 92       	push	r11
    830a:	cf 92       	push	r12
    830c:	df 92       	push	r13
    830e:	ef 92       	push	r14
    8310:	ff 92       	push	r15
    8312:	0f 93       	push	r16
    8314:	1f 93       	push	r17
    8316:	cf 93       	push	r28
    8318:	df 93       	push	r29
    831a:	ec 01       	movw	r28, r24
	float accel_wanted = angleToAccel(valNum);
    831c:	0e 94 21 3d 	call	0x7a42	; 0x7a42 <angleToAccel>
    8320:	5b 01       	movw	r10, r22
    8322:	6c 01       	movw	r12, r24

	if(dataLog==0)
    8324:	80 91 4c 13 	lds	r24, 0x134C
    8328:	90 91 4d 13 	lds	r25, 0x134D
    832c:	89 2b       	or	r24, r25
    832e:	59 f5       	brne	.+86     	; 0x8386 <goToAngle+0x80>
	{
		dtostrf(accel_wanted, 6, 3, accel_string);    
    8330:	87 e8       	ldi	r24, 0x87	; 135
    8332:	e8 2e       	mov	r14, r24
    8334:	86 e1       	ldi	r24, 0x16	; 22
    8336:	f8 2e       	mov	r15, r24
    8338:	c6 01       	movw	r24, r12
    833a:	b5 01       	movw	r22, r10
    833c:	46 e0       	ldi	r20, 0x06	; 6
    833e:	23 e0       	ldi	r18, 0x03	; 3
    8340:	87 01       	movw	r16, r14
    8342:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
	    fprintf(stdout, "Looking for accel value %s\r\n", accel_string);
    8346:	00 d0       	rcall	.+0      	; 0x8348 <goToAngle+0x42>
    8348:	00 d0       	rcall	.+0      	; 0x834a <goToAngle+0x44>
    834a:	00 d0       	rcall	.+0      	; 0x834c <goToAngle+0x46>
    834c:	ed b7       	in	r30, 0x3d	; 61
    834e:	fe b7       	in	r31, 0x3e	; 62
    8350:	31 96       	adiw	r30, 0x01	; 1
    8352:	80 91 2f 17 	lds	r24, 0x172F
    8356:	90 91 30 17 	lds	r25, 0x1730
    835a:	ad b7       	in	r26, 0x3d	; 61
    835c:	be b7       	in	r27, 0x3e	; 62
    835e:	12 96       	adiw	r26, 0x02	; 2
    8360:	9c 93       	st	X, r25
    8362:	8e 93       	st	-X, r24
    8364:	11 97       	sbiw	r26, 0x01	; 1
    8366:	83 e3       	ldi	r24, 0x33	; 51
    8368:	92 e0       	ldi	r25, 0x02	; 2
    836a:	93 83       	std	Z+3, r25	; 0x03
    836c:	82 83       	std	Z+2, r24	; 0x02
    836e:	f5 82       	std	Z+5, r15	; 0x05
    8370:	e4 82       	std	Z+4, r14	; 0x04
    8372:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    8376:	8d b7       	in	r24, 0x3d	; 61
    8378:	9e b7       	in	r25, 0x3e	; 62
    837a:	06 96       	adiw	r24, 0x06	; 6
    837c:	0f b6       	in	r0, 0x3f	; 63
    837e:	f8 94       	cli
    8380:	9e bf       	out	0x3e, r25	; 62
    8382:	0f be       	out	0x3f, r0	; 63
    8384:	8d bf       	out	0x3d, r24	; 61
	}
	
	
	if ((valNum<=MAX_ANGLE)&&(valNum>=MIN_ANGLE))
    8386:	6e 97       	sbiw	r28, 0x1e	; 30
    8388:	67 97       	sbiw	r28, 0x17	; 23
    838a:	08 f0       	brcs	.+2      	; 0x838e <goToAngle+0x88>
    838c:	48 c0       	rjmp	.+144    	; 0x841e <goToAngle+0x118>
	{
		if(curr_accel < accel_wanted)
    838e:	60 91 7f 16 	lds	r22, 0x167F
    8392:	70 91 80 16 	lds	r23, 0x1680
    8396:	80 91 81 16 	lds	r24, 0x1681
    839a:	90 91 82 16 	lds	r25, 0x1682
    839e:	a6 01       	movw	r20, r12
    83a0:	95 01       	movw	r18, r10
    83a2:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    83a6:	87 fd       	sbrc	r24, 7
    83a8:	07 c0       	rjmp	.+14     	; 0x83b8 <goToAngle+0xb2>
    83aa:	15 c0       	rjmp	.+42     	; 0x83d6 <goToAngle+0xd0>
		{
			while(curr_accel < accel_wanted)
			{
				goDown(1000);
    83ac:	88 ee       	ldi	r24, 0xE8	; 232
    83ae:	93 e0       	ldi	r25, 0x03	; 3
    83b0:	0e 94 35 41 	call	0x826a	; 0x826a <goDown>
				updateAccel();
    83b4:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
	
	if ((valNum<=MAX_ANGLE)&&(valNum>=MIN_ANGLE))
	{
		if(curr_accel < accel_wanted)
		{
			while(curr_accel < accel_wanted)
    83b8:	60 91 7f 16 	lds	r22, 0x167F
    83bc:	70 91 80 16 	lds	r23, 0x1680
    83c0:	80 91 81 16 	lds	r24, 0x1681
    83c4:	90 91 82 16 	lds	r25, 0x1682
    83c8:	a6 01       	movw	r20, r12
    83ca:	95 01       	movw	r18, r10
    83cc:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    83d0:	87 fd       	sbrc	r24, 7
    83d2:	ec cf       	rjmp	.-40     	; 0x83ac <goToAngle+0xa6>
    83d4:	2c c0       	rjmp	.+88     	; 0x842e <goToAngle+0x128>
			{
				goDown(1000);
				updateAccel();
			}	
		}
		else if(curr_accel >= accel_wanted)
    83d6:	60 91 7f 16 	lds	r22, 0x167F
    83da:	70 91 80 16 	lds	r23, 0x1680
    83de:	80 91 81 16 	lds	r24, 0x1681
    83e2:	90 91 82 16 	lds	r25, 0x1682
    83e6:	a6 01       	movw	r20, r12
    83e8:	95 01       	movw	r18, r10
    83ea:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    83ee:	87 ff       	sbrs	r24, 7
    83f0:	07 c0       	rjmp	.+14     	; 0x8400 <goToAngle+0xfa>
    83f2:	1d c0       	rjmp	.+58     	; 0x842e <goToAngle+0x128>
		{
			while(curr_accel > accel_wanted)
			{
				goUp(1000);
    83f4:	88 ee       	ldi	r24, 0xE8	; 232
    83f6:	93 e0       	ldi	r25, 0x03	; 3
    83f8:	0e 94 e7 40 	call	0x81ce	; 0x81ce <goUp>
				updateAccel();
    83fc:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
				updateAccel();
			}	
		}
		else if(curr_accel >= accel_wanted)
		{
			while(curr_accel > accel_wanted)
    8400:	60 91 7f 16 	lds	r22, 0x167F
    8404:	70 91 80 16 	lds	r23, 0x1680
    8408:	80 91 81 16 	lds	r24, 0x1681
    840c:	90 91 82 16 	lds	r25, 0x1682
    8410:	a6 01       	movw	r20, r12
    8412:	95 01       	movw	r18, r10
    8414:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    8418:	18 16       	cp	r1, r24
    841a:	64 f3       	brlt	.-40     	; 0x83f4 <goToAngle+0xee>
    841c:	08 c0       	rjmp	.+16     	; 0x842e <goToAngle+0x128>
			}
		}
	}
	else
	{
		fprintf(stdout, "I'm sorry Dave, I'm afraid I can't do that...\r\n");
    841e:	60 91 2f 17 	lds	r22, 0x172F
    8422:	70 91 30 17 	lds	r23, 0x1730
    8426:	80 e5       	ldi	r24, 0x50	; 80
    8428:	92 e0       	ldi	r25, 0x02	; 2
    842a:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	}
}
    842e:	df 91       	pop	r29
    8430:	cf 91       	pop	r28
    8432:	1f 91       	pop	r17
    8434:	0f 91       	pop	r16
    8436:	ff 90       	pop	r15
    8438:	ef 90       	pop	r14
    843a:	df 90       	pop	r13
    843c:	cf 90       	pop	r12
    843e:	bf 90       	pop	r11
    8440:	af 90       	pop	r10
    8442:	08 95       	ret

00008444 <rotToNearestScrew>:
	return (float)((angle-CALIB_B)/(CALIB_M));
}

//Converts rotation angles to screw values.
int rotToNearestScrew(float rot)
{
    8444:	ef 92       	push	r14
    8446:	ff 92       	push	r15
    8448:	0f 93       	push	r16
    844a:	1f 93       	push	r17
    844c:	7b 01       	movw	r14, r22
    844e:	8c 01       	movw	r16, r24
	int screw = 0;
	if(rot < 0)
    8450:	20 e0       	ldi	r18, 0x00	; 0
    8452:	30 e0       	ldi	r19, 0x00	; 0
    8454:	40 e0       	ldi	r20, 0x00	; 0
    8456:	50 e0       	ldi	r21, 0x00	; 0
    8458:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    845c:	88 23       	and	r24, r24
    845e:	8c f4       	brge	.+34     	; 0x8482 <rotToNearestScrew+0x3e>
	{
		screw = round((rot)*(-6.0/180.0))+6;
    8460:	c8 01       	movw	r24, r16
    8462:	b7 01       	movw	r22, r14
    8464:	29 e8       	ldi	r18, 0x89	; 137
    8466:	38 e8       	ldi	r19, 0x88	; 136
    8468:	48 e0       	ldi	r20, 0x08	; 8
    846a:	5d eb       	ldi	r21, 0xBD	; 189
    846c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8470:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
    8474:	20 e0       	ldi	r18, 0x00	; 0
    8476:	30 e0       	ldi	r19, 0x00	; 0
    8478:	40 ec       	ldi	r20, 0xC0	; 192
    847a:	50 e4       	ldi	r21, 0x40	; 64
    847c:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    8480:	0a c0       	rjmp	.+20     	; 0x8496 <rotToNearestScrew+0x52>
	}
	else
	{
		screw = round(rot*(6.0/180.0));
    8482:	c8 01       	movw	r24, r16
    8484:	b7 01       	movw	r22, r14
    8486:	29 e8       	ldi	r18, 0x89	; 137
    8488:	38 e8       	ldi	r19, 0x88	; 136
    848a:	48 e0       	ldi	r20, 0x08	; 8
    848c:	5d e3       	ldi	r21, 0x3D	; 61
    848e:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8492:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
    8496:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
	}
	if(screw == 12)
    849a:	6c 30       	cpi	r22, 0x0C	; 12
    849c:	71 05       	cpc	r23, r1
    849e:	11 f4       	brne	.+4      	; 0x84a4 <rotToNearestScrew+0x60>
    84a0:	60 e0       	ldi	r22, 0x00	; 0
    84a2:	70 e0       	ldi	r23, 0x00	; 0
	{
		screw = 0;
	}
	return screw;
}
    84a4:	cb 01       	movw	r24, r22
    84a6:	1f 91       	pop	r17
    84a8:	0f 91       	pop	r16
    84aa:	ff 90       	pop	r15
    84ac:	ef 90       	pop	r14
    84ae:	08 95       	ret

000084b0 <optimize2>:

// Function 2 -- Goldstein's algorithm.
// This is the one that is actually used.

void optimize2()
{
    84b0:	2f 92       	push	r2
    84b2:	3f 92       	push	r3
    84b4:	4f 92       	push	r4
    84b6:	5f 92       	push	r5
    84b8:	6f 92       	push	r6
    84ba:	7f 92       	push	r7
    84bc:	8f 92       	push	r8
    84be:	9f 92       	push	r9
    84c0:	af 92       	push	r10
    84c2:	bf 92       	push	r11
    84c4:	cf 92       	push	r12
    84c6:	df 92       	push	r13
    84c8:	ef 92       	push	r14
    84ca:	ff 92       	push	r15
    84cc:	0f 93       	push	r16
    84ce:	1f 93       	push	r17
    84d0:	df 93       	push	r29
    84d2:	cf 93       	push	r28
    84d4:	cd b7       	in	r28, 0x3d	; 61
    84d6:	de b7       	in	r29, 0x3e	; 62
    84d8:	ec 97       	sbiw	r28, 0x3c	; 60
    84da:	0f b6       	in	r0, 0x3f	; 63
    84dc:	f8 94       	cli
    84de:	de bf       	out	0x3e, r29	; 62
    84e0:	0f be       	out	0x3f, r0	; 63
    84e2:	cd bf       	out	0x3d, r28	; 61
		Appears to give fairly accurate results for the next 10 years or so
	*/

	float ti;
	int local_hour;
	int local_day = UTC_day;
    84e4:	a0 90 5d 11 	lds	r10, 0x115D
    84e8:	b0 90 5e 11 	lds	r11, 0x115E
	int local_month = UTC_month;
    84ec:	c0 90 5b 11 	lds	r12, 0x115B
    84f0:	d0 90 5c 11 	lds	r13, 0x115C
	
	/* calculate local date/time from utc date/time */
	float time_offset = round(longi / 15); //longitude -> hours
    84f4:	60 91 6d 11 	lds	r22, 0x116D
    84f8:	70 91 6e 11 	lds	r23, 0x116E
    84fc:	80 91 6f 11 	lds	r24, 0x116F
    8500:	90 91 70 11 	lds	r25, 0x1170
    8504:	20 e0       	ldi	r18, 0x00	; 0
    8506:	30 e0       	ldi	r19, 0x00	; 0
    8508:	40 e7       	ldi	r20, 0x70	; 112
    850a:	51 e4       	ldi	r21, 0x41	; 65
    850c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8510:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
    8514:	7b 01       	movw	r14, r22
    8516:	8c 01       	movw	r16, r24
	local_hour = UTC_hour + time_offset;
    8518:	60 91 55 11 	lds	r22, 0x1155
    851c:	70 91 56 11 	lds	r23, 0x1156
    8520:	88 27       	eor	r24, r24
    8522:	77 fd       	sbrc	r23, 7
    8524:	80 95       	com	r24
    8526:	98 2f       	mov	r25, r24
    8528:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    852c:	a8 01       	movw	r20, r16
    852e:	97 01       	movw	r18, r14
    8530:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    8534:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8538:	2b 01       	movw	r4, r22

	//adjust hour, day, month as needed (ignore years and seconds)...  
	if (local_hour < 0){
    853a:	77 ff       	sbrs	r23, 7
    853c:	3d c0       	rjmp	.+122    	; 0x85b8 <optimize2+0x108>
		local_hour += 24;
    853e:	88 e1       	ldi	r24, 0x18	; 24
    8540:	90 e0       	ldi	r25, 0x00	; 0
    8542:	48 0e       	add	r4, r24
    8544:	59 1e       	adc	r5, r25
		local_day--;
    8546:	08 94       	sec
    8548:	a1 08       	sbc	r10, r1
    854a:	b1 08       	sbc	r11, r1
		if (local_day < 1){
    854c:	1a 14       	cp	r1, r10
    854e:	1b 04       	cpc	r1, r11
    8550:	0c f4       	brge	.+2      	; 0x8554 <optimize2+0xa4>
    8552:	52 c0       	rjmp	.+164    	; 0x85f8 <optimize2+0x148>
			local_month--;
    8554:	08 94       	sec
    8556:	c1 08       	sbc	r12, r1
    8558:	d1 08       	sbc	r13, r1
			if (local_month < 1) local_month = 12;
    855a:	1c 14       	cp	r1, r12
    855c:	1d 04       	cpc	r1, r13
    855e:	24 f0       	brlt	.+8      	; 0x8568 <optimize2+0xb8>
    8560:	ec e0       	ldi	r30, 0x0C	; 12
    8562:	ce 2e       	mov	r12, r30
    8564:	d1 2c       	mov	r13, r1
    8566:	14 c0       	rjmp	.+40     	; 0x8590 <optimize2+0xe0>
			local_day = (local_month==4||local_month==6||local_month==9||local_month==11)?30:(local_month==1||local_month==3||local_month==5||local_month==7||local_month==10)?31:28;
    8568:	94 e0       	ldi	r25, 0x04	; 4
    856a:	c9 16       	cp	r12, r25
    856c:	d1 04       	cpc	r13, r1
    856e:	e9 f1       	breq	.+122    	; 0x85ea <optimize2+0x13a>
    8570:	a6 e0       	ldi	r26, 0x06	; 6
    8572:	ca 16       	cp	r12, r26
    8574:	d1 04       	cpc	r13, r1
    8576:	c9 f1       	breq	.+114    	; 0x85ea <optimize2+0x13a>
    8578:	b9 e0       	ldi	r27, 0x09	; 9
    857a:	cb 16       	cp	r12, r27
    857c:	d1 04       	cpc	r13, r1
    857e:	a9 f1       	breq	.+106    	; 0x85ea <optimize2+0x13a>
    8580:	eb e0       	ldi	r30, 0x0B	; 11
    8582:	ce 16       	cp	r12, r30
    8584:	d1 04       	cpc	r13, r1
    8586:	89 f1       	breq	.+98     	; 0x85ea <optimize2+0x13a>
    8588:	f1 e0       	ldi	r31, 0x01	; 1
    858a:	cf 16       	cp	r12, r31
    858c:	d1 04       	cpc	r13, r1
    858e:	89 f1       	breq	.+98     	; 0x85f2 <optimize2+0x142>
    8590:	83 e0       	ldi	r24, 0x03	; 3
    8592:	c8 16       	cp	r12, r24
    8594:	d1 04       	cpc	r13, r1
    8596:	69 f1       	breq	.+90     	; 0x85f2 <optimize2+0x142>
    8598:	95 e0       	ldi	r25, 0x05	; 5
    859a:	c9 16       	cp	r12, r25
    859c:	d1 04       	cpc	r13, r1
    859e:	49 f1       	breq	.+82     	; 0x85f2 <optimize2+0x142>
    85a0:	a7 e0       	ldi	r26, 0x07	; 7
    85a2:	ca 16       	cp	r12, r26
    85a4:	d1 04       	cpc	r13, r1
    85a6:	29 f1       	breq	.+74     	; 0x85f2 <optimize2+0x142>
    85a8:	ba e0       	ldi	r27, 0x0A	; 10
    85aa:	cb 16       	cp	r12, r27
    85ac:	d1 04       	cpc	r13, r1
    85ae:	09 f1       	breq	.+66     	; 0x85f2 <optimize2+0x142>
    85b0:	7c e1       	ldi	r23, 0x1C	; 28
    85b2:	a7 2e       	mov	r10, r23
    85b4:	b1 2c       	mov	r11, r1
    85b6:	20 c0       	rjmp	.+64     	; 0x85f8 <optimize2+0x148>
		}
	}
	else if (local_hour > 23){
    85b8:	68 31       	cpi	r22, 0x18	; 24
    85ba:	71 05       	cpc	r23, r1
    85bc:	ec f0       	brlt	.+58     	; 0x85f8 <optimize2+0x148>
		local_hour -= 24;
    85be:	88 ee       	ldi	r24, 0xE8	; 232
    85c0:	9f ef       	ldi	r25, 0xFF	; 255
    85c2:	48 0e       	add	r4, r24
    85c4:	59 1e       	adc	r5, r25
		local_day++;
		if (local_day > (local_month==4||local_month==6||local_month==9||local_month==11)?30:(local_month==1||local_month==3||local_month==5||local_month==7||local_month==10)?31:28){
			local_month++;
    85c6:	08 94       	sec
    85c8:	c1 1c       	adc	r12, r1
    85ca:	d1 1c       	adc	r13, r1
			if (local_month > 12) local_month = 1;
    85cc:	9d e0       	ldi	r25, 0x0D	; 13
    85ce:	c9 16       	cp	r12, r25
    85d0:	d1 04       	cpc	r13, r1
    85d2:	3c f0       	brlt	.+14     	; 0x85e2 <optimize2+0x132>
    85d4:	61 e0       	ldi	r22, 0x01	; 1
    85d6:	a6 2e       	mov	r10, r22
    85d8:	b1 2c       	mov	r11, r1
    85da:	51 e0       	ldi	r21, 0x01	; 1
    85dc:	c5 2e       	mov	r12, r21
    85de:	d1 2c       	mov	r13, r1
    85e0:	0b c0       	rjmp	.+22     	; 0x85f8 <optimize2+0x148>
    85e2:	41 e0       	ldi	r20, 0x01	; 1
    85e4:	a4 2e       	mov	r10, r20
    85e6:	b1 2c       	mov	r11, r1
    85e8:	07 c0       	rjmp	.+14     	; 0x85f8 <optimize2+0x148>
    85ea:	3e e1       	ldi	r19, 0x1E	; 30
    85ec:	a3 2e       	mov	r10, r19
    85ee:	b1 2c       	mov	r11, r1
    85f0:	03 c0       	rjmp	.+6      	; 0x85f8 <optimize2+0x148>
    85f2:	2f e1       	ldi	r18, 0x1F	; 31
    85f4:	a2 2e       	mov	r10, r18
    85f6:	b1 2c       	mov	r11, r1
			local_day = 1;
		}
	}
	
	//total hours and minutes and adjust for +/- offset from noon...
   ti = (local_hour + UTC_min / 60) - 12;
    85f8:	20 90 5c 13 	lds	r2, 0x135C
    85fc:	30 90 5d 13 	lds	r3, 0x135D
	  
    float pi180=M_PI/180;
    float adjtime;
    float za[] = {-0.5,30.5,58.5,89.5,119.5,150.5,180.5,211.5,242.5,272.5,303.5,333.5}; // days from jan at noon
    8600:	de 01       	movw	r26, r28
    8602:	11 96       	adiw	r26, 0x01	; 1
    8604:	e1 e7       	ldi	r30, 0x71	; 113
    8606:	f2 e1       	ldi	r31, 0x12	; 18
    8608:	80 e3       	ldi	r24, 0x30	; 48
    860a:	01 90       	ld	r0, Z+
    860c:	0d 92       	st	X+, r0
    860e:	81 50       	subi	r24, 0x01	; 1
    8610:	e1 f7       	brne	.-8      	; 0x860a <optimize2+0x15a>

    loc = round(longi / 15) * 15; // 
    adjtime = (longi - loc) / 40; // offset 
    zi = za[(int)local_month - 1];       // 
    zzi = 360 * (zi + 0.5 + local_day - 82) / 365; // 
    cos_tau = cos(zzi * pi180);
    8612:	08 94       	sec
    8614:	c1 08       	sbc	r12, r1
    8616:	d1 08       	sbc	r13, r1
    8618:	cc 0c       	add	r12, r12
    861a:	dd 1c       	adc	r13, r13
    861c:	cc 0c       	add	r12, r12
    861e:	dd 1c       	adc	r13, r13
    8620:	cc 0e       	add	r12, r28
    8622:	dd 1e       	adc	r13, r29
    8624:	d6 01       	movw	r26, r12
    8626:	11 96       	adiw	r26, 0x01	; 1
    8628:	6d 91       	ld	r22, X+
    862a:	7d 91       	ld	r23, X+
    862c:	8d 91       	ld	r24, X+
    862e:	9c 91       	ld	r25, X
    8630:	14 97       	sbiw	r26, 0x04	; 4
    8632:	20 e0       	ldi	r18, 0x00	; 0
    8634:	30 e0       	ldi	r19, 0x00	; 0
    8636:	40 e0       	ldi	r20, 0x00	; 0
    8638:	5f e3       	ldi	r21, 0x3F	; 63
    863a:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    863e:	7b 01       	movw	r14, r22
    8640:	8c 01       	movw	r16, r24
    8642:	b5 01       	movw	r22, r10
    8644:	88 27       	eor	r24, r24
    8646:	77 fd       	sbrc	r23, 7
    8648:	80 95       	com	r24
    864a:	98 2f       	mov	r25, r24
    864c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8650:	9b 01       	movw	r18, r22
    8652:	ac 01       	movw	r20, r24
    8654:	c8 01       	movw	r24, r16
    8656:	b7 01       	movw	r22, r14
    8658:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    865c:	20 e0       	ldi	r18, 0x00	; 0
    865e:	30 e0       	ldi	r19, 0x00	; 0
    8660:	44 ea       	ldi	r20, 0xA4	; 164
    8662:	52 e4       	ldi	r21, 0x42	; 66
    8664:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8668:	20 e0       	ldi	r18, 0x00	; 0
    866a:	30 e0       	ldi	r19, 0x00	; 0
    866c:	44 eb       	ldi	r20, 0xB4	; 180
    866e:	53 e4       	ldi	r21, 0x43	; 67
    8670:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8674:	20 e0       	ldi	r18, 0x00	; 0
    8676:	30 e8       	ldi	r19, 0x80	; 128
    8678:	46 eb       	ldi	r20, 0xB6	; 182
    867a:	53 e4       	ldi	r21, 0x43	; 67
    867c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8680:	25 e3       	ldi	r18, 0x35	; 53
    8682:	3a ef       	ldi	r19, 0xFA	; 250
    8684:	4e e8       	ldi	r20, 0x8E	; 142
    8686:	5c e3       	ldi	r21, 0x3C	; 60
    8688:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    868c:	7b 01       	movw	r14, r22
    868e:	8c 01       	movw	r16, r24
    8690:	c8 01       	movw	r24, r16
    8692:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    8696:	5b 01       	movw	r10, r22
    8698:	6c 01       	movw	r12, r24
    sin_tau = sin(zzi * pi180);
    869a:	b7 01       	movw	r22, r14
    869c:	c8 01       	movw	r24, r16
    869e:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    86a2:	7b 01       	movw	r14, r22
    86a4:	8c 01       	movw	r16, r24
    phi = acos(cos_tau * cos_tau + sin_tau * sin_tau * cos(23.45 * pi180)); // formula for sun declination (varies +/- 23.45 deg. over a year)
    86a6:	c6 01       	movw	r24, r12
    86a8:	b5 01       	movw	r22, r10
    86aa:	a6 01       	movw	r20, r12
    86ac:	95 01       	movw	r18, r10
    86ae:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    86b2:	5b 01       	movw	r10, r22
    86b4:	6c 01       	movw	r12, r24
    86b6:	c8 01       	movw	r24, r16
    86b8:	b7 01       	movw	r22, r14
    86ba:	a8 01       	movw	r20, r16
    86bc:	97 01       	movw	r18, r14
    86be:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    86c2:	2b e3       	ldi	r18, 0x3B	; 59
    86c4:	3b ed       	ldi	r19, 0xDB	; 219
    86c6:	4a e6       	ldi	r20, 0x6A	; 106
    86c8:	5f e3       	ldi	r21, 0x3F	; 63
    86ca:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    86ce:	9b 01       	movw	r18, r22
    86d0:	ac 01       	movw	r20, r24
    86d2:	c6 01       	movw	r24, r12
    86d4:	b5 01       	movw	r22, r10
    86d6:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    86da:	0e 94 c2 60 	call	0xc184	; 0xc184 <acos>
    phi = round(1000 * phi / pi180) / 1000; //
    86de:	20 e0       	ldi	r18, 0x00	; 0
    86e0:	30 e0       	ldi	r19, 0x00	; 0
    86e2:	4a e7       	ldi	r20, 0x7A	; 122
    86e4:	54 e4       	ldi	r21, 0x44	; 68
    86e6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    86ea:	25 e3       	ldi	r18, 0x35	; 53
    86ec:	3a ef       	ldi	r19, 0xFA	; 250
    86ee:	4e e8       	ldi	r20, 0x8E	; 142
    86f0:	5c e3       	ldi	r21, 0x3C	; 60
    86f2:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    86f6:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
    86fa:	20 e0       	ldi	r18, 0x00	; 0
    86fc:	30 e0       	ldi	r19, 0x00	; 0
    86fe:	4a e7       	ldi	r20, 0x7A	; 122
    8700:	54 e4       	ldi	r21, 0x44	; 68
    8702:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8706:	3b 01       	movw	r6, r22
    8708:	4c 01       	movw	r8, r24
    if (sin_tau < 0){phi = -phi;}// sign +/- depends on the time of year   
    870a:	c8 01       	movw	r24, r16
    870c:	b7 01       	movw	r22, r14
    870e:	20 e0       	ldi	r18, 0x00	; 0
    8710:	30 e0       	ldi	r19, 0x00	; 0
    8712:	40 e0       	ldi	r20, 0x00	; 0
    8714:	50 e0       	ldi	r21, 0x00	; 0
    8716:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    871a:	88 23       	and	r24, r24
    871c:	24 f4       	brge	.+8      	; 0x8726 <optimize2+0x276>
    871e:	97 fa       	bst	r9, 7
    8720:	90 94       	com	r9
    8722:	97 f8       	bld	r9, 7
    8724:	90 94       	com	r9
			local_day = 1;
		}
	}
	
	//total hours and minutes and adjust for +/- offset from noon...
   ti = (local_hour + UTC_min / 60) - 12;
    8726:	c1 01       	movw	r24, r2
    8728:	6c e3       	ldi	r22, 0x3C	; 60
    872a:	70 e0       	ldi	r23, 0x00	; 0
    872c:	0e 94 1c 66 	call	0xcc38	; 0xcc38 <__divmodhi4>
    8730:	6c 50       	subi	r22, 0x0C	; 12
    8732:	70 40       	sbci	r23, 0x00	; 0
    8734:	46 0e       	add	r4, r22
    8736:	57 1e       	adc	r5, r23
    8738:	b2 01       	movw	r22, r4
    873a:	88 27       	eor	r24, r24
    873c:	77 fd       	sbrc	r23, 7
    873e:	80 95       	com	r24
    8740:	98 2f       	mov	r25, r24
    8742:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8746:	5b 01       	movw	r10, r22
    8748:	6c 01       	movw	r12, r24
    sin_tau = sin(zzi * pi180);
    phi = acos(cos_tau * cos_tau + sin_tau * sin_tau * cos(23.45 * pi180)); // formula for sun declination (varies +/- 23.45 deg. over a year)
    phi = round(1000 * phi / pi180) / 1000; //
    if (sin_tau < 0){phi = -phi;}// sign +/- depends on the time of year   
    ti = ti * 15; // hours +/- offset from noon to degrees from Prime Meridian
    cth = cos(lati * pi180);
    874a:	60 91 69 11 	lds	r22, 0x1169
    874e:	70 91 6a 11 	lds	r23, 0x116A
    8752:	80 91 6b 11 	lds	r24, 0x116B
    8756:	90 91 6c 11 	lds	r25, 0x116C
    875a:	25 e3       	ldi	r18, 0x35	; 53
    875c:	3a ef       	ldi	r19, 0xFA	; 250
    875e:	4e e8       	ldi	r20, 0x8E	; 142
    8760:	5c e3       	ldi	r21, 0x3C	; 60
    8762:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8766:	7b 01       	movw	r14, r22
    8768:	8c 01       	movw	r16, r24
    876a:	c8 01       	movw	r24, r16
    876c:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    8770:	69 af       	std	Y+57, r22	; 0x39
    8772:	7a af       	std	Y+58, r23	; 0x3a
    8774:	8b af       	std	Y+59, r24	; 0x3b
    8776:	9c af       	std	Y+60, r25	; 0x3c
    sth = sin(lati * pi180);
    8778:	b7 01       	movw	r22, r14
    877a:	c8 01       	movw	r24, r16
    877c:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    8780:	6d ab       	std	Y+53, r22	; 0x35
    8782:	7e ab       	std	Y+54, r23	; 0x36
    8784:	8f ab       	std	Y+55, r24	; 0x37
    8786:	98 af       	std	Y+56, r25	; 0x38
    cph = cos(phi * pi180);
    8788:	c4 01       	movw	r24, r8
    878a:	b3 01       	movw	r22, r6
    878c:	25 e3       	ldi	r18, 0x35	; 53
    878e:	3a ef       	ldi	r19, 0xFA	; 250
    8790:	4e e8       	ldi	r20, 0x8E	; 142
    8792:	5c e3       	ldi	r21, 0x3C	; 60
    8794:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8798:	7b 01       	movw	r14, r22
    879a:	8c 01       	movw	r16, r24
    879c:	c8 01       	movw	r24, r16
    879e:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    87a2:	3b 01       	movw	r6, r22
    87a4:	4c 01       	movw	r8, r24
    sph = sin(phi * pi180);
    87a6:	b7 01       	movw	r22, r14
    87a8:	c8 01       	movw	r24, r16
    87aa:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    87ae:	69 ab       	std	Y+49, r22	; 0x31
    87b0:	7a ab       	std	Y+50, r23	; 0x32
    87b2:	8b ab       	std	Y+51, r24	; 0x33
    87b4:	9c ab       	std	Y+52, r25	; 0x34
    cti = cos(ti * pi180);
    87b6:	c6 01       	movw	r24, r12
    87b8:	b5 01       	movw	r22, r10
    87ba:	20 e0       	ldi	r18, 0x00	; 0
    87bc:	30 e0       	ldi	r19, 0x00	; 0
    87be:	40 e7       	ldi	r20, 0x70	; 112
    87c0:	51 e4       	ldi	r21, 0x41	; 65
    87c2:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    87c6:	25 e3       	ldi	r18, 0x35	; 53
    87c8:	3a ef       	ldi	r19, 0xFA	; 250
    87ca:	4e e8       	ldi	r20, 0x8E	; 142
    87cc:	5c e3       	ldi	r21, 0x3C	; 60
    87ce:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    87d2:	7b 01       	movw	r14, r22
    87d4:	8c 01       	movw	r16, r24
    87d6:	c8 01       	movw	r24, r16
    87d8:	0e 94 b2 61 	call	0xc364	; 0xc364 <cos>
    87dc:	1b 01       	movw	r2, r22
    87de:	2c 01       	movw	r4, r24

    //altitude = sin-1(sin theta * sin phi + cos theta * cos phi * cos tau)

    opt_angle = sth * sph + cth * cph * cti;
    opt_angle = asin(opt_angle) / pi180;
    87e0:	6d a9       	ldd	r22, Y+53	; 0x35
    87e2:	7e a9       	ldd	r23, Y+54	; 0x36
    87e4:	8f a9       	ldd	r24, Y+55	; 0x37
    87e6:	98 ad       	ldd	r25, Y+56	; 0x38
    87e8:	29 a9       	ldd	r18, Y+49	; 0x31
    87ea:	3a a9       	ldd	r19, Y+50	; 0x32
    87ec:	4b a9       	ldd	r20, Y+51	; 0x33
    87ee:	5c a9       	ldd	r21, Y+52	; 0x34
    87f0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    87f4:	5b 01       	movw	r10, r22
    87f6:	6c 01       	movw	r12, r24
    87f8:	69 ad       	ldd	r22, Y+57	; 0x39
    87fa:	7a ad       	ldd	r23, Y+58	; 0x3a
    87fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    87fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    8800:	a4 01       	movw	r20, r8
    8802:	93 01       	movw	r18, r6
    8804:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8808:	a2 01       	movw	r20, r4
    880a:	91 01       	movw	r18, r2
    880c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8810:	9b 01       	movw	r18, r22
    8812:	ac 01       	movw	r20, r24
    8814:	c6 01       	movw	r24, r12
    8816:	b5 01       	movw	r22, r10
    8818:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    881c:	0e 94 35 61 	call	0xc26a	; 0xc26a <asin>
    opt_angle = round(1000 * opt_angle) / 1000;
    8820:	25 e3       	ldi	r18, 0x35	; 53
    8822:	3a ef       	ldi	r19, 0xFA	; 250
    8824:	4e e8       	ldi	r20, 0x8E	; 142
    8826:	5c e3       	ldi	r21, 0x3C	; 60
    8828:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    882c:	20 e0       	ldi	r18, 0x00	; 0
    882e:	30 e0       	ldi	r19, 0x00	; 0
    8830:	4a e7       	ldi	r20, 0x7A	; 122
    8832:	54 e4       	ldi	r21, 0x44	; 68
    8834:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8838:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
	opt_angle = 90-opt_angle;
    883c:	20 e0       	ldi	r18, 0x00	; 0
    883e:	30 e0       	ldi	r19, 0x00	; 0
    8840:	4a e7       	ldi	r20, 0x7A	; 122
    8842:	54 e4       	ldi	r21, 0x44	; 68
    8844:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8848:	9b 01       	movw	r18, r22
    884a:	ac 01       	movw	r20, r24
    884c:	60 e0       	ldi	r22, 0x00	; 0
    884e:	70 e0       	ldi	r23, 0x00	; 0
    8850:	84 eb       	ldi	r24, 0xB4	; 180
    8852:	92 e4       	ldi	r25, 0x42	; 66
    8854:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8858:	60 93 39 11 	sts	0x1139, r22
    885c:	70 93 3a 11 	sts	0x113A, r23
    8860:	80 93 3b 11 	sts	0x113B, r24
    8864:	90 93 3c 11 	sts	0x113C, r25

    //azimuth = tan-1(-x'/y')=tan-1(cos phi sin tau/(cos theta sin phi - sin theta cos phi cos tau))

    sti = sin(ti * pi180);
    8868:	b7 01       	movw	r22, r14
    886a:	c8 01       	movw	r24, r16
    886c:	0e 94 b7 64 	call	0xc96e	; 0xc96e <sin>
    8870:	5b 01       	movw	r10, r22
    8872:	6c 01       	movw	r12, r24
    x = -cph * sti;
    y = cth * sph - sth * cph * cti;
    opt_rot = 90 - atan2(y, x) / pi180;
    8874:	69 ad       	ldd	r22, Y+57	; 0x39
    8876:	7a ad       	ldd	r23, Y+58	; 0x3a
    8878:	8b ad       	ldd	r24, Y+59	; 0x3b
    887a:	9c ad       	ldd	r25, Y+60	; 0x3c
    887c:	29 a9       	ldd	r18, Y+49	; 0x31
    887e:	3a a9       	ldd	r19, Y+50	; 0x32
    8880:	4b a9       	ldd	r20, Y+51	; 0x33
    8882:	5c a9       	ldd	r21, Y+52	; 0x34
    8884:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8888:	7b 01       	movw	r14, r22
    888a:	8c 01       	movw	r16, r24
    888c:	6d a9       	ldd	r22, Y+53	; 0x35
    888e:	7e a9       	ldd	r23, Y+54	; 0x36
    8890:	8f a9       	ldd	r24, Y+55	; 0x37
    8892:	98 ad       	ldd	r25, Y+56	; 0x38
    8894:	a4 01       	movw	r20, r8
    8896:	93 01       	movw	r18, r6
    8898:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    889c:	a2 01       	movw	r20, r4
    889e:	91 01       	movw	r18, r2
    88a0:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    88a4:	9b 01       	movw	r18, r22
    88a6:	ac 01       	movw	r20, r24
    88a8:	c8 01       	movw	r24, r16
    88aa:	b7 01       	movw	r22, r14
    88ac:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    88b0:	7b 01       	movw	r14, r22
    88b2:	8c 01       	movw	r16, r24
    88b4:	97 fa       	bst	r9, 7
    88b6:	90 94       	com	r9
    88b8:	97 f8       	bld	r9, 7
    88ba:	90 94       	com	r9
    88bc:	c4 01       	movw	r24, r8
    88be:	b3 01       	movw	r22, r6
    88c0:	a6 01       	movw	r20, r12
    88c2:	95 01       	movw	r18, r10
    88c4:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    88c8:	9b 01       	movw	r18, r22
    88ca:	ac 01       	movw	r20, r24
    88cc:	c8 01       	movw	r24, r16
    88ce:	b7 01       	movw	r22, r14
    88d0:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    88d4:	25 e3       	ldi	r18, 0x35	; 53
    88d6:	3a ef       	ldi	r19, 0xFA	; 250
    88d8:	4e e8       	ldi	r20, 0x8E	; 142
    88da:	5c e3       	ldi	r21, 0x3C	; 60
    88dc:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    88e0:	9b 01       	movw	r18, r22
    88e2:	ac 01       	movw	r20, r24
    88e4:	60 e0       	ldi	r22, 0x00	; 0
    88e6:	70 e0       	ldi	r23, 0x00	; 0
    88e8:	84 eb       	ldi	r24, 0xB4	; 180
    88ea:	92 e4       	ldi	r25, 0x42	; 66
    88ec:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    88f0:	7b 01       	movw	r14, r22
    88f2:	8c 01       	movw	r16, r24
    88f4:	60 93 4e 13 	sts	0x134E, r22
    88f8:	70 93 4f 13 	sts	0x134F, r23
    88fc:	80 93 50 13 	sts	0x1350, r24
    8900:	90 93 51 13 	sts	0x1351, r25
    if(opt_rot < 0) opt_rot = opt_rot + 360;
    8904:	20 e0       	ldi	r18, 0x00	; 0
    8906:	30 e0       	ldi	r19, 0x00	; 0
    8908:	40 e0       	ldi	r20, 0x00	; 0
    890a:	50 e0       	ldi	r21, 0x00	; 0
    890c:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    8910:	88 23       	and	r24, r24
    8912:	84 f4       	brge	.+32     	; 0x8934 <optimize2+0x484>
    8914:	c8 01       	movw	r24, r16
    8916:	b7 01       	movw	r22, r14
    8918:	20 e0       	ldi	r18, 0x00	; 0
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	44 eb       	ldi	r20, 0xB4	; 180
    891e:	53 e4       	ldi	r21, 0x43	; 67
    8920:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    8924:	60 93 4e 13 	sts	0x134E, r22
    8928:	70 93 4f 13 	sts	0x134F, r23
    892c:	80 93 50 13 	sts	0x1350, r24
    8930:	90 93 51 13 	sts	0x1351, r25
    opt_rot = round(1000 * opt_rot) / 1000;
    8934:	60 91 4e 13 	lds	r22, 0x134E
    8938:	70 91 4f 13 	lds	r23, 0x134F
    893c:	80 91 50 13 	lds	r24, 0x1350
    8940:	90 91 51 13 	lds	r25, 0x1351
    8944:	20 e0       	ldi	r18, 0x00	; 0
    8946:	30 e0       	ldi	r19, 0x00	; 0
    8948:	4a e7       	ldi	r20, 0x7A	; 122
    894a:	54 e4       	ldi	r21, 0x44	; 68
    894c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8950:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
	opt_rot = opt_rot-180;
    8954:	20 e0       	ldi	r18, 0x00	; 0
    8956:	30 e0       	ldi	r19, 0x00	; 0
    8958:	4a e7       	ldi	r20, 0x7A	; 122
    895a:	54 e4       	ldi	r21, 0x44	; 68
    895c:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8960:	20 e0       	ldi	r18, 0x00	; 0
    8962:	30 e0       	ldi	r19, 0x00	; 0
    8964:	44 e3       	ldi	r20, 0x34	; 52
    8966:	53 e4       	ldi	r21, 0x43	; 67
    8968:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    896c:	9b 01       	movw	r18, r22
    896e:	ac 01       	movw	r20, r24
    8970:	20 93 4e 13 	sts	0x134E, r18
    8974:	30 93 4f 13 	sts	0x134F, r19
    8978:	40 93 50 13 	sts	0x1350, r20
    897c:	50 93 51 13 	sts	0x1351, r21

	opt_screw = rotToNearestScrew(opt_rot);
    8980:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
    8984:	90 93 53 13 	sts	0x1353, r25
    8988:	80 93 52 13 	sts	0x1352, r24
	
	if(dataLog==0)
    898c:	80 91 4c 13 	lds	r24, 0x134C
    8990:	90 91 4d 13 	lds	r25, 0x134D
    8994:	89 2b       	or	r24, r25
    8996:	c9 f5       	brne	.+114    	; 0x8a0a <optimize2+0x55a>
		fprintf(stdout, "results: opt_rot %f, opt_angle %f\r\n", opt_rot, opt_angle);
    8998:	ed b7       	in	r30, 0x3d	; 61
    899a:	fe b7       	in	r31, 0x3e	; 62
    899c:	3c 97       	sbiw	r30, 0x0c	; 12
    899e:	0f b6       	in	r0, 0x3f	; 63
    89a0:	f8 94       	cli
    89a2:	fe bf       	out	0x3e, r31	; 62
    89a4:	0f be       	out	0x3f, r0	; 63
    89a6:	ed bf       	out	0x3d, r30	; 61
    89a8:	31 96       	adiw	r30, 0x01	; 1
    89aa:	80 91 2f 17 	lds	r24, 0x172F
    89ae:	90 91 30 17 	lds	r25, 0x1730
    89b2:	ad b7       	in	r26, 0x3d	; 61
    89b4:	be b7       	in	r27, 0x3e	; 62
    89b6:	12 96       	adiw	r26, 0x02	; 2
    89b8:	9c 93       	st	X, r25
    89ba:	8e 93       	st	-X, r24
    89bc:	11 97       	sbiw	r26, 0x01	; 1
    89be:	80 e8       	ldi	r24, 0x80	; 128
    89c0:	92 e0       	ldi	r25, 0x02	; 2
    89c2:	93 83       	std	Z+3, r25	; 0x03
    89c4:	82 83       	std	Z+2, r24	; 0x02
    89c6:	80 91 4e 13 	lds	r24, 0x134E
    89ca:	90 91 4f 13 	lds	r25, 0x134F
    89ce:	a0 91 50 13 	lds	r26, 0x1350
    89d2:	b0 91 51 13 	lds	r27, 0x1351
    89d6:	84 83       	std	Z+4, r24	; 0x04
    89d8:	95 83       	std	Z+5, r25	; 0x05
    89da:	a6 83       	std	Z+6, r26	; 0x06
    89dc:	b7 83       	std	Z+7, r27	; 0x07
    89de:	80 91 39 11 	lds	r24, 0x1139
    89e2:	90 91 3a 11 	lds	r25, 0x113A
    89e6:	a0 91 3b 11 	lds	r26, 0x113B
    89ea:	b0 91 3c 11 	lds	r27, 0x113C
    89ee:	80 87       	std	Z+8, r24	; 0x08
    89f0:	91 87       	std	Z+9, r25	; 0x09
    89f2:	a2 87       	std	Z+10, r26	; 0x0a
    89f4:	b3 87       	std	Z+11, r27	; 0x0b
    89f6:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    89fa:	ed b7       	in	r30, 0x3d	; 61
    89fc:	fe b7       	in	r31, 0x3e	; 62
    89fe:	3c 96       	adiw	r30, 0x0c	; 12
    8a00:	0f b6       	in	r0, 0x3f	; 63
    8a02:	f8 94       	cli
    8a04:	fe bf       	out	0x3e, r31	; 62
    8a06:	0f be       	out	0x3f, r0	; 63
    8a08:	ed bf       	out	0x3d, r30	; 61

}
    8a0a:	ec 96       	adiw	r28, 0x3c	; 60
    8a0c:	0f b6       	in	r0, 0x3f	; 63
    8a0e:	f8 94       	cli
    8a10:	de bf       	out	0x3e, r29	; 62
    8a12:	0f be       	out	0x3f, r0	; 63
    8a14:	cd bf       	out	0x3d, r28	; 61
    8a16:	cf 91       	pop	r28
    8a18:	df 91       	pop	r29
    8a1a:	1f 91       	pop	r17
    8a1c:	0f 91       	pop	r16
    8a1e:	ff 90       	pop	r15
    8a20:	ef 90       	pop	r14
    8a22:	df 90       	pop	r13
    8a24:	cf 90       	pop	r12
    8a26:	bf 90       	pop	r11
    8a28:	af 90       	pop	r10
    8a2a:	9f 90       	pop	r9
    8a2c:	8f 90       	pop	r8
    8a2e:	7f 90       	pop	r7
    8a30:	6f 90       	pop	r6
    8a32:	5f 90       	pop	r5
    8a34:	4f 90       	pop	r4
    8a36:	3f 90       	pop	r3
    8a38:	2f 90       	pop	r2
    8a3a:	08 95       	ret

00008a3c <optimize>:
// We had trouble getting this to work on AVR, so it is not in use.
 
//Determines the optimal angle and rotation for the solar panel, given GPS information!
//Outputs are saved into global variables, for ease of use.
void optimize(void)
{
    8a3c:	2f 92       	push	r2
    8a3e:	3f 92       	push	r3
    8a40:	4f 92       	push	r4
    8a42:	5f 92       	push	r5
    8a44:	6f 92       	push	r6
    8a46:	7f 92       	push	r7
    8a48:	8f 92       	push	r8
    8a4a:	9f 92       	push	r9
    8a4c:	af 92       	push	r10
    8a4e:	bf 92       	push	r11
    8a50:	cf 92       	push	r12
    8a52:	df 92       	push	r13
    8a54:	ef 92       	push	r14
    8a56:	ff 92       	push	r15
    8a58:	0f 93       	push	r16
    8a5a:	1f 93       	push	r17
    8a5c:	df 93       	push	r29
    8a5e:	cf 93       	push	r28
    8a60:	cd b7       	in	r28, 0x3d	; 61
    8a62:	de b7       	in	r29, 0x3e	; 62
    8a64:	c6 5f       	subi	r28, 0xF6	; 246
    8a66:	d0 40       	sbci	r29, 0x00	; 0
    8a68:	0f b6       	in	r0, 0x3f	; 63
    8a6a:	f8 94       	cli
    8a6c:	de bf       	out	0x3e, r29	; 62
    8a6e:	0f be       	out	0x3f, r0	; 63
    8a70:	cd bf       	out	0x3d, r28	; 61
	//DST Starts in March.  DST Ends in November. (US/Canada)
	//DST Starts in April.  DST Ends in November. (EU)
	int DST = 0;
	
	//US/Canada Rectangle (-20 to -180 Longitude, 20 to 100 Latitude)
	if (-180 < longi && longi < -20 && 20 < lati && lati < 100 && 03 < UTC_month && UTC_month < 11)
    8a72:	a0 90 6d 11 	lds	r10, 0x116D
    8a76:	b0 90 6e 11 	lds	r11, 0x116E
    8a7a:	c0 90 6f 11 	lds	r12, 0x116F
    8a7e:	d0 90 70 11 	lds	r13, 0x1170
    8a82:	c6 01       	movw	r24, r12
    8a84:	b5 01       	movw	r22, r10
    8a86:	20 e0       	ldi	r18, 0x00	; 0
    8a88:	30 e0       	ldi	r19, 0x00	; 0
    8a8a:	44 e3       	ldi	r20, 0x34	; 52
    8a8c:	53 ec       	ldi	r21, 0xC3	; 195
    8a8e:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    8a92:	18 16       	cp	r1, r24
    8a94:	ac f5       	brge	.+106    	; 0x8b00 <optimize+0xc4>
    8a96:	c6 01       	movw	r24, r12
    8a98:	b5 01       	movw	r22, r10
    8a9a:	20 e0       	ldi	r18, 0x00	; 0
    8a9c:	30 e0       	ldi	r19, 0x00	; 0
    8a9e:	40 ea       	ldi	r20, 0xA0	; 160
    8aa0:	51 ec       	ldi	r21, 0xC1	; 193
    8aa2:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    8aa6:	88 23       	and	r24, r24
    8aa8:	5c f5       	brge	.+86     	; 0x8b00 <optimize+0xc4>
    8aaa:	e0 90 69 11 	lds	r14, 0x1169
    8aae:	f0 90 6a 11 	lds	r15, 0x116A
    8ab2:	00 91 6b 11 	lds	r16, 0x116B
    8ab6:	10 91 6c 11 	lds	r17, 0x116C
    8aba:	c8 01       	movw	r24, r16
    8abc:	b7 01       	movw	r22, r14
    8abe:	20 e0       	ldi	r18, 0x00	; 0
    8ac0:	30 e0       	ldi	r19, 0x00	; 0
    8ac2:	40 ea       	ldi	r20, 0xA0	; 160
    8ac4:	51 e4       	ldi	r21, 0x41	; 65
    8ac6:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    8aca:	18 16       	cp	r1, r24
    8acc:	cc f4       	brge	.+50     	; 0x8b00 <optimize+0xc4>
    8ace:	c8 01       	movw	r24, r16
    8ad0:	b7 01       	movw	r22, r14
    8ad2:	20 e0       	ldi	r18, 0x00	; 0
    8ad4:	30 e0       	ldi	r19, 0x00	; 0
    8ad6:	48 ec       	ldi	r20, 0xC8	; 200
    8ad8:	52 e4       	ldi	r21, 0x42	; 66
    8ada:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    8ade:	88 23       	and	r24, r24
    8ae0:	7c f4       	brge	.+30     	; 0x8b00 <optimize+0xc4>
    8ae2:	80 91 5b 11 	lds	r24, 0x115B
    8ae6:	90 91 5c 11 	lds	r25, 0x115C
    8aea:	84 30       	cpi	r24, 0x04	; 4
    8aec:	91 05       	cpc	r25, r1
    8aee:	44 f0       	brlt	.+16     	; 0x8b00 <optimize+0xc4>
    8af0:	22 24       	eor	r2, r2
    8af2:	33 24       	eor	r3, r3
    8af4:	0b 97       	sbiw	r24, 0x0b	; 11
    8af6:	34 f4       	brge	.+12     	; 0x8b04 <optimize+0xc8>
    8af8:	11 e0       	ldi	r17, 0x01	; 1
    8afa:	21 2e       	mov	r2, r17
    8afc:	31 2c       	mov	r3, r1
    8afe:	02 c0       	rjmp	.+4      	; 0x8b04 <optimize+0xc8>
    8b00:	22 24       	eor	r2, r2
    8b02:	33 24       	eor	r3, r3
		DST = 1;
	
	//Europe Rectangle (20 to 40 Longitude, 35 to 80 Latitude)
	if (20 < longi && longi < 40 && 35 < lati && lati < 80 && 04 < UTC_month && UTC_month < 11 )
    8b04:	c6 01       	movw	r24, r12
    8b06:	b5 01       	movw	r22, r10
    8b08:	20 e0       	ldi	r18, 0x00	; 0
    8b0a:	30 e0       	ldi	r19, 0x00	; 0
    8b0c:	40 ea       	ldi	r20, 0xA0	; 160
    8b0e:	51 e4       	ldi	r21, 0x41	; 65
    8b10:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    8b14:	18 16       	cp	r1, r24
    8b16:	94 f5       	brge	.+100    	; 0x8b7c <optimize+0x140>
    8b18:	c6 01       	movw	r24, r12
    8b1a:	b5 01       	movw	r22, r10
    8b1c:	20 e0       	ldi	r18, 0x00	; 0
    8b1e:	30 e0       	ldi	r19, 0x00	; 0
    8b20:	40 e2       	ldi	r20, 0x20	; 32
    8b22:	52 e4       	ldi	r21, 0x42	; 66
    8b24:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    8b28:	88 23       	and	r24, r24
    8b2a:	44 f5       	brge	.+80     	; 0x8b7c <optimize+0x140>
    8b2c:	e0 90 69 11 	lds	r14, 0x1169
    8b30:	f0 90 6a 11 	lds	r15, 0x116A
    8b34:	00 91 6b 11 	lds	r16, 0x116B
    8b38:	10 91 6c 11 	lds	r17, 0x116C
    8b3c:	c8 01       	movw	r24, r16
    8b3e:	b7 01       	movw	r22, r14
    8b40:	20 e0       	ldi	r18, 0x00	; 0
    8b42:	30 e0       	ldi	r19, 0x00	; 0
    8b44:	4c e0       	ldi	r20, 0x0C	; 12
    8b46:	52 e4       	ldi	r21, 0x42	; 66
    8b48:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    8b4c:	18 16       	cp	r1, r24
    8b4e:	b4 f4       	brge	.+44     	; 0x8b7c <optimize+0x140>
    8b50:	c8 01       	movw	r24, r16
    8b52:	b7 01       	movw	r22, r14
    8b54:	20 e0       	ldi	r18, 0x00	; 0
    8b56:	30 e0       	ldi	r19, 0x00	; 0
    8b58:	40 ea       	ldi	r20, 0xA0	; 160
    8b5a:	52 e4       	ldi	r21, 0x42	; 66
    8b5c:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    8b60:	88 23       	and	r24, r24
    8b62:	64 f4       	brge	.+24     	; 0x8b7c <optimize+0x140>
    8b64:	80 91 5b 11 	lds	r24, 0x115B
    8b68:	90 91 5c 11 	lds	r25, 0x115C
    8b6c:	85 30       	cpi	r24, 0x05	; 5
    8b6e:	91 05       	cpc	r25, r1
    8b70:	2c f0       	brlt	.+10     	; 0x8b7c <optimize+0x140>
    8b72:	0b 97       	sbiw	r24, 0x0b	; 11
    8b74:	1c f4       	brge	.+6      	; 0x8b7c <optimize+0x140>
    8b76:	b1 e0       	ldi	r27, 0x01	; 1
    8b78:	2b 2e       	mov	r2, r27
    8b7a:	31 2c       	mov	r3, r1
		DST = 1;
	
	
    //Now, we approximate the timezone
    int time_offset = ((int) round(longi/15.0)) + DST;
    8b7c:	c6 01       	movw	r24, r12
    8b7e:	b5 01       	movw	r22, r10
    8b80:	20 e0       	ldi	r18, 0x00	; 0
    8b82:	30 e0       	ldi	r19, 0x00	; 0
    8b84:	40 e7       	ldi	r20, 0x70	; 112
    8b86:	51 e4       	ldi	r21, 0x41	; 65
    8b88:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    8b8c:	0e 94 97 64 	call	0xc92e	; 0xc92e <round>
    8b90:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8b94:	62 0d       	add	r22, r2
    8b96:	73 1d       	adc	r23, r3

    spa.year          = UTC_year;
    8b98:	20 91 5f 11 	lds	r18, 0x115F
    8b9c:	30 91 60 11 	lds	r19, 0x1160
    8ba0:	3a 83       	std	Y+2, r19	; 0x02
    8ba2:	29 83       	std	Y+1, r18	; 0x01
    spa.month         = UTC_month;
    8ba4:	20 91 5b 11 	lds	r18, 0x115B
    8ba8:	30 91 5c 11 	lds	r19, 0x115C
    8bac:	3c 83       	std	Y+4, r19	; 0x04
    8bae:	2b 83       	std	Y+3, r18	; 0x03
    spa.day           = UTC_day;
    8bb0:	20 91 5d 11 	lds	r18, 0x115D
    8bb4:	30 91 5e 11 	lds	r19, 0x115E
    8bb8:	3e 83       	std	Y+6, r19	; 0x06
    8bba:	2d 83       	std	Y+5, r18	; 0x05
    spa.hour          = UTC_hour + time_offset;
    8bbc:	20 91 55 11 	lds	r18, 0x1155
    8bc0:	30 91 56 11 	lds	r19, 0x1156
    8bc4:	26 0f       	add	r18, r22
    8bc6:	37 1f       	adc	r19, r23
    8bc8:	38 87       	std	Y+8, r19	; 0x08
    8bca:	2f 83       	std	Y+7, r18	; 0x07
    spa.minute        = UTC_min;
    8bcc:	20 91 5c 13 	lds	r18, 0x135C
    8bd0:	30 91 5d 13 	lds	r19, 0x135D
    8bd4:	3a 87       	std	Y+10, r19	; 0x0a
    8bd6:	29 87       	std	Y+9, r18	; 0x09
    spa.second        = UTC_sec;
    8bd8:	20 91 57 11 	lds	r18, 0x1157
    8bdc:	30 91 58 11 	lds	r19, 0x1158
    8be0:	3c 87       	std	Y+12, r19	; 0x0c
    8be2:	2b 87       	std	Y+11, r18	; 0x0b
    spa.timezone      = time_offset;
    8be4:	88 27       	eor	r24, r24
    8be6:	77 fd       	sbrc	r23, 7
    8be8:	80 95       	com	r24
    8bea:	98 2f       	mov	r25, r24
    8bec:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8bf0:	69 8b       	std	Y+17, r22	; 0x11
    8bf2:	7a 8b       	std	Y+18, r23	; 0x12
    8bf4:	8b 8b       	std	Y+19, r24	; 0x13
    8bf6:	9c 8b       	std	Y+20, r25	; 0x14
    spa.delta_t       = 67;		//Default
    8bf8:	80 e0       	ldi	r24, 0x00	; 0
    8bfa:	90 e0       	ldi	r25, 0x00	; 0
    8bfc:	a6 e8       	ldi	r26, 0x86	; 134
    8bfe:	b2 e4       	ldi	r27, 0x42	; 66
    8c00:	8d 87       	std	Y+13, r24	; 0x0d
    8c02:	9e 87       	std	Y+14, r25	; 0x0e
    8c04:	af 87       	std	Y+15, r26	; 0x0f
    8c06:	b8 8b       	std	Y+16, r27	; 0x10
    spa.longitude     = longi;
    8c08:	ad 8a       	std	Y+21, r10	; 0x15
    8c0a:	be 8a       	std	Y+22, r11	; 0x16
    8c0c:	cf 8a       	std	Y+23, r12	; 0x17
    8c0e:	d8 8e       	std	Y+24, r13	; 0x18
    spa.latitude      = lati;
    8c10:	80 91 69 11 	lds	r24, 0x1169
    8c14:	90 91 6a 11 	lds	r25, 0x116A
    8c18:	a0 91 6b 11 	lds	r26, 0x116B
    8c1c:	b0 91 6c 11 	lds	r27, 0x116C
    8c20:	89 8f       	std	Y+25, r24	; 0x19
    8c22:	9a 8f       	std	Y+26, r25	; 0x1a
    8c24:	ab 8f       	std	Y+27, r26	; 0x1b
    8c26:	bc 8f       	std	Y+28, r27	; 0x1c
    spa.elevation     = alti;
    8c28:	80 91 71 11 	lds	r24, 0x1171
    8c2c:	90 91 72 11 	lds	r25, 0x1172
    8c30:	a0 91 73 11 	lds	r26, 0x1173
    8c34:	b0 91 74 11 	lds	r27, 0x1174
    8c38:	8d 8f       	std	Y+29, r24	; 0x1d
    8c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    8c3c:	af 8f       	std	Y+31, r26	; 0x1f
    8c3e:	b8 a3       	std	Y+32, r27	; 0x20
    spa.pressure      = 820; 	//Default
    8c40:	80 e0       	ldi	r24, 0x00	; 0
    8c42:	90 e0       	ldi	r25, 0x00	; 0
    8c44:	ad e4       	ldi	r26, 0x4D	; 77
    8c46:	b4 e4       	ldi	r27, 0x44	; 68
    8c48:	89 a3       	std	Y+33, r24	; 0x21
    8c4a:	9a a3       	std	Y+34, r25	; 0x22
    8c4c:	ab a3       	std	Y+35, r26	; 0x23
    8c4e:	bc a3       	std	Y+36, r27	; 0x24
    spa.temperature   = 30; 	//Default (for now)
    8c50:	80 e0       	ldi	r24, 0x00	; 0
    8c52:	90 e0       	ldi	r25, 0x00	; 0
    8c54:	a0 ef       	ldi	r26, 0xF0	; 240
    8c56:	b1 e4       	ldi	r27, 0x41	; 65
    8c58:	8d a3       	std	Y+37, r24	; 0x25
    8c5a:	9e a3       	std	Y+38, r25	; 0x26
    8c5c:	af a3       	std	Y+39, r26	; 0x27
    8c5e:	b8 a7       	std	Y+40, r27	; 0x28
    spa.slope         = 0; 		//default
    8c60:	80 e0       	ldi	r24, 0x00	; 0
    8c62:	90 e0       	ldi	r25, 0x00	; 0
    8c64:	a0 e0       	ldi	r26, 0x00	; 0
    8c66:	b0 e0       	ldi	r27, 0x00	; 0
    8c68:	89 a7       	std	Y+41, r24	; 0x29
    8c6a:	9a a7       	std	Y+42, r25	; 0x2a
    8c6c:	ab a7       	std	Y+43, r26	; 0x2b
    8c6e:	bc a7       	std	Y+44, r27	; 0x2c
    spa.azm_rotation  = 0; 		//facing south
    8c70:	8d a7       	std	Y+45, r24	; 0x2d
    8c72:	9e a7       	std	Y+46, r25	; 0x2e
    8c74:	af a7       	std	Y+47, r26	; 0x2f
    8c76:	b8 ab       	std	Y+48, r27	; 0x30
    spa.atmos_refract = 0.5667; //default
    8c78:	80 e4       	ldi	r24, 0x40	; 64
    8c7a:	93 e1       	ldi	r25, 0x13	; 19
    8c7c:	a1 e1       	ldi	r26, 0x11	; 17
    8c7e:	bf e3       	ldi	r27, 0x3F	; 63
    8c80:	89 ab       	std	Y+49, r24	; 0x31
    8c82:	9a ab       	std	Y+50, r25	; 0x32
    8c84:	ab ab       	std	Y+51, r26	; 0x33
    8c86:	bc ab       	std	Y+52, r27	; 0x34
    spa.function      = SPA_ALL;
    8c88:	83 e0       	ldi	r24, 0x03	; 3
    8c8a:	90 e0       	ldi	r25, 0x00	; 0
    8c8c:	9e ab       	std	Y+54, r25	; 0x36
    8c8e:	8d ab       	std	Y+53, r24	; 0x35
    

    //call the SPA calculate function and pass the SPA structure

    result = spa_calculate(&spa);
    8c90:	ce 01       	movw	r24, r28
    8c92:	01 96       	adiw	r24, 0x01	; 1
    8c94:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <spa_calculate>
    8c98:	9c 01       	movw	r18, r24

    if (result == 0)  //check for SPA errors
    8c9a:	00 97       	sbiw	r24, 0x00	; 0
    8c9c:	09 f0       	breq	.+2      	; 0x8ca0 <optimize+0x264>
    8c9e:	8c c3       	rjmp	.+1816   	; 0x93b8 <optimize+0x97c>
    {

		//Save key info into optimal global variables.
		opt_rot = spa.azimuth-180; 		//rotation from due south in degrees
    8ca0:	fe 01       	movw	r30, r28
    8ca2:	e9 52       	subi	r30, 0x29	; 41
    8ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    8ca6:	60 81       	ld	r22, Z
    8ca8:	71 81       	ldd	r23, Z+1	; 0x01
    8caa:	82 81       	ldd	r24, Z+2	; 0x02
    8cac:	93 81       	ldd	r25, Z+3	; 0x03
    8cae:	20 e0       	ldi	r18, 0x00	; 0
    8cb0:	30 e0       	ldi	r19, 0x00	; 0
    8cb2:	44 e3       	ldi	r20, 0x34	; 52
    8cb4:	53 e4       	ldi	r21, 0x43	; 67
    8cb6:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8cba:	9b 01       	movw	r18, r22
    8cbc:	ac 01       	movw	r20, r24
    8cbe:	20 93 4e 13 	sts	0x134E, r18
    8cc2:	30 93 4f 13 	sts	0x134F, r19
    8cc6:	40 93 50 13 	sts	0x1350, r20
    8cca:	50 93 51 13 	sts	0x1351, r21
		opt_screw = rotToNearestScrew(opt_rot);
    8cce:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
    8cd2:	90 93 53 13 	sts	0x1353, r25
    8cd6:	80 93 52 13 	sts	0x1352, r24
		opt_angle = 90 - (90 - spa.zenith); 	//angle from flat in degrees
    8cda:	60 e0       	ldi	r22, 0x00	; 0
    8cdc:	70 e0       	ldi	r23, 0x00	; 0
    8cde:	84 eb       	ldi	r24, 0xB4	; 180
    8ce0:	92 e4       	ldi	r25, 0x42	; 66
    8ce2:	fe 01       	movw	r30, r28
    8ce4:	e1 53       	subi	r30, 0x31	; 49
    8ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    8ce8:	20 81       	ld	r18, Z
    8cea:	31 81       	ldd	r19, Z+1	; 0x01
    8cec:	42 81       	ldd	r20, Z+2	; 0x02
    8cee:	53 81       	ldd	r21, Z+3	; 0x03
    8cf0:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8cf4:	9b 01       	movw	r18, r22
    8cf6:	ac 01       	movw	r20, r24
    8cf8:	60 e0       	ldi	r22, 0x00	; 0
    8cfa:	70 e0       	ldi	r23, 0x00	; 0
    8cfc:	84 eb       	ldi	r24, 0xB4	; 180
    8cfe:	92 e4       	ldi	r25, 0x42	; 66
    8d00:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8d04:	60 93 39 11 	sts	0x1139, r22
    8d08:	70 93 3a 11 	sts	0x113A, r23
    8d0c:	80 93 3b 11 	sts	0x113B, r24
    8d10:	90 93 3c 11 	sts	0x113C, r25

		sr_min = 60.0*(spa.sunrise - (int)(spa.sunrise));
    8d14:	cd 51       	subi	r28, 0x1D	; 29
    8d16:	df 4f       	sbci	r29, 0xFF	; 255
    8d18:	68 80       	ld	r6, Y
    8d1a:	79 80       	ldd	r7, Y+1	; 0x01
    8d1c:	8a 80       	ldd	r8, Y+2	; 0x02
    8d1e:	9b 80       	ldd	r9, Y+3	; 0x03
    8d20:	c3 5e       	subi	r28, 0xE3	; 227
    8d22:	d0 40       	sbci	r29, 0x00	; 0
    8d24:	c4 01       	movw	r24, r8
    8d26:	b3 01       	movw	r22, r6
    8d28:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8d2c:	88 27       	eor	r24, r24
    8d2e:	77 fd       	sbrc	r23, 7
    8d30:	80 95       	com	r24
    8d32:	98 2f       	mov	r25, r24
    8d34:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8d38:	5b 01       	movw	r10, r22
    8d3a:	6c 01       	movw	r12, r24
        sr_sec = 60.0*(sr_min - (int)sr_min);

		ss_min = 60.0*(spa.sunset - (int)(spa.sunset));
    8d3c:	c9 51       	subi	r28, 0x19	; 25
    8d3e:	df 4f       	sbci	r29, 0xFF	; 255
    8d40:	e8 80       	ld	r14, Y
    8d42:	f9 80       	ldd	r15, Y+1	; 0x01
    8d44:	0a 81       	ldd	r16, Y+2	; 0x02
    8d46:	1b 81       	ldd	r17, Y+3	; 0x03
    8d48:	c7 5e       	subi	r28, 0xE7	; 231
    8d4a:	d0 40       	sbci	r29, 0x00	; 0
        ss_sec = 60.0*(ss_min - (int)ss_min);

		
		//Save some more info to global variables (sunrise and set)
		sr_hour = (int)(spa.sunrise);	//Sun Rise Hour
    8d4c:	60 93 61 11 	sts	0x1161, r22
    8d50:	70 93 62 11 	sts	0x1162, r23
    8d54:	80 93 63 11 	sts	0x1163, r24
    8d58:	90 93 64 11 	sts	0x1164, r25
		ss_hour = (int)(spa.sunset);	//Sun Set Hour
    8d5c:	c8 01       	movw	r24, r16
    8d5e:	b7 01       	movw	r22, r14
    8d60:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8d64:	88 27       	eor	r24, r24
    8d66:	77 fd       	sbrc	r23, 7
    8d68:	80 95       	com	r24
    8d6a:	98 2f       	mov	r25, r24
    8d6c:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8d70:	60 93 65 11 	sts	0x1165, r22
    8d74:	70 93 66 11 	sts	0x1166, r23
    8d78:	80 93 67 11 	sts	0x1167, r24
    8d7c:	90 93 68 11 	sts	0x1168, r25

		UTC_offset = (int)spa.timezone;
    8d80:	69 89       	ldd	r22, Y+17	; 0x11
    8d82:	7a 89       	ldd	r23, Y+18	; 0x12
    8d84:	8b 89       	ldd	r24, Y+19	; 0x13
    8d86:	9c 89       	ldd	r25, Y+20	; 0x14
    8d88:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8d8c:	70 93 5a 11 	sts	0x115A, r23
    8d90:	60 93 59 11 	sts	0x1159, r22

		if(dataLog==0)
    8d94:	80 91 4c 13 	lds	r24, 0x134C
    8d98:	90 91 4d 13 	lds	r25, 0x134D
    8d9c:	89 2b       	or	r24, r25
    8d9e:	09 f0       	breq	.+2      	; 0x8da2 <optimize+0x366>
    8da0:	2b c3       	rjmp	.+1622   	; 0x93f8 <optimize+0x9bc>
		//Save key info into optimal global variables.
		opt_rot = spa.azimuth-180; 		//rotation from due south in degrees
		opt_screw = rotToNearestScrew(opt_rot);
		opt_angle = 90 - (90 - spa.zenith); 	//angle from flat in degrees

		sr_min = 60.0*(spa.sunrise - (int)(spa.sunrise));
    8da2:	c4 01       	movw	r24, r8
    8da4:	b3 01       	movw	r22, r6
    8da6:	a6 01       	movw	r20, r12
    8da8:	95 01       	movw	r18, r10
    8daa:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8dae:	20 e0       	ldi	r18, 0x00	; 0
    8db0:	30 e0       	ldi	r19, 0x00	; 0
    8db2:	40 e7       	ldi	r20, 0x70	; 112
    8db4:	52 e4       	ldi	r21, 0x42	; 66
    8db6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8dba:	c5 51       	subi	r28, 0x15	; 21
    8dbc:	df 4f       	sbci	r29, 0xFF	; 255
    8dbe:	68 83       	st	Y, r22
    8dc0:	79 83       	std	Y+1, r23	; 0x01
    8dc2:	8a 83       	std	Y+2, r24	; 0x02
    8dc4:	9b 83       	std	Y+3, r25	; 0x03
    8dc6:	cb 5e       	subi	r28, 0xEB	; 235
    8dc8:	d0 40       	sbci	r29, 0x00	; 0
        sr_sec = 60.0*(sr_min - (int)sr_min);
    8dca:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8dce:	2b 01       	movw	r4, r22
    8dd0:	3c 01       	movw	r6, r24
    8dd2:	6b 01       	movw	r12, r22

		ss_min = 60.0*(spa.sunset - (int)(spa.sunset));
    8dd4:	c8 01       	movw	r24, r16
    8dd6:	b7 01       	movw	r22, r14
    8dd8:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8ddc:	88 27       	eor	r24, r24
    8dde:	77 fd       	sbrc	r23, 7
    8de0:	80 95       	com	r24
    8de2:	98 2f       	mov	r25, r24
    8de4:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8de8:	9b 01       	movw	r18, r22
    8dea:	ac 01       	movw	r20, r24
    8dec:	c8 01       	movw	r24, r16
    8dee:	b7 01       	movw	r22, r14
    8df0:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8df4:	20 e0       	ldi	r18, 0x00	; 0
    8df6:	30 e0       	ldi	r19, 0x00	; 0
    8df8:	40 e7       	ldi	r20, 0x70	; 112
    8dfa:	52 e4       	ldi	r21, 0x42	; 66
    8dfc:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8e00:	c1 51       	subi	r28, 0x11	; 17
    8e02:	df 4f       	sbci	r29, 0xFF	; 255
    8e04:	68 83       	st	Y, r22
    8e06:	79 83       	std	Y+1, r23	; 0x01
    8e08:	8a 83       	std	Y+2, r24	; 0x02
    8e0a:	9b 83       	std	Y+3, r25	; 0x03
    8e0c:	cf 5e       	subi	r28, 0xEF	; 239
    8e0e:	d0 40       	sbci	r29, 0x00	; 0
        ss_sec = 60.0*(ss_min - (int)ss_min);
    8e10:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8e14:	cd 50       	subi	r28, 0x0D	; 13
    8e16:	df 4f       	sbci	r29, 0xFF	; 255
    8e18:	68 83       	st	Y, r22
    8e1a:	79 83       	std	Y+1, r23	; 0x01
    8e1c:	8a 83       	std	Y+2, r24	; 0x02
    8e1e:	9b 83       	std	Y+3, r25	; 0x03
    8e20:	c3 5f       	subi	r28, 0xF3	; 243
    8e22:	d0 40       	sbci	r29, 0x00	; 0
    8e24:	cd 50       	subi	r28, 0x0D	; 13
    8e26:	df 4f       	sbci	r29, 0xFF	; 255
    8e28:	88 80       	ld	r8, Y
    8e2a:	99 80       	ldd	r9, Y+1	; 0x01
    8e2c:	c3 5f       	subi	r28, 0xF3	; 243
    8e2e:	d0 40       	sbci	r29, 0x00	; 0
		UTC_offset = (int)spa.timezone;

		if(dataLog==0)
		{
	        //display the results inside the SPA structure
			fprintf(stdout,"USEFUL INFO\n");
    8e30:	60 91 2f 17 	lds	r22, 0x172F
    8e34:	70 91 30 17 	lds	r23, 0x1730
    8e38:	84 ea       	ldi	r24, 0xA4	; 164
    8e3a:	92 e0       	ldi	r25, 0x02	; 2
    8e3c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
			fprintf(stdout,"Time:                              %02d:%02d:%02d Local Time\n", (int)(spa.hour), (int)(spa.minute), (int)(spa.second));
    8e40:	8d b7       	in	r24, 0x3d	; 61
    8e42:	9e b7       	in	r25, 0x3e	; 62
    8e44:	0a 97       	sbiw	r24, 0x0a	; 10
    8e46:	0f b6       	in	r0, 0x3f	; 63
    8e48:	f8 94       	cli
    8e4a:	9e bf       	out	0x3e, r25	; 62
    8e4c:	0f be       	out	0x3f, r0	; 63
    8e4e:	8d bf       	out	0x3d, r24	; 61
    8e50:	ed b7       	in	r30, 0x3d	; 61
    8e52:	fe b7       	in	r31, 0x3e	; 62
    8e54:	31 96       	adiw	r30, 0x01	; 1
    8e56:	80 91 2f 17 	lds	r24, 0x172F
    8e5a:	90 91 30 17 	lds	r25, 0x1730
    8e5e:	ad b7       	in	r26, 0x3d	; 61
    8e60:	be b7       	in	r27, 0x3e	; 62
    8e62:	12 96       	adiw	r26, 0x02	; 2
    8e64:	9c 93       	st	X, r25
    8e66:	8e 93       	st	-X, r24
    8e68:	11 97       	sbiw	r26, 0x01	; 1
    8e6a:	81 eb       	ldi	r24, 0xB1	; 177
    8e6c:	92 e0       	ldi	r25, 0x02	; 2
    8e6e:	93 83       	std	Z+3, r25	; 0x03
    8e70:	82 83       	std	Z+2, r24	; 0x02
    8e72:	8f 81       	ldd	r24, Y+7	; 0x07
    8e74:	98 85       	ldd	r25, Y+8	; 0x08
    8e76:	95 83       	std	Z+5, r25	; 0x05
    8e78:	84 83       	std	Z+4, r24	; 0x04
    8e7a:	89 85       	ldd	r24, Y+9	; 0x09
    8e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    8e7e:	97 83       	std	Z+7, r25	; 0x07
    8e80:	86 83       	std	Z+6, r24	; 0x06
    8e82:	8b 85       	ldd	r24, Y+11	; 0x0b
    8e84:	9c 85       	ldd	r25, Y+12	; 0x0c
    8e86:	91 87       	std	Z+9, r25	; 0x09
    8e88:	80 87       	std	Z+8, r24	; 0x08
    8e8a:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
			fprintf(stdout,"Rot from S. (Neg = CCW, Pos = CW): %.6f degrees\n",opt_rot);
    8e8e:	0f 90       	pop	r0
    8e90:	0f 90       	pop	r0
    8e92:	ed b7       	in	r30, 0x3d	; 61
    8e94:	fe b7       	in	r31, 0x3e	; 62
    8e96:	31 96       	adiw	r30, 0x01	; 1
    8e98:	80 91 2f 17 	lds	r24, 0x172F
    8e9c:	90 91 30 17 	lds	r25, 0x1730
    8ea0:	ad b7       	in	r26, 0x3d	; 61
    8ea2:	be b7       	in	r27, 0x3e	; 62
    8ea4:	12 96       	adiw	r26, 0x02	; 2
    8ea6:	9c 93       	st	X, r25
    8ea8:	8e 93       	st	-X, r24
    8eaa:	11 97       	sbiw	r26, 0x01	; 1
    8eac:	8f ee       	ldi	r24, 0xEF	; 239
    8eae:	92 e0       	ldi	r25, 0x02	; 2
    8eb0:	93 83       	std	Z+3, r25	; 0x03
    8eb2:	82 83       	std	Z+2, r24	; 0x02
    8eb4:	80 91 4e 13 	lds	r24, 0x134E
    8eb8:	90 91 4f 13 	lds	r25, 0x134F
    8ebc:	a0 91 50 13 	lds	r26, 0x1350
    8ec0:	b0 91 51 13 	lds	r27, 0x1351
    8ec4:	84 83       	std	Z+4, r24	; 0x04
    8ec6:	95 83       	std	Z+5, r25	; 0x05
    8ec8:	a6 83       	std	Z+6, r26	; 0x06
    8eca:	b7 83       	std	Z+7, r27	; 0x07
    8ecc:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
			fprintf(stdout,"Panel Angle from Flat:             %.6f degrees\n",opt_angle);
    8ed0:	ed b7       	in	r30, 0x3d	; 61
    8ed2:	fe b7       	in	r31, 0x3e	; 62
    8ed4:	31 96       	adiw	r30, 0x01	; 1
    8ed6:	80 91 2f 17 	lds	r24, 0x172F
    8eda:	90 91 30 17 	lds	r25, 0x1730
    8ede:	ad b7       	in	r26, 0x3d	; 61
    8ee0:	be b7       	in	r27, 0x3e	; 62
    8ee2:	12 96       	adiw	r26, 0x02	; 2
    8ee4:	9c 93       	st	X, r25
    8ee6:	8e 93       	st	-X, r24
    8ee8:	11 97       	sbiw	r26, 0x01	; 1
    8eea:	80 e2       	ldi	r24, 0x20	; 32
    8eec:	93 e0       	ldi	r25, 0x03	; 3
    8eee:	93 83       	std	Z+3, r25	; 0x03
    8ef0:	82 83       	std	Z+2, r24	; 0x02
    8ef2:	80 91 39 11 	lds	r24, 0x1139
    8ef6:	90 91 3a 11 	lds	r25, 0x113A
    8efa:	a0 91 3b 11 	lds	r26, 0x113B
    8efe:	b0 91 3c 11 	lds	r27, 0x113C
    8f02:	84 83       	std	Z+4, r24	; 0x04
    8f04:	95 83       	std	Z+5, r25	; 0x05
    8f06:	a6 83       	std	Z+6, r26	; 0x06
    8f08:	b7 83       	std	Z+7, r27	; 0x07
    8f0a:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		
	        fprintf(stdout,"Sunrise:                           %02d:%02d:%02d Local Time\n", (int)(spa.sunrise), (int)sr_min, (int)sr_sec);
    8f0e:	00 d0       	rcall	.+0      	; 0x8f10 <optimize+0x4d4>
    8f10:	0d b7       	in	r16, 0x3d	; 61
    8f12:	1e b7       	in	r17, 0x3e	; 62
    8f14:	0f 5f       	subi	r16, 0xFF	; 255
    8f16:	1f 4f       	sbci	r17, 0xFF	; 255
    8f18:	80 91 2f 17 	lds	r24, 0x172F
    8f1c:	90 91 30 17 	lds	r25, 0x1730
    8f20:	ed b7       	in	r30, 0x3d	; 61
    8f22:	fe b7       	in	r31, 0x3e	; 62
    8f24:	92 83       	std	Z+2, r25	; 0x02
    8f26:	81 83       	std	Z+1, r24	; 0x01
    8f28:	81 e5       	ldi	r24, 0x51	; 81
    8f2a:	93 e0       	ldi	r25, 0x03	; 3
    8f2c:	d8 01       	movw	r26, r16
    8f2e:	13 96       	adiw	r26, 0x03	; 3
    8f30:	9c 93       	st	X, r25
    8f32:	8e 93       	st	-X, r24
    8f34:	12 97       	sbiw	r26, 0x02	; 2
    8f36:	cd 51       	subi	r28, 0x1D	; 29
    8f38:	df 4f       	sbci	r29, 0xFF	; 255
    8f3a:	68 81       	ld	r22, Y
    8f3c:	79 81       	ldd	r23, Y+1	; 0x01
    8f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    8f40:	9b 81       	ldd	r25, Y+3	; 0x03
    8f42:	c3 5e       	subi	r28, 0xE3	; 227
    8f44:	d0 40       	sbci	r29, 0x00	; 0
    8f46:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8f4a:	f8 01       	movw	r30, r16
    8f4c:	75 83       	std	Z+5, r23	; 0x05
    8f4e:	64 83       	std	Z+4, r22	; 0x04
    8f50:	57 82       	std	Z+7, r5	; 0x07
    8f52:	46 82       	std	Z+6, r4	; 0x06
    8f54:	ee 24       	eor	r14, r14
    8f56:	d7 fc       	sbrc	r13, 7
    8f58:	e0 94       	com	r14
    8f5a:	fe 2c       	mov	r15, r14
    8f5c:	c7 01       	movw	r24, r14
    8f5e:	b6 01       	movw	r22, r12
    8f60:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8f64:	9b 01       	movw	r18, r22
    8f66:	ac 01       	movw	r20, r24
    8f68:	c5 51       	subi	r28, 0x15	; 21
    8f6a:	df 4f       	sbci	r29, 0xFF	; 255
    8f6c:	68 81       	ld	r22, Y
    8f6e:	79 81       	ldd	r23, Y+1	; 0x01
    8f70:	8a 81       	ldd	r24, Y+2	; 0x02
    8f72:	9b 81       	ldd	r25, Y+3	; 0x03
    8f74:	cb 5e       	subi	r28, 0xEB	; 235
    8f76:	d0 40       	sbci	r29, 0x00	; 0
    8f78:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    8f7c:	20 e0       	ldi	r18, 0x00	; 0
    8f7e:	30 e0       	ldi	r19, 0x00	; 0
    8f80:	40 e7       	ldi	r20, 0x70	; 112
    8f82:	52 e4       	ldi	r21, 0x42	; 66
    8f84:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    8f88:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8f8c:	d8 01       	movw	r26, r16
    8f8e:	19 96       	adiw	r26, 0x09	; 9
    8f90:	7c 93       	st	X, r23
    8f92:	6e 93       	st	-X, r22
    8f94:	18 97       	sbiw	r26, 0x08	; 8
    8f96:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

        
	        fprintf(stdout,"Sunset:                            %02d:%02d:%02d Local Time\n", (int)(spa.sunset), (int)ss_min, (int)ss_sec);
    8f9a:	0d b7       	in	r16, 0x3d	; 61
    8f9c:	1e b7       	in	r17, 0x3e	; 62
    8f9e:	0f 5f       	subi	r16, 0xFF	; 255
    8fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    8fa2:	80 91 2f 17 	lds	r24, 0x172F
    8fa6:	90 91 30 17 	lds	r25, 0x1730
    8faa:	ed b7       	in	r30, 0x3d	; 61
    8fac:	fe b7       	in	r31, 0x3e	; 62
    8fae:	92 83       	std	Z+2, r25	; 0x02
    8fb0:	81 83       	std	Z+1, r24	; 0x01
    8fb2:	8f e8       	ldi	r24, 0x8F	; 143
    8fb4:	93 e0       	ldi	r25, 0x03	; 3
    8fb6:	d8 01       	movw	r26, r16
    8fb8:	13 96       	adiw	r26, 0x03	; 3
    8fba:	9c 93       	st	X, r25
    8fbc:	8e 93       	st	-X, r24
    8fbe:	12 97       	sbiw	r26, 0x02	; 2
    8fc0:	c9 51       	subi	r28, 0x19	; 25
    8fc2:	df 4f       	sbci	r29, 0xFF	; 255
    8fc4:	68 81       	ld	r22, Y
    8fc6:	79 81       	ldd	r23, Y+1	; 0x01
    8fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    8fca:	9b 81       	ldd	r25, Y+3	; 0x03
    8fcc:	c7 5e       	subi	r28, 0xE7	; 231
    8fce:	d0 40       	sbci	r29, 0x00	; 0
    8fd0:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    8fd4:	f8 01       	movw	r30, r16
    8fd6:	75 83       	std	Z+5, r23	; 0x05
    8fd8:	64 83       	std	Z+4, r22	; 0x04
    8fda:	cd 50       	subi	r28, 0x0D	; 13
    8fdc:	df 4f       	sbci	r29, 0xFF	; 255
    8fde:	88 81       	ld	r24, Y
    8fe0:	99 81       	ldd	r25, Y+1	; 0x01
    8fe2:	c3 5f       	subi	r28, 0xF3	; 243
    8fe4:	d0 40       	sbci	r29, 0x00	; 0
    8fe6:	97 83       	std	Z+7, r25	; 0x07
    8fe8:	86 83       	std	Z+6, r24	; 0x06
    8fea:	aa 24       	eor	r10, r10
    8fec:	97 fc       	sbrc	r9, 7
    8fee:	a0 94       	com	r10
    8ff0:	ba 2c       	mov	r11, r10
    8ff2:	c5 01       	movw	r24, r10
    8ff4:	b4 01       	movw	r22, r8
    8ff6:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    8ffa:	9b 01       	movw	r18, r22
    8ffc:	ac 01       	movw	r20, r24
    8ffe:	c1 51       	subi	r28, 0x11	; 17
    9000:	df 4f       	sbci	r29, 0xFF	; 255
    9002:	68 81       	ld	r22, Y
    9004:	79 81       	ldd	r23, Y+1	; 0x01
    9006:	8a 81       	ldd	r24, Y+2	; 0x02
    9008:	9b 81       	ldd	r25, Y+3	; 0x03
    900a:	cf 5e       	subi	r28, 0xEF	; 239
    900c:	d0 40       	sbci	r29, 0x00	; 0
    900e:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    9012:	20 e0       	ldi	r18, 0x00	; 0
    9014:	30 e0       	ldi	r19, 0x00	; 0
    9016:	40 e7       	ldi	r20, 0x70	; 112
    9018:	52 e4       	ldi	r21, 0x42	; 66
    901a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    901e:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9022:	d8 01       	movw	r26, r16
    9024:	19 96       	adiw	r26, 0x09	; 9
    9026:	7c 93       	st	X, r23
    9028:	6e 93       	st	-X, r22
    902a:	18 97       	sbiw	r26, 0x08	; 8
    902c:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

			fprintf(stdout,"\nOTHER RANDOM INFO\n");
    9030:	ed b7       	in	r30, 0x3d	; 61
    9032:	fe b7       	in	r31, 0x3e	; 62
    9034:	3a 96       	adiw	r30, 0x0a	; 10
    9036:	0f b6       	in	r0, 0x3f	; 63
    9038:	f8 94       	cli
    903a:	fe bf       	out	0x3e, r31	; 62
    903c:	0f be       	out	0x3f, r0	; 63
    903e:	ed bf       	out	0x3d, r30	; 61
    9040:	60 91 2f 17 	lds	r22, 0x172F
    9044:	70 91 30 17 	lds	r23, 0x1730
    9048:	8d ec       	ldi	r24, 0xCD	; 205
    904a:	93 e0       	ldi	r25, 0x03	; 3
    904c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
			fprintf(stdout,"Julian Day:                %.6f\n",spa.jd);
    9050:	8d b7       	in	r24, 0x3d	; 61
    9052:	9e b7       	in	r25, 0x3e	; 62
    9054:	08 97       	sbiw	r24, 0x08	; 8
    9056:	0f b6       	in	r0, 0x3f	; 63
    9058:	f8 94       	cli
    905a:	9e bf       	out	0x3e, r25	; 62
    905c:	0f be       	out	0x3f, r0	; 63
    905e:	8d bf       	out	0x3d, r24	; 61
    9060:	ed b7       	in	r30, 0x3d	; 61
    9062:	fe b7       	in	r31, 0x3e	; 62
    9064:	31 96       	adiw	r30, 0x01	; 1
    9066:	80 91 2f 17 	lds	r24, 0x172F
    906a:	90 91 30 17 	lds	r25, 0x1730
    906e:	ad b7       	in	r26, 0x3d	; 61
    9070:	be b7       	in	r27, 0x3e	; 62
    9072:	12 96       	adiw	r26, 0x02	; 2
    9074:	9c 93       	st	X, r25
    9076:	8e 93       	st	-X, r24
    9078:	11 97       	sbiw	r26, 0x01	; 1
    907a:	81 ee       	ldi	r24, 0xE1	; 225
    907c:	93 e0       	ldi	r25, 0x03	; 3
    907e:	93 83       	std	Z+3, r25	; 0x03
    9080:	82 83       	std	Z+2, r24	; 0x02
    9082:	8f a9       	ldd	r24, Y+55	; 0x37
    9084:	98 ad       	ldd	r25, Y+56	; 0x38
    9086:	a9 ad       	ldd	r26, Y+57	; 0x39
    9088:	ba ad       	ldd	r27, Y+58	; 0x3a
    908a:	84 83       	std	Z+4, r24	; 0x04
    908c:	95 83       	std	Z+5, r25	; 0x05
    908e:	a6 83       	std	Z+6, r26	; 0x06
    9090:	b7 83       	std	Z+7, r27	; 0x07
    9092:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
			fprintf(stdout,"Time Offset:               %d\n", (int)spa.timezone);
    9096:	0f 90       	pop	r0
    9098:	0f 90       	pop	r0
    909a:	0d b7       	in	r16, 0x3d	; 61
    909c:	1e b7       	in	r17, 0x3e	; 62
    909e:	0f 5f       	subi	r16, 0xFF	; 255
    90a0:	1f 4f       	sbci	r17, 0xFF	; 255
    90a2:	80 91 2f 17 	lds	r24, 0x172F
    90a6:	90 91 30 17 	lds	r25, 0x1730
    90aa:	ed b7       	in	r30, 0x3d	; 61
    90ac:	fe b7       	in	r31, 0x3e	; 62
    90ae:	92 83       	std	Z+2, r25	; 0x02
    90b0:	81 83       	std	Z+1, r24	; 0x01
    90b2:	82 e0       	ldi	r24, 0x02	; 2
    90b4:	94 e0       	ldi	r25, 0x04	; 4
    90b6:	d8 01       	movw	r26, r16
    90b8:	13 96       	adiw	r26, 0x03	; 3
    90ba:	9c 93       	st	X, r25
    90bc:	8e 93       	st	-X, r24
    90be:	12 97       	sbiw	r26, 0x02	; 2
    90c0:	69 89       	ldd	r22, Y+17	; 0x11
    90c2:	7a 89       	ldd	r23, Y+18	; 0x12
    90c4:	8b 89       	ldd	r24, Y+19	; 0x13
    90c6:	9c 89       	ldd	r25, Y+20	; 0x14
    90c8:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    90cc:	f8 01       	movw	r30, r16
    90ce:	75 83       	std	Z+5, r23	; 0x05
    90d0:	64 83       	std	Z+4, r22	; 0x04
    90d2:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		
			if (DST == 1)
    90d6:	8d b7       	in	r24, 0x3d	; 61
    90d8:	9e b7       	in	r25, 0x3e	; 62
    90da:	06 96       	adiw	r24, 0x06	; 6
    90dc:	0f b6       	in	r0, 0x3f	; 63
    90de:	f8 94       	cli
    90e0:	9e bf       	out	0x3e, r25	; 62
    90e2:	0f be       	out	0x3f, r0	; 63
    90e4:	8d bf       	out	0x3d, r24	; 61
    90e6:	60 91 2f 17 	lds	r22, 0x172F
    90ea:	70 91 30 17 	lds	r23, 0x1730
    90ee:	91 e0       	ldi	r25, 0x01	; 1
    90f0:	29 16       	cp	r2, r25
    90f2:	31 04       	cpc	r3, r1
    90f4:	19 f4       	brne	.+6      	; 0x90fc <optimize+0x6c0>
			fprintf(stdout,"DST:                       Daylight Savings is Active\n");
    90f6:	81 e2       	ldi	r24, 0x21	; 33
    90f8:	94 e0       	ldi	r25, 0x04	; 4
    90fa:	02 c0       	rjmp	.+4      	; 0x9100 <optimize+0x6c4>
			else
			fprintf(stdout,"DST:                       Daylight Savings is Inactive\n\n");
    90fc:	88 e5       	ldi	r24, 0x58	; 88
    90fe:	94 e0       	ldi	r25, 0x04	; 4
    9100:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	        fprintf(stdout,"L:                         %.6e degrees\n",spa.l);
    9104:	ad b7       	in	r26, 0x3d	; 61
    9106:	be b7       	in	r27, 0x3e	; 62
    9108:	18 97       	sbiw	r26, 0x08	; 8
    910a:	0f b6       	in	r0, 0x3f	; 63
    910c:	f8 94       	cli
    910e:	be bf       	out	0x3e, r27	; 62
    9110:	0f be       	out	0x3f, r0	; 63
    9112:	ad bf       	out	0x3d, r26	; 61
    9114:	2d b7       	in	r18, 0x3d	; 61
    9116:	3e b7       	in	r19, 0x3e	; 62
    9118:	2f 5f       	subi	r18, 0xFF	; 255
    911a:	3f 4f       	sbci	r19, 0xFF	; 255
    911c:	80 91 2f 17 	lds	r24, 0x172F
    9120:	90 91 30 17 	lds	r25, 0x1730
    9124:	12 96       	adiw	r26, 0x02	; 2
    9126:	9c 93       	st	X, r25
    9128:	8e 93       	st	-X, r24
    912a:	11 97       	sbiw	r26, 0x01	; 1
    912c:	82 e9       	ldi	r24, 0x92	; 146
    912e:	94 e0       	ldi	r25, 0x04	; 4
    9130:	f9 01       	movw	r30, r18
    9132:	93 83       	std	Z+3, r25	; 0x03
    9134:	82 83       	std	Z+2, r24	; 0x02
    9136:	fe 01       	movw	r30, r28
    9138:	e5 5b       	subi	r30, 0xB5	; 181
    913a:	ff 4f       	sbci	r31, 0xFF	; 255
    913c:	80 81       	ld	r24, Z
    913e:	91 81       	ldd	r25, Z+1	; 0x01
    9140:	a2 81       	ldd	r26, Z+2	; 0x02
    9142:	b3 81       	ldd	r27, Z+3	; 0x03
    9144:	f9 01       	movw	r30, r18
    9146:	84 83       	std	Z+4, r24	; 0x04
    9148:	95 83       	std	Z+5, r25	; 0x05
    914a:	a6 83       	std	Z+6, r26	; 0x06
    914c:	b7 83       	std	Z+7, r27	; 0x07
    914e:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"B:                         %.6e degrees\n",spa.b);
    9152:	2d b7       	in	r18, 0x3d	; 61
    9154:	3e b7       	in	r19, 0x3e	; 62
    9156:	2f 5f       	subi	r18, 0xFF	; 255
    9158:	3f 4f       	sbci	r19, 0xFF	; 255
    915a:	80 91 2f 17 	lds	r24, 0x172F
    915e:	90 91 30 17 	lds	r25, 0x1730
    9162:	ad b7       	in	r26, 0x3d	; 61
    9164:	be b7       	in	r27, 0x3e	; 62
    9166:	12 96       	adiw	r26, 0x02	; 2
    9168:	9c 93       	st	X, r25
    916a:	8e 93       	st	-X, r24
    916c:	11 97       	sbiw	r26, 0x01	; 1
    916e:	8b eb       	ldi	r24, 0xBB	; 187
    9170:	94 e0       	ldi	r25, 0x04	; 4
    9172:	f9 01       	movw	r30, r18
    9174:	93 83       	std	Z+3, r25	; 0x03
    9176:	82 83       	std	Z+2, r24	; 0x02
    9178:	fe 01       	movw	r30, r28
    917a:	e1 5b       	subi	r30, 0xB1	; 177
    917c:	ff 4f       	sbci	r31, 0xFF	; 255
    917e:	80 81       	ld	r24, Z
    9180:	91 81       	ldd	r25, Z+1	; 0x01
    9182:	a2 81       	ldd	r26, Z+2	; 0x02
    9184:	b3 81       	ldd	r27, Z+3	; 0x03
    9186:	f9 01       	movw	r30, r18
    9188:	84 83       	std	Z+4, r24	; 0x04
    918a:	95 83       	std	Z+5, r25	; 0x05
    918c:	a6 83       	std	Z+6, r26	; 0x06
    918e:	b7 83       	std	Z+7, r27	; 0x07
    9190:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"R:                         %.6f AU\n",spa.r);
    9194:	2d b7       	in	r18, 0x3d	; 61
    9196:	3e b7       	in	r19, 0x3e	; 62
    9198:	2f 5f       	subi	r18, 0xFF	; 255
    919a:	3f 4f       	sbci	r19, 0xFF	; 255
    919c:	80 91 2f 17 	lds	r24, 0x172F
    91a0:	90 91 30 17 	lds	r25, 0x1730
    91a4:	ad b7       	in	r26, 0x3d	; 61
    91a6:	be b7       	in	r27, 0x3e	; 62
    91a8:	12 96       	adiw	r26, 0x02	; 2
    91aa:	9c 93       	st	X, r25
    91ac:	8e 93       	st	-X, r24
    91ae:	11 97       	sbiw	r26, 0x01	; 1
    91b0:	84 ee       	ldi	r24, 0xE4	; 228
    91b2:	94 e0       	ldi	r25, 0x04	; 4
    91b4:	f9 01       	movw	r30, r18
    91b6:	93 83       	std	Z+3, r25	; 0x03
    91b8:	82 83       	std	Z+2, r24	; 0x02
    91ba:	fe 01       	movw	r30, r28
    91bc:	ed 5a       	subi	r30, 0xAD	; 173
    91be:	ff 4f       	sbci	r31, 0xFF	; 255
    91c0:	80 81       	ld	r24, Z
    91c2:	91 81       	ldd	r25, Z+1	; 0x01
    91c4:	a2 81       	ldd	r26, Z+2	; 0x02
    91c6:	b3 81       	ldd	r27, Z+3	; 0x03
    91c8:	f9 01       	movw	r30, r18
    91ca:	84 83       	std	Z+4, r24	; 0x04
    91cc:	95 83       	std	Z+5, r25	; 0x05
    91ce:	a6 83       	std	Z+6, r26	; 0x06
    91d0:	b7 83       	std	Z+7, r27	; 0x07
    91d2:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"H:                         %.6f degrees\n",spa.h);
    91d6:	2d b7       	in	r18, 0x3d	; 61
    91d8:	3e b7       	in	r19, 0x3e	; 62
    91da:	2f 5f       	subi	r18, 0xFF	; 255
    91dc:	3f 4f       	sbci	r19, 0xFF	; 255
    91de:	80 91 2f 17 	lds	r24, 0x172F
    91e2:	90 91 30 17 	lds	r25, 0x1730
    91e6:	ad b7       	in	r26, 0x3d	; 61
    91e8:	be b7       	in	r27, 0x3e	; 62
    91ea:	12 96       	adiw	r26, 0x02	; 2
    91ec:	9c 93       	st	X, r25
    91ee:	8e 93       	st	-X, r24
    91f0:	11 97       	sbiw	r26, 0x01	; 1
    91f2:	88 e0       	ldi	r24, 0x08	; 8
    91f4:	95 e0       	ldi	r25, 0x05	; 5
    91f6:	f9 01       	movw	r30, r18
    91f8:	93 83       	std	Z+3, r25	; 0x03
    91fa:	82 83       	std	Z+2, r24	; 0x02
    91fc:	fe 01       	movw	r30, r28
    91fe:	e5 56       	subi	r30, 0x65	; 101
    9200:	ff 4f       	sbci	r31, 0xFF	; 255
    9202:	80 81       	ld	r24, Z
    9204:	91 81       	ldd	r25, Z+1	; 0x01
    9206:	a2 81       	ldd	r26, Z+2	; 0x02
    9208:	b3 81       	ldd	r27, Z+3	; 0x03
    920a:	f9 01       	movw	r30, r18
    920c:	84 83       	std	Z+4, r24	; 0x04
    920e:	95 83       	std	Z+5, r25	; 0x05
    9210:	a6 83       	std	Z+6, r26	; 0x06
    9212:	b7 83       	std	Z+7, r27	; 0x07
    9214:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"Delta Psi:                 %.6e degrees\n",spa.del_psi);
    9218:	2d b7       	in	r18, 0x3d	; 61
    921a:	3e b7       	in	r19, 0x3e	; 62
    921c:	2f 5f       	subi	r18, 0xFF	; 255
    921e:	3f 4f       	sbci	r19, 0xFF	; 255
    9220:	80 91 2f 17 	lds	r24, 0x172F
    9224:	90 91 30 17 	lds	r25, 0x1730
    9228:	ad b7       	in	r26, 0x3d	; 61
    922a:	be b7       	in	r27, 0x3e	; 62
    922c:	12 96       	adiw	r26, 0x02	; 2
    922e:	9c 93       	st	X, r25
    9230:	8e 93       	st	-X, r24
    9232:	11 97       	sbiw	r26, 0x01	; 1
    9234:	81 e3       	ldi	r24, 0x31	; 49
    9236:	95 e0       	ldi	r25, 0x05	; 5
    9238:	f9 01       	movw	r30, r18
    923a:	93 83       	std	Z+3, r25	; 0x03
    923c:	82 83       	std	Z+2, r24	; 0x02
    923e:	fe 01       	movw	r30, r28
    9240:	ed 58       	subi	r30, 0x8D	; 141
    9242:	ff 4f       	sbci	r31, 0xFF	; 255
    9244:	80 81       	ld	r24, Z
    9246:	91 81       	ldd	r25, Z+1	; 0x01
    9248:	a2 81       	ldd	r26, Z+2	; 0x02
    924a:	b3 81       	ldd	r27, Z+3	; 0x03
    924c:	f9 01       	movw	r30, r18
    924e:	84 83       	std	Z+4, r24	; 0x04
    9250:	95 83       	std	Z+5, r25	; 0x05
    9252:	a6 83       	std	Z+6, r26	; 0x06
    9254:	b7 83       	std	Z+7, r27	; 0x07
    9256:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"Delta Epsilon:             %.6e degrees\n",spa.del_epsilon);
    925a:	2d b7       	in	r18, 0x3d	; 61
    925c:	3e b7       	in	r19, 0x3e	; 62
    925e:	2f 5f       	subi	r18, 0xFF	; 255
    9260:	3f 4f       	sbci	r19, 0xFF	; 255
    9262:	80 91 2f 17 	lds	r24, 0x172F
    9266:	90 91 30 17 	lds	r25, 0x1730
    926a:	ad b7       	in	r26, 0x3d	; 61
    926c:	be b7       	in	r27, 0x3e	; 62
    926e:	12 96       	adiw	r26, 0x02	; 2
    9270:	9c 93       	st	X, r25
    9272:	8e 93       	st	-X, r24
    9274:	11 97       	sbiw	r26, 0x01	; 1
    9276:	8a e5       	ldi	r24, 0x5A	; 90
    9278:	95 e0       	ldi	r25, 0x05	; 5
    927a:	f9 01       	movw	r30, r18
    927c:	93 83       	std	Z+3, r25	; 0x03
    927e:	82 83       	std	Z+2, r24	; 0x02
    9280:	fe 01       	movw	r30, r28
    9282:	e9 58       	subi	r30, 0x89	; 137
    9284:	ff 4f       	sbci	r31, 0xFF	; 255
    9286:	80 81       	ld	r24, Z
    9288:	91 81       	ldd	r25, Z+1	; 0x01
    928a:	a2 81       	ldd	r26, Z+2	; 0x02
    928c:	b3 81       	ldd	r27, Z+3	; 0x03
    928e:	f9 01       	movw	r30, r18
    9290:	84 83       	std	Z+4, r24	; 0x04
    9292:	95 83       	std	Z+5, r25	; 0x05
    9294:	a6 83       	std	Z+6, r26	; 0x06
    9296:	b7 83       	std	Z+7, r27	; 0x07
    9298:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"Epsilon:                   %.6f degrees\n",spa.epsilon);
    929c:	2d b7       	in	r18, 0x3d	; 61
    929e:	3e b7       	in	r19, 0x3e	; 62
    92a0:	2f 5f       	subi	r18, 0xFF	; 255
    92a2:	3f 4f       	sbci	r19, 0xFF	; 255
    92a4:	80 91 2f 17 	lds	r24, 0x172F
    92a8:	90 91 30 17 	lds	r25, 0x1730
    92ac:	ad b7       	in	r26, 0x3d	; 61
    92ae:	be b7       	in	r27, 0x3e	; 62
    92b0:	12 96       	adiw	r26, 0x02	; 2
    92b2:	9c 93       	st	X, r25
    92b4:	8e 93       	st	-X, r24
    92b6:	11 97       	sbiw	r26, 0x01	; 1
    92b8:	83 e8       	ldi	r24, 0x83	; 131
    92ba:	95 e0       	ldi	r25, 0x05	; 5
    92bc:	f9 01       	movw	r30, r18
    92be:	93 83       	std	Z+3, r25	; 0x03
    92c0:	82 83       	std	Z+2, r24	; 0x02
    92c2:	fe 01       	movw	r30, r28
    92c4:	e1 58       	subi	r30, 0x81	; 129
    92c6:	ff 4f       	sbci	r31, 0xFF	; 255
    92c8:	80 81       	ld	r24, Z
    92ca:	91 81       	ldd	r25, Z+1	; 0x01
    92cc:	a2 81       	ldd	r26, Z+2	; 0x02
    92ce:	b3 81       	ldd	r27, Z+3	; 0x03
    92d0:	f9 01       	movw	r30, r18
    92d2:	84 83       	std	Z+4, r24	; 0x04
    92d4:	95 83       	std	Z+5, r25	; 0x05
    92d6:	a6 83       	std	Z+6, r26	; 0x06
    92d8:	b7 83       	std	Z+7, r27	; 0x07
    92da:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	        fprintf(stdout,"Incidence:                 %.6f degrees\n",spa.incidence);
    92de:	2d b7       	in	r18, 0x3d	; 61
    92e0:	3e b7       	in	r19, 0x3e	; 62
    92e2:	2f 5f       	subi	r18, 0xFF	; 255
    92e4:	3f 4f       	sbci	r19, 0xFF	; 255
    92e6:	80 91 2f 17 	lds	r24, 0x172F
    92ea:	90 91 30 17 	lds	r25, 0x1730
    92ee:	ad b7       	in	r26, 0x3d	; 61
    92f0:	be b7       	in	r27, 0x3e	; 62
    92f2:	12 96       	adiw	r26, 0x02	; 2
    92f4:	9c 93       	st	X, r25
    92f6:	8e 93       	st	-X, r24
    92f8:	11 97       	sbiw	r26, 0x01	; 1
    92fa:	8c ea       	ldi	r24, 0xAC	; 172
    92fc:	95 e0       	ldi	r25, 0x05	; 5
    92fe:	f9 01       	movw	r30, r18
    9300:	93 83       	std	Z+3, r25	; 0x03
    9302:	82 83       	std	Z+2, r24	; 0x02
    9304:	fe 01       	movw	r30, r28
    9306:	e5 52       	subi	r30, 0x25	; 37
    9308:	ff 4f       	sbci	r31, 0xFF	; 255
    930a:	80 81       	ld	r24, Z
    930c:	91 81       	ldd	r25, Z+1	; 0x01
    930e:	a2 81       	ldd	r26, Z+2	; 0x02
    9310:	b3 81       	ldd	r27, Z+3	; 0x03
    9312:	f9 01       	movw	r30, r18
    9314:	84 83       	std	Z+4, r24	; 0x04
    9316:	95 83       	std	Z+5, r25	; 0x05
    9318:	a6 83       	std	Z+6, r26	; 0x06
    931a:	b7 83       	std	Z+7, r27	; 0x07
    931c:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
			fprintf(stdout,"Zenith:                    %.6f degrees\n",spa.zenith);
    9320:	ed b7       	in	r30, 0x3d	; 61
    9322:	fe b7       	in	r31, 0x3e	; 62
    9324:	31 96       	adiw	r30, 0x01	; 1
    9326:	80 91 2f 17 	lds	r24, 0x172F
    932a:	90 91 30 17 	lds	r25, 0x1730
    932e:	ad b7       	in	r26, 0x3d	; 61
    9330:	be b7       	in	r27, 0x3e	; 62
    9332:	12 96       	adiw	r26, 0x02	; 2
    9334:	9c 93       	st	X, r25
    9336:	8e 93       	st	-X, r24
    9338:	11 97       	sbiw	r26, 0x01	; 1
    933a:	85 ed       	ldi	r24, 0xD5	; 213
    933c:	95 e0       	ldi	r25, 0x05	; 5
    933e:	93 83       	std	Z+3, r25	; 0x03
    9340:	82 83       	std	Z+2, r24	; 0x02
    9342:	af ec       	ldi	r26, 0xCF	; 207
    9344:	ea 2e       	mov	r14, r26
    9346:	f1 2c       	mov	r15, r1
    9348:	ec 0e       	add	r14, r28
    934a:	fd 1e       	adc	r15, r29
    934c:	d7 01       	movw	r26, r14
    934e:	2d 91       	ld	r18, X+
    9350:	3d 91       	ld	r19, X+
    9352:	4d 91       	ld	r20, X+
    9354:	5c 91       	ld	r21, X
    9356:	24 83       	std	Z+4, r18	; 0x04
    9358:	35 83       	std	Z+5, r19	; 0x05
    935a:	46 83       	std	Z+6, r20	; 0x06
    935c:	57 83       	std	Z+7, r21	; 0x07
    935e:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
			fprintf(stdout,"Degrees Above Horizon:     %.6f degrees\n",90 - spa.zenith);
    9362:	0d b7       	in	r16, 0x3d	; 61
    9364:	1e b7       	in	r17, 0x3e	; 62
    9366:	0f 5f       	subi	r16, 0xFF	; 255
    9368:	1f 4f       	sbci	r17, 0xFF	; 255
    936a:	80 91 2f 17 	lds	r24, 0x172F
    936e:	90 91 30 17 	lds	r25, 0x1730
    9372:	ed b7       	in	r30, 0x3d	; 61
    9374:	fe b7       	in	r31, 0x3e	; 62
    9376:	92 83       	std	Z+2, r25	; 0x02
    9378:	81 83       	std	Z+1, r24	; 0x01
    937a:	8e ef       	ldi	r24, 0xFE	; 254
    937c:	95 e0       	ldi	r25, 0x05	; 5
    937e:	d8 01       	movw	r26, r16
    9380:	13 96       	adiw	r26, 0x03	; 3
    9382:	9c 93       	st	X, r25
    9384:	8e 93       	st	-X, r24
    9386:	12 97       	sbiw	r26, 0x02	; 2
    9388:	60 e0       	ldi	r22, 0x00	; 0
    938a:	70 e0       	ldi	r23, 0x00	; 0
    938c:	84 eb       	ldi	r24, 0xB4	; 180
    938e:	92 e4       	ldi	r25, 0x42	; 66
    9390:	f7 01       	movw	r30, r14
    9392:	20 81       	ld	r18, Z
    9394:	31 81       	ldd	r19, Z+1	; 0x01
    9396:	42 81       	ldd	r20, Z+2	; 0x02
    9398:	53 81       	ldd	r21, Z+3	; 0x03
    939a:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    939e:	d8 01       	movw	r26, r16
    93a0:	14 96       	adiw	r26, 0x04	; 4
    93a2:	6d 93       	st	X+, r22
    93a4:	7d 93       	st	X+, r23
    93a6:	8d 93       	st	X+, r24
    93a8:	9c 93       	st	X, r25
    93aa:	17 97       	sbiw	r26, 0x07	; 7
    93ac:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    93b0:	ed b7       	in	r30, 0x3d	; 61
    93b2:	fe b7       	in	r31, 0x3e	; 62
    93b4:	38 96       	adiw	r30, 0x08	; 8
    93b6:	1b c0       	rjmp	.+54     	; 0x93ee <optimize+0x9b2>
		}

    } else fprintf(stdout,"SPA Error Code: %d\n", result);
    93b8:	00 d0       	rcall	.+0      	; 0x93ba <optimize+0x97e>
    93ba:	00 d0       	rcall	.+0      	; 0x93bc <optimize+0x980>
    93bc:	00 d0       	rcall	.+0      	; 0x93be <optimize+0x982>
    93be:	ed b7       	in	r30, 0x3d	; 61
    93c0:	fe b7       	in	r31, 0x3e	; 62
    93c2:	31 96       	adiw	r30, 0x01	; 1
    93c4:	80 91 2f 17 	lds	r24, 0x172F
    93c8:	90 91 30 17 	lds	r25, 0x1730
    93cc:	ad b7       	in	r26, 0x3d	; 61
    93ce:	be b7       	in	r27, 0x3e	; 62
    93d0:	12 96       	adiw	r26, 0x02	; 2
    93d2:	9c 93       	st	X, r25
    93d4:	8e 93       	st	-X, r24
    93d6:	11 97       	sbiw	r26, 0x01	; 1
    93d8:	87 e2       	ldi	r24, 0x27	; 39
    93da:	96 e0       	ldi	r25, 0x06	; 6
    93dc:	93 83       	std	Z+3, r25	; 0x03
    93de:	82 83       	std	Z+2, r24	; 0x02
    93e0:	35 83       	std	Z+5, r19	; 0x05
    93e2:	24 83       	std	Z+4, r18	; 0x04
    93e4:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    93e8:	ed b7       	in	r30, 0x3d	; 61
    93ea:	fe b7       	in	r31, 0x3e	; 62
    93ec:	36 96       	adiw	r30, 0x06	; 6
    93ee:	0f b6       	in	r0, 0x3f	; 63
    93f0:	f8 94       	cli
    93f2:	fe bf       	out	0x3e, r31	; 62
    93f4:	0f be       	out	0x3f, r0	; 63
    93f6:	ed bf       	out	0x3d, r30	; 61

}
    93f8:	ca 50       	subi	r28, 0x0A	; 10
    93fa:	df 4f       	sbci	r29, 0xFF	; 255
    93fc:	0f b6       	in	r0, 0x3f	; 63
    93fe:	f8 94       	cli
    9400:	de bf       	out	0x3e, r29	; 62
    9402:	0f be       	out	0x3f, r0	; 63
    9404:	cd bf       	out	0x3d, r28	; 61
    9406:	cf 91       	pop	r28
    9408:	df 91       	pop	r29
    940a:	1f 91       	pop	r17
    940c:	0f 91       	pop	r16
    940e:	ff 90       	pop	r15
    9410:	ef 90       	pop	r14
    9412:	df 90       	pop	r13
    9414:	cf 90       	pop	r12
    9416:	bf 90       	pop	r11
    9418:	af 90       	pop	r10
    941a:	9f 90       	pop	r9
    941c:	8f 90       	pop	r8
    941e:	7f 90       	pop	r7
    9420:	6f 90       	pop	r6
    9422:	5f 90       	pop	r5
    9424:	4f 90       	pop	r4
    9426:	3f 90       	pop	r3
    9428:	2f 90       	pop	r2
    942a:	08 95       	ret

0000942c <setupMag>:

//Set up the magnetometer.
void setupMag()
{

	i2c_start(HMC5883L_WRITE);
    942c:	8c e3       	ldi	r24, 0x3C	; 60
    942e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <i2c_start>
	i2c_write(0x00); // set pointer to CRA
    9432:	80 e0       	ldi	r24, 0x00	; 0
    9434:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_write(0x70); // write 0x70 to CRA
    9438:	80 e7       	ldi	r24, 0x70	; 112
    943a:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_stop();
    943e:	0e 94 cb 21 	call	0x4396	; 0x4396 <i2c_stop>

	i2c_start(HMC5883L_WRITE);
    9442:	8c e3       	ldi	r24, 0x3C	; 60
    9444:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <i2c_start>
	i2c_write(0x01); // set pointer to CRB
    9448:	81 e0       	ldi	r24, 0x01	; 1
    944a:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_write(0xA0);
    944e:	80 ea       	ldi	r24, 0xA0	; 160
    9450:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_stop();
    9454:	0e 94 cb 21 	call	0x4396	; 0x4396 <i2c_stop>

	i2c_start(HMC5883L_WRITE);
    9458:	8c e3       	ldi	r24, 0x3C	; 60
    945a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <i2c_start>
	i2c_write(0x02); // set pointer to measurement mode
    945e:	82 e0       	ldi	r24, 0x02	; 2
    9460:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_write(0x00); // continous measurement
    9464:	80 e0       	ldi	r24, 0x00	; 0
    9466:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_stop();
    946a:	0e 94 cb 21 	call	0x4396	; 0x4396 <i2c_stop>

}
    946e:	08 95       	ret

00009470 <getRotation>:
// Functions -- Sensors
//*****************************************************************************

//Reads data from the magnetometer.
float getRotation()
{
    9470:	ef 92       	push	r14
    9472:	ff 92       	push	r15
    9474:	0f 93       	push	r16
    9476:	1f 93       	push	r17
	
	i2c_start_wait(HMC5883L_WRITE);
    9478:	8c e3       	ldi	r24, 0x3C	; 60
    947a:	0e 94 a0 21 	call	0x4340	; 0x4340 <i2c_start_wait>
	i2c_write(0x03); //set pointer to X-axis MSB
    947e:	83 e0       	ldi	r24, 0x03	; 3
    9480:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <i2c_write>
	i2c_stop();
    9484:	0e 94 cb 21 	call	0x4396	; 0x4396 <i2c_stop>

	i2c_rep_start(HMC5883L_READ); 
    9488:	8d e3       	ldi	r24, 0x3D	; 61
    948a:	0e 94 c8 21 	call	0x4390	; 0x4390 <i2c_rep_start>

	raw_x = ((uint8_t)i2c_readAck())<<8;
    948e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <i2c_readAck>
    9492:	18 2f       	mov	r17, r24
    9494:	00 e0       	ldi	r16, 0x00	; 0
    9496:	10 93 57 13 	sts	0x1357, r17
    949a:	00 93 56 13 	sts	0x1356, r16
	raw_x |= i2c_readAck();
    949e:	0e 94 e5 21 	call	0x43ca	; 0x43ca <i2c_readAck>
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	08 2b       	or	r16, r24
    94a6:	19 2b       	or	r17, r25
    94a8:	10 93 57 13 	sts	0x1357, r17
    94ac:	00 93 56 13 	sts	0x1356, r16

	raw_z = ((uint8_t)i2c_readAck())<<8;
    94b0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <i2c_readAck>
    94b4:	18 2f       	mov	r17, r24
    94b6:	00 e0       	ldi	r16, 0x00	; 0
    94b8:	10 93 5b 13 	sts	0x135B, r17
    94bc:	00 93 5a 13 	sts	0x135A, r16
	raw_z |= i2c_readAck();
    94c0:	0e 94 e5 21 	call	0x43ca	; 0x43ca <i2c_readAck>
    94c4:	90 e0       	ldi	r25, 0x00	; 0
    94c6:	08 2b       	or	r16, r24
    94c8:	19 2b       	or	r17, r25
    94ca:	10 93 5b 13 	sts	0x135B, r17
    94ce:	00 93 5a 13 	sts	0x135A, r16

	raw_y = ((uint8_t)i2c_readAck())<<8;
    94d2:	0e 94 e5 21 	call	0x43ca	; 0x43ca <i2c_readAck>
    94d6:	18 2f       	mov	r17, r24
    94d8:	00 e0       	ldi	r16, 0x00	; 0
    94da:	10 93 59 13 	sts	0x1359, r17
    94de:	00 93 58 13 	sts	0x1358, r16
	raw_y |= i2c_readNak();
    94e2:	0e 94 ef 21 	call	0x43de	; 0x43de <i2c_readNak>
    94e6:	90 e0       	ldi	r25, 0x00	; 0
    94e8:	08 2b       	or	r16, r24
    94ea:	19 2b       	or	r17, r25
    94ec:	10 93 59 13 	sts	0x1359, r17
    94f0:	00 93 58 13 	sts	0x1358, r16

	i2c_stop();
    94f4:	0e 94 cb 21 	call	0x4396	; 0x4396 <i2c_stop>
	//Calculate deviation from South in Degrees
	//Negative is CCW, Positive is CW
	//A Heading of 0 or 360 degrees  means the panel is pointing North
	//A heading of 180 degrees means the panel is pointing South.
	
	if(dataLog==0)
    94f8:	80 91 4c 13 	lds	r24, 0x134C
    94fc:	90 91 4d 13 	lds	r25, 0x134D
    9500:	89 2b       	or	r24, r25
    9502:	a9 f5       	brne	.+106    	; 0x956e <getRotation+0xfe>
		fprintf(stdout, "x: %d\r\ny: %d\r\nz: %d\r\n", raw_x,raw_y,raw_z);
    9504:	8d b7       	in	r24, 0x3d	; 61
    9506:	9e b7       	in	r25, 0x3e	; 62
    9508:	0a 97       	sbiw	r24, 0x0a	; 10
    950a:	0f b6       	in	r0, 0x3f	; 63
    950c:	f8 94       	cli
    950e:	9e bf       	out	0x3e, r25	; 62
    9510:	0f be       	out	0x3f, r0	; 63
    9512:	8d bf       	out	0x3d, r24	; 61
    9514:	ed b7       	in	r30, 0x3d	; 61
    9516:	fe b7       	in	r31, 0x3e	; 62
    9518:	31 96       	adiw	r30, 0x01	; 1
    951a:	80 91 2f 17 	lds	r24, 0x172F
    951e:	90 91 30 17 	lds	r25, 0x1730
    9522:	ad b7       	in	r26, 0x3d	; 61
    9524:	be b7       	in	r27, 0x3e	; 62
    9526:	12 96       	adiw	r26, 0x02	; 2
    9528:	9c 93       	st	X, r25
    952a:	8e 93       	st	-X, r24
    952c:	11 97       	sbiw	r26, 0x01	; 1
    952e:	8b e3       	ldi	r24, 0x3B	; 59
    9530:	96 e0       	ldi	r25, 0x06	; 6
    9532:	93 83       	std	Z+3, r25	; 0x03
    9534:	82 83       	std	Z+2, r24	; 0x02
    9536:	80 91 56 13 	lds	r24, 0x1356
    953a:	90 91 57 13 	lds	r25, 0x1357
    953e:	95 83       	std	Z+5, r25	; 0x05
    9540:	84 83       	std	Z+4, r24	; 0x04
    9542:	80 91 58 13 	lds	r24, 0x1358
    9546:	90 91 59 13 	lds	r25, 0x1359
    954a:	97 83       	std	Z+7, r25	; 0x07
    954c:	86 83       	std	Z+6, r24	; 0x06
    954e:	80 91 5a 13 	lds	r24, 0x135A
    9552:	90 91 5b 13 	lds	r25, 0x135B
    9556:	91 87       	std	Z+9, r25	; 0x09
    9558:	80 87       	std	Z+8, r24	; 0x08
    955a:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    955e:	8d b7       	in	r24, 0x3d	; 61
    9560:	9e b7       	in	r25, 0x3e	; 62
    9562:	0a 96       	adiw	r24, 0x0a	; 10
    9564:	0f b6       	in	r0, 0x3f	; 63
    9566:	f8 94       	cli
    9568:	9e bf       	out	0x3e, r25	; 62
    956a:	0f be       	out	0x3f, r0	; 63
    956c:	8d bf       	out	0x3d, r24	; 61
    956e:	88 e8       	ldi	r24, 0x88	; 136
    9570:	93 e1       	ldi	r25, 0x13	; 19
    9572:	20 e9       	ldi	r18, 0x90	; 144
    9574:	31 e0       	ldi	r19, 0x01	; 1
    9576:	f9 01       	movw	r30, r18
    9578:	31 97       	sbiw	r30, 0x01	; 1
    957a:	f1 f7       	brne	.-4      	; 0x9578 <getRotation+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    957c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    957e:	d9 f7       	brne	.-10     	; 0x9576 <getRotation+0x106>

	//raw_x = (raw_x-8.5)*(255/71.5);
	//raw_y = (raw_y+102)*(255/102);

	//float heading = atan2((double)raw_x,(double)raw_y)* 180 / 3.14159265 + 180;
	float heading = atan2((double)raw_x,(double)raw_y);
    9580:	60 91 56 13 	lds	r22, 0x1356
    9584:	70 91 57 13 	lds	r23, 0x1357
    9588:	88 27       	eor	r24, r24
    958a:	77 fd       	sbrc	r23, 7
    958c:	80 95       	com	r24
    958e:	98 2f       	mov	r25, r24
    9590:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    9594:	7b 01       	movw	r14, r22
    9596:	8c 01       	movw	r16, r24
    9598:	60 91 58 13 	lds	r22, 0x1358
    959c:	70 91 59 13 	lds	r23, 0x1359
    95a0:	88 27       	eor	r24, r24
    95a2:	77 fd       	sbrc	r23, 7
    95a4:	80 95       	com	r24
    95a6:	98 2f       	mov	r25, r24
    95a8:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    95ac:	9b 01       	movw	r18, r22
    95ae:	ac 01       	movw	r20, r24
    95b0:	c8 01       	movw	r24, r16
    95b2:	b7 01       	movw	r22, r14
    95b4:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <atan2>
    95b8:	7b 01       	movw	r14, r22
    95ba:	8c 01       	movw	r16, r24
	if (heading<0) heading += 2*M_PI;
    95bc:	20 e0       	ldi	r18, 0x00	; 0
    95be:	30 e0       	ldi	r19, 0x00	; 0
    95c0:	40 e0       	ldi	r20, 0x00	; 0
    95c2:	50 e0       	ldi	r21, 0x00	; 0
    95c4:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    95c8:	88 23       	and	r24, r24
    95ca:	54 f4       	brge	.+20     	; 0x95e0 <getRotation+0x170>
    95cc:	c8 01       	movw	r24, r16
    95ce:	b7 01       	movw	r22, r14
    95d0:	2b ed       	ldi	r18, 0xDB	; 219
    95d2:	3f e0       	ldi	r19, 0x0F	; 15
    95d4:	49 ec       	ldi	r20, 0xC9	; 201
    95d6:	50 e4       	ldi	r21, 0x40	; 64
    95d8:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    95dc:	7b 01       	movw	r14, r22
    95de:	8c 01       	movw	r16, r24
	heading = heading *180/M_PI;
    95e0:	c8 01       	movw	r24, r16
    95e2:	b7 01       	movw	r22, r14
    95e4:	20 e0       	ldi	r18, 0x00	; 0
    95e6:	30 e0       	ldi	r19, 0x00	; 0
    95e8:	44 e3       	ldi	r20, 0x34	; 52
    95ea:	53 e4       	ldi	r21, 0x43	; 67
    95ec:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    95f0:	2b ed       	ldi	r18, 0xDB	; 219
    95f2:	3f e0       	ldi	r19, 0x0F	; 15
    95f4:	49 e4       	ldi	r20, 0x49	; 73
    95f6:	50 e4       	ldi	r21, 0x40	; 64
    95f8:	0e 94 b5 61 	call	0xc36a	; 0xc36a <__divsf3>
    95fc:	9b 01       	movw	r18, r22
    95fe:	ac 01       	movw	r20, r24
    9600:	60 e0       	ldi	r22, 0x00	; 0
    9602:	70 e0       	ldi	r23, 0x00	; 0
    9604:	84 e3       	ldi	r24, 0x34	; 52
    9606:	93 e4       	ldi	r25, 0x43	; 67
    9608:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>

	//0 is heading south
	float rotation = 180.0 - heading;

	return rotation;
}
    960c:	1f 91       	pop	r17
    960e:	0f 91       	pop	r16
    9610:	ff 90       	pop	r15
    9612:	ef 90       	pop	r14
    9614:	08 95       	ret

00009616 <updateRot>:
	_delay_ms(100);
	
}

void updateRot(void)
{
    9616:	ef 92       	push	r14
    9618:	ff 92       	push	r15
    961a:	0f 93       	push	r16
    961c:	1f 93       	push	r17

	rot = getRotation();
    961e:	0e 94 38 4a 	call	0x9470	; 0x9470 <getRotation>
    9622:	9b 01       	movw	r18, r22
    9624:	ac 01       	movw	r20, r24
    9626:	60 93 83 16 	sts	0x1683, r22
    962a:	70 93 84 16 	sts	0x1684, r23
    962e:	80 93 85 16 	sts	0x1685, r24
    9632:	90 93 86 16 	sts	0x1686, r25
	if(dataLog==0)
    9636:	80 91 4c 13 	lds	r24, 0x134C
    963a:	90 91 4d 13 	lds	r25, 0x134D
    963e:	89 2b       	or	r24, r25
    9640:	59 f5       	brne	.+86     	; 0x9698 <updateRot+0x82>
	{
		dtostrf(rot, 6, 3, rot_string);    
    9642:	08 e1       	ldi	r16, 0x18	; 24
    9644:	e0 2e       	mov	r14, r16
    9646:	07 e1       	ldi	r16, 0x17	; 23
    9648:	f0 2e       	mov	r15, r16
    964a:	ca 01       	movw	r24, r20
    964c:	b9 01       	movw	r22, r18
    964e:	46 e0       	ldi	r20, 0x06	; 6
    9650:	23 e0       	ldi	r18, 0x03	; 3
    9652:	87 01       	movw	r16, r14
    9654:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
	    fprintf(stdout, "Current Orientation %s\r\n", rot_string);
    9658:	00 d0       	rcall	.+0      	; 0x965a <updateRot+0x44>
    965a:	00 d0       	rcall	.+0      	; 0x965c <updateRot+0x46>
    965c:	00 d0       	rcall	.+0      	; 0x965e <updateRot+0x48>
    965e:	ed b7       	in	r30, 0x3d	; 61
    9660:	fe b7       	in	r31, 0x3e	; 62
    9662:	31 96       	adiw	r30, 0x01	; 1
    9664:	80 91 2f 17 	lds	r24, 0x172F
    9668:	90 91 30 17 	lds	r25, 0x1730
    966c:	ad b7       	in	r26, 0x3d	; 61
    966e:	be b7       	in	r27, 0x3e	; 62
    9670:	12 96       	adiw	r26, 0x02	; 2
    9672:	9c 93       	st	X, r25
    9674:	8e 93       	st	-X, r24
    9676:	11 97       	sbiw	r26, 0x01	; 1
    9678:	81 e5       	ldi	r24, 0x51	; 81
    967a:	96 e0       	ldi	r25, 0x06	; 6
    967c:	93 83       	std	Z+3, r25	; 0x03
    967e:	82 83       	std	Z+2, r24	; 0x02
    9680:	f5 82       	std	Z+5, r15	; 0x05
    9682:	e4 82       	std	Z+4, r14	; 0x04
    9684:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    9688:	8d b7       	in	r24, 0x3d	; 61
    968a:	9e b7       	in	r25, 0x3e	; 62
    968c:	06 96       	adiw	r24, 0x06	; 6
    968e:	0f b6       	in	r0, 0x3f	; 63
    9690:	f8 94       	cli
    9692:	9e bf       	out	0x3e, r25	; 62
    9694:	0f be       	out	0x3f, r0	; 63
    9696:	8d bf       	out	0x3d, r24	; 61
	}
	
}
    9698:	1f 91       	pop	r17
    969a:	0f 91       	pop	r16
    969c:	ff 90       	pop	r15
    969e:	ef 90       	pop	r14
    96a0:	08 95       	ret

000096a2 <goToScrewCCW>:
	if(dataLog==0)
		fprintf(stdout, "final screw: %u\r\n", curr_screw);
}

void goToScrewCCW(void)
{
    96a2:	0f 93       	push	r16
    96a4:	1f 93       	push	r17
    96a6:	cf 93       	push	r28
    96a8:	df 93       	push	r29
	if(dataLog==0)
    96aa:	80 91 4c 13 	lds	r24, 0x134C
    96ae:	90 91 4d 13 	lds	r25, 0x134D
    96b2:	89 2b       	or	r24, r25
    96b4:	21 f5       	brne	.+72     	; 0x96fe <goToScrewCCW+0x5c>
		fprintf(stdout, "starting screw: %u\r\n", curr_screw);
    96b6:	00 d0       	rcall	.+0      	; 0x96b8 <goToScrewCCW+0x16>
    96b8:	00 d0       	rcall	.+0      	; 0x96ba <goToScrewCCW+0x18>
    96ba:	00 d0       	rcall	.+0      	; 0x96bc <goToScrewCCW+0x1a>
    96bc:	ed b7       	in	r30, 0x3d	; 61
    96be:	fe b7       	in	r31, 0x3e	; 62
    96c0:	31 96       	adiw	r30, 0x01	; 1
    96c2:	80 91 2f 17 	lds	r24, 0x172F
    96c6:	90 91 30 17 	lds	r25, 0x1730
    96ca:	ad b7       	in	r26, 0x3d	; 61
    96cc:	be b7       	in	r27, 0x3e	; 62
    96ce:	12 96       	adiw	r26, 0x02	; 2
    96d0:	9c 93       	st	X, r25
    96d2:	8e 93       	st	-X, r24
    96d4:	11 97       	sbiw	r26, 0x01	; 1
    96d6:	8a e6       	ldi	r24, 0x6A	; 106
    96d8:	96 e0       	ldi	r25, 0x06	; 6
    96da:	93 83       	std	Z+3, r25	; 0x03
    96dc:	82 83       	std	Z+2, r24	; 0x02
    96de:	80 91 54 13 	lds	r24, 0x1354
    96e2:	90 91 55 13 	lds	r25, 0x1355
    96e6:	95 83       	std	Z+5, r25	; 0x05
    96e8:	84 83       	std	Z+4, r24	; 0x04
    96ea:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    96ee:	8d b7       	in	r24, 0x3d	; 61
    96f0:	9e b7       	in	r25, 0x3e	; 62
    96f2:	06 96       	adiw	r24, 0x06	; 6
    96f4:	0f b6       	in	r0, 0x3f	; 63
    96f6:	f8 94       	cli
    96f8:	9e bf       	out	0x3e, r25	; 62
    96fa:	0f be       	out	0x3f, r0	; 63
    96fc:	8d bf       	out	0x3d, r24	; 61
	{
		goRight(SCREW_BIG_JUMP);
	}
	else
	{
		goRight(SCREW_INITIAL_JUMP);
    96fe:	8b e4       	ldi	r24, 0x4B	; 75
    9700:	90 e0       	ldi	r25, 0x00	; 0
    9702:	0e 94 4c 40 	call	0x8098	; 0x8098 <goRight>
	}
	updateRot();
    9706:	0e 94 0b 4b 	call	0x9616	; 0x9616 <updateRot>
	int activeScrewThresh;
	int nextScrew;
	if(curr_screw == 0)
    970a:	80 91 54 13 	lds	r24, 0x1354
    970e:	90 91 55 13 	lds	r25, 0x1355
    9712:	00 97       	sbiw	r24, 0x00	; 0
    9714:	19 f4       	brne	.+6      	; 0x971c <goToScrewCCW+0x7a>
    9716:	eb e0       	ldi	r30, 0x0B	; 11
    9718:	f0 e0       	ldi	r31, 0x00	; 0
    971a:	02 c0       	rjmp	.+4      	; 0x9720 <goToScrewCCW+0x7e>
		nextScrew = 11;
	else
		nextScrew = curr_screw-1;
    971c:	fc 01       	movw	r30, r24
    971e:	31 97       	sbiw	r30, 0x01	; 1
	if(USE_CUSTOM_SCREW_THRESHOLDS)
		activeScrewThresh = custom_screw_thresholds[nextScrew];
    9720:	ee 0f       	add	r30, r30
    9722:	ff 1f       	adc	r31, r31
    9724:	e3 5c       	subi	r30, 0xC3	; 195
    9726:	fe 4e       	sbci	r31, 0xEE	; 238
    9728:	00 81       	ld	r16, Z
    972a:	11 81       	ldd	r17, Z+1	; 0x01
    972c:	c0 e0       	ldi	r28, 0x00	; 0
    972e:	d0 e0       	ldi	r29, 0x00	; 0
    9730:	07 c0       	rjmp	.+14     	; 0x9740 <goToScrewCCW+0x9e>
	else
		activeScrewThresh = (BASE_Z + SCREW_THRESHOLD);
	while (raw_z < activeScrewThresh || numMoves < MOVES_THRESHOLD)
	{
		goRight(SCREW_INCREMENT_TIME);
    9732:	89 e1       	ldi	r24, 0x19	; 25
    9734:	90 e0       	ldi	r25, 0x00	; 0
    9736:	0e 94 4c 40 	call	0x8098	; 0x8098 <goRight>
		updateRot();
    973a:	0e 94 0b 4b 	call	0x9616	; 0x9616 <updateRot>
		numMoves++;
    973e:	21 96       	adiw	r28, 0x01	; 1
		nextScrew = curr_screw-1;
	if(USE_CUSTOM_SCREW_THRESHOLDS)
		activeScrewThresh = custom_screw_thresholds[nextScrew];
	else
		activeScrewThresh = (BASE_Z + SCREW_THRESHOLD);
	while (raw_z < activeScrewThresh || numMoves < MOVES_THRESHOLD)
    9740:	80 91 5a 13 	lds	r24, 0x135A
    9744:	90 91 5b 13 	lds	r25, 0x135B
    9748:	80 17       	cp	r24, r16
    974a:	91 07       	cpc	r25, r17
    974c:	94 f3       	brlt	.-28     	; 0x9732 <goToScrewCCW+0x90>
    974e:	c4 30       	cpi	r28, 0x04	; 4
    9750:	d1 05       	cpc	r29, r1
    9752:	7c f3       	brlt	.-34     	; 0x9732 <goToScrewCCW+0x90>
}

//Decrement the screw value (i.e., one counter-clockwise turn)
void decrementCurrScrew(void)
{
	if(curr_screw == 0)
    9754:	80 91 54 13 	lds	r24, 0x1354
    9758:	90 91 55 13 	lds	r25, 0x1355
    975c:	00 97       	sbiw	r24, 0x00	; 0
    975e:	19 f4       	brne	.+6      	; 0x9766 <goToScrewCCW+0xc4>
	{
		curr_screw = 11;
    9760:	8b e0       	ldi	r24, 0x0B	; 11
    9762:	90 e0       	ldi	r25, 0x00	; 0
    9764:	01 c0       	rjmp	.+2      	; 0x9768 <goToScrewCCW+0xc6>
	}
	else
	{
		curr_screw--;
    9766:	01 97       	sbiw	r24, 0x01	; 1
    9768:	90 93 55 13 	sts	0x1355, r25
    976c:	80 93 54 13 	sts	0x1354, r24
		updateRot();
		numMoves++;
	}
	decrementCurrScrew();
	
	if(dataLog==0)
    9770:	80 91 4c 13 	lds	r24, 0x134C
    9774:	90 91 4d 13 	lds	r25, 0x134D
    9778:	89 2b       	or	r24, r25
    977a:	21 f5       	brne	.+72     	; 0x97c4 <goToScrewCCW+0x122>
		fprintf(stdout, "final screw: %u\r\n", curr_screw);
    977c:	00 d0       	rcall	.+0      	; 0x977e <goToScrewCCW+0xdc>
    977e:	00 d0       	rcall	.+0      	; 0x9780 <goToScrewCCW+0xde>
    9780:	00 d0       	rcall	.+0      	; 0x9782 <goToScrewCCW+0xe0>
    9782:	ed b7       	in	r30, 0x3d	; 61
    9784:	fe b7       	in	r31, 0x3e	; 62
    9786:	31 96       	adiw	r30, 0x01	; 1
    9788:	80 91 2f 17 	lds	r24, 0x172F
    978c:	90 91 30 17 	lds	r25, 0x1730
    9790:	ad b7       	in	r26, 0x3d	; 61
    9792:	be b7       	in	r27, 0x3e	; 62
    9794:	12 96       	adiw	r26, 0x02	; 2
    9796:	9c 93       	st	X, r25
    9798:	8e 93       	st	-X, r24
    979a:	11 97       	sbiw	r26, 0x01	; 1
    979c:	8f e7       	ldi	r24, 0x7F	; 127
    979e:	96 e0       	ldi	r25, 0x06	; 6
    97a0:	93 83       	std	Z+3, r25	; 0x03
    97a2:	82 83       	std	Z+2, r24	; 0x02
    97a4:	80 91 54 13 	lds	r24, 0x1354
    97a8:	90 91 55 13 	lds	r25, 0x1355
    97ac:	95 83       	std	Z+5, r25	; 0x05
    97ae:	84 83       	std	Z+4, r24	; 0x04
    97b0:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    97b4:	8d b7       	in	r24, 0x3d	; 61
    97b6:	9e b7       	in	r25, 0x3e	; 62
    97b8:	06 96       	adiw	r24, 0x06	; 6
    97ba:	0f b6       	in	r0, 0x3f	; 63
    97bc:	f8 94       	cli
    97be:	9e bf       	out	0x3e, r25	; 62
    97c0:	0f be       	out	0x3f, r0	; 63
    97c2:	8d bf       	out	0x3d, r24	; 61
}
    97c4:	df 91       	pop	r29
    97c6:	cf 91       	pop	r28
    97c8:	1f 91       	pop	r17
    97ca:	0f 91       	pop	r16
    97cc:	08 95       	ret

000097ce <goToScrewCW>:
	buf[0] = 0x00;   //zero vref
	i2cSendA(TARGET_ADDR, 0, 1, buf);
}

void goToScrewCW(void)
{
    97ce:	0f 93       	push	r16
    97d0:	1f 93       	push	r17
    97d2:	cf 93       	push	r28
    97d4:	df 93       	push	r29
	if(dataLog==0)
    97d6:	80 91 4c 13 	lds	r24, 0x134C
    97da:	90 91 4d 13 	lds	r25, 0x134D
    97de:	89 2b       	or	r24, r25
    97e0:	21 f5       	brne	.+72     	; 0x982a <goToScrewCW+0x5c>
		fprintf(stdout, "starting screw: %u\r\n", curr_screw);
    97e2:	00 d0       	rcall	.+0      	; 0x97e4 <goToScrewCW+0x16>
    97e4:	00 d0       	rcall	.+0      	; 0x97e6 <goToScrewCW+0x18>
    97e6:	00 d0       	rcall	.+0      	; 0x97e8 <goToScrewCW+0x1a>
    97e8:	ed b7       	in	r30, 0x3d	; 61
    97ea:	fe b7       	in	r31, 0x3e	; 62
    97ec:	31 96       	adiw	r30, 0x01	; 1
    97ee:	80 91 2f 17 	lds	r24, 0x172F
    97f2:	90 91 30 17 	lds	r25, 0x1730
    97f6:	ad b7       	in	r26, 0x3d	; 61
    97f8:	be b7       	in	r27, 0x3e	; 62
    97fa:	12 96       	adiw	r26, 0x02	; 2
    97fc:	9c 93       	st	X, r25
    97fe:	8e 93       	st	-X, r24
    9800:	11 97       	sbiw	r26, 0x01	; 1
    9802:	8a e6       	ldi	r24, 0x6A	; 106
    9804:	96 e0       	ldi	r25, 0x06	; 6
    9806:	93 83       	std	Z+3, r25	; 0x03
    9808:	82 83       	std	Z+2, r24	; 0x02
    980a:	80 91 54 13 	lds	r24, 0x1354
    980e:	90 91 55 13 	lds	r25, 0x1355
    9812:	95 83       	std	Z+5, r25	; 0x05
    9814:	84 83       	std	Z+4, r24	; 0x04
    9816:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    981a:	8d b7       	in	r24, 0x3d	; 61
    981c:	9e b7       	in	r25, 0x3e	; 62
    981e:	06 96       	adiw	r24, 0x06	; 6
    9820:	0f b6       	in	r0, 0x3f	; 63
    9822:	f8 94       	cli
    9824:	9e bf       	out	0x3e, r25	; 62
    9826:	0f be       	out	0x3f, r0	; 63
    9828:	8d bf       	out	0x3d, r24	; 61
	{
		goLeft(SCREW_BIG_JUMP);
	}
	else
	{
		goLeft(SCREW_INITIAL_JUMP);
    982a:	8b e4       	ldi	r24, 0x4B	; 75
    982c:	90 e0       	ldi	r25, 0x00	; 0
    982e:	0e 94 9a 40 	call	0x8134	; 0x8134 <goLeft>
	}
	updateRot();
    9832:	0e 94 0b 4b 	call	0x9616	; 0x9616 <updateRot>
	int activeScrewThresh;
	int nextScrew;
	if(curr_screw == 11)
    9836:	80 91 54 13 	lds	r24, 0x1354
    983a:	90 91 55 13 	lds	r25, 0x1355
    983e:	8b 30       	cpi	r24, 0x0B	; 11
    9840:	91 05       	cpc	r25, r1
    9842:	19 f4       	brne	.+6      	; 0x984a <goToScrewCW+0x7c>
    9844:	e0 e0       	ldi	r30, 0x00	; 0
    9846:	f0 e0       	ldi	r31, 0x00	; 0
    9848:	02 c0       	rjmp	.+4      	; 0x984e <goToScrewCW+0x80>
		nextScrew = 0;
	else
		nextScrew = curr_screw+1;
    984a:	fc 01       	movw	r30, r24
    984c:	31 96       	adiw	r30, 0x01	; 1
	if(USE_CUSTOM_SCREW_THRESHOLDS)
		activeScrewThresh = custom_screw_thresholds[nextScrew];
    984e:	ee 0f       	add	r30, r30
    9850:	ff 1f       	adc	r31, r31
    9852:	e3 5c       	subi	r30, 0xC3	; 195
    9854:	fe 4e       	sbci	r31, 0xEE	; 238
    9856:	00 81       	ld	r16, Z
    9858:	11 81       	ldd	r17, Z+1	; 0x01
    985a:	c0 e0       	ldi	r28, 0x00	; 0
    985c:	d0 e0       	ldi	r29, 0x00	; 0
    985e:	07 c0       	rjmp	.+14     	; 0x986e <goToScrewCW+0xa0>
	else
		activeScrewThresh = (BASE_Z + SCREW_THRESHOLD);
	while (raw_z < activeScrewThresh || numMoves < MOVES_THRESHOLD)
	{
		goLeft(SCREW_INCREMENT_TIME);
    9860:	89 e1       	ldi	r24, 0x19	; 25
    9862:	90 e0       	ldi	r25, 0x00	; 0
    9864:	0e 94 9a 40 	call	0x8134	; 0x8134 <goLeft>
		updateRot();
    9868:	0e 94 0b 4b 	call	0x9616	; 0x9616 <updateRot>
		numMoves++;
    986c:	21 96       	adiw	r28, 0x01	; 1
		nextScrew = curr_screw+1;
	if(USE_CUSTOM_SCREW_THRESHOLDS)
		activeScrewThresh = custom_screw_thresholds[nextScrew];
	else
		activeScrewThresh = (BASE_Z + SCREW_THRESHOLD);
	while (raw_z < activeScrewThresh || numMoves < MOVES_THRESHOLD)
    986e:	80 91 5a 13 	lds	r24, 0x135A
    9872:	90 91 5b 13 	lds	r25, 0x135B
    9876:	80 17       	cp	r24, r16
    9878:	91 07       	cpc	r25, r17
    987a:	94 f3       	brlt	.-28     	; 0x9860 <goToScrewCW+0x92>
    987c:	c4 30       	cpi	r28, 0x04	; 4
    987e:	d1 05       	cpc	r29, r1
    9880:	7c f3       	brlt	.-34     	; 0x9860 <goToScrewCW+0x92>
}

//Increment the screw value (i.e., one clockwise turn)
void incrementCurrScrew(void)
{
	if(curr_screw<11)
    9882:	80 91 54 13 	lds	r24, 0x1354
    9886:	90 91 55 13 	lds	r25, 0x1355
    988a:	8b 30       	cpi	r24, 0x0B	; 11
    988c:	91 05       	cpc	r25, r1
    988e:	34 f4       	brge	.+12     	; 0x989c <goToScrewCW+0xce>
	{
		curr_screw++;
    9890:	01 96       	adiw	r24, 0x01	; 1
    9892:	90 93 55 13 	sts	0x1355, r25
    9896:	80 93 54 13 	sts	0x1354, r24
    989a:	04 c0       	rjmp	.+8      	; 0x98a4 <goToScrewCW+0xd6>
	}
	else
	{
		curr_screw = 0;
    989c:	10 92 55 13 	sts	0x1355, r1
    98a0:	10 92 54 13 	sts	0x1354, r1
		updateRot();
		numMoves++;
	}
	incrementCurrScrew();
	
	if(dataLog==0)
    98a4:	80 91 4c 13 	lds	r24, 0x134C
    98a8:	90 91 4d 13 	lds	r25, 0x134D
    98ac:	89 2b       	or	r24, r25
    98ae:	21 f5       	brne	.+72     	; 0x98f8 <goToScrewCW+0x12a>
		fprintf(stdout, "final screw: %u\r\n", curr_screw);
    98b0:	00 d0       	rcall	.+0      	; 0x98b2 <goToScrewCW+0xe4>
    98b2:	00 d0       	rcall	.+0      	; 0x98b4 <goToScrewCW+0xe6>
    98b4:	00 d0       	rcall	.+0      	; 0x98b6 <goToScrewCW+0xe8>
    98b6:	ed b7       	in	r30, 0x3d	; 61
    98b8:	fe b7       	in	r31, 0x3e	; 62
    98ba:	31 96       	adiw	r30, 0x01	; 1
    98bc:	80 91 2f 17 	lds	r24, 0x172F
    98c0:	90 91 30 17 	lds	r25, 0x1730
    98c4:	ad b7       	in	r26, 0x3d	; 61
    98c6:	be b7       	in	r27, 0x3e	; 62
    98c8:	12 96       	adiw	r26, 0x02	; 2
    98ca:	9c 93       	st	X, r25
    98cc:	8e 93       	st	-X, r24
    98ce:	11 97       	sbiw	r26, 0x01	; 1
    98d0:	8f e7       	ldi	r24, 0x7F	; 127
    98d2:	96 e0       	ldi	r25, 0x06	; 6
    98d4:	93 83       	std	Z+3, r25	; 0x03
    98d6:	82 83       	std	Z+2, r24	; 0x02
    98d8:	80 91 54 13 	lds	r24, 0x1354
    98dc:	90 91 55 13 	lds	r25, 0x1355
    98e0:	95 83       	std	Z+5, r25	; 0x05
    98e2:	84 83       	std	Z+4, r24	; 0x04
    98e4:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    98e8:	8d b7       	in	r24, 0x3d	; 61
    98ea:	9e b7       	in	r25, 0x3e	; 62
    98ec:	06 96       	adiw	r24, 0x06	; 6
    98ee:	0f b6       	in	r0, 0x3f	; 63
    98f0:	f8 94       	cli
    98f2:	9e bf       	out	0x3e, r25	; 62
    98f4:	0f be       	out	0x3f, r0	; 63
    98f6:	8d bf       	out	0x3d, r24	; 61
}
    98f8:	df 91       	pop	r29
    98fa:	cf 91       	pop	r28
    98fc:	1f 91       	pop	r17
    98fe:	0f 91       	pop	r16
    9900:	08 95       	ret

00009902 <goToScrew>:
	if(dataLog==0)
		fprintf(stdout, "final screw: %u\r\n", curr_screw);
}

void goToScrew(int screw)
{
    9902:	cf 93       	push	r28
    9904:	df 93       	push	r29
    9906:	ec 01       	movw	r28, r24
	if(dataLog==0)
    9908:	80 91 4c 13 	lds	r24, 0x134C
    990c:	90 91 4d 13 	lds	r25, 0x134D
    9910:	89 2b       	or	r24, r25
    9912:	59 f5       	brne	.+86     	; 0x996a <goToScrew+0x68>
		fprintf(stdout, "on a journey from screw %u to screw %u\r\n", curr_screw, screw);
    9914:	8d b7       	in	r24, 0x3d	; 61
    9916:	9e b7       	in	r25, 0x3e	; 62
    9918:	08 97       	sbiw	r24, 0x08	; 8
    991a:	0f b6       	in	r0, 0x3f	; 63
    991c:	f8 94       	cli
    991e:	9e bf       	out	0x3e, r25	; 62
    9920:	0f be       	out	0x3f, r0	; 63
    9922:	8d bf       	out	0x3d, r24	; 61
    9924:	ed b7       	in	r30, 0x3d	; 61
    9926:	fe b7       	in	r31, 0x3e	; 62
    9928:	31 96       	adiw	r30, 0x01	; 1
    992a:	80 91 2f 17 	lds	r24, 0x172F
    992e:	90 91 30 17 	lds	r25, 0x1730
    9932:	ad b7       	in	r26, 0x3d	; 61
    9934:	be b7       	in	r27, 0x3e	; 62
    9936:	12 96       	adiw	r26, 0x02	; 2
    9938:	9c 93       	st	X, r25
    993a:	8e 93       	st	-X, r24
    993c:	11 97       	sbiw	r26, 0x01	; 1
    993e:	81 e9       	ldi	r24, 0x91	; 145
    9940:	96 e0       	ldi	r25, 0x06	; 6
    9942:	93 83       	std	Z+3, r25	; 0x03
    9944:	82 83       	std	Z+2, r24	; 0x02
    9946:	80 91 54 13 	lds	r24, 0x1354
    994a:	90 91 55 13 	lds	r25, 0x1355
    994e:	95 83       	std	Z+5, r25	; 0x05
    9950:	84 83       	std	Z+4, r24	; 0x04
    9952:	d7 83       	std	Z+7, r29	; 0x07
    9954:	c6 83       	std	Z+6, r28	; 0x06
    9956:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    995a:	8d b7       	in	r24, 0x3d	; 61
    995c:	9e b7       	in	r25, 0x3e	; 62
    995e:	08 96       	adiw	r24, 0x08	; 8
    9960:	0f b6       	in	r0, 0x3f	; 63
    9962:	f8 94       	cli
    9964:	9e bf       	out	0x3e, r25	; 62
    9966:	0f be       	out	0x3f, r0	; 63
    9968:	8d bf       	out	0x3d, r24	; 61
	
	if (screw >=0 && screw < 12)
    996a:	cc 30       	cpi	r28, 0x0C	; 12
    996c:	d1 05       	cpc	r29, r1
    996e:	78 f5       	brcc	.+94     	; 0x99ce <goToScrew+0xcc>
	{
		if (distanceBetweenScrewsCW(curr_screw, screw) < distanceBetweenScrewsCCW(curr_screw, screw))
    9970:	80 91 54 13 	lds	r24, 0x1354
    9974:	90 91 55 13 	lds	r25, 0x1355
}

//Calculates screw distance between two screws via a CW path
int distanceBetweenScrewsCW(int screw1, int screw2)
{
	if(screw2 >= screw1)
    9978:	c8 17       	cp	r28, r24
    997a:	d9 07       	cpc	r29, r25
    997c:	3c f0       	brlt	.+14     	; 0x998c <goToScrew+0x8a>
	{
		return (screw2 - screw1);
    997e:	9e 01       	movw	r18, r28
    9980:	28 1b       	sub	r18, r24
    9982:	39 0b       	sbc	r19, r25
}

//Calculates screw distance between two screws via a CCW path
int distanceBetweenScrewsCCW(int screw1, int screw2)
{
	if(screw2 <= screw1)
    9984:	8c 17       	cp	r24, r28
    9986:	9d 07       	cpc	r25, r29
    9988:	3c f0       	brlt	.+14     	; 0x9998 <goToScrew+0x96>
    998a:	07 c0       	rjmp	.+14     	; 0x999a <goToScrew+0x98>
	{
		return (screw2 - screw1);
	}
	else
	{
		return ((screw2+12)-screw1);
    998c:	9e 01       	movw	r18, r28
    998e:	28 1b       	sub	r18, r24
    9990:	39 0b       	sbc	r19, r25
    9992:	24 5f       	subi	r18, 0xF4	; 244
    9994:	3f 4f       	sbci	r19, 0xFF	; 255
    9996:	01 c0       	rjmp	.+2      	; 0x999a <goToScrew+0x98>
	{
		return (screw1 - screw2);
	}
	else
	{
		return ((screw1+12)-screw2);
    9998:	0c 96       	adiw	r24, 0x0c	; 12
    999a:	8c 1b       	sub	r24, r28
    999c:	9d 0b       	sbc	r25, r29
	if(dataLog==0)
		fprintf(stdout, "on a journey from screw %u to screw %u\r\n", curr_screw, screw);
	
	if (screw >=0 && screw < 12)
	{
		if (distanceBetweenScrewsCW(curr_screw, screw) < distanceBetweenScrewsCCW(curr_screw, screw))
    999e:	28 17       	cp	r18, r24
    99a0:	39 07       	cpc	r19, r25
    99a2:	1c f0       	brlt	.+6      	; 0x99aa <goToScrew+0xa8>
    99a4:	0c c0       	rjmp	.+24     	; 0x99be <goToScrew+0xbc>
		{
			while (curr_screw != screw)
			{
				goToScrewCW();
    99a6:	0e 94 e7 4b 	call	0x97ce	; 0x97ce <goToScrewCW>
	
	if (screw >=0 && screw < 12)
	{
		if (distanceBetweenScrewsCW(curr_screw, screw) < distanceBetweenScrewsCCW(curr_screw, screw))
		{
			while (curr_screw != screw)
    99aa:	80 91 54 13 	lds	r24, 0x1354
    99ae:	90 91 55 13 	lds	r25, 0x1355
    99b2:	8c 17       	cp	r24, r28
    99b4:	9d 07       	cpc	r25, r29
    99b6:	b9 f7       	brne	.-18     	; 0x99a6 <goToScrew+0xa4>
    99b8:	12 c0       	rjmp	.+36     	; 0x99de <goToScrew+0xdc>
		}
		else
		{
			while(curr_screw != screw)
			{
				goToScrewCCW();
    99ba:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <goToScrewCCW>
				goToScrewCW();
			}
		}
		else
		{
			while(curr_screw != screw)
    99be:	80 91 54 13 	lds	r24, 0x1354
    99c2:	90 91 55 13 	lds	r25, 0x1355
    99c6:	8c 17       	cp	r24, r28
    99c8:	9d 07       	cpc	r25, r29
    99ca:	b9 f7       	brne	.-18     	; 0x99ba <goToScrew+0xb8>
    99cc:	08 c0       	rjmp	.+16     	; 0x99de <goToScrew+0xdc>
			}
		}
	}
	else
	{
		fprintf(stdout, "I'm sorry Dave, I'm afraid I can't do that...\r\n");
    99ce:	60 91 2f 17 	lds	r22, 0x172F
    99d2:	70 91 30 17 	lds	r23, 0x1730
    99d6:	80 e5       	ldi	r24, 0x50	; 80
    99d8:	92 e0       	ldi	r25, 0x02	; 2
    99da:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	}
}
    99de:	df 91       	pop	r29
    99e0:	cf 91       	pop	r28
    99e2:	08 95       	ret

000099e4 <goToRot>:

void goToRot(float rot_wanted)
{
    99e4:	ef 92       	push	r14
    99e6:	ff 92       	push	r15
    99e8:	0f 93       	push	r16
    99ea:	1f 93       	push	r17
    99ec:	7b 01       	movw	r14, r22
    99ee:	8c 01       	movw	r16, r24
	
	if ((rot_wanted<=MAX_ROT)&&(rot_wanted>=MIN_ROT))
    99f0:	20 e0       	ldi	r18, 0x00	; 0
    99f2:	30 e0       	ldi	r19, 0x00	; 0
    99f4:	44 eb       	ldi	r20, 0xB4	; 180
    99f6:	52 e4       	ldi	r21, 0x42	; 66
    99f8:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    99fc:	18 16       	cp	r1, r24
    99fe:	8c f0       	brlt	.+34     	; 0x9a22 <goToRot+0x3e>
    9a00:	c8 01       	movw	r24, r16
    9a02:	b7 01       	movw	r22, r14
    9a04:	20 e0       	ldi	r18, 0x00	; 0
    9a06:	30 e0       	ldi	r19, 0x00	; 0
    9a08:	44 eb       	ldi	r20, 0xB4	; 180
    9a0a:	52 ec       	ldi	r21, 0xC2	; 194
    9a0c:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9a10:	88 23       	and	r24, r24
    9a12:	3c f0       	brlt	.+14     	; 0x9a22 <goToRot+0x3e>
	{
		goToScrew(rotToNearestScrew(rot_wanted));
    9a14:	c8 01       	movw	r24, r16
    9a16:	b7 01       	movw	r22, r14
    9a18:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
    9a1c:	0e 94 81 4c 	call	0x9902	; 0x9902 <goToScrew>
    9a20:	08 c0       	rjmp	.+16     	; 0x9a32 <goToRot+0x4e>
			}
		}*/
	}
	else
	{
		fprintf(stdout, "I'm sorry Dave, I'm afraid I can't do that...\r\n");
    9a22:	60 91 2f 17 	lds	r22, 0x172F
    9a26:	70 91 30 17 	lds	r23, 0x1730
    9a2a:	80 e5       	ldi	r24, 0x50	; 80
    9a2c:	92 e0       	ldi	r25, 0x02	; 2
    9a2e:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	}
}
    9a32:	1f 91       	pop	r17
    9a34:	0f 91       	pop	r16
    9a36:	ff 90       	pop	r15
    9a38:	ef 90       	pop	r14
    9a3a:	08 95       	ret

00009a3c <considerMoving>:

// This function is called during automatic mode, and uses acquired data to make
// a decision about whether to move and how

void considerMoving(void)
{
    9a3c:	8f 92       	push	r8
    9a3e:	9f 92       	push	r9
    9a40:	af 92       	push	r10
    9a42:	bf 92       	push	r11
    9a44:	cf 92       	push	r12
    9a46:	df 92       	push	r13
    9a48:	ef 92       	push	r14
    9a4a:	ff 92       	push	r15
    9a4c:	0f 93       	push	r16
    9a4e:	1f 93       	push	r17
    9a50:	cf 93       	push	r28
    9a52:	df 93       	push	r29
	//fprintf(stdout, "considering moving...\r\n");
	if(dataLog==0)
    9a54:	80 91 4c 13 	lds	r24, 0x134C
    9a58:	90 91 4d 13 	lds	r25, 0x134D
    9a5c:	89 2b       	or	r24, r25
    9a5e:	09 f0       	breq	.+2      	; 0x9a62 <considerMoving+0x26>
    9a60:	46 c0       	rjmp	.+140    	; 0x9aee <considerMoving+0xb2>
		fprintf(stdout, "ROTATION -- opt screw %i, curr screw %i, quad adj %f\r\n",opt_screw,curr_screw,(double)getAdjDeg(Lvoltage,Rvoltage));
    9a62:	60 91 97 16 	lds	r22, 0x1697
    9a66:	70 91 98 16 	lds	r23, 0x1698
    9a6a:	80 91 99 16 	lds	r24, 0x1699
    9a6e:	90 91 9a 16 	lds	r25, 0x169A
    9a72:	20 91 c4 16 	lds	r18, 0x16C4
    9a76:	30 91 c5 16 	lds	r19, 0x16C5
    9a7a:	40 91 c6 16 	lds	r20, 0x16C6
    9a7e:	50 91 c7 16 	lds	r21, 0x16C7
    9a82:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9a86:	2d b7       	in	r18, 0x3d	; 61
    9a88:	3e b7       	in	r19, 0x3e	; 62
    9a8a:	2c 50       	subi	r18, 0x0C	; 12
    9a8c:	30 40       	sbci	r19, 0x00	; 0
    9a8e:	0f b6       	in	r0, 0x3f	; 63
    9a90:	f8 94       	cli
    9a92:	3e bf       	out	0x3e, r19	; 62
    9a94:	0f be       	out	0x3f, r0	; 63
    9a96:	2d bf       	out	0x3d, r18	; 61
    9a98:	ed b7       	in	r30, 0x3d	; 61
    9a9a:	fe b7       	in	r31, 0x3e	; 62
    9a9c:	31 96       	adiw	r30, 0x01	; 1
    9a9e:	20 91 2f 17 	lds	r18, 0x172F
    9aa2:	30 91 30 17 	lds	r19, 0x1730
    9aa6:	ad b7       	in	r26, 0x3d	; 61
    9aa8:	be b7       	in	r27, 0x3e	; 62
    9aaa:	12 96       	adiw	r26, 0x02	; 2
    9aac:	3c 93       	st	X, r19
    9aae:	2e 93       	st	-X, r18
    9ab0:	11 97       	sbiw	r26, 0x01	; 1
    9ab2:	2a eb       	ldi	r18, 0xBA	; 186
    9ab4:	36 e0       	ldi	r19, 0x06	; 6
    9ab6:	33 83       	std	Z+3, r19	; 0x03
    9ab8:	22 83       	std	Z+2, r18	; 0x02
    9aba:	20 91 52 13 	lds	r18, 0x1352
    9abe:	30 91 53 13 	lds	r19, 0x1353
    9ac2:	35 83       	std	Z+5, r19	; 0x05
    9ac4:	24 83       	std	Z+4, r18	; 0x04
    9ac6:	20 91 54 13 	lds	r18, 0x1354
    9aca:	30 91 55 13 	lds	r19, 0x1355
    9ace:	37 83       	std	Z+7, r19	; 0x07
    9ad0:	26 83       	std	Z+6, r18	; 0x06
    9ad2:	60 87       	std	Z+8, r22	; 0x08
    9ad4:	71 87       	std	Z+9, r23	; 0x09
    9ad6:	82 87       	std	Z+10, r24	; 0x0a
    9ad8:	93 87       	std	Z+11, r25	; 0x0b
    9ada:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    9ade:	ed b7       	in	r30, 0x3d	; 61
    9ae0:	fe b7       	in	r31, 0x3e	; 62
    9ae2:	3c 96       	adiw	r30, 0x0c	; 12
    9ae4:	0f b6       	in	r0, 0x3f	; 63
    9ae6:	f8 94       	cli
    9ae8:	fe bf       	out	0x3e, r31	; 62
    9aea:	0f be       	out	0x3f, r0	; 63
    9aec:	ed bf       	out	0x3d, r30	; 61
	
	if((opt_screw != curr_screw) && (abs(getAdjDeg(Lvoltage,Rvoltage))>=QUAD_ROT_STAY_THRESHOLD))
    9aee:	c0 91 52 13 	lds	r28, 0x1352
    9af2:	d0 91 53 13 	lds	r29, 0x1353
    9af6:	80 91 54 13 	lds	r24, 0x1354
    9afa:	90 91 55 13 	lds	r25, 0x1355
    9afe:	c8 17       	cp	r28, r24
    9b00:	d9 07       	cpc	r29, r25
    9b02:	b9 f1       	breq	.+110    	; 0x9b72 <considerMoving+0x136>
    9b04:	80 91 97 16 	lds	r24, 0x1697
    9b08:	90 91 98 16 	lds	r25, 0x1698
    9b0c:	a0 91 99 16 	lds	r26, 0x1699
    9b10:	b0 91 9a 16 	lds	r27, 0x169A
    9b14:	80 91 c4 16 	lds	r24, 0x16C4
    9b18:	90 91 c5 16 	lds	r25, 0x16C5
    9b1c:	a0 91 c6 16 	lds	r26, 0x16C6
    9b20:	b0 91 c7 16 	lds	r27, 0x16C7
	{
		if(screwToRot(opt_screw) < MIN_ROT)
    9b24:	ce 01       	movw	r24, r28
    9b26:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <screwToRot>
    9b2a:	7b 01       	movw	r14, r22
    9b2c:	8c 01       	movw	r16, r24
    9b2e:	20 e0       	ldi	r18, 0x00	; 0
    9b30:	30 e0       	ldi	r19, 0x00	; 0
    9b32:	44 eb       	ldi	r20, 0xB4	; 180
    9b34:	52 ec       	ldi	r21, 0xC2	; 194
    9b36:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    9b3a:	88 23       	and	r24, r24
    9b3c:	2c f4       	brge	.+10     	; 0x9b48 <considerMoving+0x10c>
			goToScrew(rotToNearestScrew(MIN_ROT));
    9b3e:	60 e0       	ldi	r22, 0x00	; 0
    9b40:	70 e0       	ldi	r23, 0x00	; 0
    9b42:	84 eb       	ldi	r24, 0xB4	; 180
    9b44:	92 ec       	ldi	r25, 0xC2	; 194
    9b46:	0e c0       	rjmp	.+28     	; 0x9b64 <considerMoving+0x128>
		else if(screwToRot(opt_screw) > MAX_ROT)
    9b48:	c8 01       	movw	r24, r16
    9b4a:	b7 01       	movw	r22, r14
    9b4c:	20 e0       	ldi	r18, 0x00	; 0
    9b4e:	30 e0       	ldi	r19, 0x00	; 0
    9b50:	44 eb       	ldi	r20, 0xB4	; 180
    9b52:	52 e4       	ldi	r21, 0x42	; 66
    9b54:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9b58:	18 16       	cp	r1, r24
    9b5a:	3c f4       	brge	.+14     	; 0x9b6a <considerMoving+0x12e>
			goToScrew(rotToNearestScrew(MAX_ROT));
    9b5c:	60 e0       	ldi	r22, 0x00	; 0
    9b5e:	70 e0       	ldi	r23, 0x00	; 0
    9b60:	84 eb       	ldi	r24, 0xB4	; 180
    9b62:	92 e4       	ldi	r25, 0x42	; 66
    9b64:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
    9b68:	01 c0       	rjmp	.+2      	; 0x9b6c <considerMoving+0x130>
		else
			goToScrew(opt_screw);
    9b6a:	ce 01       	movw	r24, r28
    9b6c:	0e 94 81 4c 	call	0x9902	; 0x9902 <goToScrew>
    9b70:	51 c0       	rjmp	.+162    	; 0x9c14 <considerMoving+0x1d8>
	}
	else if(abs(getAdjDeg(Lvoltage,Rvoltage))>QUAD_ROT_MOVE_THRESHOLD)
    9b72:	60 91 97 16 	lds	r22, 0x1697
    9b76:	70 91 98 16 	lds	r23, 0x1698
    9b7a:	80 91 99 16 	lds	r24, 0x1699
    9b7e:	90 91 9a 16 	lds	r25, 0x169A
    9b82:	20 91 c4 16 	lds	r18, 0x16C4
    9b86:	30 91 c5 16 	lds	r19, 0x16C5
    9b8a:	40 91 c6 16 	lds	r20, 0x16C6
    9b8e:	50 91 c7 16 	lds	r21, 0x16C7
    9b92:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9b96:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9b9a:	cb 01       	movw	r24, r22
    9b9c:	77 ff       	sbrs	r23, 7
    9b9e:	03 c0       	rjmp	.+6      	; 0x9ba6 <considerMoving+0x16a>
    9ba0:	90 95       	com	r25
    9ba2:	81 95       	neg	r24
    9ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ba6:	0b 97       	sbiw	r24, 0x0b	; 11
    9ba8:	ac f1       	brlt	.+106    	; 0x9c14 <considerMoving+0x1d8>
	{
		if(getAdjDeg(Lvoltage,Rvoltage)>0)
    9baa:	60 91 97 16 	lds	r22, 0x1697
    9bae:	70 91 98 16 	lds	r23, 0x1698
    9bb2:	80 91 99 16 	lds	r24, 0x1699
    9bb6:	90 91 9a 16 	lds	r25, 0x169A
    9bba:	20 91 c4 16 	lds	r18, 0x16C4
    9bbe:	30 91 c5 16 	lds	r19, 0x16C5
    9bc2:	40 91 c6 16 	lds	r20, 0x16C6
    9bc6:	50 91 c7 16 	lds	r21, 0x16C7
    9bca:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9bce:	20 e0       	ldi	r18, 0x00	; 0
    9bd0:	30 e0       	ldi	r19, 0x00	; 0
    9bd2:	40 e0       	ldi	r20, 0x00	; 0
    9bd4:	50 e0       	ldi	r21, 0x00	; 0
    9bd6:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9bda:	18 16       	cp	r1, r24
    9bdc:	74 f4       	brge	.+28     	; 0x9bfa <considerMoving+0x1be>
		{
			if(screwToRot(curr_screw)<=(MAX_ROT-ANGLE_BETWEEN_SCREWS))
    9bde:	ce 01       	movw	r24, r28
    9be0:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <screwToRot>
    9be4:	20 e0       	ldi	r18, 0x00	; 0
    9be6:	30 e0       	ldi	r19, 0x00	; 0
    9be8:	40 e7       	ldi	r20, 0x70	; 112
    9bea:	52 e4       	ldi	r21, 0x42	; 66
    9bec:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    9bf0:	18 16       	cp	r1, r24
    9bf2:	84 f0       	brlt	.+32     	; 0x9c14 <considerMoving+0x1d8>
				goToScrewCW();
    9bf4:	0e 94 e7 4b 	call	0x97ce	; 0x97ce <goToScrewCW>
    9bf8:	0d c0       	rjmp	.+26     	; 0x9c14 <considerMoving+0x1d8>
		}
		else
		{
			if(screwToRot(curr_screw)>=(MIN_ROT+ANGLE_BETWEEN_SCREWS))
    9bfa:	ce 01       	movw	r24, r28
    9bfc:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <screwToRot>
    9c00:	20 e0       	ldi	r18, 0x00	; 0
    9c02:	30 e0       	ldi	r19, 0x00	; 0
    9c04:	40 e7       	ldi	r20, 0x70	; 112
    9c06:	52 ec       	ldi	r21, 0xC2	; 194
    9c08:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9c0c:	88 23       	and	r24, r24
    9c0e:	14 f0       	brlt	.+4      	; 0x9c14 <considerMoving+0x1d8>
				goToScrewCCW();
    9c10:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <goToScrewCCW>
		}
	}

	if(dataLog==0)
    9c14:	80 91 4c 13 	lds	r24, 0x134C
    9c18:	90 91 4d 13 	lds	r25, 0x134D
    9c1c:	89 2b       	or	r24, r25
    9c1e:	09 f0       	breq	.+2      	; 0x9c22 <considerMoving+0x1e6>
    9c20:	69 c0       	rjmp	.+210    	; 0x9cf4 <considerMoving+0x2b8>
		fprintf(stdout, "ANGLE -- opt angle %f, curr angle %i, quad adj %f\r\n",opt_angle,accelToAngle(curr_accel),(double)getAdjDeg(Dvoltage,Uvoltage));
    9c22:	c0 90 7f 16 	lds	r12, 0x167F
    9c26:	d0 90 80 16 	lds	r13, 0x1680
    9c2a:	e0 90 81 16 	lds	r14, 0x1681
    9c2e:	f0 90 82 16 	lds	r15, 0x1682
    9c32:	60 91 9b 16 	lds	r22, 0x169B
    9c36:	70 91 9c 16 	lds	r23, 0x169C
    9c3a:	80 91 9d 16 	lds	r24, 0x169D
    9c3e:	90 91 9e 16 	lds	r25, 0x169E
    9c42:	20 91 93 16 	lds	r18, 0x1693
    9c46:	30 91 94 16 	lds	r19, 0x1694
    9c4a:	40 91 95 16 	lds	r20, 0x1695
    9c4e:	50 91 96 16 	lds	r21, 0x1696
    9c52:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9c56:	4b 01       	movw	r8, r22
    9c58:	5c 01       	movw	r10, r24
    9c5a:	2d b7       	in	r18, 0x3d	; 61
    9c5c:	3e b7       	in	r19, 0x3e	; 62
    9c5e:	2e 50       	subi	r18, 0x0E	; 14
    9c60:	30 40       	sbci	r19, 0x00	; 0
    9c62:	0f b6       	in	r0, 0x3f	; 63
    9c64:	f8 94       	cli
    9c66:	3e bf       	out	0x3e, r19	; 62
    9c68:	0f be       	out	0x3f, r0	; 63
    9c6a:	2d bf       	out	0x3d, r18	; 61
    9c6c:	0d b7       	in	r16, 0x3d	; 61
    9c6e:	1e b7       	in	r17, 0x3e	; 62
    9c70:	0f 5f       	subi	r16, 0xFF	; 255
    9c72:	1f 4f       	sbci	r17, 0xFF	; 255
    9c74:	80 91 2f 17 	lds	r24, 0x172F
    9c78:	90 91 30 17 	lds	r25, 0x1730
    9c7c:	ad b7       	in	r26, 0x3d	; 61
    9c7e:	be b7       	in	r27, 0x3e	; 62
    9c80:	12 96       	adiw	r26, 0x02	; 2
    9c82:	9c 93       	st	X, r25
    9c84:	8e 93       	st	-X, r24
    9c86:	11 97       	sbiw	r26, 0x01	; 1
    9c88:	81 ef       	ldi	r24, 0xF1	; 241
    9c8a:	96 e0       	ldi	r25, 0x06	; 6
    9c8c:	f8 01       	movw	r30, r16
    9c8e:	93 83       	std	Z+3, r25	; 0x03
    9c90:	82 83       	std	Z+2, r24	; 0x02
    9c92:	80 91 39 11 	lds	r24, 0x1139
    9c96:	90 91 3a 11 	lds	r25, 0x113A
    9c9a:	a0 91 3b 11 	lds	r26, 0x113B
    9c9e:	b0 91 3c 11 	lds	r27, 0x113C
    9ca2:	84 83       	std	Z+4, r24	; 0x04
    9ca4:	95 83       	std	Z+5, r25	; 0x05
    9ca6:	a6 83       	std	Z+6, r26	; 0x06
    9ca8:	b7 83       	std	Z+7, r27	; 0x07
    9caa:	c7 01       	movw	r24, r14
    9cac:	b6 01       	movw	r22, r12
    9cae:	2d e1       	ldi	r18, 0x1D	; 29
    9cb0:	38 e3       	ldi	r19, 0x38	; 56
    9cb2:	47 ee       	ldi	r20, 0xE7	; 231
    9cb4:	5e eb       	ldi	r21, 0xBE	; 190
    9cb6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    9cba:	2c e5       	ldi	r18, 0x5C	; 92
    9cbc:	3f e8       	ldi	r19, 0x8F	; 143
    9cbe:	4c e5       	ldi	r20, 0x5C	; 92
    9cc0:	53 e4       	ldi	r21, 0x43	; 67
    9cc2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    9cc6:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9cca:	d8 01       	movw	r26, r16
    9ccc:	19 96       	adiw	r26, 0x09	; 9
    9cce:	7c 93       	st	X, r23
    9cd0:	6e 93       	st	-X, r22
    9cd2:	18 97       	sbiw	r26, 0x08	; 8
    9cd4:	f8 01       	movw	r30, r16
    9cd6:	82 86       	std	Z+10, r8	; 0x0a
    9cd8:	93 86       	std	Z+11, r9	; 0x0b
    9cda:	a4 86       	std	Z+12, r10	; 0x0c
    9cdc:	b5 86       	std	Z+13, r11	; 0x0d
    9cde:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    9ce2:	2d b7       	in	r18, 0x3d	; 61
    9ce4:	3e b7       	in	r19, 0x3e	; 62
    9ce6:	22 5f       	subi	r18, 0xF2	; 242
    9ce8:	3f 4f       	sbci	r19, 0xFF	; 255
    9cea:	0f b6       	in	r0, 0x3f	; 63
    9cec:	f8 94       	cli
    9cee:	3e bf       	out	0x3e, r19	; 62
    9cf0:	0f be       	out	0x3f, r0	; 63
    9cf2:	2d bf       	out	0x3d, r18	; 61
	
	if((abs(opt_angle-accelToAngle(curr_accel))>OPT_ANGLE_MOVE_THRESHOLD) && (abs(getAdjDeg(Dvoltage,Uvoltage))>QUAD_ANGLE_STAY_THRESHOLD))
    9cf4:	e0 90 39 11 	lds	r14, 0x1139
    9cf8:	f0 90 3a 11 	lds	r15, 0x113A
    9cfc:	00 91 3b 11 	lds	r16, 0x113B
    9d00:	10 91 3c 11 	lds	r17, 0x113C
    9d04:	60 91 7f 16 	lds	r22, 0x167F
    9d08:	70 91 80 16 	lds	r23, 0x1680
    9d0c:	80 91 81 16 	lds	r24, 0x1681
    9d10:	90 91 82 16 	lds	r25, 0x1682
    9d14:	2d e1       	ldi	r18, 0x1D	; 29
    9d16:	38 e3       	ldi	r19, 0x38	; 56
    9d18:	47 ee       	ldi	r20, 0xE7	; 231
    9d1a:	5e eb       	ldi	r21, 0xBE	; 190
    9d1c:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    9d20:	2c e5       	ldi	r18, 0x5C	; 92
    9d22:	3f e8       	ldi	r19, 0x8F	; 143
    9d24:	4c e5       	ldi	r20, 0x5C	; 92
    9d26:	53 e4       	ldi	r21, 0x43	; 67
    9d28:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    9d2c:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9d30:	88 27       	eor	r24, r24
    9d32:	77 fd       	sbrc	r23, 7
    9d34:	80 95       	com	r24
    9d36:	98 2f       	mov	r25, r24
    9d38:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    9d3c:	9b 01       	movw	r18, r22
    9d3e:	ac 01       	movw	r20, r24
    9d40:	c8 01       	movw	r24, r16
    9d42:	b7 01       	movw	r22, r14
    9d44:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    9d48:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9d4c:	cb 01       	movw	r24, r22
    9d4e:	77 ff       	sbrs	r23, 7
    9d50:	03 c0       	rjmp	.+6      	; 0x9d58 <considerMoving+0x31c>
    9d52:	90 95       	com	r25
    9d54:	81 95       	neg	r24
    9d56:	9f 4f       	sbci	r25, 0xFF	; 255
    9d58:	03 97       	sbiw	r24, 0x03	; 3
    9d5a:	cc f1       	brlt	.+114    	; 0x9dce <considerMoving+0x392>
    9d5c:	60 91 9b 16 	lds	r22, 0x169B
    9d60:	70 91 9c 16 	lds	r23, 0x169C
    9d64:	80 91 9d 16 	lds	r24, 0x169D
    9d68:	90 91 9e 16 	lds	r25, 0x169E
    9d6c:	20 91 93 16 	lds	r18, 0x1693
    9d70:	30 91 94 16 	lds	r19, 0x1694
    9d74:	40 91 95 16 	lds	r20, 0x1695
    9d78:	50 91 96 16 	lds	r21, 0x1696
    9d7c:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9d80:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9d84:	67 2b       	or	r22, r23
    9d86:	19 f1       	breq	.+70     	; 0x9dce <considerMoving+0x392>
	{
		if(opt_angle < MIN_ANGLE)
    9d88:	c8 01       	movw	r24, r16
    9d8a:	b7 01       	movw	r22, r14
    9d8c:	20 e0       	ldi	r18, 0x00	; 0
    9d8e:	30 e0       	ldi	r19, 0x00	; 0
    9d90:	40 ef       	ldi	r20, 0xF0	; 240
    9d92:	51 e4       	ldi	r21, 0x41	; 65
    9d94:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    9d98:	88 23       	and	r24, r24
    9d9a:	1c f4       	brge	.+6      	; 0x9da2 <considerMoving+0x366>
			goToAngle(MIN_ANGLE);
    9d9c:	8e e1       	ldi	r24, 0x1E	; 30
    9d9e:	90 e0       	ldi	r25, 0x00	; 0
    9da0:	13 c0       	rjmp	.+38     	; 0x9dc8 <considerMoving+0x38c>
		else if(opt_angle > MAX_ANGLE)
    9da2:	c8 01       	movw	r24, r16
    9da4:	b7 01       	movw	r22, r14
    9da6:	20 e0       	ldi	r18, 0x00	; 0
    9da8:	30 e0       	ldi	r19, 0x00	; 0
    9daa:	40 e5       	ldi	r20, 0x50	; 80
    9dac:	52 e4       	ldi	r21, 0x42	; 66
    9dae:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9db2:	18 16       	cp	r1, r24
    9db4:	1c f4       	brge	.+6      	; 0x9dbc <considerMoving+0x380>
			goToAngle(MAX_ANGLE);
    9db6:	84 e3       	ldi	r24, 0x34	; 52
    9db8:	90 e0       	ldi	r25, 0x00	; 0
    9dba:	06 c0       	rjmp	.+12     	; 0x9dc8 <considerMoving+0x38c>
		else
			goToAngle(opt_angle);
    9dbc:	c8 01       	movw	r24, r16
    9dbe:	b7 01       	movw	r22, r14
    9dc0:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9dc4:	dc 01       	movw	r26, r24
    9dc6:	cb 01       	movw	r24, r22
    9dc8:	0e 94 83 41 	call	0x8306	; 0x8306 <goToAngle>
    9dcc:	3f c0       	rjmp	.+126    	; 0x9e4c <considerMoving+0x410>
	}
	else if(abs(getAdjDeg(Dvoltage,Uvoltage))>QUAD_ANGLE_MOVE_THRESHOLD)
    9dce:	60 91 9b 16 	lds	r22, 0x169B
    9dd2:	70 91 9c 16 	lds	r23, 0x169C
    9dd6:	80 91 9d 16 	lds	r24, 0x169D
    9dda:	90 91 9e 16 	lds	r25, 0x169E
    9dde:	20 91 93 16 	lds	r18, 0x1693
    9de2:	30 91 94 16 	lds	r19, 0x1694
    9de6:	40 91 95 16 	lds	r20, 0x1695
    9dea:	50 91 96 16 	lds	r21, 0x1696
    9dee:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9df2:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    9df6:	cb 01       	movw	r24, r22
    9df8:	77 ff       	sbrs	r23, 7
    9dfa:	03 c0       	rjmp	.+6      	; 0x9e02 <considerMoving+0x3c6>
    9dfc:	90 95       	com	r25
    9dfe:	81 95       	neg	r24
    9e00:	9f 4f       	sbci	r25, 0xFF	; 255
    9e02:	05 97       	sbiw	r24, 0x05	; 5
    9e04:	1c f1       	brlt	.+70     	; 0x9e4c <considerMoving+0x410>
	{
		if(getAdjDeg(Dvoltage,Uvoltage)>0)
    9e06:	60 91 9b 16 	lds	r22, 0x169B
    9e0a:	70 91 9c 16 	lds	r23, 0x169C
    9e0e:	80 91 9d 16 	lds	r24, 0x169D
    9e12:	90 91 9e 16 	lds	r25, 0x169E
    9e16:	20 91 93 16 	lds	r18, 0x1693
    9e1a:	30 91 94 16 	lds	r19, 0x1694
    9e1e:	40 91 95 16 	lds	r20, 0x1695
    9e22:	50 91 96 16 	lds	r21, 0x1696
    9e26:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    9e2a:	20 e0       	ldi	r18, 0x00	; 0
    9e2c:	30 e0       	ldi	r19, 0x00	; 0
    9e2e:	40 e0       	ldi	r20, 0x00	; 0
    9e30:	50 e0       	ldi	r21, 0x00	; 0
    9e32:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    9e36:	18 16       	cp	r1, r24
    9e38:	2c f4       	brge	.+10     	; 0x9e44 <considerMoving+0x408>
			goUp(QUAD_ANGLE_INC_ADJUST);
    9e3a:	88 ee       	ldi	r24, 0xE8	; 232
    9e3c:	93 e0       	ldi	r25, 0x03	; 3
    9e3e:	0e 94 e7 40 	call	0x81ce	; 0x81ce <goUp>
    9e42:	04 c0       	rjmp	.+8      	; 0x9e4c <considerMoving+0x410>
		else
			goDown(QUAD_ANGLE_INC_ADJUST);
    9e44:	88 ee       	ldi	r24, 0xE8	; 232
    9e46:	93 e0       	ldi	r25, 0x03	; 3
    9e48:	0e 94 35 41 	call	0x826a	; 0x826a <goDown>
	}
}
    9e4c:	df 91       	pop	r29
    9e4e:	cf 91       	pop	r28
    9e50:	1f 91       	pop	r17
    9e52:	0f 91       	pop	r16
    9e54:	ff 90       	pop	r15
    9e56:	ef 90       	pop	r14
    9e58:	df 90       	pop	r13
    9e5a:	cf 90       	pop	r12
    9e5c:	bf 90       	pop	r11
    9e5e:	af 90       	pop	r10
    9e60:	9f 90       	pop	r9
    9e62:	8f 90       	pop	r8
    9e64:	08 95       	ret

00009e66 <gprmc_callout>:
            );
}

/** called when a gprmc message is received and parsed */
static void gprmc_callout(nmeap_context_t *context,void *data,void *user_data)
{
    9e66:	0f 93       	push	r16
    9e68:	1f 93       	push	r17
    9e6a:	cf 93       	push	r28
    9e6c:	df 93       	push	r29
    nmeap_rmc_t *rmc = (nmeap_rmc_t *)data;
    if(dataLog==0)
    9e6e:	80 91 4c 13 	lds	r24, 0x134C
    9e72:	90 91 4d 13 	lds	r25, 0x134D
    9e76:	89 2b       	or	r24, r25
    9e78:	09 f0       	breq	.+2      	; 0x9e7c <gprmc_callout+0x16>
    9e7a:	5e c0       	rjmp	.+188    	; 0x9f38 <gprmc_callout+0xd2>
}

/** called when a gprmc message is received and parsed */
static void gprmc_callout(nmeap_context_t *context,void *data,void *user_data)
{
    nmeap_rmc_t *rmc = (nmeap_rmc_t *)data;
    9e7c:	8b 01       	movw	r16, r22
    if(dataLog==0)
	{
    	printf("-------------callout\n");
    9e7e:	85 e2       	ldi	r24, 0x25	; 37
    9e80:	97 e0       	ldi	r25, 0x07	; 7
    9e82:	0e 94 d1 68 	call	0xd1a2	; 0xd1a2 <puts>


/** do something with the RMC data */
static void print_rmc(nmeap_rmc_t *rmc)
{
    printf("found GPRMC Message %lu %c %.6f %.6f %f %f %lu %f\n",
    9e86:	8d b7       	in	r24, 0x3d	; 61
    9e88:	9e b7       	in	r25, 0x3e	; 62
    9e8a:	80 97       	sbiw	r24, 0x20	; 32
    9e8c:	0f b6       	in	r0, 0x3f	; 63
    9e8e:	f8 94       	cli
    9e90:	9e bf       	out	0x3e, r25	; 62
    9e92:	0f be       	out	0x3f, r0	; 63
    9e94:	8d bf       	out	0x3d, r24	; 61
    9e96:	ed b7       	in	r30, 0x3d	; 61
    9e98:	fe b7       	in	r31, 0x3e	; 62
    9e9a:	31 96       	adiw	r30, 0x01	; 1
    9e9c:	8a e3       	ldi	r24, 0x3A	; 58
    9e9e:	97 e0       	ldi	r25, 0x07	; 7
    9ea0:	ad b7       	in	r26, 0x3d	; 61
    9ea2:	be b7       	in	r27, 0x3e	; 62
    9ea4:	12 96       	adiw	r26, 0x02	; 2
    9ea6:	9c 93       	st	X, r25
    9ea8:	8e 93       	st	-X, r24
    9eaa:	11 97       	sbiw	r26, 0x01	; 1
    9eac:	e8 01       	movw	r28, r16
    9eae:	88 81       	ld	r24, Y
    9eb0:	99 81       	ldd	r25, Y+1	; 0x01
    9eb2:	aa 81       	ldd	r26, Y+2	; 0x02
    9eb4:	bb 81       	ldd	r27, Y+3	; 0x03
    9eb6:	82 83       	std	Z+2, r24	; 0x02
    9eb8:	93 83       	std	Z+3, r25	; 0x03
    9eba:	a4 83       	std	Z+4, r26	; 0x04
    9ebc:	b5 83       	std	Z+5, r27	; 0x05
    9ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    9ec0:	86 83       	std	Z+6, r24	; 0x06
    9ec2:	17 82       	std	Z+7, r1	; 0x07
    9ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    9ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    9ec8:	af 81       	ldd	r26, Y+7	; 0x07
    9eca:	b8 85       	ldd	r27, Y+8	; 0x08
    9ecc:	80 87       	std	Z+8, r24	; 0x08
    9ece:	91 87       	std	Z+9, r25	; 0x09
    9ed0:	a2 87       	std	Z+10, r26	; 0x0a
    9ed2:	b3 87       	std	Z+11, r27	; 0x0b
    9ed4:	89 85       	ldd	r24, Y+9	; 0x09
    9ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9ed8:	ab 85       	ldd	r26, Y+11	; 0x0b
    9eda:	bc 85       	ldd	r27, Y+12	; 0x0c
    9edc:	84 87       	std	Z+12, r24	; 0x0c
    9ede:	95 87       	std	Z+13, r25	; 0x0d
    9ee0:	a6 87       	std	Z+14, r26	; 0x0e
    9ee2:	b7 87       	std	Z+15, r27	; 0x0f
    9ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
    9ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
    9ee8:	af 85       	ldd	r26, Y+15	; 0x0f
    9eea:	b8 89       	ldd	r27, Y+16	; 0x10
    9eec:	80 8b       	std	Z+16, r24	; 0x10
    9eee:	91 8b       	std	Z+17, r25	; 0x11
    9ef0:	a2 8b       	std	Z+18, r26	; 0x12
    9ef2:	b3 8b       	std	Z+19, r27	; 0x13
    9ef4:	89 89       	ldd	r24, Y+17	; 0x11
    9ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    9ef8:	ab 89       	ldd	r26, Y+19	; 0x13
    9efa:	bc 89       	ldd	r27, Y+20	; 0x14
    9efc:	84 8b       	std	Z+20, r24	; 0x14
    9efe:	95 8b       	std	Z+21, r25	; 0x15
    9f00:	a6 8b       	std	Z+22, r26	; 0x16
    9f02:	b7 8b       	std	Z+23, r27	; 0x17
    9f04:	8d 89       	ldd	r24, Y+21	; 0x15
    9f06:	9e 89       	ldd	r25, Y+22	; 0x16
    9f08:	af 89       	ldd	r26, Y+23	; 0x17
    9f0a:	b8 8d       	ldd	r27, Y+24	; 0x18
    9f0c:	80 8f       	std	Z+24, r24	; 0x18
    9f0e:	91 8f       	std	Z+25, r25	; 0x19
    9f10:	a2 8f       	std	Z+26, r26	; 0x1a
    9f12:	b3 8f       	std	Z+27, r27	; 0x1b
    9f14:	89 8d       	ldd	r24, Y+25	; 0x19
    9f16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f18:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f1a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f1c:	84 8f       	std	Z+28, r24	; 0x1c
    9f1e:	95 8f       	std	Z+29, r25	; 0x1d
    9f20:	a6 8f       	std	Z+30, r26	; 0x1e
    9f22:	b7 8f       	std	Z+31, r27	; 0x1f
    9f24:	0e 94 bf 68 	call	0xd17e	; 0xd17e <printf>
    9f28:	8d b7       	in	r24, 0x3d	; 61
    9f2a:	9e b7       	in	r25, 0x3e	; 62
    9f2c:	80 96       	adiw	r24, 0x20	; 32
    9f2e:	0f b6       	in	r0, 0x3f	; 63
    9f30:	f8 94       	cli
    9f32:	9e bf       	out	0x3e, r25	; 62
    9f34:	0f be       	out	0x3f, r0	; 63
    9f36:	8d bf       	out	0x3d, r24	; 61
    if(dataLog==0)
	{
    	printf("-------------callout\n");
    	print_rmc(rmc);
	}
}
    9f38:	df 91       	pop	r29
    9f3a:	cf 91       	pop	r28
    9f3c:	1f 91       	pop	r17
    9f3e:	0f 91       	pop	r16
    9f40:	08 95       	ret

00009f42 <gpgga_callout>:
	return gga->satellites;
}

/** called when a gpgga message is received and parsed */
static void gpgga_callout(nmeap_context_t *context,void *data,void *user_data)
{
    9f42:	0f 93       	push	r16
    9f44:	1f 93       	push	r17
    9f46:	cf 93       	push	r28
    9f48:	df 93       	push	r29
    nmeap_gga_t *gga = (nmeap_gga_t *)data;
    
	if(dataLog == 0)
    9f4a:	80 91 4c 13 	lds	r24, 0x134C
    9f4e:	90 91 4d 13 	lds	r25, 0x134D
    9f52:	89 2b       	or	r24, r25
    9f54:	09 f0       	breq	.+2      	; 0x9f58 <gpgga_callout+0x16>
    9f56:	5b c0       	rjmp	.+182    	; 0xa00e <gpgga_callout+0xcc>
}

/** called when a gpgga message is received and parsed */
static void gpgga_callout(nmeap_context_t *context,void *data,void *user_data)
{
    nmeap_gga_t *gga = (nmeap_gga_t *)data;
    9f58:	8b 01       	movw	r16, r22
    
	if(dataLog == 0)
	{
	    printf("-------------callout\n");
    9f5a:	85 e2       	ldi	r24, 0x25	; 37
    9f5c:	97 e0       	ldi	r25, 0x07	; 7
    9f5e:	0e 94 d1 68 	call	0xd1a2	; 0xd1a2 <puts>


/** do something with the GGA data */
static void print_gga(nmeap_gga_t *gga)
{
    printf("found GPGGA message %.6f %.6f %.0f %lu %d %d %f %f\n",
    9f62:	8d b7       	in	r24, 0x3d	; 61
    9f64:	9e b7       	in	r25, 0x3e	; 62
    9f66:	4e 97       	sbiw	r24, 0x1e	; 30
    9f68:	0f b6       	in	r0, 0x3f	; 63
    9f6a:	f8 94       	cli
    9f6c:	9e bf       	out	0x3e, r25	; 62
    9f6e:	0f be       	out	0x3f, r0	; 63
    9f70:	8d bf       	out	0x3d, r24	; 61
    9f72:	ed b7       	in	r30, 0x3d	; 61
    9f74:	fe b7       	in	r31, 0x3e	; 62
    9f76:	31 96       	adiw	r30, 0x01	; 1
    9f78:	8d e6       	ldi	r24, 0x6D	; 109
    9f7a:	97 e0       	ldi	r25, 0x07	; 7
    9f7c:	ad b7       	in	r26, 0x3d	; 61
    9f7e:	be b7       	in	r27, 0x3e	; 62
    9f80:	12 96       	adiw	r26, 0x02	; 2
    9f82:	9c 93       	st	X, r25
    9f84:	8e 93       	st	-X, r24
    9f86:	11 97       	sbiw	r26, 0x01	; 1
    9f88:	e8 01       	movw	r28, r16
    9f8a:	88 81       	ld	r24, Y
    9f8c:	99 81       	ldd	r25, Y+1	; 0x01
    9f8e:	aa 81       	ldd	r26, Y+2	; 0x02
    9f90:	bb 81       	ldd	r27, Y+3	; 0x03
    9f92:	82 83       	std	Z+2, r24	; 0x02
    9f94:	93 83       	std	Z+3, r25	; 0x03
    9f96:	a4 83       	std	Z+4, r26	; 0x04
    9f98:	b5 83       	std	Z+5, r27	; 0x05
    9f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    9f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    9f9e:	ae 81       	ldd	r26, Y+6	; 0x06
    9fa0:	bf 81       	ldd	r27, Y+7	; 0x07
    9fa2:	86 83       	std	Z+6, r24	; 0x06
    9fa4:	97 83       	std	Z+7, r25	; 0x07
    9fa6:	a0 87       	std	Z+8, r26	; 0x08
    9fa8:	b1 87       	std	Z+9, r27	; 0x09
    9faa:	88 85       	ldd	r24, Y+8	; 0x08
    9fac:	99 85       	ldd	r25, Y+9	; 0x09
    9fae:	aa 85       	ldd	r26, Y+10	; 0x0a
    9fb0:	bb 85       	ldd	r27, Y+11	; 0x0b
    9fb2:	82 87       	std	Z+10, r24	; 0x0a
    9fb4:	93 87       	std	Z+11, r25	; 0x0b
    9fb6:	a4 87       	std	Z+12, r26	; 0x0c
    9fb8:	b5 87       	std	Z+13, r27	; 0x0d
    9fba:	8c 85       	ldd	r24, Y+12	; 0x0c
    9fbc:	9d 85       	ldd	r25, Y+13	; 0x0d
    9fbe:	ae 85       	ldd	r26, Y+14	; 0x0e
    9fc0:	bf 85       	ldd	r27, Y+15	; 0x0f
    9fc2:	86 87       	std	Z+14, r24	; 0x0e
    9fc4:	97 87       	std	Z+15, r25	; 0x0f
    9fc6:	a0 8b       	std	Z+16, r26	; 0x10
    9fc8:	b1 8b       	std	Z+17, r27	; 0x11
    9fca:	88 89       	ldd	r24, Y+16	; 0x10
    9fcc:	99 89       	ldd	r25, Y+17	; 0x11
    9fce:	93 8b       	std	Z+19, r25	; 0x13
    9fd0:	82 8b       	std	Z+18, r24	; 0x12
    9fd2:	8a 89       	ldd	r24, Y+18	; 0x12
    9fd4:	9b 89       	ldd	r25, Y+19	; 0x13
    9fd6:	95 8b       	std	Z+21, r25	; 0x15
    9fd8:	84 8b       	std	Z+20, r24	; 0x14
    9fda:	8c 89       	ldd	r24, Y+20	; 0x14
    9fdc:	9d 89       	ldd	r25, Y+21	; 0x15
    9fde:	ae 89       	ldd	r26, Y+22	; 0x16
    9fe0:	bf 89       	ldd	r27, Y+23	; 0x17
    9fe2:	86 8b       	std	Z+22, r24	; 0x16
    9fe4:	97 8b       	std	Z+23, r25	; 0x17
    9fe6:	a0 8f       	std	Z+24, r26	; 0x18
    9fe8:	b1 8f       	std	Z+25, r27	; 0x19
    9fea:	88 8d       	ldd	r24, Y+24	; 0x18
    9fec:	99 8d       	ldd	r25, Y+25	; 0x19
    9fee:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9ff0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9ff2:	82 8f       	std	Z+26, r24	; 0x1a
    9ff4:	93 8f       	std	Z+27, r25	; 0x1b
    9ff6:	a4 8f       	std	Z+28, r26	; 0x1c
    9ff8:	b5 8f       	std	Z+29, r27	; 0x1d
    9ffa:	0e 94 bf 68 	call	0xd17e	; 0xd17e <printf>
    9ffe:	8d b7       	in	r24, 0x3d	; 61
    a000:	9e b7       	in	r25, 0x3e	; 62
    a002:	4e 96       	adiw	r24, 0x1e	; 30
    a004:	0f b6       	in	r0, 0x3f	; 63
    a006:	f8 94       	cli
    a008:	9e bf       	out	0x3e, r25	; 62
    a00a:	0f be       	out	0x3f, r0	; 63
    a00c:	8d bf       	out	0x3d, r24	; 61
	if(dataLog == 0)
	{
	    printf("-------------callout\n");
	    print_gga(gga);
	}
}
    a00e:	df 91       	pop	r29
    a010:	cf 91       	pop	r28
    a012:	1f 91       	pop	r17
    a014:	0f 91       	pop	r16
    a016:	08 95       	ret

0000a018 <formatDate>:
	}

}

void formatDate(void)
{
    a018:	df 93       	push	r29
    a01a:	cf 93       	push	r28
    a01c:	cd b7       	in	r28, 0x3d	; 61
    a01e:	de b7       	in	r29, 0x3e	; 62
    a020:	2a 97       	sbiw	r28, 0x0a	; 10
    a022:	0f b6       	in	r0, 0x3f	; 63
    a024:	f8 94       	cli
    a026:	de bf       	out	0x3e, r29	; 62
    a028:	0f be       	out	0x3f, r0	; 63
    a02a:	cd bf       	out	0x3d, r28	; 61

	char yearBuff[4];
	char monthBuff[3];
	char dayBuff[3];

	itoa(UTC_year, yearBuff, 10);
    a02c:	80 91 5f 11 	lds	r24, 0x115F
    a030:	90 91 60 11 	lds	r25, 0x1160
    a034:	be 01       	movw	r22, r28
    a036:	69 5f       	subi	r22, 0xF9	; 249
    a038:	7f 4f       	sbci	r23, 0xFF	; 255
    a03a:	4a e0       	ldi	r20, 0x0A	; 10
    a03c:	50 e0       	ldi	r21, 0x00	; 0
    a03e:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>
	itoa(UTC_month, monthBuff, 10);
    a042:	80 91 5b 11 	lds	r24, 0x115B
    a046:	90 91 5c 11 	lds	r25, 0x115C
    a04a:	be 01       	movw	r22, r28
    a04c:	6f 5f       	subi	r22, 0xFF	; 255
    a04e:	7f 4f       	sbci	r23, 0xFF	; 255
    a050:	4a e0       	ldi	r20, 0x0A	; 10
    a052:	50 e0       	ldi	r21, 0x00	; 0
    a054:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>
	itoa(UTC_day, dayBuff, 10);
    a058:	80 91 5d 11 	lds	r24, 0x115D
    a05c:	90 91 5e 11 	lds	r25, 0x115E
    a060:	be 01       	movw	r22, r28
    a062:	6c 5f       	subi	r22, 0xFC	; 252
    a064:	7f 4f       	sbci	r23, 0xFF	; 255
    a066:	4a e0       	ldi	r20, 0x0A	; 10
    a068:	50 e0       	ldi	r21, 0x00	; 0
    a06a:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>

	fmtDateString[4] = yearBuff[2];
    a06e:	89 85       	ldd	r24, Y+9	; 0x09
    a070:	80 93 26 17 	sts	0x1726, r24
	fmtDateString[5] = yearBuff[3];
    a074:	8a 85       	ldd	r24, Y+10	; 0x0a
    a076:	80 93 27 17 	sts	0x1727, r24

	if (UTC_month < 10)
    a07a:	80 91 5b 11 	lds	r24, 0x115B
    a07e:	90 91 5c 11 	lds	r25, 0x115C
    a082:	29 81       	ldd	r18, Y+1	; 0x01
    a084:	0a 97       	sbiw	r24, 0x0a	; 10
    a086:	34 f4       	brge	.+12     	; 0xa094 <formatDate+0x7c>
	{
		fmtDateString[0] = '0';
    a088:	80 e3       	ldi	r24, 0x30	; 48
    a08a:	80 93 22 17 	sts	0x1722, r24
		fmtDateString[1] = monthBuff[0];
    a08e:	20 93 23 17 	sts	0x1723, r18
    a092:	05 c0       	rjmp	.+10     	; 0xa09e <formatDate+0x86>
	}
	else
	{
		fmtDateString[0] = monthBuff[0];
    a094:	20 93 22 17 	sts	0x1722, r18
		fmtDateString[1] = monthBuff[1];
    a098:	8a 81       	ldd	r24, Y+2	; 0x02
    a09a:	80 93 23 17 	sts	0x1723, r24
	}

	if (UTC_day < 10)
    a09e:	80 91 5d 11 	lds	r24, 0x115D
    a0a2:	90 91 5e 11 	lds	r25, 0x115E
    a0a6:	2c 81       	ldd	r18, Y+4	; 0x04
    a0a8:	0a 97       	sbiw	r24, 0x0a	; 10
    a0aa:	34 f4       	brge	.+12     	; 0xa0b8 <formatDate+0xa0>
	{
		fmtDateString[2] = '0';
    a0ac:	80 e3       	ldi	r24, 0x30	; 48
    a0ae:	80 93 24 17 	sts	0x1724, r24
		fmtDateString[3] = dayBuff[0];
    a0b2:	20 93 25 17 	sts	0x1725, r18
    a0b6:	05 c0       	rjmp	.+10     	; 0xa0c2 <formatDate+0xaa>
	}
	else
	{
		fmtDateString[2] = dayBuff[0];
    a0b8:	20 93 24 17 	sts	0x1724, r18
		fmtDateString[3] = dayBuff[1];
    a0bc:	8d 81       	ldd	r24, Y+5	; 0x05
    a0be:	80 93 25 17 	sts	0x1725, r24
	}

}
    a0c2:	2a 96       	adiw	r28, 0x0a	; 10
    a0c4:	0f b6       	in	r0, 0x3f	; 63
    a0c6:	f8 94       	cli
    a0c8:	de bf       	out	0x3e, r29	; 62
    a0ca:	0f be       	out	0x3f, r0	; 63
    a0cc:	cd bf       	out	0x3d, r28	; 61
    a0ce:	cf 91       	pop	r28
    a0d0:	df 91       	pop	r29
    a0d2:	08 95       	ret

0000a0d4 <formatTime>:
	UTC_min = atoi(minString);
	UTC_sec = atoi(secString);
}

void formatTime(void)
{
    a0d4:	0f 93       	push	r16
    a0d6:	1f 93       	push	r17
    a0d8:	df 93       	push	r29
    a0da:	cf 93       	push	r28
    a0dc:	cd b7       	in	r28, 0x3d	; 61
    a0de:	de b7       	in	r29, 0x3e	; 62
    a0e0:	29 97       	sbiw	r28, 0x09	; 9
    a0e2:	0f b6       	in	r0, 0x3f	; 63
    a0e4:	f8 94       	cli
    a0e6:	de bf       	out	0x3e, r29	; 62
    a0e8:	0f be       	out	0x3f, r0	; 63
    a0ea:	cd bf       	out	0x3d, r28	; 61

	char hourBuff[3];
	char minBuff[3];
	char secBuff[3];

	int localHour = UTC_hour + UTC_offset;
    a0ec:	00 91 55 11 	lds	r16, 0x1155
    a0f0:	10 91 56 11 	lds	r17, 0x1156
    a0f4:	80 91 59 11 	lds	r24, 0x1159
    a0f8:	90 91 5a 11 	lds	r25, 0x115A
    a0fc:	08 0f       	add	r16, r24
    a0fe:	19 1f       	adc	r17, r25
	if (localHour < 0)
    a100:	17 ff       	sbrs	r17, 7
    a102:	02 c0       	rjmp	.+4      	; 0xa108 <formatTime+0x34>
	{
		localHour += 24;
    a104:	08 5e       	subi	r16, 0xE8	; 232
    a106:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	itoa(localHour, hourBuff, 10);
    a108:	c8 01       	movw	r24, r16
    a10a:	be 01       	movw	r22, r28
    a10c:	6f 5f       	subi	r22, 0xFF	; 255
    a10e:	7f 4f       	sbci	r23, 0xFF	; 255
    a110:	4a e0       	ldi	r20, 0x0A	; 10
    a112:	50 e0       	ldi	r21, 0x00	; 0
    a114:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>
	itoa(UTC_min, minBuff, 10);
    a118:	80 91 5c 13 	lds	r24, 0x135C
    a11c:	90 91 5d 13 	lds	r25, 0x135D
    a120:	be 01       	movw	r22, r28
    a122:	6c 5f       	subi	r22, 0xFC	; 252
    a124:	7f 4f       	sbci	r23, 0xFF	; 255
    a126:	4a e0       	ldi	r20, 0x0A	; 10
    a128:	50 e0       	ldi	r21, 0x00	; 0
    a12a:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>
	itoa(UTC_sec, secBuff, 10);
    a12e:	80 91 57 11 	lds	r24, 0x1157
    a132:	90 91 58 11 	lds	r25, 0x1158
    a136:	be 01       	movw	r22, r28
    a138:	69 5f       	subi	r22, 0xF9	; 249
    a13a:	7f 4f       	sbci	r23, 0xFF	; 255
    a13c:	4a e0       	ldi	r20, 0x0A	; 10
    a13e:	50 e0       	ldi	r21, 0x00	; 0
    a140:	0e 94 ea 67 	call	0xcfd4	; 0xcfd4 <itoa>
    a144:	99 81       	ldd	r25, Y+1	; 0x01
	if (localHour < 10)
    a146:	0a 30       	cpi	r16, 0x0A	; 10
    a148:	11 05       	cpc	r17, r1
    a14a:	34 f4       	brge	.+12     	; 0xa158 <formatTime+0x84>
	{
		fmtTimeString[0] = '0';
    a14c:	80 e3       	ldi	r24, 0x30	; 48
    a14e:	80 93 bb 16 	sts	0x16BB, r24
		fmtTimeString[1] = hourBuff[0];
    a152:	90 93 bc 16 	sts	0x16BC, r25
    a156:	05 c0       	rjmp	.+10     	; 0xa162 <formatTime+0x8e>
	}
	else
	{
		fmtTimeString[0] = hourBuff[0];
    a158:	90 93 bb 16 	sts	0x16BB, r25
		fmtTimeString[1] = hourBuff[1];
    a15c:	8a 81       	ldd	r24, Y+2	; 0x02
    a15e:	80 93 bc 16 	sts	0x16BC, r24
	}
	
	if (UTC_min < 10)
    a162:	80 91 5c 13 	lds	r24, 0x135C
    a166:	90 91 5d 13 	lds	r25, 0x135D
    a16a:	2c 81       	ldd	r18, Y+4	; 0x04
    a16c:	0a 97       	sbiw	r24, 0x0a	; 10
    a16e:	34 f4       	brge	.+12     	; 0xa17c <formatTime+0xa8>
	{
		fmtTimeString[2] = '0';
    a170:	80 e3       	ldi	r24, 0x30	; 48
    a172:	80 93 bd 16 	sts	0x16BD, r24
		fmtTimeString[3] = minBuff[0];
    a176:	20 93 be 16 	sts	0x16BE, r18
    a17a:	05 c0       	rjmp	.+10     	; 0xa186 <formatTime+0xb2>
	}
	else
	{
		fmtTimeString[2] = minBuff[0];
    a17c:	20 93 bd 16 	sts	0x16BD, r18
		fmtTimeString[3] = minBuff[1];
    a180:	8d 81       	ldd	r24, Y+5	; 0x05
    a182:	80 93 be 16 	sts	0x16BE, r24
	}

	if (UTC_sec < 10)
    a186:	80 91 57 11 	lds	r24, 0x1157
    a18a:	90 91 58 11 	lds	r25, 0x1158
    a18e:	2f 81       	ldd	r18, Y+7	; 0x07
    a190:	0a 97       	sbiw	r24, 0x0a	; 10
    a192:	34 f4       	brge	.+12     	; 0xa1a0 <formatTime+0xcc>
	{
		fmtTimeString[4] = '0';
    a194:	80 e3       	ldi	r24, 0x30	; 48
    a196:	80 93 bf 16 	sts	0x16BF, r24
		fmtTimeString[5] = secBuff[0];
    a19a:	20 93 c0 16 	sts	0x16C0, r18
    a19e:	05 c0       	rjmp	.+10     	; 0xa1aa <formatTime+0xd6>
	}
	else
	{
		fmtTimeString[4] = secBuff[0];
    a1a0:	20 93 bf 16 	sts	0x16BF, r18
		fmtTimeString[5] = secBuff[1];
    a1a4:	88 85       	ldd	r24, Y+8	; 0x08
    a1a6:	80 93 c0 16 	sts	0x16C0, r24
	}

}
    a1aa:	29 96       	adiw	r28, 0x09	; 9
    a1ac:	0f b6       	in	r0, 0x3f	; 63
    a1ae:	f8 94       	cli
    a1b0:	de bf       	out	0x3e, r29	; 62
    a1b2:	0f be       	out	0x3f, r0	; 63
    a1b4:	cd bf       	out	0x3d, r28	; 61
    a1b6:	cf 91       	pop	r28
    a1b8:	df 91       	pop	r29
    a1ba:	1f 91       	pop	r17
    a1bc:	0f 91       	pop	r16
    a1be:	08 95       	ret

0000a1c0 <printRecord>:
}

// Sends a properly formatted string to the data logger, see documentation.

void printRecord(void)
{
    a1c0:	4f 92       	push	r4
    a1c2:	5f 92       	push	r5
    a1c4:	6f 92       	push	r6
    a1c6:	7f 92       	push	r7
    a1c8:	8f 92       	push	r8
    a1ca:	9f 92       	push	r9
    a1cc:	af 92       	push	r10
    a1ce:	bf 92       	push	r11
    a1d0:	cf 92       	push	r12
    a1d2:	df 92       	push	r13
    a1d4:	ef 92       	push	r14
    a1d6:	ff 92       	push	r15
    a1d8:	0f 93       	push	r16
    a1da:	1f 93       	push	r17
    a1dc:	df 93       	push	r29
    a1de:	cf 93       	push	r28
    a1e0:	00 d0       	rcall	.+0      	; 0xa1e2 <printRecord+0x22>
    a1e2:	00 d0       	rcall	.+0      	; 0xa1e4 <printRecord+0x24>
    a1e4:	cd b7       	in	r28, 0x3d	; 61
    a1e6:	de b7       	in	r29, 0x3e	; 62
	formatTime();
    a1e8:	0e 94 6a 50 	call	0xa0d4	; 0xa0d4 <formatTime>
	formatDate();
    a1ec:	0e 94 0c 50 	call	0xa018	; 0xa018 <formatDate>
	//updateAccel();
	//updatePanel();
	//updateQuad();

	double quad_rot_adj = (double)getAdjDeg(Lvoltage,Rvoltage);
    a1f0:	60 91 97 16 	lds	r22, 0x1697
    a1f4:	70 91 98 16 	lds	r23, 0x1698
    a1f8:	80 91 99 16 	lds	r24, 0x1699
    a1fc:	90 91 9a 16 	lds	r25, 0x169A
    a200:	20 91 c4 16 	lds	r18, 0x16C4
    a204:	30 91 c5 16 	lds	r19, 0x16C5
    a208:	40 91 c6 16 	lds	r20, 0x16C6
    a20c:	50 91 c7 16 	lds	r21, 0x16C7
    a210:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    a214:	69 83       	std	Y+1, r22	; 0x01
    a216:	7a 83       	std	Y+2, r23	; 0x02
    a218:	8b 83       	std	Y+3, r24	; 0x03
    a21a:	9c 83       	std	Y+4, r25	; 0x04
	double quad_angle_adj = (double)getAdjDeg(Dvoltage,Uvoltage);
    a21c:	60 91 9b 16 	lds	r22, 0x169B
    a220:	70 91 9c 16 	lds	r23, 0x169C
    a224:	80 91 9d 16 	lds	r24, 0x169D
    a228:	90 91 9e 16 	lds	r25, 0x169E
    a22c:	20 91 93 16 	lds	r18, 0x1693
    a230:	30 91 94 16 	lds	r19, 0x1694
    a234:	40 91 95 16 	lds	r20, 0x1695
    a238:	50 91 96 16 	lds	r21, 0x1696
    a23c:	0e 94 97 3d 	call	0x7b2e	; 0x7b2e <getAdjDeg>
    a240:	2b 01       	movw	r4, r22
    a242:	3c 01       	movw	r6, r24

	fprintf(stdout, "%s,%s,%f,%f,", fmtDateString,fmtTimeString,opt_rot,opt_angle);
    a244:	2d b7       	in	r18, 0x3d	; 61
    a246:	3e b7       	in	r19, 0x3e	; 62
    a248:	20 51       	subi	r18, 0x10	; 16
    a24a:	30 40       	sbci	r19, 0x00	; 0
    a24c:	0f b6       	in	r0, 0x3f	; 63
    a24e:	f8 94       	cli
    a250:	3e bf       	out	0x3e, r19	; 62
    a252:	0f be       	out	0x3f, r0	; 63
    a254:	2d bf       	out	0x3d, r18	; 61
    a256:	ed b7       	in	r30, 0x3d	; 61
    a258:	fe b7       	in	r31, 0x3e	; 62
    a25a:	31 96       	adiw	r30, 0x01	; 1
    a25c:	80 91 2f 17 	lds	r24, 0x172F
    a260:	90 91 30 17 	lds	r25, 0x1730
    a264:	ad b7       	in	r26, 0x3d	; 61
    a266:	be b7       	in	r27, 0x3e	; 62
    a268:	12 96       	adiw	r26, 0x02	; 2
    a26a:	9c 93       	st	X, r25
    a26c:	8e 93       	st	-X, r24
    a26e:	11 97       	sbiw	r26, 0x01	; 1
    a270:	81 ea       	ldi	r24, 0xA1	; 161
    a272:	97 e0       	ldi	r25, 0x07	; 7
    a274:	93 83       	std	Z+3, r25	; 0x03
    a276:	82 83       	std	Z+2, r24	; 0x02
    a278:	82 e2       	ldi	r24, 0x22	; 34
    a27a:	97 e1       	ldi	r25, 0x17	; 23
    a27c:	95 83       	std	Z+5, r25	; 0x05
    a27e:	84 83       	std	Z+4, r24	; 0x04
    a280:	8b eb       	ldi	r24, 0xBB	; 187
    a282:	96 e1       	ldi	r25, 0x16	; 22
    a284:	97 83       	std	Z+7, r25	; 0x07
    a286:	86 83       	std	Z+6, r24	; 0x06
    a288:	80 91 4e 13 	lds	r24, 0x134E
    a28c:	90 91 4f 13 	lds	r25, 0x134F
    a290:	a0 91 50 13 	lds	r26, 0x1350
    a294:	b0 91 51 13 	lds	r27, 0x1351
    a298:	80 87       	std	Z+8, r24	; 0x08
    a29a:	91 87       	std	Z+9, r25	; 0x09
    a29c:	a2 87       	std	Z+10, r26	; 0x0a
    a29e:	b3 87       	std	Z+11, r27	; 0x0b
    a2a0:	80 91 39 11 	lds	r24, 0x1139
    a2a4:	90 91 3a 11 	lds	r25, 0x113A
    a2a8:	a0 91 3b 11 	lds	r26, 0x113B
    a2ac:	b0 91 3c 11 	lds	r27, 0x113C
    a2b0:	84 87       	std	Z+12, r24	; 0x0c
    a2b2:	95 87       	std	Z+13, r25	; 0x0d
    a2b4:	a6 87       	std	Z+14, r26	; 0x0e
    a2b6:	b7 87       	std	Z+15, r27	; 0x0f
    a2b8:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
	fprintf(stdout, "%f,%i,%f,%f,%f;\r\n", (double)screwToRot(curr_screw),accelToAngle(curr_accel),(double)panelVoltage,quad_rot_adj,quad_angle_adj);
    a2bc:	ed b7       	in	r30, 0x3d	; 61
    a2be:	fe b7       	in	r31, 0x3e	; 62
    a2c0:	70 96       	adiw	r30, 0x10	; 16
    a2c2:	0f b6       	in	r0, 0x3f	; 63
    a2c4:	f8 94       	cli
    a2c6:	fe bf       	out	0x3e, r31	; 62
    a2c8:	0f be       	out	0x3f, r0	; 63
    a2ca:	ed bf       	out	0x3d, r30	; 61
    a2cc:	80 91 54 13 	lds	r24, 0x1354
    a2d0:	90 91 55 13 	lds	r25, 0x1355
    a2d4:	0e 94 36 3d 	call	0x7a6c	; 0x7a6c <screwToRot>
    a2d8:	c0 90 7f 16 	lds	r12, 0x167F
    a2dc:	d0 90 80 16 	lds	r13, 0x1680
    a2e0:	e0 90 81 16 	lds	r14, 0x1681
    a2e4:	f0 90 82 16 	lds	r15, 0x1682
    a2e8:	80 90 cc 16 	lds	r8, 0x16CC
    a2ec:	90 90 cd 16 	lds	r9, 0x16CD
    a2f0:	a0 90 ce 16 	lds	r10, 0x16CE
    a2f4:	b0 90 cf 16 	lds	r11, 0x16CF
    a2f8:	2d b7       	in	r18, 0x3d	; 61
    a2fa:	3e b7       	in	r19, 0x3e	; 62
    a2fc:	26 51       	subi	r18, 0x16	; 22
    a2fe:	30 40       	sbci	r19, 0x00	; 0
    a300:	0f b6       	in	r0, 0x3f	; 63
    a302:	f8 94       	cli
    a304:	3e bf       	out	0x3e, r19	; 62
    a306:	0f be       	out	0x3f, r0	; 63
    a308:	2d bf       	out	0x3d, r18	; 61
    a30a:	0d b7       	in	r16, 0x3d	; 61
    a30c:	1e b7       	in	r17, 0x3e	; 62
    a30e:	0f 5f       	subi	r16, 0xFF	; 255
    a310:	1f 4f       	sbci	r17, 0xFF	; 255
    a312:	20 91 2f 17 	lds	r18, 0x172F
    a316:	30 91 30 17 	lds	r19, 0x1730
    a31a:	ad b7       	in	r26, 0x3d	; 61
    a31c:	be b7       	in	r27, 0x3e	; 62
    a31e:	12 96       	adiw	r26, 0x02	; 2
    a320:	3c 93       	st	X, r19
    a322:	2e 93       	st	-X, r18
    a324:	11 97       	sbiw	r26, 0x01	; 1
    a326:	2e ea       	ldi	r18, 0xAE	; 174
    a328:	37 e0       	ldi	r19, 0x07	; 7
    a32a:	f8 01       	movw	r30, r16
    a32c:	33 83       	std	Z+3, r19	; 0x03
    a32e:	22 83       	std	Z+2, r18	; 0x02
    a330:	d8 01       	movw	r26, r16
    a332:	14 96       	adiw	r26, 0x04	; 4
    a334:	6d 93       	st	X+, r22
    a336:	7d 93       	st	X+, r23
    a338:	8d 93       	st	X+, r24
    a33a:	9c 93       	st	X, r25
    a33c:	17 97       	sbiw	r26, 0x07	; 7
    a33e:	c7 01       	movw	r24, r14
    a340:	b6 01       	movw	r22, r12
    a342:	2d e1       	ldi	r18, 0x1D	; 29
    a344:	38 e3       	ldi	r19, 0x38	; 56
    a346:	47 ee       	ldi	r20, 0xE7	; 231
    a348:	5e eb       	ldi	r21, 0xBE	; 190
    a34a:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    a34e:	2c e5       	ldi	r18, 0x5C	; 92
    a350:	3f e8       	ldi	r19, 0x8F	; 143
    a352:	4c e5       	ldi	r20, 0x5C	; 92
    a354:	53 e4       	ldi	r21, 0x43	; 67
    a356:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    a35a:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    a35e:	f8 01       	movw	r30, r16
    a360:	71 87       	std	Z+9, r23	; 0x09
    a362:	60 87       	std	Z+8, r22	; 0x08
    a364:	d8 01       	movw	r26, r16
    a366:	1a 96       	adiw	r26, 0x0a	; 10
    a368:	8d 92       	st	X+, r8
    a36a:	9d 92       	st	X+, r9
    a36c:	ad 92       	st	X+, r10
    a36e:	bc 92       	st	X, r11
    a370:	1d 97       	sbiw	r26, 0x0d	; 13
    a372:	89 81       	ldd	r24, Y+1	; 0x01
    a374:	9a 81       	ldd	r25, Y+2	; 0x02
    a376:	ab 81       	ldd	r26, Y+3	; 0x03
    a378:	bc 81       	ldd	r27, Y+4	; 0x04
    a37a:	86 87       	std	Z+14, r24	; 0x0e
    a37c:	97 87       	std	Z+15, r25	; 0x0f
    a37e:	a0 8b       	std	Z+16, r26	; 0x10
    a380:	b1 8b       	std	Z+17, r27	; 0x11
    a382:	d8 01       	movw	r26, r16
    a384:	52 96       	adiw	r26, 0x12	; 18
    a386:	4d 92       	st	X+, r4
    a388:	5d 92       	st	X+, r5
    a38a:	6d 92       	st	X+, r6
    a38c:	7c 92       	st	X, r7
    a38e:	55 97       	sbiw	r26, 0x15	; 21
    a390:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    a394:	ed b7       	in	r30, 0x3d	; 61
    a396:	fe b7       	in	r31, 0x3e	; 62
    a398:	76 96       	adiw	r30, 0x16	; 22
    a39a:	0f b6       	in	r0, 0x3f	; 63
    a39c:	f8 94       	cli
    a39e:	fe bf       	out	0x3e, r31	; 62
    a3a0:	0f be       	out	0x3f, r0	; 63
    a3a2:	ed bf       	out	0x3d, r30	; 61
}
    a3a4:	0f 90       	pop	r0
    a3a6:	0f 90       	pop	r0
    a3a8:	0f 90       	pop	r0
    a3aa:	0f 90       	pop	r0
    a3ac:	cf 91       	pop	r28
    a3ae:	df 91       	pop	r29
    a3b0:	1f 91       	pop	r17
    a3b2:	0f 91       	pop	r16
    a3b4:	ff 90       	pop	r15
    a3b6:	ef 90       	pop	r14
    a3b8:	df 90       	pop	r13
    a3ba:	cf 90       	pop	r12
    a3bc:	bf 90       	pop	r11
    a3be:	af 90       	pop	r10
    a3c0:	9f 90       	pop	r9
    a3c2:	8f 90       	pop	r8
    a3c4:	7f 90       	pop	r7
    a3c6:	6f 90       	pop	r6
    a3c8:	5f 90       	pop	r5
    a3ca:	4f 90       	pop	r4
    a3cc:	08 95       	ret

0000a3ce <trim>:
//*****************************************************************************
// Functions -- General/Formatting
//*****************************************************************************

//string trimming
char *trim(char *s) {
    a3ce:	0f 93       	push	r16
    a3d0:	1f 93       	push	r17
    a3d2:	cf 93       	push	r28
    a3d4:	df 93       	push	r29
    a3d6:	8c 01       	movw	r16, r24
    char *ptr;
    if (!s)
    a3d8:	00 97       	sbiw	r24, 0x00	; 0
    a3da:	c9 f0       	breq	.+50     	; 0xa40e <trim+0x40>
        return NULL;   // handle NULL string
    if (!*s)
    a3dc:	fc 01       	movw	r30, r24
    a3de:	80 81       	ld	r24, Z
    a3e0:	88 23       	and	r24, r24
    a3e2:	a9 f0       	breq	.+42     	; 0xa40e <trim+0x40>
        return s;      // handle empty string
    for (ptr = s + strlen(s) - 1; (ptr >= s) && isspace(*ptr); --ptr);
    a3e4:	e8 01       	movw	r28, r16
    a3e6:	09 90       	ld	r0, Y+
    a3e8:	00 20       	and	r0, r0
    a3ea:	e9 f7       	brne	.-6      	; 0xa3e6 <trim+0x18>
    a3ec:	c0 1b       	sub	r28, r16
    a3ee:	d1 0b       	sbc	r29, r17
    a3f0:	22 97       	sbiw	r28, 0x02	; 2
    a3f2:	c0 0f       	add	r28, r16
    a3f4:	d1 1f       	adc	r29, r17
    a3f6:	01 c0       	rjmp	.+2      	; 0xa3fa <trim+0x2c>
    a3f8:	21 97       	sbiw	r28, 0x01	; 1
    a3fa:	c0 17       	cp	r28, r16
    a3fc:	d1 07       	cpc	r29, r17
    a3fe:	30 f0       	brcs	.+12     	; 0xa40c <trim+0x3e>
    a400:	88 81       	ld	r24, Y
    a402:	90 e0       	ldi	r25, 0x00	; 0
    a404:	0e 94 90 67 	call	0xcf20	; 0xcf20 <isspace>
    a408:	89 2b       	or	r24, r25
    a40a:	b1 f7       	brne	.-20     	; 0xa3f8 <trim+0x2a>
    ptr[1] = '\0';
    a40c:	19 82       	std	Y+1, r1	; 0x01
    return s;
}
    a40e:	c8 01       	movw	r24, r16
    a410:	df 91       	pop	r29
    a412:	cf 91       	pop	r28
    a414:	1f 91       	pop	r17
    a416:	0f 91       	pop	r16
    a418:	08 95       	ret

0000a41a <updateTime>:

void updateTime(void)
{
    a41a:	cf 92       	push	r12
    a41c:	df 92       	push	r13
    a41e:	ef 92       	push	r14
    a420:	ff 92       	push	r15
    a422:	0f 93       	push	r16
    a424:	1f 93       	push	r17
    a426:	df 93       	push	r29
    a428:	cf 93       	push	r28
    a42a:	cd b7       	in	r28, 0x3d	; 61
    a42c:	de b7       	in	r29, 0x3e	; 62
    a42e:	66 97       	sbiw	r28, 0x16	; 22
    a430:	0f b6       	in	r0, 0x3f	; 63
    a432:	f8 94       	cli
    a434:	de bf       	out	0x3e, r29	; 62
    a436:	0f be       	out	0x3f, r0	; 63
    a438:	cd bf       	out	0x3d, r28	; 61
	//Takes the value stored as utcTime (an int) and breaks it up into
	//component hour, minute, and second
	char timeString[11];
	sprintf(timeString, "%lu", utcTime);
    a43a:	8d b7       	in	r24, 0x3d	; 61
    a43c:	9e b7       	in	r25, 0x3e	; 62
    a43e:	08 97       	sbiw	r24, 0x08	; 8
    a440:	0f b6       	in	r0, 0x3f	; 63
    a442:	f8 94       	cli
    a444:	9e bf       	out	0x3e, r25	; 62
    a446:	0f be       	out	0x3f, r0	; 63
    a448:	8d bf       	out	0x3d, r24	; 61
    a44a:	ed b7       	in	r30, 0x3d	; 61
    a44c:	fe b7       	in	r31, 0x3e	; 62
    a44e:	31 96       	adiw	r30, 0x01	; 1
    a450:	2c e0       	ldi	r18, 0x0C	; 12
    a452:	e2 2e       	mov	r14, r18
    a454:	f1 2c       	mov	r15, r1
    a456:	ec 0e       	add	r14, r28
    a458:	fd 1e       	adc	r15, r29
    a45a:	ad b7       	in	r26, 0x3d	; 61
    a45c:	be b7       	in	r27, 0x3e	; 62
    a45e:	12 96       	adiw	r26, 0x02	; 2
    a460:	fc 92       	st	X, r15
    a462:	ee 92       	st	-X, r14
    a464:	11 97       	sbiw	r26, 0x01	; 1
    a466:	80 ec       	ldi	r24, 0xC0	; 192
    a468:	97 e0       	ldi	r25, 0x07	; 7
    a46a:	93 83       	std	Z+3, r25	; 0x03
    a46c:	82 83       	std	Z+2, r24	; 0x02
    a46e:	80 91 c8 16 	lds	r24, 0x16C8
    a472:	90 91 c9 16 	lds	r25, 0x16C9
    a476:	a0 91 ca 16 	lds	r26, 0x16CA
    a47a:	b0 91 cb 16 	lds	r27, 0x16CB
    a47e:	84 83       	std	Z+4, r24	; 0x04
    a480:	95 83       	std	Z+5, r25	; 0x05
    a482:	a6 83       	std	Z+6, r26	; 0x06
    a484:	b7 83       	std	Z+7, r27	; 0x07
    a486:	0e 94 06 69 	call	0xd20c	; 0xd20c <sprintf>
	int timeStringLength = strlen(trim(timeString));
    a48a:	8d b7       	in	r24, 0x3d	; 61
    a48c:	9e b7       	in	r25, 0x3e	; 62
    a48e:	08 96       	adiw	r24, 0x08	; 8
    a490:	0f b6       	in	r0, 0x3f	; 63
    a492:	f8 94       	cli
    a494:	9e bf       	out	0x3e, r25	; 62
    a496:	0f be       	out	0x3f, r0	; 63
    a498:	8d bf       	out	0x3d, r24	; 61
    a49a:	c7 01       	movw	r24, r14
    a49c:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <trim>
    a4a0:	dc 01       	movw	r26, r24
    a4a2:	0d 90       	ld	r0, X+
    a4a4:	00 20       	and	r0, r0
    a4a6:	e9 f7       	brne	.-6      	; 0xa4a2 <updateTime+0x88>
    a4a8:	8d 01       	movw	r16, r26
    a4aa:	01 50       	subi	r16, 0x01	; 1
    a4ac:	10 40       	sbci	r17, 0x00	; 0
    a4ae:	08 1b       	sub	r16, r24
    a4b0:	19 0b       	sbc	r17, r25

	if(dataLog==0)
    a4b2:	80 91 4c 13 	lds	r24, 0x134C
    a4b6:	90 91 4d 13 	lds	r25, 0x134D
    a4ba:	89 2b       	or	r24, r25
    a4bc:	a9 f5       	brne	.+106    	; 0xa528 <updateTime+0x10e>
	{
		fprintf(stdout, "time string: %s\r\n", timeString);
    a4be:	00 d0       	rcall	.+0      	; 0xa4c0 <updateTime+0xa6>
    a4c0:	00 d0       	rcall	.+0      	; 0xa4c2 <updateTime+0xa8>
    a4c2:	00 d0       	rcall	.+0      	; 0xa4c4 <updateTime+0xaa>
    a4c4:	ed b7       	in	r30, 0x3d	; 61
    a4c6:	fe b7       	in	r31, 0x3e	; 62
    a4c8:	31 96       	adiw	r30, 0x01	; 1
    a4ca:	80 91 2f 17 	lds	r24, 0x172F
    a4ce:	90 91 30 17 	lds	r25, 0x1730
    a4d2:	ad b7       	in	r26, 0x3d	; 61
    a4d4:	be b7       	in	r27, 0x3e	; 62
    a4d6:	12 96       	adiw	r26, 0x02	; 2
    a4d8:	9c 93       	st	X, r25
    a4da:	8e 93       	st	-X, r24
    a4dc:	11 97       	sbiw	r26, 0x01	; 1
    a4de:	84 ec       	ldi	r24, 0xC4	; 196
    a4e0:	97 e0       	ldi	r25, 0x07	; 7
    a4e2:	93 83       	std	Z+3, r25	; 0x03
    a4e4:	82 83       	std	Z+2, r24	; 0x02
    a4e6:	f5 82       	std	Z+5, r15	; 0x05
    a4e8:	e4 82       	std	Z+4, r14	; 0x04
    a4ea:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		fprintf(stdout, "time string length: %d\r\n", timeStringLength);
    a4ee:	ed b7       	in	r30, 0x3d	; 61
    a4f0:	fe b7       	in	r31, 0x3e	; 62
    a4f2:	31 96       	adiw	r30, 0x01	; 1
    a4f4:	80 91 2f 17 	lds	r24, 0x172F
    a4f8:	90 91 30 17 	lds	r25, 0x1730
    a4fc:	ad b7       	in	r26, 0x3d	; 61
    a4fe:	be b7       	in	r27, 0x3e	; 62
    a500:	12 96       	adiw	r26, 0x02	; 2
    a502:	9c 93       	st	X, r25
    a504:	8e 93       	st	-X, r24
    a506:	11 97       	sbiw	r26, 0x01	; 1
    a508:	86 ed       	ldi	r24, 0xD6	; 214
    a50a:	97 e0       	ldi	r25, 0x07	; 7
    a50c:	93 83       	std	Z+3, r25	; 0x03
    a50e:	82 83       	std	Z+2, r24	; 0x02
    a510:	15 83       	std	Z+5, r17	; 0x05
    a512:	04 83       	std	Z+4, r16	; 0x04
    a514:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    a518:	8d b7       	in	r24, 0x3d	; 61
    a51a:	9e b7       	in	r25, 0x3e	; 62
    a51c:	06 96       	adiw	r24, 0x06	; 6
    a51e:	0f b6       	in	r0, 0x3f	; 63
    a520:	f8 94       	cli
    a522:	9e bf       	out	0x3e, r25	; 62
    a524:	0f be       	out	0x3f, r0	; 63
    a526:	8d bf       	out	0x3d, r24	; 61
    a528:	8c 85       	ldd	r24, Y+12	; 0x0c
    a52a:	fd 84       	ldd	r15, Y+13	; 0x0d
    a52c:	ee 84       	ldd	r14, Y+14	; 0x0e
    a52e:	df 84       	ldd	r13, Y+15	; 0x0f
    a530:	c8 88       	ldd	r12, Y+16	; 0x10
	}

	char minString[3];
	char secString[3];

	if(timeStringLength == 5)
    a532:	05 30       	cpi	r16, 0x05	; 5
    a534:	11 05       	cpc	r17, r1
    a536:	71 f4       	brne	.+28     	; 0xa554 <updateTime+0x13a>
	{
		char hourString[2];
		hourString[0] = timeString[0];
    a538:	89 83       	std	Y+1, r24	; 0x01
		UTC_hour = atoi(hourString);
    a53a:	ce 01       	movw	r24, r28
    a53c:	01 96       	adiw	r24, 0x01	; 1
    a53e:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    a542:	90 93 56 11 	sts	0x1156, r25
    a546:	80 93 55 11 	sts	0x1155, r24
		minString[0] = timeString[1];
    a54a:	fb 82       	std	Y+3, r15	; 0x03
		minString[1] = timeString[2];
    a54c:	ec 82       	std	Y+4, r14	; 0x04
		secString[0] = timeString[3];
    a54e:	de 82       	std	Y+6, r13	; 0x06
		secString[1] = timeString[4];
    a550:	cf 82       	std	Y+7, r12	; 0x07
    a552:	0f c0       	rjmp	.+30     	; 0xa572 <updateTime+0x158>
	} 
	else
	{
		char hourString[3];
		hourString[0] = timeString[0];
    a554:	89 87       	std	Y+9, r24	; 0x09
		hourString[1] = timeString[1];
    a556:	fa 86       	std	Y+10, r15	; 0x0a
		UTC_hour = atoi(hourString);
    a558:	ce 01       	movw	r24, r28
    a55a:	09 96       	adiw	r24, 0x09	; 9
    a55c:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    a560:	90 93 56 11 	sts	0x1156, r25
    a564:	80 93 55 11 	sts	0x1155, r24
		minString[0] = timeString[2];
    a568:	eb 82       	std	Y+3, r14	; 0x03
		minString[1] = timeString[3];
    a56a:	dc 82       	std	Y+4, r13	; 0x04
		secString[0] = timeString[4];
    a56c:	ce 82       	std	Y+6, r12	; 0x06
		secString[1] = timeString[5];
    a56e:	89 89       	ldd	r24, Y+17	; 0x11
    a570:	8f 83       	std	Y+7, r24	; 0x07
	}

	
	UTC_min = atoi(minString);
    a572:	ce 01       	movw	r24, r28
    a574:	03 96       	adiw	r24, 0x03	; 3
    a576:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    a57a:	90 93 5d 13 	sts	0x135D, r25
    a57e:	80 93 5c 13 	sts	0x135C, r24
	UTC_sec = atoi(secString);
    a582:	ce 01       	movw	r24, r28
    a584:	06 96       	adiw	r24, 0x06	; 6
    a586:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    a58a:	90 93 58 11 	sts	0x1158, r25
    a58e:	80 93 57 11 	sts	0x1157, r24
}
    a592:	66 96       	adiw	r28, 0x16	; 22
    a594:	0f b6       	in	r0, 0x3f	; 63
    a596:	f8 94       	cli
    a598:	de bf       	out	0x3e, r29	; 62
    a59a:	0f be       	out	0x3f, r0	; 63
    a59c:	cd bf       	out	0x3d, r28	; 61
    a59e:	cf 91       	pop	r28
    a5a0:	df 91       	pop	r29
    a5a2:	1f 91       	pop	r17
    a5a4:	0f 91       	pop	r16
    a5a6:	ff 90       	pop	r15
    a5a8:	ef 90       	pop	r14
    a5aa:	df 90       	pop	r13
    a5ac:	cf 90       	pop	r12
    a5ae:	08 95       	ret

0000a5b0 <updateGPS>:
static nmeap_gga_t     gga;		   /* this is where the data from GGA messages will show up */
static nmeap_rmc_t     rmc;		   /* this is where the data from RMC messages will show up */
static int             user_data; /* user can pass in anything. typically it will be a pointer to some user data */

void updateGPS(void)
{
    a5b0:	ef 92       	push	r14
    a5b2:	ff 92       	push	r15
    a5b4:	0f 93       	push	r16
    a5b6:	1f 93       	push	r17
	int             status;
	char            ch;	
	int done = 0;

	//put current GPS sentence in NMEA buffer
	pvec = trim(gpsbuff);
    a5b8:	80 ed       	ldi	r24, 0xD0	; 208
    a5ba:	96 e1       	ldi	r25, 0x16	; 22
    a5bc:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <trim>
    a5c0:	90 93 70 12 	sts	0x1270, r25
    a5c4:	80 93 6f 12 	sts	0x126F, r24
	strcat(pvec, "\r\n" );
    a5c8:	6f ee       	ldi	r22, 0xEF	; 239
    a5ca:	77 e0       	ldi	r23, 0x07	; 7
    a5cc:	0e 94 a3 67 	call	0xcf46	; 0xcf46 <strcat>

	//display the sentence
	//stdout = stdin = stderr = &uart_str_0;
	if(dataLog==0)
    a5d0:	80 91 4c 13 	lds	r24, 0x134C
    a5d4:	90 91 4d 13 	lds	r25, 0x134D
    a5d8:	89 2b       	or	r24, r25
    a5da:	21 f5       	brne	.+72     	; 0xa624 <updateGPS+0x74>
		fprintf(stdout, "In updateGPS: %s\n---\n", pvec);
    a5dc:	00 d0       	rcall	.+0      	; 0xa5de <updateGPS+0x2e>
    a5de:	00 d0       	rcall	.+0      	; 0xa5e0 <updateGPS+0x30>
    a5e0:	00 d0       	rcall	.+0      	; 0xa5e2 <updateGPS+0x32>
    a5e2:	ed b7       	in	r30, 0x3d	; 61
    a5e4:	fe b7       	in	r31, 0x3e	; 62
    a5e6:	31 96       	adiw	r30, 0x01	; 1
    a5e8:	80 91 2f 17 	lds	r24, 0x172F
    a5ec:	90 91 30 17 	lds	r25, 0x1730
    a5f0:	ad b7       	in	r26, 0x3d	; 61
    a5f2:	be b7       	in	r27, 0x3e	; 62
    a5f4:	12 96       	adiw	r26, 0x02	; 2
    a5f6:	9c 93       	st	X, r25
    a5f8:	8e 93       	st	-X, r24
    a5fa:	11 97       	sbiw	r26, 0x01	; 1
    a5fc:	82 ef       	ldi	r24, 0xF2	; 242
    a5fe:	97 e0       	ldi	r25, 0x07	; 7
    a600:	93 83       	std	Z+3, r25	; 0x03
    a602:	82 83       	std	Z+2, r24	; 0x02
    a604:	80 91 6f 12 	lds	r24, 0x126F
    a608:	90 91 70 12 	lds	r25, 0x1270
    a60c:	95 83       	std	Z+5, r25	; 0x05
    a60e:	84 83       	std	Z+4, r24	; 0x04
    a610:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    a614:	8d b7       	in	r24, 0x3d	; 61
    a616:	9e b7       	in	r25, 0x3e	; 62
    a618:	06 96       	adiw	r24, 0x06	; 6
    a61a:	0f b6       	in	r0, 0x3f	; 63
    a61c:	f8 94       	cli
    a61e:	9e bf       	out	0x3e, r25	; 62
    a620:	0f be       	out	0x3f, r0	; 63
    a622:	8d bf       	out	0x3d, r24	; 61

	//initialize the nmea context
	//TODO: rewrite this to return error codes instead of using uart
	status = nmeap_init(&nmea,(void *)&user_data);
    a624:	86 e7       	ldi	r24, 0x76	; 118
    a626:	93 e1       	ldi	r25, 0x13	; 19
    a628:	6d e7       	ldi	r22, 0x7D	; 125
    a62a:	76 e1       	ldi	r23, 0x16	; 22
    a62c:	0e 94 60 21 	call	0x42c0	; 0x42c0 <nmeap_init>
    a630:	9c 01       	movw	r18, r24
	if (status != 0) {
    a632:	00 97       	sbiw	r24, 0x00	; 0
    a634:	d1 f0       	breq	.+52     	; 0xa66a <updateGPS+0xba>
		if(dataLog==0)
    a636:	80 91 4c 13 	lds	r24, 0x134C
    a63a:	90 91 4d 13 	lds	r25, 0x134D
    a63e:	89 2b       	or	r24, r25
    a640:	09 f0       	breq	.+2      	; 0xa644 <updateGPS+0x94>
    a642:	57 c0       	rjmp	.+174    	; 0xa6f2 <updateGPS+0x142>
			fprintf(stdout,"nmeap_init %d\n",status);
    a644:	00 d0       	rcall	.+0      	; 0xa646 <updateGPS+0x96>
    a646:	00 d0       	rcall	.+0      	; 0xa648 <updateGPS+0x98>
    a648:	00 d0       	rcall	.+0      	; 0xa64a <updateGPS+0x9a>
    a64a:	ed b7       	in	r30, 0x3d	; 61
    a64c:	fe b7       	in	r31, 0x3e	; 62
    a64e:	31 96       	adiw	r30, 0x01	; 1
    a650:	80 91 2f 17 	lds	r24, 0x172F
    a654:	90 91 30 17 	lds	r25, 0x1730
    a658:	ad b7       	in	r26, 0x3d	; 61
    a65a:	be b7       	in	r27, 0x3e	; 62
    a65c:	12 96       	adiw	r26, 0x02	; 2
    a65e:	9c 93       	st	X, r25
    a660:	8e 93       	st	-X, r24
    a662:	11 97       	sbiw	r26, 0x01	; 1
    a664:	88 e0       	ldi	r24, 0x08	; 8
    a666:	98 e0       	ldi	r25, 0x08	; 8
    a668:	36 c0       	rjmp	.+108    	; 0xa6d6 <updateGPS+0x126>
		exit(1);
	}

	//add standard GPGGA parser
	status = nmeap_addParser(&nmea,"GPGGA",nmeap_gpgga,gpgga_callout,&gga);
    a66a:	86 e7       	ldi	r24, 0x76	; 118
    a66c:	93 e1       	ldi	r25, 0x13	; 19
    a66e:	67 e1       	ldi	r22, 0x17	; 23
    a670:	78 e0       	ldi	r23, 0x08	; 8
    a672:	48 e0       	ldi	r20, 0x08	; 8
    a674:	5e e1       	ldi	r21, 0x1E	; 30
    a676:	21 ea       	ldi	r18, 0xA1	; 161
    a678:	3f e4       	ldi	r19, 0x4F	; 79
    a67a:	04 e4       	ldi	r16, 0x44	; 68
    a67c:	16 e1       	ldi	r17, 0x16	; 22
    a67e:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <nmeap_addParser>
    a682:	9c 01       	movw	r18, r24
	if (status != 0) {
    a684:	00 97       	sbiw	r24, 0x00	; 0
    a686:	79 f4       	brne	.+30     	; 0xa6a6 <updateGPS+0xf6>
			fprintf(stdout,"nmeap_add %d\n",status);
		exit(1);
	}

	//add standard GPRMC parser
	status = nmeap_addParser(&nmea,"GPRMC",nmeap_gprmc,gprmc_callout,&rmc);
    a688:	86 e7       	ldi	r24, 0x76	; 118
    a68a:	93 e1       	ldi	r25, 0x13	; 19
    a68c:	6b e2       	ldi	r22, 0x2B	; 43
    a68e:	78 e0       	ldi	r23, 0x08	; 8
    a690:	49 e6       	ldi	r20, 0x69	; 105
    a692:	5d e1       	ldi	r21, 0x1D	; 29
    a694:	23 e3       	ldi	r18, 0x33	; 51
    a696:	3f e4       	ldi	r19, 0x4F	; 79
    a698:	00 e6       	ldi	r16, 0x60	; 96
    a69a:	16 e1       	ldi	r17, 0x16	; 22
    a69c:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <nmeap_addParser>
    a6a0:	9c 01       	movw	r18, r24
	if (status != 0) {
    a6a2:	00 97       	sbiw	r24, 0x00	; 0
    a6a4:	51 f1       	breq	.+84     	; 0xa6fa <updateGPS+0x14a>
		if(dataLog==0)
    a6a6:	80 91 4c 13 	lds	r24, 0x134C
    a6aa:	90 91 4d 13 	lds	r25, 0x134D
    a6ae:	89 2b       	or	r24, r25
    a6b0:	01 f5       	brne	.+64     	; 0xa6f2 <updateGPS+0x142>
			fprintf(stdout,"nmeap_add %d\n",status);
    a6b2:	00 d0       	rcall	.+0      	; 0xa6b4 <updateGPS+0x104>
    a6b4:	00 d0       	rcall	.+0      	; 0xa6b6 <updateGPS+0x106>
    a6b6:	00 d0       	rcall	.+0      	; 0xa6b8 <updateGPS+0x108>
    a6b8:	ed b7       	in	r30, 0x3d	; 61
    a6ba:	fe b7       	in	r31, 0x3e	; 62
    a6bc:	31 96       	adiw	r30, 0x01	; 1
    a6be:	80 91 2f 17 	lds	r24, 0x172F
    a6c2:	90 91 30 17 	lds	r25, 0x1730
    a6c6:	ad b7       	in	r26, 0x3d	; 61
    a6c8:	be b7       	in	r27, 0x3e	; 62
    a6ca:	12 96       	adiw	r26, 0x02	; 2
    a6cc:	9c 93       	st	X, r25
    a6ce:	8e 93       	st	-X, r24
    a6d0:	11 97       	sbiw	r26, 0x01	; 1
    a6d2:	8d e1       	ldi	r24, 0x1D	; 29
    a6d4:	98 e0       	ldi	r25, 0x08	; 8
    a6d6:	93 83       	std	Z+3, r25	; 0x03
    a6d8:	82 83       	std	Z+2, r24	; 0x02
    a6da:	35 83       	std	Z+5, r19	; 0x05
    a6dc:	24 83       	std	Z+4, r18	; 0x04
    a6de:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    a6e2:	8d b7       	in	r24, 0x3d	; 61
    a6e4:	9e b7       	in	r25, 0x3e	; 62
    a6e6:	06 96       	adiw	r24, 0x06	; 6
    a6e8:	0f b6       	in	r0, 0x3f	; 63
    a6ea:	f8 94       	cli
    a6ec:	9e bf       	out	0x3e, r25	; 62
    a6ee:	0f be       	out	0x3f, r0	; 63
    a6f0:	8d bf       	out	0x3d, r24	; 61
		exit(1);
    a6f2:	81 e0       	ldi	r24, 0x01	; 1
    a6f4:	90 e0       	ldi	r25, 0x00	; 0
    a6f6:	0e 94 09 70 	call	0xe012	; 0xe012 <_exit>

/** simulate character by character IO */
int readchar() 
{
    int ch;
    if (*pvec == 0) {
    a6fa:	e0 91 6f 12 	lds	r30, 0x126F
    a6fe:	f0 91 70 12 	lds	r31, 0x1270
    a702:	60 81       	ld	r22, Z
    a704:	66 23       	and	r22, r22
    a706:	19 f4       	brne	.+6      	; 0xa70e <updateGPS+0x15e>
    a708:	6f ef       	ldi	r22, 0xFF	; 255
    a70a:	7f ef       	ldi	r23, 0xFF	; 255
    a70c:	08 c0       	rjmp	.+16     	; 0xa71e <updateGPS+0x16e>
        ch = -1;
    }
    else {
        ch = *pvec++;
    a70e:	31 96       	adiw	r30, 0x01	; 1
    a710:	f0 93 70 12 	sts	0x1270, r31
    a714:	e0 93 6f 12 	sts	0x126F, r30

	//process input until done
	while(done == 0) {
		//get a byte at a time
		ch = readchar();
		if (ch <= 0) {
    a718:	66 23       	and	r22, r22
    a71a:	09 f4       	brne	.+2      	; 0xa71e <updateGPS+0x16e>
    a71c:	6c c0       	rjmp	.+216    	; 0xa7f6 <updateGPS+0x246>
		}

		//pass it to the parser
		//status indicates whether a complete msg arrived for this byte
		// NOTE : in addition to the return status the message callout will be fired when a complete message is processed
		status = nmeap_parse(&nmea,ch);
    a71e:	86 e7       	ldi	r24, 0x76	; 118
    a720:	93 e1       	ldi	r25, 0x13	; 19
    a722:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <nmeap_parse>

		//process the return code
		switch(status) {
    a726:	01 97       	sbiw	r24, 0x01	; 1
    a728:	41 f7       	brne	.-48     	; 0xa6fa <updateGPS+0x14a>

//Getter functions from GGA sentence.

double gga_getLatitude(nmeap_gga_t *gga)
{
	return gga->latitude;
    a72a:	e0 90 44 16 	lds	r14, 0x1644
    a72e:	f0 90 45 16 	lds	r15, 0x1645
    a732:	00 91 46 16 	lds	r16, 0x1646
    a736:	10 91 47 16 	lds	r17, 0x1647
				// GOT A GPGGA MESSAGE
				//fprintf(stdout,"-------------switch\n");
				//print_gga(&gga);
				//fprintf(stdout,"latitude: %f\n", gga_getLatitude(&gga));
				//fprintf(stdout,"-------------\n");
				if(gga_getLatitude(&gga) != 0.0)
    a73a:	c8 01       	movw	r24, r16
    a73c:	b7 01       	movw	r22, r14
    a73e:	20 e0       	ldi	r18, 0x00	; 0
    a740:	30 e0       	ldi	r19, 0x00	; 0
    a742:	40 e0       	ldi	r20, 0x00	; 0
    a744:	50 e0       	ldi	r21, 0x00	; 0
    a746:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    a74a:	88 23       	and	r24, r24
    a74c:	41 f0       	breq	.+16     	; 0xa75e <updateGPS+0x1ae>
					lati = gga_getLatitude(&gga);
    a74e:	e0 92 69 11 	sts	0x1169, r14
    a752:	f0 92 6a 11 	sts	0x116A, r15
    a756:	00 93 6b 11 	sts	0x116B, r16
    a75a:	10 93 6c 11 	sts	0x116C, r17
	return gga->latitude;
}

double gga_getLongitude(nmeap_gga_t *gga)
{
	return gga->longitude;
    a75e:	e0 90 48 16 	lds	r14, 0x1648
    a762:	f0 90 49 16 	lds	r15, 0x1649
    a766:	00 91 4a 16 	lds	r16, 0x164A
    a76a:	10 91 4b 16 	lds	r17, 0x164B
				//fprintf(stdout,"latitude: %f\n", gga_getLatitude(&gga));
				//fprintf(stdout,"-------------\n");
				if(gga_getLatitude(&gga) != 0.0)
					lati = gga_getLatitude(&gga);

				if(gga_getLongitude(&gga) != 0.0)
    a76e:	c8 01       	movw	r24, r16
    a770:	b7 01       	movw	r22, r14
    a772:	20 e0       	ldi	r18, 0x00	; 0
    a774:	30 e0       	ldi	r19, 0x00	; 0
    a776:	40 e0       	ldi	r20, 0x00	; 0
    a778:	50 e0       	ldi	r21, 0x00	; 0
    a77a:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    a77e:	88 23       	and	r24, r24
    a780:	41 f0       	breq	.+16     	; 0xa792 <updateGPS+0x1e2>
					longi = gga_getLongitude(&gga);
    a782:	e0 92 6d 11 	sts	0x116D, r14
    a786:	f0 92 6e 11 	sts	0x116E, r15
    a78a:	00 93 6f 11 	sts	0x116F, r16
    a78e:	10 93 70 11 	sts	0x1170, r17
	return gga->longitude;
}

double gga_getAltitude(nmeap_gga_t *gga)
{
	return gga->altitude;
    a792:	e0 90 4c 16 	lds	r14, 0x164C
    a796:	f0 90 4d 16 	lds	r15, 0x164D
    a79a:	00 91 4e 16 	lds	r16, 0x164E
    a79e:	10 91 4f 16 	lds	r17, 0x164F
					lati = gga_getLatitude(&gga);

				if(gga_getLongitude(&gga) != 0.0)
					longi = gga_getLongitude(&gga);
				
				if(gga_getAltitude(&gga) != 0.0)
    a7a2:	c8 01       	movw	r24, r16
    a7a4:	b7 01       	movw	r22, r14
    a7a6:	20 e0       	ldi	r18, 0x00	; 0
    a7a8:	30 e0       	ldi	r19, 0x00	; 0
    a7aa:	40 e0       	ldi	r20, 0x00	; 0
    a7ac:	50 e0       	ldi	r21, 0x00	; 0
    a7ae:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    a7b2:	88 23       	and	r24, r24
    a7b4:	41 f0       	breq	.+16     	; 0xa7c6 <updateGPS+0x216>
					alti = gga_getAltitude(&gga);
    a7b6:	e0 92 71 11 	sts	0x1171, r14
    a7ba:	f0 92 72 11 	sts	0x1172, r15
    a7be:	00 93 73 11 	sts	0x1173, r16
    a7c2:	10 93 74 11 	sts	0x1174, r17
				
				utcTime = gga_getUtcTime(&gga);
    a7c6:	80 91 50 16 	lds	r24, 0x1650
    a7ca:	90 91 51 16 	lds	r25, 0x1651
    a7ce:	a0 91 52 16 	lds	r26, 0x1652
    a7d2:	b0 91 53 16 	lds	r27, 0x1653
    a7d6:	80 93 c8 16 	sts	0x16C8, r24
    a7da:	90 93 c9 16 	sts	0x16C9, r25
    a7de:	a0 93 ca 16 	sts	0x16CA, r26
    a7e2:	b0 93 cb 16 	sts	0x16CB, r27
				numSatellites = gga_getNumSatellites(&gga);
    a7e6:	80 91 54 16 	lds	r24, 0x1654
    a7ea:	90 91 55 16 	lds	r25, 0x1655
    a7ee:	90 93 2c 17 	sts	0x172C, r25
    a7f2:	80 93 2b 17 	sts	0x172B, r24
		//fprintf(stdout, "looping...");
	}

	//Only update time if we have a good GPS connection.
	//Sentences often include UTC strings that are inaccurate.
	if(numSatellites>0)
    a7f6:	80 91 2b 17 	lds	r24, 0x172B
    a7fa:	90 91 2c 17 	lds	r25, 0x172C
    a7fe:	18 16       	cp	r1, r24
    a800:	19 06       	cpc	r1, r25
    a802:	14 f4       	brge	.+4      	; 0xa808 <updateGPS+0x258>
		updateTime(); 
    a804:	0e 94 0d 52 	call	0xa41a	; 0xa41a <updateTime>

	if(dataLog==0)
    a808:	80 91 4c 13 	lds	r24, 0x134C
    a80c:	90 91 4d 13 	lds	r25, 0x134D
    a810:	89 2b       	or	r24, r25
    a812:	09 f0       	breq	.+2      	; 0xa816 <updateGPS+0x266>
    a814:	ad c0       	rjmp	.+346    	; 0xa970 <updateGPS+0x3c0>
	{
		//printing values
		fprintf(stdout,"Components:\r\n");
    a816:	60 91 2f 17 	lds	r22, 0x172F
    a81a:	70 91 30 17 	lds	r23, 0x1730
    a81e:	81 e3       	ldi	r24, 0x31	; 49
    a820:	98 e0       	ldi	r25, 0x08	; 8
    a822:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
		fprintf(stdout,"--latitude: %f\r\n",lati);
    a826:	ad b7       	in	r26, 0x3d	; 61
    a828:	be b7       	in	r27, 0x3e	; 62
    a82a:	18 97       	sbiw	r26, 0x08	; 8
    a82c:	0f b6       	in	r0, 0x3f	; 63
    a82e:	f8 94       	cli
    a830:	be bf       	out	0x3e, r27	; 62
    a832:	0f be       	out	0x3f, r0	; 63
    a834:	ad bf       	out	0x3d, r26	; 61
    a836:	ed b7       	in	r30, 0x3d	; 61
    a838:	fe b7       	in	r31, 0x3e	; 62
    a83a:	31 96       	adiw	r30, 0x01	; 1
    a83c:	80 91 2f 17 	lds	r24, 0x172F
    a840:	90 91 30 17 	lds	r25, 0x1730
    a844:	12 96       	adiw	r26, 0x02	; 2
    a846:	9c 93       	st	X, r25
    a848:	8e 93       	st	-X, r24
    a84a:	11 97       	sbiw	r26, 0x01	; 1
    a84c:	8f e3       	ldi	r24, 0x3F	; 63
    a84e:	98 e0       	ldi	r25, 0x08	; 8
    a850:	93 83       	std	Z+3, r25	; 0x03
    a852:	82 83       	std	Z+2, r24	; 0x02
    a854:	80 91 69 11 	lds	r24, 0x1169
    a858:	90 91 6a 11 	lds	r25, 0x116A
    a85c:	a0 91 6b 11 	lds	r26, 0x116B
    a860:	b0 91 6c 11 	lds	r27, 0x116C
    a864:	84 83       	std	Z+4, r24	; 0x04
    a866:	95 83       	std	Z+5, r25	; 0x05
    a868:	a6 83       	std	Z+6, r26	; 0x06
    a86a:	b7 83       	std	Z+7, r27	; 0x07
    a86c:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		fprintf(stdout,"--longitude: %f\r\n",longi);
    a870:	ed b7       	in	r30, 0x3d	; 61
    a872:	fe b7       	in	r31, 0x3e	; 62
    a874:	31 96       	adiw	r30, 0x01	; 1
    a876:	80 91 2f 17 	lds	r24, 0x172F
    a87a:	90 91 30 17 	lds	r25, 0x1730
    a87e:	ad b7       	in	r26, 0x3d	; 61
    a880:	be b7       	in	r27, 0x3e	; 62
    a882:	12 96       	adiw	r26, 0x02	; 2
    a884:	9c 93       	st	X, r25
    a886:	8e 93       	st	-X, r24
    a888:	11 97       	sbiw	r26, 0x01	; 1
    a88a:	80 e5       	ldi	r24, 0x50	; 80
    a88c:	98 e0       	ldi	r25, 0x08	; 8
    a88e:	93 83       	std	Z+3, r25	; 0x03
    a890:	82 83       	std	Z+2, r24	; 0x02
    a892:	80 91 6d 11 	lds	r24, 0x116D
    a896:	90 91 6e 11 	lds	r25, 0x116E
    a89a:	a0 91 6f 11 	lds	r26, 0x116F
    a89e:	b0 91 70 11 	lds	r27, 0x1170
    a8a2:	84 83       	std	Z+4, r24	; 0x04
    a8a4:	95 83       	std	Z+5, r25	; 0x05
    a8a6:	a6 83       	std	Z+6, r26	; 0x06
    a8a8:	b7 83       	std	Z+7, r27	; 0x07
    a8aa:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		fprintf(stdout,"--altitude: %f\r\n",alti);
    a8ae:	ed b7       	in	r30, 0x3d	; 61
    a8b0:	fe b7       	in	r31, 0x3e	; 62
    a8b2:	31 96       	adiw	r30, 0x01	; 1
    a8b4:	80 91 2f 17 	lds	r24, 0x172F
    a8b8:	90 91 30 17 	lds	r25, 0x1730
    a8bc:	ad b7       	in	r26, 0x3d	; 61
    a8be:	be b7       	in	r27, 0x3e	; 62
    a8c0:	12 96       	adiw	r26, 0x02	; 2
    a8c2:	9c 93       	st	X, r25
    a8c4:	8e 93       	st	-X, r24
    a8c6:	11 97       	sbiw	r26, 0x01	; 1
    a8c8:	82 e6       	ldi	r24, 0x62	; 98
    a8ca:	98 e0       	ldi	r25, 0x08	; 8
    a8cc:	93 83       	std	Z+3, r25	; 0x03
    a8ce:	82 83       	std	Z+2, r24	; 0x02
    a8d0:	80 91 71 11 	lds	r24, 0x1171
    a8d4:	90 91 72 11 	lds	r25, 0x1172
    a8d8:	a0 91 73 11 	lds	r26, 0x1173
    a8dc:	b0 91 74 11 	lds	r27, 0x1174
    a8e0:	84 83       	std	Z+4, r24	; 0x04
    a8e2:	95 83       	std	Z+5, r25	; 0x05
    a8e4:	a6 83       	std	Z+6, r26	; 0x06
    a8e6:	b7 83       	std	Z+7, r27	; 0x07
    a8e8:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		fprintf(stdout,"--UTC time: %lu\r\n",utcTime);
    a8ec:	ed b7       	in	r30, 0x3d	; 61
    a8ee:	fe b7       	in	r31, 0x3e	; 62
    a8f0:	31 96       	adiw	r30, 0x01	; 1
    a8f2:	80 91 2f 17 	lds	r24, 0x172F
    a8f6:	90 91 30 17 	lds	r25, 0x1730
    a8fa:	ad b7       	in	r26, 0x3d	; 61
    a8fc:	be b7       	in	r27, 0x3e	; 62
    a8fe:	12 96       	adiw	r26, 0x02	; 2
    a900:	9c 93       	st	X, r25
    a902:	8e 93       	st	-X, r24
    a904:	11 97       	sbiw	r26, 0x01	; 1
    a906:	83 e7       	ldi	r24, 0x73	; 115
    a908:	98 e0       	ldi	r25, 0x08	; 8
    a90a:	93 83       	std	Z+3, r25	; 0x03
    a90c:	82 83       	std	Z+2, r24	; 0x02
    a90e:	80 91 c8 16 	lds	r24, 0x16C8
    a912:	90 91 c9 16 	lds	r25, 0x16C9
    a916:	a0 91 ca 16 	lds	r26, 0x16CA
    a91a:	b0 91 cb 16 	lds	r27, 0x16CB
    a91e:	84 83       	std	Z+4, r24	; 0x04
    a920:	95 83       	std	Z+5, r25	; 0x05
    a922:	a6 83       	std	Z+6, r26	; 0x06
    a924:	b7 83       	std	Z+7, r27	; 0x07
    a926:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
		fprintf(stdout,"--number of satellites: %d\r\n",numSatellites); 
    a92a:	0f 90       	pop	r0
    a92c:	0f 90       	pop	r0
    a92e:	ed b7       	in	r30, 0x3d	; 61
    a930:	fe b7       	in	r31, 0x3e	; 62
    a932:	31 96       	adiw	r30, 0x01	; 1
    a934:	80 91 2f 17 	lds	r24, 0x172F
    a938:	90 91 30 17 	lds	r25, 0x1730
    a93c:	ad b7       	in	r26, 0x3d	; 61
    a93e:	be b7       	in	r27, 0x3e	; 62
    a940:	12 96       	adiw	r26, 0x02	; 2
    a942:	9c 93       	st	X, r25
    a944:	8e 93       	st	-X, r24
    a946:	11 97       	sbiw	r26, 0x01	; 1
    a948:	85 e8       	ldi	r24, 0x85	; 133
    a94a:	98 e0       	ldi	r25, 0x08	; 8
    a94c:	93 83       	std	Z+3, r25	; 0x03
    a94e:	82 83       	std	Z+2, r24	; 0x02
    a950:	80 91 2b 17 	lds	r24, 0x172B
    a954:	90 91 2c 17 	lds	r25, 0x172C
    a958:	95 83       	std	Z+5, r25	; 0x05
    a95a:	84 83       	std	Z+4, r24	; 0x04
    a95c:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    a960:	8d b7       	in	r24, 0x3d	; 61
    a962:	9e b7       	in	r25, 0x3e	; 62
    a964:	06 96       	adiw	r24, 0x06	; 6
    a966:	0f b6       	in	r0, 0x3f	; 63
    a968:	f8 94       	cli
    a96a:	9e bf       	out	0x3e, r25	; 62
    a96c:	0f be       	out	0x3f, r0	; 63
    a96e:	8d bf       	out	0x3d, r24	; 61
	}
}
    a970:	1f 91       	pop	r17
    a972:	0f 91       	pop	r16
    a974:	ff 90       	pop	r15
    a976:	ef 90       	pop	r14
    a978:	08 95       	ret

0000a97a <main>:
//*****************************************************************************
// Main
//*****************************************************************************

int main(void)
{
    a97a:	2f 92       	push	r2
    a97c:	3f 92       	push	r3
    a97e:	4f 92       	push	r4
    a980:	5f 92       	push	r5
    a982:	6f 92       	push	r6
    a984:	7f 92       	push	r7
    a986:	8f 92       	push	r8
    a988:	9f 92       	push	r9
    a98a:	af 92       	push	r10
    a98c:	bf 92       	push	r11
    a98e:	cf 92       	push	r12
    a990:	df 92       	push	r13
    a992:	ef 92       	push	r14
    a994:	ff 92       	push	r15
    a996:	0f 93       	push	r16
    a998:	1f 93       	push	r17
    a99a:	df 93       	push	r29
    a99c:	cf 93       	push	r28
    a99e:	cd b7       	in	r28, 0x3d	; 61
    a9a0:	de b7       	in	r29, 0x3e	; 62
    a9a2:	eb 97       	sbiw	r28, 0x3b	; 59
    a9a4:	0f b6       	in	r0, 0x3f	; 63
    a9a6:	f8 94       	cli
    a9a8:	de bf       	out	0x3e, r29	; 62
    a9aa:	0f be       	out	0x3f, r0	; 63
    a9ac:	cd bf       	out	0x3d, r28	; 61
	//init UARTs
	uart_init_0();
    a9ae:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <uart_init_0>
	uart_init_1();
    a9b2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <uart_init_1>
	stdout = stdin = stderr = &uart_str_0;
    a9b6:	63 e0       	ldi	r22, 0x03	; 3
    a9b8:	71 e1       	ldi	r23, 0x11	; 17
    a9ba:	70 93 32 17 	sts	0x1732, r23
    a9be:	60 93 31 17 	sts	0x1731, r22
    a9c2:	70 93 2e 17 	sts	0x172E, r23
    a9c6:	60 93 2d 17 	sts	0x172D, r22
    a9ca:	70 93 30 17 	sts	0x1730, r23
    a9ce:	60 93 2f 17 	sts	0x172F, r22
	
	if(dataLog==0)
    a9d2:	80 91 4c 13 	lds	r24, 0x134C
    a9d6:	90 91 4d 13 	lds	r25, 0x134D
    a9da:	89 2b       	or	r24, r25
    a9dc:	21 f4       	brne	.+8      	; 0xa9e6 <main+0x6c>
		fprintf(stdout,"Starting...\n\r");
    a9de:	82 ea       	ldi	r24, 0xA2	; 162
    a9e0:	98 e0       	ldi	r25, 0x08	; 8
    a9e2:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
	
	//set DDRs

	DDRG=0xff;
    a9e6:	8f ef       	ldi	r24, 0xFF	; 255
    a9e8:	83 bb       	out	0x13, r24	; 19
	DDRA=0xff;
    a9ea:	81 b9       	out	0x01, r24	; 1

	//Setting Stepper A Current to zero
	i2cInitA();
    a9ec:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <i2cInitA>
	u08 buf[1];      // a buffer can store 8 bytes 
	buf[0] = 0x00;   // hours = 0x19 in the first byte 
    a9f0:	19 82       	std	Y+1, r1	; 0x01
	i2cSendA(TARGET_ADDR, 0, 1, buf);
    a9f2:	8e e5       	ldi	r24, 0x5E	; 94
    a9f4:	60 e0       	ldi	r22, 0x00	; 0
    a9f6:	41 e0       	ldi	r20, 0x01	; 1
    a9f8:	8e 01       	movw	r16, r28
    a9fa:	0f 5f       	subi	r16, 0xFF	; 255
    a9fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a9fe:	98 01       	movw	r18, r16
    aa00:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <i2cSendA>

	//Setting Stepper B Current to zero
	i2cInitB();
    aa04:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <i2cInitB>
	i2cSendB(TARGET_ADDR, 0, 1, buf);
    aa08:	8e e5       	ldi	r24, 0x5E	; 94
    aa0a:	60 e0       	ldi	r22, 0x00	; 0
    aa0c:	41 e0       	ldi	r20, 0x01	; 1
    aa0e:	98 01       	movw	r18, r16
    aa10:	0e 94 c2 1a 	call	0x3584	; 0x3584 <i2cSendB>

	//Setup the Magnetometer
	i2c_init_HW();
    aa14:	0e 94 74 21 	call	0x42e8	; 0x42e8 <i2c_init_HW>
	setupMag();
    aa18:	0e 94 16 4a 	call	0x942c	; 0x942c <setupMag>

	PORTG |= 0b00000100; //disable jack stepper
    aa1c:	a2 9a       	sbi	0x14, 2	; 20
	PORTA |= 0b00010000; //disable wheel stepper
    aa1e:	14 9a       	sbi	0x02, 4	; 2

	//init the A to D converter 

    ADMUX = 0b01000110; //sets voltage ref, right adjust result, sets most of MUX
    aa20:	86 e4       	ldi	r24, 0x46	; 70
    aa22:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA = ((1<<ADEN) | (1<<ADIE)) + 7 ; //enables the ADC, sets prescaler to 127, sets int enable
    aa26:	8f e8       	ldi	r24, 0x8F	; 143
    aa28:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB |= 0b00001000; //one of the MUX bits is in here
    aa2c:	80 91 7b 00 	lds	r24, 0x007B
    aa30:	88 60       	ori	r24, 0x08	; 8
    aa32:	80 93 7b 00 	sts	0x007B, r24
	DIDR0 = ((1<<ADC5D) | (1<<ADC4D) | (1<<ADC1D) | (1<<ADC0D)); //disabling digital inputs
    aa36:	83 e3       	ldi	r24, 0x33	; 51
    aa38:	80 93 7e 00 	sts	0x007E, r24
	DIDR2 = (1<<ADC15D);
    aa3c:	80 e8       	ldi	r24, 0x80	; 128
    aa3e:	80 93 7d 00 	sts	0x007D, r24

    SMCR = (1<<SM0) ; // sleep -- choose ADC mode
    aa42:	82 e0       	ldi	r24, 0x02	; 2
    aa44:	83 bf       	out	0x33, r24	; 51

	sleep_enable();
    aa46:	83 b7       	in	r24, 0x33	; 51
    aa48:	81 60       	ori	r24, 0x01	; 1
    aa4a:	83 bf       	out	0x33, r24	; 51

	//Set up 16-bit TIMER1 for 1mSec ticks for RTC
	TIMSK1 = 3;						//turn on timer 1 cmp match ISR and overflow ISR
    aa4c:	83 e0       	ldi	r24, 0x03	; 3
    aa4e:	80 93 6f 00 	sts	0x006F, r24
	OCR1AH = 1999U >> 8; 			//sets OCR1A to 2000 ticks
    aa52:	87 e0       	ldi	r24, 0x07	; 7
    aa54:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 1999U & 0xff;
    aa58:	8f ec       	ldi	r24, 0xCF	; 207
    aa5a:	80 93 88 00 	sts	0x0088, r24
	TCCR1B = ((1<<CS11) | (1<<WGM12));	//clock prescalar to 8 and set to CTC mode
    aa5e:	8a e0       	ldi	r24, 0x0A	; 10
    aa60:	80 93 81 00 	sts	0x0081, r24
	
	sei(); //crank up them interrupts
    aa64:	78 94       	sei
	
	//Get Initial GPS data
	fscanf(&uart_str_1, "%s", gpsbuff);
    aa66:	00 d0       	rcall	.+0      	; 0xaa68 <main+0xee>
    aa68:	00 d0       	rcall	.+0      	; 0xaa6a <main+0xf0>
    aa6a:	00 d0       	rcall	.+0      	; 0xaa6c <main+0xf2>
    aa6c:	ed b7       	in	r30, 0x3d	; 61
    aa6e:	fe b7       	in	r31, 0x3e	; 62
    aa70:	31 96       	adiw	r30, 0x01	; 1
    aa72:	81 e1       	ldi	r24, 0x11	; 17
    aa74:	91 e1       	ldi	r25, 0x11	; 17
    aa76:	ad b7       	in	r26, 0x3d	; 61
    aa78:	be b7       	in	r27, 0x3e	; 62
    aa7a:	12 96       	adiw	r26, 0x02	; 2
    aa7c:	9c 93       	st	X, r25
    aa7e:	8e 93       	st	-X, r24
    aa80:	11 97       	sbiw	r26, 0x01	; 1
    aa82:	80 eb       	ldi	r24, 0xB0	; 176
    aa84:	98 e0       	ldi	r25, 0x08	; 8
    aa86:	93 83       	std	Z+3, r25	; 0x03
    aa88:	82 83       	std	Z+2, r24	; 0x02
    aa8a:	00 ed       	ldi	r16, 0xD0	; 208
    aa8c:	16 e1       	ldi	r17, 0x16	; 22
    aa8e:	15 83       	std	Z+5, r17	; 0x05
    aa90:	04 83       	std	Z+4, r16	; 0x04
    aa92:	0e 94 ae 68 	call	0xd15c	; 0xd15c <fscanf>

	if(dataLog==0)
    aa96:	ed b7       	in	r30, 0x3d	; 61
    aa98:	fe b7       	in	r31, 0x3e	; 62
    aa9a:	36 96       	adiw	r30, 0x06	; 6
    aa9c:	0f b6       	in	r0, 0x3f	; 63
    aa9e:	f8 94       	cli
    aaa0:	fe bf       	out	0x3e, r31	; 62
    aaa2:	0f be       	out	0x3f, r0	; 63
    aaa4:	ed bf       	out	0x3d, r30	; 61
    aaa6:	80 91 4c 13 	lds	r24, 0x134C
    aaaa:	90 91 4d 13 	lds	r25, 0x134D
    aaae:	89 2b       	or	r24, r25
    aab0:	89 f5       	brne	.+98     	; 0xab14 <main+0x19a>
	{
		//Welcome
		fprintf(stdout, "Received GPS sentence: %s\n---\n", gpsbuff);
    aab2:	00 d0       	rcall	.+0      	; 0xaab4 <main+0x13a>
    aab4:	00 d0       	rcall	.+0      	; 0xaab6 <main+0x13c>
    aab6:	00 d0       	rcall	.+0      	; 0xaab8 <main+0x13e>
    aab8:	ed b7       	in	r30, 0x3d	; 61
    aaba:	fe b7       	in	r31, 0x3e	; 62
    aabc:	31 96       	adiw	r30, 0x01	; 1
    aabe:	80 91 2f 17 	lds	r24, 0x172F
    aac2:	90 91 30 17 	lds	r25, 0x1730
    aac6:	ad b7       	in	r26, 0x3d	; 61
    aac8:	be b7       	in	r27, 0x3e	; 62
    aaca:	12 96       	adiw	r26, 0x02	; 2
    aacc:	9c 93       	st	X, r25
    aace:	8e 93       	st	-X, r24
    aad0:	11 97       	sbiw	r26, 0x01	; 1
    aad2:	83 eb       	ldi	r24, 0xB3	; 179
    aad4:	98 e0       	ldi	r25, 0x08	; 8
    aad6:	93 83       	std	Z+3, r25	; 0x03
    aad8:	82 83       	std	Z+2, r24	; 0x02
    aada:	15 83       	std	Z+5, r17	; 0x05
    aadc:	04 83       	std	Z+4, r16	; 0x04
    aade:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

		fprintf(stdout, "*---Manual Operation---*\r\n");
    aae2:	ed b7       	in	r30, 0x3d	; 61
    aae4:	fe b7       	in	r31, 0x3e	; 62
    aae6:	36 96       	adiw	r30, 0x06	; 6
    aae8:	0f b6       	in	r0, 0x3f	; 63
    aaea:	f8 94       	cli
    aaec:	fe bf       	out	0x3e, r31	; 62
    aaee:	0f be       	out	0x3f, r0	; 63
    aaf0:	ed bf       	out	0x3d, r30	; 61
    aaf2:	60 91 2f 17 	lds	r22, 0x172F
    aaf6:	70 91 30 17 	lds	r23, 0x1730
    aafa:	82 ed       	ldi	r24, 0xD2	; 210
    aafc:	98 e0       	ldi	r25, 0x08	; 8
    aafe:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
		fprintf(stdout, "Welcome to HelioWatcher -- type help for a list of commands.\r\n");
    ab02:	60 91 2f 17 	lds	r22, 0x172F
    ab06:	70 91 30 17 	lds	r23, 0x1730
    ab0a:	8d ee       	ldi	r24, 0xED	; 237
    ab0c:	98 e0       	ldi	r25, 0x08	; 8
    ab0e:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
    ab12:	0c c0       	rjmp	.+24     	; 0xab2c <main+0x1b2>
	}
	else
	{
		//do some initialization for the data logger
		updateAccel();
    ab14:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
		updateGPS();
    ab18:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <updateGPS>
		optimize2();
    ab1c:	0e 94 58 42 	call	0x84b0	; 0x84b0 <optimize2>
		autoMode = 1;
    ab20:	81 e0       	ldi	r24, 0x01	; 1
    ab22:	90 e0       	ldi	r25, 0x00	; 0
    ab24:	90 93 49 13 	sts	0x1349, r25
    ab28:	80 93 48 13 	sts	0x1348, r24
		{
			 //Print a prompt, and wait for input from the User.
			fprintf(stdout, ">") ;
	
			
			memset(input, 0, sizeof(input)); //Clear previous input
    ab2c:	b6 e2       	ldi	r27, 0x26	; 38
    ab2e:	8b 2e       	mov	r8, r27
    ab30:	91 2c       	mov	r9, r1
    ab32:	8c 0e       	add	r8, r28
    ab34:	9d 1e       	adc	r9, r29
			fgets(input, 20, stdin); //Get the actual input
			spaceNum = strchr(input,' '); //Find space delimiter
			memset(valStr, 0, sizeof(valStr)); //Clear previous argument
    ab36:	a2 e0       	ldi	r26, 0x02	; 2
    ab38:	2a 2e       	mov	r2, r26
    ab3a:	31 2c       	mov	r3, r1
    ab3c:	2c 0e       	add	r2, r28
    ab3e:	3d 1e       	adc	r3, r29
	  		strncpy(valStr, spaceNum, strlen(spaceNum)); //Copy argument to valStr

			memset(cmd_raw, 0, sizeof(cmd_raw)); //Clear previous command
    ab40:	9e 01       	movw	r18, r28
    ab42:	2c 5e       	subi	r18, 0xEC	; 236
    ab44:	3f 4f       	sbci	r19, 0xFF	; 255
    ab46:	3b af       	std	Y+59, r19	; 0x3b
    ab48:	2a af       	std	Y+58, r18	; 0x3a
				fprintf(stdout, "Formatted date string: %s\r\n", fmtDateString);	
			}
			else if (strcmp(cmd,"panel") == 0)
			{
				updatePanel();
				dtostrf(panelVoltage, 6, 3, v_string);
    ab4a:	fc e0       	ldi	r31, 0x0C	; 12
    ab4c:	af 2e       	mov	r10, r31
    ab4e:	f7 e1       	ldi	r31, 0x17	; 23
    ab50:	bf 2e       	mov	r11, r31
					fprintf(stdout, "%u", MIN_ROT);
				}			
				else if(opt_rot > MAX_ROT)
				{
					goToRot(MAX_ROT);
					fprintf(stdout, "%u", MAX_ROT);
    ab52:	ee e6       	ldi	r30, 0x6E	; 110
    ab54:	4e 2e       	mov	r4, r30
    ab56:	ef e0       	ldi	r30, 0x0F	; 15
    ab58:	5e 2e       	mov	r5, r30
	char input[20] ;
	char cmd_raw[18];
	char *cmd;
	
	while(1) {
		if(dataLog==0)
    ab5a:	80 91 4c 13 	lds	r24, 0x134C
    ab5e:	90 91 4d 13 	lds	r25, 0x134D
    ab62:	89 2b       	or	r24, r25
    ab64:	09 f0       	breq	.+2      	; 0xab68 <main+0x1ee>
    ab66:	46 c7       	rjmp	.+3724   	; 0xb9f4 <main+0x107a>
		{
			 //Print a prompt, and wait for input from the User.
			fprintf(stdout, ">") ;
    ab68:	60 91 2f 17 	lds	r22, 0x172F
    ab6c:	70 91 30 17 	lds	r23, 0x1730
    ab70:	8e e3       	ldi	r24, 0x3E	; 62
    ab72:	90 e0       	ldi	r25, 0x00	; 0
    ab74:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
	
			
			memset(input, 0, sizeof(input)); //Clear previous input
    ab78:	84 e1       	ldi	r24, 0x14	; 20
    ab7a:	d4 01       	movw	r26, r8
    ab7c:	1d 92       	st	X+, r1
    ab7e:	8a 95       	dec	r24
    ab80:	e9 f7       	brne	.-6      	; 0xab7c <main+0x202>
			fgets(input, 20, stdin); //Get the actual input
    ab82:	40 91 2d 17 	lds	r20, 0x172D
    ab86:	50 91 2e 17 	lds	r21, 0x172E
    ab8a:	c4 01       	movw	r24, r8
    ab8c:	64 e1       	ldi	r22, 0x14	; 20
    ab8e:	70 e0       	ldi	r23, 0x00	; 0
    ab90:	0e 94 13 68 	call	0xd026	; 0xd026 <fgets>
			spaceNum = strchr(input,' '); //Find space delimiter
    ab94:	c4 01       	movw	r24, r8
    ab96:	60 e2       	ldi	r22, 0x20	; 32
    ab98:	70 e0       	ldi	r23, 0x00	; 0
    ab9a:	0e 94 ae 67 	call	0xcf5c	; 0xcf5c <strchr>
    ab9e:	18 2f       	mov	r17, r24
    aba0:	09 2f       	mov	r16, r25
			memset(valStr, 0, sizeof(valStr)); //Clear previous argument
    aba2:	72 e1       	ldi	r23, 0x12	; 18
    aba4:	f7 2e       	mov	r15, r23
    aba6:	f1 01       	movw	r30, r2
    aba8:	2f 2d       	mov	r18, r15
    abaa:	11 92       	st	Z+, r1
    abac:	2a 95       	dec	r18
    abae:	e9 f7       	brne	.-6      	; 0xabaa <main+0x230>
	  		strncpy(valStr, spaceNum, strlen(spaceNum)); //Copy argument to valStr
    abb0:	e8 2f       	mov	r30, r24
    abb2:	f9 2f       	mov	r31, r25
    abb4:	df 01       	movw	r26, r30
    abb6:	0d 90       	ld	r0, X+
    abb8:	00 20       	and	r0, r0
    abba:	e9 f7       	brne	.-6      	; 0xabb6 <main+0x23c>
    abbc:	11 97       	sbiw	r26, 0x01	; 1
    abbe:	ae 1b       	sub	r26, r30
    abc0:	bf 0b       	sbc	r27, r31
    abc2:	c1 01       	movw	r24, r2
    abc4:	61 2f       	mov	r22, r17
    abc6:	70 2f       	mov	r23, r16
    abc8:	ad 01       	movw	r20, r26
    abca:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <strncpy>

			memset(cmd_raw, 0, sizeof(cmd_raw)); //Clear previous command
    abce:	aa ad       	ldd	r26, Y+58	; 0x3a
    abd0:	bb ad       	ldd	r27, Y+59	; 0x3b
    abd2:	1d 92       	st	X+, r1
    abd4:	fa 94       	dec	r15
    abd6:	e9 f7       	brne	.-6      	; 0xabd2 <main+0x258>
			strncpy(cmd_raw, input, strlen(input)-strlen(spaceNum)); //Copy command to cmd_raw
    abd8:	f4 01       	movw	r30, r8
    abda:	01 90       	ld	r0, Z+
    abdc:	00 20       	and	r0, r0
    abde:	e9 f7       	brne	.-6      	; 0xabda <main+0x260>
    abe0:	9f 01       	movw	r18, r30
    abe2:	21 50       	subi	r18, 0x01	; 1
    abe4:	30 40       	sbci	r19, 0x00	; 0
    abe6:	28 19       	sub	r18, r8
    abe8:	39 09       	sbc	r19, r9
    abea:	a1 2f       	mov	r26, r17
    abec:	b0 2f       	mov	r27, r16
    abee:	fd 01       	movw	r30, r26
    abf0:	01 90       	ld	r0, Z+
    abf2:	00 20       	and	r0, r0
    abf4:	e9 f7       	brne	.-6      	; 0xabf0 <main+0x276>
    abf6:	31 97       	sbiw	r30, 0x01	; 1
    abf8:	ea 1b       	sub	r30, r26
    abfa:	fb 0b       	sbc	r31, r27
    abfc:	2e 1b       	sub	r18, r30
    abfe:	3f 0b       	sbc	r19, r31
    ac00:	ce 01       	movw	r24, r28
    ac02:	44 96       	adiw	r24, 0x14	; 20
    ac04:	b4 01       	movw	r22, r8
    ac06:	a9 01       	movw	r20, r18
    ac08:	0e 94 d0 67 	call	0xcfa0	; 0xcfa0 <strncpy>
			cmd = trim(cmd_raw); //clean it
    ac0c:	ce 01       	movw	r24, r28
    ac0e:	44 96       	adiw	r24, 0x14	; 20
    ac10:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <trim>
    ac14:	8c 01       	movw	r16, r24

			//Convert to various formats
			valNum = atoi(trim(valStr));
    ac16:	c1 01       	movw	r24, r2
    ac18:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <trim>
    ac1c:	0e 94 7b 66 	call	0xccf6	; 0xccf6 <atoi>
    ac20:	3c 01       	movw	r6, r24
			valFloat = atof(trim(valStr));
    ac22:	c1 01       	movw	r24, r2
    ac24:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <trim>
    ac28:	0e 94 77 66 	call	0xccee	; 0xccee <atof>
    ac2c:	6b 01       	movw	r12, r22
    ac2e:	7c 01       	movw	r14, r24

			//Big long pseudo-switch
			if (strcmp(cmd,"help") == 0)
    ac30:	c8 01       	movw	r24, r16
    ac32:	6c e2       	ldi	r22, 0x2C	; 44
    ac34:	79 e0       	ldi	r23, 0x09	; 9
    ac36:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    ac3a:	00 97       	sbiw	r24, 0x00	; 0
    ac3c:	09 f0       	breq	.+2      	; 0xac40 <main+0x2c6>
    ac3e:	f7 c0       	rjmp	.+494    	; 0xae2e <main+0x4b4>
			{
				fprintf(stdout, "Type a command (followed by an argument, if necessary) using the following syntax:\r\n");
    ac40:	60 91 2f 17 	lds	r22, 0x172F
    ac44:	70 91 30 17 	lds	r23, 0x1730
    ac48:	81 e3       	ldi	r24, 0x31	; 49
    ac4a:	99 e0       	ldi	r25, 0x09	; 9
    ac4c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "accel -- read accelerometer value (void)\r\n");
    ac50:	60 91 2f 17 	lds	r22, 0x172F
    ac54:	70 91 30 17 	lds	r23, 0x1730
    ac58:	86 e8       	ldi	r24, 0x86	; 134
    ac5a:	99 e0       	ldi	r25, 0x09	; 9
    ac5c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "angle -- go to angle (degrees)\r\n");
    ac60:	60 91 2f 17 	lds	r22, 0x172F
    ac64:	70 91 30 17 	lds	r23, 0x1730
    ac68:	81 eb       	ldi	r24, 0xB1	; 177
    ac6a:	99 e0       	ldi	r25, 0x09	; 9
    ac6c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "angletoscrew -- convert angle to screw (degrees)\r\n");
    ac70:	60 91 2f 17 	lds	r22, 0x172F
    ac74:	70 91 30 17 	lds	r23, 0x1730
    ac78:	82 ed       	ldi	r24, 0xD2	; 210
    ac7a:	99 e0       	ldi	r25, 0x09	; 9
    ac7c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "auto -- go into auto mode (void) **can't leave this\r\n");
    ac80:	60 91 2f 17 	lds	r22, 0x172F
    ac84:	70 91 30 17 	lds	r23, 0x1730
    ac88:	85 e0       	ldi	r24, 0x05	; 5
    ac8a:	9a e0       	ldi	r25, 0x0A	; 10
    ac8c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "ccw -- go to nearest CCW screw (void)\r\n");
    ac90:	60 91 2f 17 	lds	r22, 0x172F
    ac94:	70 91 30 17 	lds	r23, 0x1730
    ac98:	8b e3       	ldi	r24, 0x3B	; 59
    ac9a:	9a e0       	ldi	r25, 0x0A	; 10
    ac9c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "compass -- get compass rotation (void) **DEPRECATED\r\n");
    aca0:	60 91 2f 17 	lds	r22, 0x172F
    aca4:	70 91 30 17 	lds	r23, 0x1730
    aca8:	83 e6       	ldi	r24, 0x63	; 99
    acaa:	9a e0       	ldi	r25, 0x0A	; 10
    acac:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "cw -- go to nearest CW screw (void)\r\n");  
    acb0:	60 91 2f 17 	lds	r22, 0x172F
    acb4:	70 91 30 17 	lds	r23, 0x1730
    acb8:	89 e9       	ldi	r24, 0x99	; 153
    acba:	9a e0       	ldi	r25, 0x0A	; 10
    acbc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "data -- go into data logging mode (void) **can't leave this\r\n");
    acc0:	60 91 2f 17 	lds	r22, 0x172F
    acc4:	70 91 30 17 	lds	r23, 0x1730
    acc8:	8f eb       	ldi	r24, 0xBF	; 191
    acca:	9a e0       	ldi	r25, 0x0A	; 10
    accc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "date -- display the current date (void)\r\n");
    acd0:	60 91 2f 17 	lds	r22, 0x172F
    acd4:	70 91 30 17 	lds	r23, 0x1730
    acd8:	8d ef       	ldi	r24, 0xFD	; 253
    acda:	9a e0       	ldi	r25, 0x0A	; 10
    acdc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "down -- move down (ms)\r\n");
    ace0:	60 91 2f 17 	lds	r22, 0x172F
    ace4:	70 91 30 17 	lds	r23, 0x1730
    ace8:	87 e2       	ldi	r24, 0x27	; 39
    acea:	9b e0       	ldi	r25, 0x0B	; 11
    acec:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "gotoopt -- move to optimal position (void) **must run opt first\r\n");
    acf0:	60 91 2f 17 	lds	r22, 0x172F
    acf4:	70 91 30 17 	lds	r23, 0x1730
    acf8:	80 e4       	ldi	r24, 0x40	; 64
    acfa:	9b e0       	ldi	r25, 0x0B	; 11
    acfc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "gps -- read GPS values (void)\r\n");
    ad00:	60 91 2f 17 	lds	r22, 0x172F
    ad04:	70 91 30 17 	lds	r23, 0x1730
    ad08:	82 e8       	ldi	r24, 0x82	; 130
    ad0a:	9b e0       	ldi	r25, 0x0B	; 11
    ad0c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "help -- list HelioWatcher shell functions\r\n");
    ad10:	60 91 2f 17 	lds	r22, 0x172F
    ad14:	70 91 30 17 	lds	r23, 0x1730
    ad18:	82 ea       	ldi	r24, 0xA2	; 162
    ad1a:	9b e0       	ldi	r25, 0x0B	; 11
    ad1c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "left -- move left (ms)\r\n");
    ad20:	60 91 2f 17 	lds	r22, 0x172F
    ad24:	70 91 30 17 	lds	r23, 0x1730
    ad28:	8e ec       	ldi	r24, 0xCE	; 206
    ad2a:	9b e0       	ldi	r25, 0x0B	; 11
    ad2c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "opt -- get optimal positioning info based on current GPS data (void) **must run gps first\r\n");
    ad30:	60 91 2f 17 	lds	r22, 0x172F
    ad34:	70 91 30 17 	lds	r23, 0x1730
    ad38:	87 ee       	ldi	r24, 0xE7	; 231
    ad3a:	9b e0       	ldi	r25, 0x0B	; 11
    ad3c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "panel -- display the panel voltage (void)\r\n");
    ad40:	60 91 2f 17 	lds	r22, 0x172F
    ad44:	70 91 30 17 	lds	r23, 0x1730
    ad48:	83 e4       	ldi	r24, 0x43	; 67
    ad4a:	9c e0       	ldi	r25, 0x0C	; 12
    ad4c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "quad -- view quadrature values (void)\r\n");
    ad50:	60 91 2f 17 	lds	r22, 0x172F
    ad54:	70 91 30 17 	lds	r23, 0x1730
    ad58:	8f e6       	ldi	r24, 0x6F	; 111
    ad5a:	9c e0       	ldi	r25, 0x0C	; 12
    ad5c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "record -- print string that would be sent to data logger (void)\r\n");
    ad60:	60 91 2f 17 	lds	r22, 0x172F
    ad64:	70 91 30 17 	lds	r23, 0x1730
    ad68:	87 e9       	ldi	r24, 0x97	; 151
    ad6a:	9c e0       	ldi	r25, 0x0C	; 12
    ad6c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "right -- move right (ms)\r\n");
    ad70:	60 91 2f 17 	lds	r22, 0x172F
    ad74:	70 91 30 17 	lds	r23, 0x1730
    ad78:	89 ed       	ldi	r24, 0xD9	; 217
    ad7a:	9c e0       	ldi	r25, 0x0C	; 12
    ad7c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "rot -- go to rot (degrees) **DEPRECATED\r\n");
    ad80:	60 91 2f 17 	lds	r22, 0x172F
    ad84:	70 91 30 17 	lds	r23, 0x1730
    ad88:	84 ef       	ldi	r24, 0xF4	; 244
    ad8a:	9c e0       	ldi	r25, 0x0C	; 12
    ad8c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "screw -- go to arbitrary screw (screw num)\r\n");
    ad90:	60 91 2f 17 	lds	r22, 0x172F
    ad94:	70 91 30 17 	lds	r23, 0x1730
    ad98:	8e e1       	ldi	r24, 0x1E	; 30
    ad9a:	9d e0       	ldi	r25, 0x0D	; 13
    ad9c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "setday -- set UTC day (int)\r\n");
    ada0:	60 91 2f 17 	lds	r22, 0x172F
    ada4:	70 91 30 17 	lds	r23, 0x1730
    ada8:	8b e4       	ldi	r24, 0x4B	; 75
    adaa:	9d e0       	ldi	r25, 0x0D	; 13
    adac:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "sethour -- set UTC hour (int)\r\n");
    adb0:	60 91 2f 17 	lds	r22, 0x172F
    adb4:	70 91 30 17 	lds	r23, 0x1730
    adb8:	89 e6       	ldi	r24, 0x69	; 105
    adba:	9d e0       	ldi	r25, 0x0D	; 13
    adbc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "setmin -- set UTC min (int)\r\n");
    adc0:	60 91 2f 17 	lds	r22, 0x172F
    adc4:	70 91 30 17 	lds	r23, 0x1730
    adc8:	89 e8       	ldi	r24, 0x89	; 137
    adca:	9d e0       	ldi	r25, 0x0D	; 13
    adcc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "setmonth -- set UTC month (int)\r\n");
    add0:	60 91 2f 17 	lds	r22, 0x172F
    add4:	70 91 30 17 	lds	r23, 0x1730
    add8:	87 ea       	ldi	r24, 0xA7	; 167
    adda:	9d e0       	ldi	r25, 0x0D	; 13
    addc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "setsec -- set UTC sec (int)\r\n");
    ade0:	60 91 2f 17 	lds	r22, 0x172F
    ade4:	70 91 30 17 	lds	r23, 0x1730
    ade8:	89 ec       	ldi	r24, 0xC9	; 201
    adea:	9d e0       	ldi	r25, 0x0D	; 13
    adec:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "setyear -- set UTC year (int)\r\n");
    adf0:	60 91 2f 17 	lds	r22, 0x172F
    adf4:	70 91 30 17 	lds	r23, 0x1730
    adf8:	87 ee       	ldi	r24, 0xE7	; 231
    adfa:	9d e0       	ldi	r25, 0x0D	; 13
    adfc:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "time -- display the current time (void)\r\n");
    ae00:	60 91 2f 17 	lds	r22, 0x172F
    ae04:	70 91 30 17 	lds	r23, 0x1730
    ae08:	87 e0       	ldi	r24, 0x07	; 7
    ae0a:	9e e0       	ldi	r25, 0x0E	; 14
    ae0c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "torch -- orient based on quadrature demo (sensitivity 0-100) **can't leave this\r\n");
    ae10:	60 91 2f 17 	lds	r22, 0x172F
    ae14:	70 91 30 17 	lds	r23, 0x1730
    ae18:	81 e3       	ldi	r24, 0x31	; 49
    ae1a:	9e e0       	ldi	r25, 0x0E	; 14
    ae1c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				fprintf(stdout, "up -- move up (ms)\r\n");					
    ae20:	60 91 2f 17 	lds	r22, 0x172F
    ae24:	70 91 30 17 	lds	r23, 0x1730
    ae28:	83 e8       	ldi	r24, 0x83	; 131
    ae2a:	9e e0       	ldi	r25, 0x0E	; 14
    ae2c:	e0 c5       	rjmp	.+3008   	; 0xb9ee <main+0x1074>
			}
			else if (strcmp(cmd,"opt") == 0)
    ae2e:	c8 01       	movw	r24, r16
    ae30:	68 e9       	ldi	r22, 0x98	; 152
    ae32:	7e e0       	ldi	r23, 0x0E	; 14
    ae34:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    ae38:	00 97       	sbiw	r24, 0x00	; 0
    ae3a:	19 f4       	brne	.+6      	; 0xae42 <main+0x4c8>
			{
				optimize2();
    ae3c:	0e 94 58 42 	call	0x84b0	; 0x84b0 <optimize2>
    ae40:	8c ce       	rjmp	.-744    	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"quad") == 0)
    ae42:	c8 01       	movw	r24, r16
    ae44:	6c e9       	ldi	r22, 0x9C	; 156
    ae46:	7e e0       	ldi	r23, 0x0E	; 14
    ae48:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    ae4c:	00 97       	sbiw	r24, 0x00	; 0
    ae4e:	09 f0       	breq	.+2      	; 0xae52 <main+0x4d8>
    ae50:	a8 c0       	rjmp	.+336    	; 0xafa2 <main+0x628>
			{
				updateQuad();
    ae52:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <updateQuad>

				//print values
				dtostrf(Uvoltage, 6, 3, v_string);    
    ae56:	60 91 93 16 	lds	r22, 0x1693
    ae5a:	70 91 94 16 	lds	r23, 0x1694
    ae5e:	80 91 95 16 	lds	r24, 0x1695
    ae62:	90 91 96 16 	lds	r25, 0x1696
    ae66:	46 e0       	ldi	r20, 0x06	; 6
    ae68:	23 e0       	ldi	r18, 0x03	; 3
    ae6a:	0c e0       	ldi	r16, 0x0C	; 12
    ae6c:	17 e1       	ldi	r17, 0x17	; 23
    ae6e:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
				fprintf(stdout, "U voltage: %s\r\n", v_string); 
    ae72:	00 d0       	rcall	.+0      	; 0xae74 <main+0x4fa>
    ae74:	00 d0       	rcall	.+0      	; 0xae76 <main+0x4fc>
    ae76:	00 d0       	rcall	.+0      	; 0xae78 <main+0x4fe>
    ae78:	ed b7       	in	r30, 0x3d	; 61
    ae7a:	fe b7       	in	r31, 0x3e	; 62
    ae7c:	31 96       	adiw	r30, 0x01	; 1
    ae7e:	80 91 2f 17 	lds	r24, 0x172F
    ae82:	90 91 30 17 	lds	r25, 0x1730
    ae86:	ad b7       	in	r26, 0x3d	; 61
    ae88:	be b7       	in	r27, 0x3e	; 62
    ae8a:	12 96       	adiw	r26, 0x02	; 2
    ae8c:	9c 93       	st	X, r25
    ae8e:	8e 93       	st	-X, r24
    ae90:	11 97       	sbiw	r26, 0x01	; 1
    ae92:	21 ea       	ldi	r18, 0xA1	; 161
    ae94:	3e e0       	ldi	r19, 0x0E	; 14
    ae96:	33 83       	std	Z+3, r19	; 0x03
    ae98:	22 83       	std	Z+2, r18	; 0x02
    ae9a:	b5 82       	std	Z+5, r11	; 0x05
    ae9c:	a4 82       	std	Z+4, r10	; 0x04
    ae9e:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
				dtostrf(Lvoltage, 6, 3, v_string);    
    aea2:	60 91 97 16 	lds	r22, 0x1697
    aea6:	70 91 98 16 	lds	r23, 0x1698
    aeaa:	80 91 99 16 	lds	r24, 0x1699
    aeae:	90 91 9a 16 	lds	r25, 0x169A
    aeb2:	ad b7       	in	r26, 0x3d	; 61
    aeb4:	be b7       	in	r27, 0x3e	; 62
    aeb6:	16 96       	adiw	r26, 0x06	; 6
    aeb8:	0f b6       	in	r0, 0x3f	; 63
    aeba:	f8 94       	cli
    aebc:	be bf       	out	0x3e, r27	; 62
    aebe:	0f be       	out	0x3f, r0	; 63
    aec0:	ad bf       	out	0x3d, r26	; 61
    aec2:	46 e0       	ldi	r20, 0x06	; 6
    aec4:	23 e0       	ldi	r18, 0x03	; 3
    aec6:	85 01       	movw	r16, r10
    aec8:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
				fprintf(stdout, "L voltage: %s\r\n", v_string); 
    aecc:	00 d0       	rcall	.+0      	; 0xaece <main+0x554>
    aece:	00 d0       	rcall	.+0      	; 0xaed0 <main+0x556>
    aed0:	00 d0       	rcall	.+0      	; 0xaed2 <main+0x558>
    aed2:	ed b7       	in	r30, 0x3d	; 61
    aed4:	fe b7       	in	r31, 0x3e	; 62
    aed6:	31 96       	adiw	r30, 0x01	; 1
    aed8:	80 91 2f 17 	lds	r24, 0x172F
    aedc:	90 91 30 17 	lds	r25, 0x1730
    aee0:	ad b7       	in	r26, 0x3d	; 61
    aee2:	be b7       	in	r27, 0x3e	; 62
    aee4:	12 96       	adiw	r26, 0x02	; 2
    aee6:	9c 93       	st	X, r25
    aee8:	8e 93       	st	-X, r24
    aeea:	11 97       	sbiw	r26, 0x01	; 1
    aeec:	21 eb       	ldi	r18, 0xB1	; 177
    aeee:	3e e0       	ldi	r19, 0x0E	; 14
    aef0:	33 83       	std	Z+3, r19	; 0x03
    aef2:	22 83       	std	Z+2, r18	; 0x02
    aef4:	b5 82       	std	Z+5, r11	; 0x05
    aef6:	a4 82       	std	Z+4, r10	; 0x04
    aef8:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
				dtostrf(Rvoltage, 6, 3, v_string);    
    aefc:	60 91 c4 16 	lds	r22, 0x16C4
    af00:	70 91 c5 16 	lds	r23, 0x16C5
    af04:	80 91 c6 16 	lds	r24, 0x16C6
    af08:	90 91 c7 16 	lds	r25, 0x16C7
    af0c:	ad b7       	in	r26, 0x3d	; 61
    af0e:	be b7       	in	r27, 0x3e	; 62
    af10:	16 96       	adiw	r26, 0x06	; 6
    af12:	0f b6       	in	r0, 0x3f	; 63
    af14:	f8 94       	cli
    af16:	be bf       	out	0x3e, r27	; 62
    af18:	0f be       	out	0x3f, r0	; 63
    af1a:	ad bf       	out	0x3d, r26	; 61
    af1c:	46 e0       	ldi	r20, 0x06	; 6
    af1e:	23 e0       	ldi	r18, 0x03	; 3
    af20:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
				fprintf(stdout, "R voltage: %s\r\n", v_string);
    af24:	00 d0       	rcall	.+0      	; 0xaf26 <main+0x5ac>
    af26:	00 d0       	rcall	.+0      	; 0xaf28 <main+0x5ae>
    af28:	00 d0       	rcall	.+0      	; 0xaf2a <main+0x5b0>
    af2a:	ed b7       	in	r30, 0x3d	; 61
    af2c:	fe b7       	in	r31, 0x3e	; 62
    af2e:	31 96       	adiw	r30, 0x01	; 1
    af30:	80 91 2f 17 	lds	r24, 0x172F
    af34:	90 91 30 17 	lds	r25, 0x1730
    af38:	ad b7       	in	r26, 0x3d	; 61
    af3a:	be b7       	in	r27, 0x3e	; 62
    af3c:	12 96       	adiw	r26, 0x02	; 2
    af3e:	9c 93       	st	X, r25
    af40:	8e 93       	st	-X, r24
    af42:	11 97       	sbiw	r26, 0x01	; 1
    af44:	21 ec       	ldi	r18, 0xC1	; 193
    af46:	3e e0       	ldi	r19, 0x0E	; 14
    af48:	33 83       	std	Z+3, r19	; 0x03
    af4a:	22 83       	std	Z+2, r18	; 0x02
    af4c:	b5 82       	std	Z+5, r11	; 0x05
    af4e:	a4 82       	std	Z+4, r10	; 0x04
    af50:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
				dtostrf(Dvoltage, 6, 3, v_string);    
    af54:	60 91 9b 16 	lds	r22, 0x169B
    af58:	70 91 9c 16 	lds	r23, 0x169C
    af5c:	80 91 9d 16 	lds	r24, 0x169D
    af60:	90 91 9e 16 	lds	r25, 0x169E
    af64:	ad b7       	in	r26, 0x3d	; 61
    af66:	be b7       	in	r27, 0x3e	; 62
    af68:	16 96       	adiw	r26, 0x06	; 6
    af6a:	0f b6       	in	r0, 0x3f	; 63
    af6c:	f8 94       	cli
    af6e:	be bf       	out	0x3e, r27	; 62
    af70:	0f be       	out	0x3f, r0	; 63
    af72:	ad bf       	out	0x3d, r26	; 61
    af74:	46 e0       	ldi	r20, 0x06	; 6
    af76:	23 e0       	ldi	r18, 0x03	; 3
    af78:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
				fprintf(stdout, "D voltage: %s\r\n", v_string);
    af7c:	00 d0       	rcall	.+0      	; 0xaf7e <main+0x604>
    af7e:	00 d0       	rcall	.+0      	; 0xaf80 <main+0x606>
    af80:	00 d0       	rcall	.+0      	; 0xaf82 <main+0x608>
    af82:	ed b7       	in	r30, 0x3d	; 61
    af84:	fe b7       	in	r31, 0x3e	; 62
    af86:	31 96       	adiw	r30, 0x01	; 1
    af88:	80 91 2f 17 	lds	r24, 0x172F
    af8c:	90 91 30 17 	lds	r25, 0x1730
    af90:	ad b7       	in	r26, 0x3d	; 61
    af92:	be b7       	in	r27, 0x3e	; 62
    af94:	12 96       	adiw	r26, 0x02	; 2
    af96:	9c 93       	st	X, r25
    af98:	8e 93       	st	-X, r24
    af9a:	11 97       	sbiw	r26, 0x01	; 1
    af9c:	21 ed       	ldi	r18, 0xD1	; 209
    af9e:	3e e0       	ldi	r19, 0x0E	; 14
    afa0:	4e c4       	rjmp	.+2204   	; 0xb83e <main+0xec4>

			}
			else if (strcmp(cmd,"torch") == 0)
    afa2:	c8 01       	movw	r24, r16
    afa4:	61 ee       	ldi	r22, 0xE1	; 225
    afa6:	7e e0       	ldi	r23, 0x0E	; 14
    afa8:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    afac:	00 97       	sbiw	r24, 0x00	; 0
    afae:	09 f0       	breq	.+2      	; 0xafb2 <main+0x638>
    afb0:	2c c1       	rjmp	.+600    	; 0xb20a <main+0x890>

					updateQuad();
					UDaxis = Uvoltage-Dvoltage;
					UDchange = abs(UDaxis)*valNum;

					dtostrf(UDaxis, 6, 3, v_string);    
    afb2:	6c e0       	ldi	r22, 0x0C	; 12
    afb4:	26 2e       	mov	r2, r22
    afb6:	67 e1       	ldi	r22, 0x17	; 23
    afb8:	36 2e       	mov	r3, r22

				while(1)
				{

					//Update all the values, and print them
					updateAccel();
    afba:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
					currAngle = accelToAngle(curr_accel);
    afbe:	60 91 7f 16 	lds	r22, 0x167F
    afc2:	70 91 80 16 	lds	r23, 0x1680
    afc6:	80 91 81 16 	lds	r24, 0x1681
    afca:	90 91 82 16 	lds	r25, 0x1682
//*****************************************************************************

//Converts acclerometer value to panel angle.
int accelToAngle(float accel)
{
	return (int)(CALIB_M*accel + CALIB_B);
    afce:	2d e1       	ldi	r18, 0x1D	; 29
    afd0:	38 e3       	ldi	r19, 0x38	; 56
    afd2:	47 ee       	ldi	r20, 0xE7	; 231
    afd4:	5e eb       	ldi	r21, 0xBE	; 190
    afd6:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    afda:	2c e5       	ldi	r18, 0x5C	; 92
    afdc:	3f e8       	ldi	r19, 0x8F	; 143
    afde:	4c e5       	ldi	r20, 0x5C	; 92
    afe0:	53 e4       	ldi	r21, 0x43	; 67
    afe2:	0e 94 d1 60 	call	0xc1a2	; 0xc1a2 <__addsf3>
    afe6:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    afea:	2b 01       	movw	r4, r22
				{

					//Update all the values, and print them
					updateAccel();
					currAngle = accelToAngle(curr_accel);
					fprintf(stdout, "currAngle %u\r\n", currAngle);
    afec:	00 d0       	rcall	.+0      	; 0xafee <main+0x674>
    afee:	00 d0       	rcall	.+0      	; 0xaff0 <main+0x676>
    aff0:	00 d0       	rcall	.+0      	; 0xaff2 <main+0x678>
    aff2:	ed b7       	in	r30, 0x3d	; 61
    aff4:	fe b7       	in	r31, 0x3e	; 62
    aff6:	31 96       	adiw	r30, 0x01	; 1
    aff8:	20 91 2f 17 	lds	r18, 0x172F
    affc:	30 91 30 17 	lds	r19, 0x1730
    b000:	ad b7       	in	r26, 0x3d	; 61
    b002:	be b7       	in	r27, 0x3e	; 62
    b004:	12 96       	adiw	r26, 0x02	; 2
    b006:	3c 93       	st	X, r19
    b008:	2e 93       	st	-X, r18
    b00a:	11 97       	sbiw	r26, 0x01	; 1
    b00c:	27 ee       	ldi	r18, 0xE7	; 231
    b00e:	3e e0       	ldi	r19, 0x0E	; 14
    b010:	33 83       	std	Z+3, r19	; 0x03
    b012:	22 83       	std	Z+2, r18	; 0x02
    b014:	75 83       	std	Z+5, r23	; 0x05
    b016:	64 83       	std	Z+4, r22	; 0x04
    b018:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

					updateQuad();
    b01c:	8d b7       	in	r24, 0x3d	; 61
    b01e:	9e b7       	in	r25, 0x3e	; 62
    b020:	06 96       	adiw	r24, 0x06	; 6
    b022:	0f b6       	in	r0, 0x3f	; 63
    b024:	f8 94       	cli
    b026:	9e bf       	out	0x3e, r25	; 62
    b028:	0f be       	out	0x3f, r0	; 63
    b02a:	8d bf       	out	0x3d, r24	; 61
    b02c:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <updateQuad>
					UDaxis = Uvoltage-Dvoltage;
    b030:	60 91 93 16 	lds	r22, 0x1693
    b034:	70 91 94 16 	lds	r23, 0x1694
    b038:	80 91 95 16 	lds	r24, 0x1695
    b03c:	90 91 96 16 	lds	r25, 0x1696
    b040:	20 91 9b 16 	lds	r18, 0x169B
    b044:	30 91 9c 16 	lds	r19, 0x169C
    b048:	40 91 9d 16 	lds	r20, 0x169D
    b04c:	50 91 9e 16 	lds	r21, 0x169E
    b050:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    b054:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    b058:	4b 01       	movw	r8, r22
					UDchange = abs(UDaxis)*valNum;
    b05a:	5b 01       	movw	r10, r22
    b05c:	77 ff       	sbrs	r23, 7
    b05e:	04 c0       	rjmp	.+8      	; 0xb068 <main+0x6ee>
    b060:	aa 24       	eor	r10, r10
    b062:	bb 24       	eor	r11, r11
    b064:	a6 1a       	sub	r10, r22
    b066:	b7 0a       	sbc	r11, r23

					dtostrf(UDaxis, 6, 3, v_string);    
    b068:	b4 01       	movw	r22, r8
    b06a:	88 27       	eor	r24, r24
    b06c:	77 fd       	sbrc	r23, 7
    b06e:	80 95       	com	r24
    b070:	98 2f       	mov	r25, r24
    b072:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    b076:	46 e0       	ldi	r20, 0x06	; 6
    b078:	23 e0       	ldi	r18, 0x03	; 3
    b07a:	0c e0       	ldi	r16, 0x0C	; 12
    b07c:	17 e1       	ldi	r17, 0x17	; 23
    b07e:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
					fprintf(stdout, "UD axis: %s\r\n", v_string);
    b082:	00 d0       	rcall	.+0      	; 0xb084 <main+0x70a>
    b084:	00 d0       	rcall	.+0      	; 0xb086 <main+0x70c>
    b086:	00 d0       	rcall	.+0      	; 0xb088 <main+0x70e>
    b088:	ed b7       	in	r30, 0x3d	; 61
    b08a:	fe b7       	in	r31, 0x3e	; 62
    b08c:	31 96       	adiw	r30, 0x01	; 1
    b08e:	80 91 2f 17 	lds	r24, 0x172F
    b092:	90 91 30 17 	lds	r25, 0x1730
    b096:	ad b7       	in	r26, 0x3d	; 61
    b098:	be b7       	in	r27, 0x3e	; 62
    b09a:	12 96       	adiw	r26, 0x02	; 2
    b09c:	9c 93       	st	X, r25
    b09e:	8e 93       	st	-X, r24
    b0a0:	11 97       	sbiw	r26, 0x01	; 1
    b0a2:	26 ef       	ldi	r18, 0xF6	; 246
    b0a4:	3e e0       	ldi	r19, 0x0E	; 14
    b0a6:	33 83       	std	Z+3, r19	; 0x03
    b0a8:	22 83       	std	Z+2, r18	; 0x02
    b0aa:	35 82       	std	Z+5, r3	; 0x05
    b0ac:	24 82       	std	Z+4, r2	; 0x04
    b0ae:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

					LRaxis = Lvoltage-Rvoltage;
    b0b2:	60 91 97 16 	lds	r22, 0x1697
    b0b6:	70 91 98 16 	lds	r23, 0x1698
    b0ba:	80 91 99 16 	lds	r24, 0x1699
    b0be:	90 91 9a 16 	lds	r25, 0x169A
    b0c2:	20 91 c4 16 	lds	r18, 0x16C4
    b0c6:	30 91 c5 16 	lds	r19, 0x16C5
    b0ca:	40 91 c6 16 	lds	r20, 0x16C6
    b0ce:	50 91 c7 16 	lds	r21, 0x16C7
    b0d2:	0e 94 d0 60 	call	0xc1a0	; 0xc1a0 <__subsf3>
    b0d6:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    b0da:	6b 01       	movw	r12, r22
					LRchange = abs(LRaxis)*valNum;
    b0dc:	7b 01       	movw	r14, r22
    b0de:	77 ff       	sbrs	r23, 7
    b0e0:	04 c0       	rjmp	.+8      	; 0xb0ea <main+0x770>
    b0e2:	ee 24       	eor	r14, r14
    b0e4:	ff 24       	eor	r15, r15
    b0e6:	e6 1a       	sub	r14, r22
    b0e8:	f7 0a       	sbc	r15, r23

					dtostrf(LRaxis, 6, 3, v_string);    
    b0ea:	8d b7       	in	r24, 0x3d	; 61
    b0ec:	9e b7       	in	r25, 0x3e	; 62
    b0ee:	06 96       	adiw	r24, 0x06	; 6
    b0f0:	0f b6       	in	r0, 0x3f	; 63
    b0f2:	f8 94       	cli
    b0f4:	9e bf       	out	0x3e, r25	; 62
    b0f6:	0f be       	out	0x3f, r0	; 63
    b0f8:	8d bf       	out	0x3d, r24	; 61
    b0fa:	b6 01       	movw	r22, r12
    b0fc:	88 27       	eor	r24, r24
    b0fe:	77 fd       	sbrc	r23, 7
    b100:	80 95       	com	r24
    b102:	98 2f       	mov	r25, r24
    b104:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    b108:	46 e0       	ldi	r20, 0x06	; 6
    b10a:	23 e0       	ldi	r18, 0x03	; 3
    b10c:	0c e0       	ldi	r16, 0x0C	; 12
    b10e:	17 e1       	ldi	r17, 0x17	; 23
    b110:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
					fprintf(stdout, "LR axis: %s\r\n", v_string);
    b114:	00 d0       	rcall	.+0      	; 0xb116 <main+0x79c>
    b116:	00 d0       	rcall	.+0      	; 0xb118 <main+0x79e>
    b118:	00 d0       	rcall	.+0      	; 0xb11a <main+0x7a0>
    b11a:	ed b7       	in	r30, 0x3d	; 61
    b11c:	fe b7       	in	r31, 0x3e	; 62
    b11e:	31 96       	adiw	r30, 0x01	; 1
    b120:	80 91 2f 17 	lds	r24, 0x172F
    b124:	90 91 30 17 	lds	r25, 0x1730
    b128:	ad b7       	in	r26, 0x3d	; 61
    b12a:	be b7       	in	r27, 0x3e	; 62
    b12c:	12 96       	adiw	r26, 0x02	; 2
    b12e:	9c 93       	st	X, r25
    b130:	8e 93       	st	-X, r24
    b132:	11 97       	sbiw	r26, 0x01	; 1
    b134:	24 e0       	ldi	r18, 0x04	; 4
    b136:	3f e0       	ldi	r19, 0x0F	; 15
    b138:	33 83       	std	Z+3, r19	; 0x03
    b13a:	22 83       	std	Z+2, r18	; 0x02
    b13c:	35 82       	std	Z+5, r3	; 0x05
    b13e:	24 82       	std	Z+4, r2	; 0x04
    b140:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>

					//Change angle
					if(abs(UDaxis)>TORCH_THRESHOLD)
    b144:	8d b7       	in	r24, 0x3d	; 61
    b146:	9e b7       	in	r25, 0x3e	; 62
    b148:	06 96       	adiw	r24, 0x06	; 6
    b14a:	0f b6       	in	r0, 0x3f	; 63
    b14c:	f8 94       	cli
    b14e:	9e bf       	out	0x3e, r25	; 62
    b150:	0f be       	out	0x3f, r0	; 63
    b152:	8d bf       	out	0x3d, r24	; 61
    b154:	96 e0       	ldi	r25, 0x06	; 6
    b156:	a9 16       	cp	r10, r25
    b158:	b1 04       	cpc	r11, r1
    b15a:	2c f1       	brlt	.+74     	; 0xb1a6 <main+0x82c>
					currAngle = accelToAngle(curr_accel);
					fprintf(stdout, "currAngle %u\r\n", currAngle);

					updateQuad();
					UDaxis = Uvoltage-Dvoltage;
					UDchange = abs(UDaxis)*valNum;
    b15c:	6a 9c       	mul	r6, r10
    b15e:	90 01       	movw	r18, r0
    b160:	6b 9c       	mul	r6, r11
    b162:	30 0d       	add	r19, r0
    b164:	7a 9c       	mul	r7, r10
    b166:	30 0d       	add	r19, r0
    b168:	11 24       	eor	r1, r1
					fprintf(stdout, "LR axis: %s\r\n", v_string);

					//Change angle
					if(abs(UDaxis)>TORCH_THRESHOLD)
					{
						if (UDaxis>0)
    b16a:	18 14       	cp	r1, r8
    b16c:	19 04       	cpc	r1, r9
    b16e:	74 f4       	brge	.+28     	; 0xb18c <main+0x812>
						{
							if(currAngle>MIN_ANGLE+TORCH_SAFETY)
    b170:	a1 e2       	ldi	r26, 0x21	; 33
    b172:	4a 16       	cp	r4, r26
    b174:	51 04       	cpc	r5, r1
    b176:	bc f0       	brlt	.+46     	; 0xb1a6 <main+0x82c>
								goDown(UDchange*TORCH_ANGLE);
    b178:	c9 01       	movw	r24, r18
    b17a:	88 0f       	add	r24, r24
    b17c:	99 1f       	adc	r25, r25
    b17e:	88 0f       	add	r24, r24
    b180:	99 1f       	adc	r25, r25
    b182:	82 0f       	add	r24, r18
    b184:	93 1f       	adc	r25, r19
    b186:	0e 94 35 41 	call	0x826a	; 0x826a <goDown>
    b18a:	0d c0       	rjmp	.+26     	; 0xb1a6 <main+0x82c>
						}
						else
						{
							if(currAngle<MAX_ANGLE-TORCH_SAFETY)
    b18c:	b2 e3       	ldi	r27, 0x32	; 50
    b18e:	4b 16       	cp	r4, r27
    b190:	51 04       	cpc	r5, r1
    b192:	4c f4       	brge	.+18     	; 0xb1a6 <main+0x82c>
								goUp(UDchange*TORCH_ANGLE);
    b194:	c9 01       	movw	r24, r18
    b196:	88 0f       	add	r24, r24
    b198:	99 1f       	adc	r25, r25
    b19a:	88 0f       	add	r24, r24
    b19c:	99 1f       	adc	r25, r25
    b19e:	82 0f       	add	r24, r18
    b1a0:	93 1f       	adc	r25, r19
    b1a2:	0e 94 e7 40 	call	0x81ce	; 0x81ce <goUp>

					dtostrf(UDaxis, 6, 3, v_string);    
					fprintf(stdout, "UD axis: %s\r\n", v_string);

					LRaxis = Lvoltage-Rvoltage;
					LRchange = abs(LRaxis)*valNum;
    b1a6:	6e 9c       	mul	r6, r14
    b1a8:	90 01       	movw	r18, r0
    b1aa:	6f 9c       	mul	r6, r15
    b1ac:	30 0d       	add	r19, r0
    b1ae:	7e 9c       	mul	r7, r14
    b1b0:	30 0d       	add	r19, r0
    b1b2:	11 24       	eor	r1, r1
								goUp(UDchange*TORCH_ANGLE);
						}
					}

					//Change rotation
					if(abs(LRaxis)>TORCH_THRESHOLD)
    b1b4:	e6 e0       	ldi	r30, 0x06	; 6
    b1b6:	ee 16       	cp	r14, r30
    b1b8:	f1 04       	cpc	r15, r1
    b1ba:	0c f4       	brge	.+2      	; 0xb1be <main+0x844>
    b1bc:	fe ce       	rjmp	.-516    	; 0xafba <main+0x640>
    b1be:	b9 01       	movw	r22, r18
    b1c0:	88 27       	eor	r24, r24
    b1c2:	77 fd       	sbrc	r23, 7
    b1c4:	80 95       	com	r24
    b1c6:	98 2f       	mov	r25, r24
					{
						if(LRaxis>0)
    b1c8:	1c 14       	cp	r1, r12
    b1ca:	1d 04       	cpc	r1, r13
    b1cc:	7c f4       	brge	.+30     	; 0xb1ec <main+0x872>
						{
							goLeft(LRchange*TORCH_ROT);
    b1ce:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    b1d2:	2a e9       	ldi	r18, 0x9A	; 154
    b1d4:	39 e9       	ldi	r19, 0x99	; 153
    b1d6:	49 e9       	ldi	r20, 0x99	; 153
    b1d8:	5e e3       	ldi	r21, 0x3E	; 62
    b1da:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    b1de:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    b1e2:	dc 01       	movw	r26, r24
    b1e4:	cb 01       	movw	r24, r22
    b1e6:	0e 94 9a 40 	call	0x8134	; 0x8134 <goLeft>
    b1ea:	e7 ce       	rjmp	.-562    	; 0xafba <main+0x640>
						}
						else
						{
							goRight(LRchange*TORCH_ROT);
    b1ec:	0e 94 50 62 	call	0xc4a0	; 0xc4a0 <__floatsisf>
    b1f0:	2a e9       	ldi	r18, 0x9A	; 154
    b1f2:	39 e9       	ldi	r19, 0x99	; 153
    b1f4:	49 e9       	ldi	r20, 0x99	; 153
    b1f6:	5e e3       	ldi	r21, 0x3E	; 62
    b1f8:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    b1fc:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    b200:	dc 01       	movw	r26, r24
    b202:	cb 01       	movw	r24, r22
    b204:	0e 94 4c 40 	call	0x8098	; 0x8098 <goRight>
    b208:	d8 ce       	rjmp	.-592    	; 0xafba <main+0x640>
						}
					}
				}
			}
			else if (strcmp(cmd,"angletoscrew") == 0)
    b20a:	c8 01       	movw	r24, r16
    b20c:	62 e1       	ldi	r22, 0x12	; 18
    b20e:	7f e0       	ldi	r23, 0x0F	; 15
    b210:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b214:	00 97       	sbiw	r24, 0x00	; 0
    b216:	29 f5       	brne	.+74     	; 0xb262 <main+0x8e8>
			{
				int convertedScrew = rotToNearestScrew(valFloat);
    b218:	c7 01       	movw	r24, r14
    b21a:	b6 01       	movw	r22, r12
    b21c:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
				fprintf(stdout, "screw is %u\r\n", convertedScrew);
    b220:	00 d0       	rcall	.+0      	; 0xb222 <main+0x8a8>
    b222:	00 d0       	rcall	.+0      	; 0xb224 <main+0x8aa>
    b224:	00 d0       	rcall	.+0      	; 0xb226 <main+0x8ac>
    b226:	ed b7       	in	r30, 0x3d	; 61
    b228:	fe b7       	in	r31, 0x3e	; 62
    b22a:	31 96       	adiw	r30, 0x01	; 1
    b22c:	20 91 2f 17 	lds	r18, 0x172F
    b230:	30 91 30 17 	lds	r19, 0x1730
    b234:	ad b7       	in	r26, 0x3d	; 61
    b236:	be b7       	in	r27, 0x3e	; 62
    b238:	12 96       	adiw	r26, 0x02	; 2
    b23a:	3c 93       	st	X, r19
    b23c:	2e 93       	st	-X, r18
    b23e:	11 97       	sbiw	r26, 0x01	; 1
    b240:	2f e1       	ldi	r18, 0x1F	; 31
    b242:	3f e0       	ldi	r19, 0x0F	; 15
    b244:	33 83       	std	Z+3, r19	; 0x03
    b246:	22 83       	std	Z+2, r18	; 0x02
    b248:	95 83       	std	Z+5, r25	; 0x05
    b24a:	84 83       	std	Z+4, r24	; 0x04
    b24c:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b250:	8d b7       	in	r24, 0x3d	; 61
    b252:	9e b7       	in	r25, 0x3e	; 62
    b254:	06 96       	adiw	r24, 0x06	; 6
    b256:	0f b6       	in	r0, 0x3f	; 63
    b258:	f8 94       	cli
    b25a:	9e bf       	out	0x3e, r25	; 62
    b25c:	0f be       	out	0x3f, r0	; 63
    b25e:	8d bf       	out	0x3d, r24	; 61
    b260:	7c cc       	rjmp	.-1800   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"screw") == 0)
    b262:	c8 01       	movw	r24, r16
    b264:	6d e2       	ldi	r22, 0x2D	; 45
    b266:	7f e0       	ldi	r23, 0x0F	; 15
    b268:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b26c:	00 97       	sbiw	r24, 0x00	; 0
    b26e:	21 f4       	brne	.+8      	; 0xb278 <main+0x8fe>
			{
				goToScrew(valNum);
    b270:	c3 01       	movw	r24, r6
    b272:	0e 94 81 4c 	call	0x9902	; 0x9902 <goToScrew>
    b276:	71 cc       	rjmp	.-1822   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"cw") == 0)
    b278:	c8 01       	movw	r24, r16
    b27a:	63 e3       	ldi	r22, 0x33	; 51
    b27c:	7f e0       	ldi	r23, 0x0F	; 15
    b27e:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b282:	00 97       	sbiw	r24, 0x00	; 0
    b284:	19 f4       	brne	.+6      	; 0xb28c <main+0x912>
			{
				goToScrewCW();
    b286:	0e 94 e7 4b 	call	0x97ce	; 0x97ce <goToScrewCW>
    b28a:	67 cc       	rjmp	.-1842   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"ccw") == 0)
    b28c:	c8 01       	movw	r24, r16
    b28e:	66 e3       	ldi	r22, 0x36	; 54
    b290:	7f e0       	ldi	r23, 0x0F	; 15
    b292:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b296:	00 97       	sbiw	r24, 0x00	; 0
    b298:	19 f4       	brne	.+6      	; 0xb2a0 <main+0x926>
			{
				goToScrewCCW();
    b29a:	0e 94 51 4b 	call	0x96a2	; 0x96a2 <goToScrewCCW>
    b29e:	5d cc       	rjmp	.-1862   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"compass") == 0)
    b2a0:	c8 01       	movw	r24, r16
    b2a2:	6a e3       	ldi	r22, 0x3A	; 58
    b2a4:	7f e0       	ldi	r23, 0x0F	; 15
    b2a6:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b2aa:	00 97       	sbiw	r24, 0x00	; 0
    b2ac:	19 f5       	brne	.+70     	; 0xb2f4 <main+0x97a>
			{
				updateRot(); //updates rot
    b2ae:	0e 94 0b 4b 	call	0x9616	; 0x9616 <updateRot>
				curr_screw = rotToNearestScrew(rot);
    b2b2:	60 91 83 16 	lds	r22, 0x1683
    b2b6:	70 91 84 16 	lds	r23, 0x1684
    b2ba:	80 91 85 16 	lds	r24, 0x1685
    b2be:	90 91 86 16 	lds	r25, 0x1686
    b2c2:	0e 94 22 42 	call	0x8444	; 0x8444 <rotToNearestScrew>
    b2c6:	90 93 55 13 	sts	0x1355, r25
    b2ca:	80 93 54 13 	sts	0x1354, r24
				fprintf(stdout, "Nearest screw: %d\n\r", curr_screw);
    b2ce:	00 d0       	rcall	.+0      	; 0xb2d0 <main+0x956>
    b2d0:	00 d0       	rcall	.+0      	; 0xb2d2 <main+0x958>
    b2d2:	00 d0       	rcall	.+0      	; 0xb2d4 <main+0x95a>
    b2d4:	ed b7       	in	r30, 0x3d	; 61
    b2d6:	fe b7       	in	r31, 0x3e	; 62
    b2d8:	31 96       	adiw	r30, 0x01	; 1
    b2da:	20 91 2f 17 	lds	r18, 0x172F
    b2de:	30 91 30 17 	lds	r19, 0x1730
    b2e2:	ad b7       	in	r26, 0x3d	; 61
    b2e4:	be b7       	in	r27, 0x3e	; 62
    b2e6:	12 96       	adiw	r26, 0x02	; 2
    b2e8:	3c 93       	st	X, r19
    b2ea:	2e 93       	st	-X, r18
    b2ec:	11 97       	sbiw	r26, 0x01	; 1
    b2ee:	22 e4       	ldi	r18, 0x42	; 66
    b2f0:	3f e0       	ldi	r19, 0x0F	; 15
    b2f2:	a8 cf       	rjmp	.-176    	; 0xb244 <main+0x8ca>
			}
			else if (strcmp(cmd,"gotoopt") == 0)
    b2f4:	c8 01       	movw	r24, r16
    b2f6:	66 e5       	ldi	r22, 0x56	; 86
    b2f8:	7f e0       	ldi	r23, 0x0F	; 15
    b2fa:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b2fe:	00 97       	sbiw	r24, 0x00	; 0
    b300:	09 f0       	breq	.+2      	; 0xb304 <main+0x98a>
    b302:	3b c1       	rjmp	.+630    	; 0xb57a <main+0xc00>
			{
				//Moves to optimum values of angle and rot, if possible.

				fprintf(stdout, "going to angle ");
    b304:	60 91 2f 17 	lds	r22, 0x172F
    b308:	70 91 30 17 	lds	r23, 0x1730
    b30c:	8e e5       	ldi	r24, 0x5E	; 94
    b30e:	9f e0       	ldi	r25, 0x0F	; 15
    b310:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				if(opt_angle < MIN_ANGLE) 
    b314:	e0 90 39 11 	lds	r14, 0x1139
    b318:	f0 90 3a 11 	lds	r15, 0x113A
    b31c:	00 91 3b 11 	lds	r16, 0x113B
    b320:	10 91 3c 11 	lds	r17, 0x113C
    b324:	c8 01       	movw	r24, r16
    b326:	b7 01       	movw	r22, r14
    b328:	20 e0       	ldi	r18, 0x00	; 0
    b32a:	30 e0       	ldi	r19, 0x00	; 0
    b32c:	40 ef       	ldi	r20, 0xF0	; 240
    b32e:	51 e4       	ldi	r21, 0x41	; 65
    b330:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    b334:	88 23       	and	r24, r24
    b336:	cc f4       	brge	.+50     	; 0xb36a <main+0x9f0>
				{
					goToAngle(MIN_ANGLE);
    b338:	8e e1       	ldi	r24, 0x1E	; 30
    b33a:	90 e0       	ldi	r25, 0x00	; 0
    b33c:	0e 94 83 41 	call	0x8306	; 0x8306 <goToAngle>
					fprintf(stdout, "%u", MIN_ANGLE);
    b340:	00 d0       	rcall	.+0      	; 0xb342 <main+0x9c8>
    b342:	00 d0       	rcall	.+0      	; 0xb344 <main+0x9ca>
    b344:	00 d0       	rcall	.+0      	; 0xb346 <main+0x9cc>
    b346:	ed b7       	in	r30, 0x3d	; 61
    b348:	fe b7       	in	r31, 0x3e	; 62
    b34a:	31 96       	adiw	r30, 0x01	; 1
    b34c:	80 91 2f 17 	lds	r24, 0x172F
    b350:	90 91 30 17 	lds	r25, 0x1730
    b354:	ad b7       	in	r26, 0x3d	; 61
    b356:	be b7       	in	r27, 0x3e	; 62
    b358:	12 96       	adiw	r26, 0x02	; 2
    b35a:	9c 93       	st	X, r25
    b35c:	8e 93       	st	-X, r24
    b35e:	11 97       	sbiw	r26, 0x01	; 1
    b360:	53 82       	std	Z+3, r5	; 0x03
    b362:	42 82       	std	Z+2, r4	; 0x02
    b364:	8e e1       	ldi	r24, 0x1E	; 30
    b366:	90 e0       	ldi	r25, 0x00	; 0
    b368:	22 c0       	rjmp	.+68     	; 0xb3ae <main+0xa34>
				}
				else if(opt_angle > MAX_ANGLE) 
    b36a:	c8 01       	movw	r24, r16
    b36c:	b7 01       	movw	r22, r14
    b36e:	20 e0       	ldi	r18, 0x00	; 0
    b370:	30 e0       	ldi	r19, 0x00	; 0
    b372:	40 e5       	ldi	r20, 0x50	; 80
    b374:	52 e4       	ldi	r21, 0x42	; 66
    b376:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    b37a:	18 16       	cp	r1, r24
    b37c:	2c f5       	brge	.+74     	; 0xb3c8 <main+0xa4e>
				{
					goToAngle(MAX_ANGLE);
    b37e:	84 e3       	ldi	r24, 0x34	; 52
    b380:	90 e0       	ldi	r25, 0x00	; 0
    b382:	0e 94 83 41 	call	0x8306	; 0x8306 <goToAngle>
					fprintf(stdout, "%u", MAX_ANGLE);
    b386:	00 d0       	rcall	.+0      	; 0xb388 <main+0xa0e>
    b388:	00 d0       	rcall	.+0      	; 0xb38a <main+0xa10>
    b38a:	00 d0       	rcall	.+0      	; 0xb38c <main+0xa12>
    b38c:	ed b7       	in	r30, 0x3d	; 61
    b38e:	fe b7       	in	r31, 0x3e	; 62
    b390:	31 96       	adiw	r30, 0x01	; 1
    b392:	80 91 2f 17 	lds	r24, 0x172F
    b396:	90 91 30 17 	lds	r25, 0x1730
    b39a:	ad b7       	in	r26, 0x3d	; 61
    b39c:	be b7       	in	r27, 0x3e	; 62
    b39e:	12 96       	adiw	r26, 0x02	; 2
    b3a0:	9c 93       	st	X, r25
    b3a2:	8e 93       	st	-X, r24
    b3a4:	11 97       	sbiw	r26, 0x01	; 1
    b3a6:	53 82       	std	Z+3, r5	; 0x03
    b3a8:	42 82       	std	Z+2, r4	; 0x02
    b3aa:	84 e3       	ldi	r24, 0x34	; 52
    b3ac:	90 e0       	ldi	r25, 0x00	; 0
    b3ae:	95 83       	std	Z+5, r25	; 0x05
    b3b0:	84 83       	std	Z+4, r24	; 0x04
    b3b2:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b3b6:	ed b7       	in	r30, 0x3d	; 61
    b3b8:	fe b7       	in	r31, 0x3e	; 62
    b3ba:	36 96       	adiw	r30, 0x06	; 6
    b3bc:	0f b6       	in	r0, 0x3f	; 63
    b3be:	f8 94       	cli
    b3c0:	fe bf       	out	0x3e, r31	; 62
    b3c2:	0f be       	out	0x3f, r0	; 63
    b3c4:	ed bf       	out	0x3d, r30	; 61
    b3c6:	38 c0       	rjmp	.+112    	; 0xb438 <main+0xabe>
				}
				else
				{
					goToAngle(opt_angle);
    b3c8:	c8 01       	movw	r24, r16
    b3ca:	b7 01       	movw	r22, r14
    b3cc:	0e 94 1d 62 	call	0xc43a	; 0xc43a <__fixsfsi>
    b3d0:	dc 01       	movw	r26, r24
    b3d2:	cb 01       	movw	r24, r22
    b3d4:	0e 94 83 41 	call	0x8306	; 0x8306 <goToAngle>
					fprintf(stdout, "%f", opt_angle);
    b3d8:	2d b7       	in	r18, 0x3d	; 61
    b3da:	3e b7       	in	r19, 0x3e	; 62
    b3dc:	28 50       	subi	r18, 0x08	; 8
    b3de:	30 40       	sbci	r19, 0x00	; 0
    b3e0:	0f b6       	in	r0, 0x3f	; 63
    b3e2:	f8 94       	cli
    b3e4:	3e bf       	out	0x3e, r19	; 62
    b3e6:	0f be       	out	0x3f, r0	; 63
    b3e8:	2d bf       	out	0x3d, r18	; 61
    b3ea:	ed b7       	in	r30, 0x3d	; 61
    b3ec:	fe b7       	in	r31, 0x3e	; 62
    b3ee:	31 96       	adiw	r30, 0x01	; 1
    b3f0:	80 91 2f 17 	lds	r24, 0x172F
    b3f4:	90 91 30 17 	lds	r25, 0x1730
    b3f8:	ad b7       	in	r26, 0x3d	; 61
    b3fa:	be b7       	in	r27, 0x3e	; 62
    b3fc:	12 96       	adiw	r26, 0x02	; 2
    b3fe:	9c 93       	st	X, r25
    b400:	8e 93       	st	-X, r24
    b402:	11 97       	sbiw	r26, 0x01	; 1
    b404:	21 e7       	ldi	r18, 0x71	; 113
    b406:	3f e0       	ldi	r19, 0x0F	; 15
    b408:	33 83       	std	Z+3, r19	; 0x03
    b40a:	22 83       	std	Z+2, r18	; 0x02
    b40c:	80 91 39 11 	lds	r24, 0x1139
    b410:	90 91 3a 11 	lds	r25, 0x113A
    b414:	a0 91 3b 11 	lds	r26, 0x113B
    b418:	b0 91 3c 11 	lds	r27, 0x113C
    b41c:	84 83       	std	Z+4, r24	; 0x04
    b41e:	95 83       	std	Z+5, r25	; 0x05
    b420:	a6 83       	std	Z+6, r26	; 0x06
    b422:	b7 83       	std	Z+7, r27	; 0x07
    b424:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b428:	8d b7       	in	r24, 0x3d	; 61
    b42a:	9e b7       	in	r25, 0x3e	; 62
    b42c:	08 96       	adiw	r24, 0x08	; 8
    b42e:	0f b6       	in	r0, 0x3f	; 63
    b430:	f8 94       	cli
    b432:	9e bf       	out	0x3e, r25	; 62
    b434:	0f be       	out	0x3f, r0	; 63
    b436:	8d bf       	out	0x3d, r24	; 61
				}
				fprintf(stdout, " and rot ");
    b438:	60 91 2f 17 	lds	r22, 0x172F
    b43c:	70 91 30 17 	lds	r23, 0x1730
    b440:	84 e7       	ldi	r24, 0x74	; 116
    b442:	9f e0       	ldi	r25, 0x0F	; 15
    b444:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				if(opt_rot < MIN_ROT)
    b448:	e0 90 4e 13 	lds	r14, 0x134E
    b44c:	f0 90 4f 13 	lds	r15, 0x134F
    b450:	00 91 50 13 	lds	r16, 0x1350
    b454:	10 91 51 13 	lds	r17, 0x1351
    b458:	c8 01       	movw	r24, r16
    b45a:	b7 01       	movw	r22, r14
    b45c:	20 e0       	ldi	r18, 0x00	; 0
    b45e:	30 e0       	ldi	r19, 0x00	; 0
    b460:	44 eb       	ldi	r20, 0xB4	; 180
    b462:	52 ec       	ldi	r21, 0xC2	; 194
    b464:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    b468:	88 23       	and	r24, r24
    b46a:	dc f4       	brge	.+54     	; 0xb4a2 <main+0xb28>
				{
					goToRot(MIN_ROT);
    b46c:	60 e0       	ldi	r22, 0x00	; 0
    b46e:	70 e0       	ldi	r23, 0x00	; 0
    b470:	84 eb       	ldi	r24, 0xB4	; 180
    b472:	92 ec       	ldi	r25, 0xC2	; 194
    b474:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <goToRot>
					fprintf(stdout, "%u", MIN_ROT);
    b478:	00 d0       	rcall	.+0      	; 0xb47a <main+0xb00>
    b47a:	00 d0       	rcall	.+0      	; 0xb47c <main+0xb02>
    b47c:	00 d0       	rcall	.+0      	; 0xb47e <main+0xb04>
    b47e:	ed b7       	in	r30, 0x3d	; 61
    b480:	fe b7       	in	r31, 0x3e	; 62
    b482:	31 96       	adiw	r30, 0x01	; 1
    b484:	80 91 2f 17 	lds	r24, 0x172F
    b488:	90 91 30 17 	lds	r25, 0x1730
    b48c:	ad b7       	in	r26, 0x3d	; 61
    b48e:	be b7       	in	r27, 0x3e	; 62
    b490:	12 96       	adiw	r26, 0x02	; 2
    b492:	9c 93       	st	X, r25
    b494:	8e 93       	st	-X, r24
    b496:	11 97       	sbiw	r26, 0x01	; 1
    b498:	53 82       	std	Z+3, r5	; 0x03
    b49a:	42 82       	std	Z+2, r4	; 0x02
    b49c:	86 ea       	ldi	r24, 0xA6	; 166
    b49e:	9f ef       	ldi	r25, 0xFF	; 255
    b4a0:	24 c0       	rjmp	.+72     	; 0xb4ea <main+0xb70>
				}			
				else if(opt_rot > MAX_ROT)
    b4a2:	c8 01       	movw	r24, r16
    b4a4:	b7 01       	movw	r22, r14
    b4a6:	20 e0       	ldi	r18, 0x00	; 0
    b4a8:	30 e0       	ldi	r19, 0x00	; 0
    b4aa:	44 eb       	ldi	r20, 0xB4	; 180
    b4ac:	52 e4       	ldi	r21, 0x42	; 66
    b4ae:	0e 94 dd 63 	call	0xc7ba	; 0xc7ba <__gesf2>
    b4b2:	18 16       	cp	r1, r24
    b4b4:	3c f5       	brge	.+78     	; 0xb504 <main+0xb8a>
				{
					goToRot(MAX_ROT);
    b4b6:	60 e0       	ldi	r22, 0x00	; 0
    b4b8:	70 e0       	ldi	r23, 0x00	; 0
    b4ba:	84 eb       	ldi	r24, 0xB4	; 180
    b4bc:	92 e4       	ldi	r25, 0x42	; 66
    b4be:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <goToRot>
					fprintf(stdout, "%u", MAX_ROT);
    b4c2:	00 d0       	rcall	.+0      	; 0xb4c4 <main+0xb4a>
    b4c4:	00 d0       	rcall	.+0      	; 0xb4c6 <main+0xb4c>
    b4c6:	00 d0       	rcall	.+0      	; 0xb4c8 <main+0xb4e>
    b4c8:	ed b7       	in	r30, 0x3d	; 61
    b4ca:	fe b7       	in	r31, 0x3e	; 62
    b4cc:	31 96       	adiw	r30, 0x01	; 1
    b4ce:	80 91 2f 17 	lds	r24, 0x172F
    b4d2:	90 91 30 17 	lds	r25, 0x1730
    b4d6:	ad b7       	in	r26, 0x3d	; 61
    b4d8:	be b7       	in	r27, 0x3e	; 62
    b4da:	12 96       	adiw	r26, 0x02	; 2
    b4dc:	9c 93       	st	X, r25
    b4de:	8e 93       	st	-X, r24
    b4e0:	11 97       	sbiw	r26, 0x01	; 1
    b4e2:	53 82       	std	Z+3, r5	; 0x03
    b4e4:	42 82       	std	Z+2, r4	; 0x02
    b4e6:	8a e5       	ldi	r24, 0x5A	; 90
    b4e8:	90 e0       	ldi	r25, 0x00	; 0
    b4ea:	95 83       	std	Z+5, r25	; 0x05
    b4ec:	84 83       	std	Z+4, r24	; 0x04
    b4ee:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b4f2:	ed b7       	in	r30, 0x3d	; 61
    b4f4:	fe b7       	in	r31, 0x3e	; 62
    b4f6:	36 96       	adiw	r30, 0x06	; 6
    b4f8:	0f b6       	in	r0, 0x3f	; 63
    b4fa:	f8 94       	cli
    b4fc:	fe bf       	out	0x3e, r31	; 62
    b4fe:	0f be       	out	0x3f, r0	; 63
    b500:	ed bf       	out	0x3d, r30	; 61
    b502:	34 c0       	rjmp	.+104    	; 0xb56c <main+0xbf2>
				}
				else
				{
					goToRot(opt_rot);
    b504:	c8 01       	movw	r24, r16
    b506:	b7 01       	movw	r22, r14
    b508:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <goToRot>
					fprintf(stdout, "%f", opt_rot);
    b50c:	2d b7       	in	r18, 0x3d	; 61
    b50e:	3e b7       	in	r19, 0x3e	; 62
    b510:	28 50       	subi	r18, 0x08	; 8
    b512:	30 40       	sbci	r19, 0x00	; 0
    b514:	0f b6       	in	r0, 0x3f	; 63
    b516:	f8 94       	cli
    b518:	3e bf       	out	0x3e, r19	; 62
    b51a:	0f be       	out	0x3f, r0	; 63
    b51c:	2d bf       	out	0x3d, r18	; 61
    b51e:	ed b7       	in	r30, 0x3d	; 61
    b520:	fe b7       	in	r31, 0x3e	; 62
    b522:	31 96       	adiw	r30, 0x01	; 1
    b524:	80 91 2f 17 	lds	r24, 0x172F
    b528:	90 91 30 17 	lds	r25, 0x1730
    b52c:	ad b7       	in	r26, 0x3d	; 61
    b52e:	be b7       	in	r27, 0x3e	; 62
    b530:	12 96       	adiw	r26, 0x02	; 2
    b532:	9c 93       	st	X, r25
    b534:	8e 93       	st	-X, r24
    b536:	11 97       	sbiw	r26, 0x01	; 1
    b538:	21 e7       	ldi	r18, 0x71	; 113
    b53a:	3f e0       	ldi	r19, 0x0F	; 15
    b53c:	33 83       	std	Z+3, r19	; 0x03
    b53e:	22 83       	std	Z+2, r18	; 0x02
    b540:	80 91 4e 13 	lds	r24, 0x134E
    b544:	90 91 4f 13 	lds	r25, 0x134F
    b548:	a0 91 50 13 	lds	r26, 0x1350
    b54c:	b0 91 51 13 	lds	r27, 0x1351
    b550:	84 83       	std	Z+4, r24	; 0x04
    b552:	95 83       	std	Z+5, r25	; 0x05
    b554:	a6 83       	std	Z+6, r26	; 0x06
    b556:	b7 83       	std	Z+7, r27	; 0x07
    b558:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b55c:	8d b7       	in	r24, 0x3d	; 61
    b55e:	9e b7       	in	r25, 0x3e	; 62
    b560:	08 96       	adiw	r24, 0x08	; 8
    b562:	0f b6       	in	r0, 0x3f	; 63
    b564:	f8 94       	cli
    b566:	9e bf       	out	0x3e, r25	; 62
    b568:	0f be       	out	0x3f, r0	; 63
    b56a:	8d bf       	out	0x3d, r24	; 61
				}
				fprintf(stdout, "\r\n");
    b56c:	60 91 2f 17 	lds	r22, 0x172F
    b570:	70 91 30 17 	lds	r23, 0x1730
    b574:	8f ee       	ldi	r24, 0xEF	; 239
    b576:	97 e0       	ldi	r25, 0x07	; 7
    b578:	3a c2       	rjmp	.+1140   	; 0xb9ee <main+0x1074>
			}
			//Direct Moving
			else if (strcmp(cmd,"down") == 0)
    b57a:	c8 01       	movw	r24, r16
    b57c:	6e e7       	ldi	r22, 0x7E	; 126
    b57e:	7f e0       	ldi	r23, 0x0F	; 15
    b580:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b584:	00 97       	sbiw	r24, 0x00	; 0
    b586:	21 f4       	brne	.+8      	; 0xb590 <main+0xc16>
			{
				goDown(valNum);
    b588:	c3 01       	movw	r24, r6
    b58a:	0e 94 35 41 	call	0x826a	; 0x826a <goDown>
    b58e:	e5 ca       	rjmp	.-2614   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"up") == 0)
    b590:	c8 01       	movw	r24, r16
    b592:	63 e8       	ldi	r22, 0x83	; 131
    b594:	7f e0       	ldi	r23, 0x0F	; 15
    b596:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b59a:	00 97       	sbiw	r24, 0x00	; 0
    b59c:	21 f4       	brne	.+8      	; 0xb5a6 <main+0xc2c>
			{	
				goUp(valNum);
    b59e:	c3 01       	movw	r24, r6
    b5a0:	0e 94 e7 40 	call	0x81ce	; 0x81ce <goUp>
    b5a4:	da ca       	rjmp	.-2636   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"left") == 0)
    b5a6:	c8 01       	movw	r24, r16
    b5a8:	66 e8       	ldi	r22, 0x86	; 134
    b5aa:	7f e0       	ldi	r23, 0x0F	; 15
    b5ac:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b5b0:	00 97       	sbiw	r24, 0x00	; 0
    b5b2:	21 f4       	brne	.+8      	; 0xb5bc <main+0xc42>
			{	
				goLeft(valNum);
    b5b4:	c3 01       	movw	r24, r6
    b5b6:	0e 94 9a 40 	call	0x8134	; 0x8134 <goLeft>
    b5ba:	cf ca       	rjmp	.-2658   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"right") == 0)
    b5bc:	c8 01       	movw	r24, r16
    b5be:	6b e8       	ldi	r22, 0x8B	; 139
    b5c0:	7f e0       	ldi	r23, 0x0F	; 15
    b5c2:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b5c6:	00 97       	sbiw	r24, 0x00	; 0
    b5c8:	21 f4       	brne	.+8      	; 0xb5d2 <main+0xc58>
			{
				goRight(valNum);
    b5ca:	c3 01       	movw	r24, r6
    b5cc:	0e 94 4c 40 	call	0x8098	; 0x8098 <goRight>
    b5d0:	c4 ca       	rjmp	.-2680   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"accel") == 0)
    b5d2:	c8 01       	movw	r24, r16
    b5d4:	61 e9       	ldi	r22, 0x91	; 145
    b5d6:	7f e0       	ldi	r23, 0x0F	; 15
    b5d8:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b5dc:	00 97       	sbiw	r24, 0x00	; 0
    b5de:	39 f5       	brne	.+78     	; 0xb62e <main+0xcb4>
			{	
				//reads accelerometer value
				updateAccel();
    b5e0:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
				dtostrf(curr_accel, 6, 3, accel_string);    
    b5e4:	60 91 7f 16 	lds	r22, 0x167F
    b5e8:	70 91 80 16 	lds	r23, 0x1680
    b5ec:	80 91 81 16 	lds	r24, 0x1681
    b5f0:	90 91 82 16 	lds	r25, 0x1682
    b5f4:	46 e0       	ldi	r20, 0x06	; 6
    b5f6:	23 e0       	ldi	r18, 0x03	; 3
    b5f8:	07 e8       	ldi	r16, 0x87	; 135
    b5fa:	16 e1       	ldi	r17, 0x16	; 22
    b5fc:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
	    		fprintf(stdout, "%s\r\n", accel_string); 
    b600:	00 d0       	rcall	.+0      	; 0xb602 <main+0xc88>
    b602:	00 d0       	rcall	.+0      	; 0xb604 <main+0xc8a>
    b604:	00 d0       	rcall	.+0      	; 0xb606 <main+0xc8c>
    b606:	ed b7       	in	r30, 0x3d	; 61
    b608:	fe b7       	in	r31, 0x3e	; 62
    b60a:	31 96       	adiw	r30, 0x01	; 1
    b60c:	80 91 2f 17 	lds	r24, 0x172F
    b610:	90 91 30 17 	lds	r25, 0x1730
    b614:	ad b7       	in	r26, 0x3d	; 61
    b616:	be b7       	in	r27, 0x3e	; 62
    b618:	12 96       	adiw	r26, 0x02	; 2
    b61a:	9c 93       	st	X, r25
    b61c:	8e 93       	st	-X, r24
    b61e:	11 97       	sbiw	r26, 0x01	; 1
    b620:	27 e9       	ldi	r18, 0x97	; 151
    b622:	3f e0       	ldi	r19, 0x0F	; 15
    b624:	33 83       	std	Z+3, r19	; 0x03
    b626:	22 83       	std	Z+2, r18	; 0x02
    b628:	15 83       	std	Z+5, r17	; 0x05
    b62a:	04 83       	std	Z+4, r16	; 0x04
    b62c:	0f ce       	rjmp	.-994    	; 0xb24c <main+0x8d2>
			}
			else if (strcmp(cmd,"angle") == 0)
    b62e:	c8 01       	movw	r24, r16
    b630:	6c e9       	ldi	r22, 0x9C	; 156
    b632:	7f e0       	ldi	r23, 0x0F	; 15
    b634:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b638:	00 97       	sbiw	r24, 0x00	; 0
    b63a:	21 f4       	brne	.+8      	; 0xb644 <main+0xcca>
			{
				goToAngle(valNum);
    b63c:	c3 01       	movw	r24, r6
    b63e:	0e 94 83 41 	call	0x8306	; 0x8306 <goToAngle>
    b642:	8b ca       	rjmp	.-2794   	; 0xab5a <main+0x1e0>
			
			}
			else if (strcmp(cmd,"rot") == 0)
    b644:	c8 01       	movw	r24, r16
    b646:	62 ea       	ldi	r22, 0xA2	; 162
    b648:	7f e0       	ldi	r23, 0x0F	; 15
    b64a:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b64e:	00 97       	sbiw	r24, 0x00	; 0
    b650:	29 f4       	brne	.+10     	; 0xb65c <main+0xce2>
			{
				goToRot(valFloat);
    b652:	c7 01       	movw	r24, r14
    b654:	b6 01       	movw	r22, r12
    b656:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <goToRot>
    b65a:	7f ca       	rjmp	.-2818   	; 0xab5a <main+0x1e0>
			
			}
			else if (strcmp(cmd,"gps") == 0)
    b65c:	c8 01       	movw	r24, r16
    b65e:	66 ea       	ldi	r22, 0xA6	; 166
    b660:	7f e0       	ldi	r23, 0x0F	; 15
    b662:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b666:	00 97       	sbiw	r24, 0x00	; 0
    b668:	19 f4       	brne	.+6      	; 0xb670 <main+0xcf6>
			{
				updateGPS();
    b66a:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <updateGPS>
    b66e:	75 ca       	rjmp	.-2838   	; 0xab5a <main+0x1e0>
			
			}
			//UTC Getter functions
			else if (strcmp(cmd,"time") == 0)
    b670:	c8 01       	movw	r24, r16
    b672:	6a ea       	ldi	r22, 0xAA	; 170
    b674:	7f e0       	ldi	r23, 0x0F	; 15
    b676:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b67a:	00 97       	sbiw	r24, 0x00	; 0
    b67c:	09 f0       	breq	.+2      	; 0xb680 <main+0xd06>
    b67e:	56 c0       	rjmp	.+172    	; 0xb72c <main+0xdb2>
			{
				int localHour = UTC_hour + UTC_offset;
    b680:	60 91 55 11 	lds	r22, 0x1155
    b684:	70 91 56 11 	lds	r23, 0x1156
    b688:	80 91 59 11 	lds	r24, 0x1159
    b68c:	90 91 5a 11 	lds	r25, 0x115A
    b690:	68 0f       	add	r22, r24
    b692:	79 1f       	adc	r23, r25
				if (localHour < 0)
    b694:	77 ff       	sbrs	r23, 7
    b696:	02 c0       	rjmp	.+4      	; 0xb69c <main+0xd22>
				{
					localHour += 24;
    b698:	68 5e       	subi	r22, 0xE8	; 232
    b69a:	7f 4f       	sbci	r23, 0xFF	; 255
				}
				fprintf(stdout, "Current time is %u:%u:%u\r\n", localHour, UTC_min, UTC_sec);
    b69c:	20 91 5c 13 	lds	r18, 0x135C
    b6a0:	30 91 5d 13 	lds	r19, 0x135D
    b6a4:	40 91 57 11 	lds	r20, 0x1157
    b6a8:	50 91 58 11 	lds	r21, 0x1158
    b6ac:	ad b7       	in	r26, 0x3d	; 61
    b6ae:	be b7       	in	r27, 0x3e	; 62
    b6b0:	1a 97       	sbiw	r26, 0x0a	; 10
    b6b2:	0f b6       	in	r0, 0x3f	; 63
    b6b4:	f8 94       	cli
    b6b6:	be bf       	out	0x3e, r27	; 62
    b6b8:	0f be       	out	0x3f, r0	; 63
    b6ba:	ad bf       	out	0x3d, r26	; 61
    b6bc:	ed b7       	in	r30, 0x3d	; 61
    b6be:	fe b7       	in	r31, 0x3e	; 62
    b6c0:	31 96       	adiw	r30, 0x01	; 1
    b6c2:	80 91 2f 17 	lds	r24, 0x172F
    b6c6:	90 91 30 17 	lds	r25, 0x1730
    b6ca:	12 96       	adiw	r26, 0x02	; 2
    b6cc:	9c 93       	st	X, r25
    b6ce:	8e 93       	st	-X, r24
    b6d0:	11 97       	sbiw	r26, 0x01	; 1
    b6d2:	8f ea       	ldi	r24, 0xAF	; 175
    b6d4:	9f e0       	ldi	r25, 0x0F	; 15
    b6d6:	93 83       	std	Z+3, r25	; 0x03
    b6d8:	82 83       	std	Z+2, r24	; 0x02
    b6da:	75 83       	std	Z+5, r23	; 0x05
    b6dc:	64 83       	std	Z+4, r22	; 0x04
    b6de:	37 83       	std	Z+7, r19	; 0x07
    b6e0:	26 83       	std	Z+6, r18	; 0x06
    b6e2:	51 87       	std	Z+9, r21	; 0x09
    b6e4:	40 87       	std	Z+8, r20	; 0x08
    b6e6:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
				formatTime();
    b6ea:	ad b7       	in	r26, 0x3d	; 61
    b6ec:	be b7       	in	r27, 0x3e	; 62
    b6ee:	1a 96       	adiw	r26, 0x0a	; 10
    b6f0:	0f b6       	in	r0, 0x3f	; 63
    b6f2:	f8 94       	cli
    b6f4:	be bf       	out	0x3e, r27	; 62
    b6f6:	0f be       	out	0x3f, r0	; 63
    b6f8:	ad bf       	out	0x3d, r26	; 61
    b6fa:	0e 94 6a 50 	call	0xa0d4	; 0xa0d4 <formatTime>
				fprintf(stdout, "Formatted time string: %s\r\n", fmtTimeString);	
    b6fe:	00 d0       	rcall	.+0      	; 0xb700 <main+0xd86>
    b700:	00 d0       	rcall	.+0      	; 0xb702 <main+0xd88>
    b702:	00 d0       	rcall	.+0      	; 0xb704 <main+0xd8a>
    b704:	ed b7       	in	r30, 0x3d	; 61
    b706:	fe b7       	in	r31, 0x3e	; 62
    b708:	31 96       	adiw	r30, 0x01	; 1
    b70a:	80 91 2f 17 	lds	r24, 0x172F
    b70e:	90 91 30 17 	lds	r25, 0x1730
    b712:	ad b7       	in	r26, 0x3d	; 61
    b714:	be b7       	in	r27, 0x3e	; 62
    b716:	12 96       	adiw	r26, 0x02	; 2
    b718:	9c 93       	st	X, r25
    b71a:	8e 93       	st	-X, r24
    b71c:	11 97       	sbiw	r26, 0x01	; 1
    b71e:	2a ec       	ldi	r18, 0xCA	; 202
    b720:	3f e0       	ldi	r19, 0x0F	; 15
    b722:	33 83       	std	Z+3, r19	; 0x03
    b724:	22 83       	std	Z+2, r18	; 0x02
    b726:	8b eb       	ldi	r24, 0xBB	; 187
    b728:	96 e1       	ldi	r25, 0x16	; 22
    b72a:	53 c0       	rjmp	.+166    	; 0xb7d2 <main+0xe58>
			}
			else if (strcmp(cmd,"date") == 0)
    b72c:	c8 01       	movw	r24, r16
    b72e:	66 ee       	ldi	r22, 0xE6	; 230
    b730:	7f e0       	ldi	r23, 0x0F	; 15
    b732:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b736:	00 97       	sbiw	r24, 0x00	; 0
    b738:	09 f0       	breq	.+2      	; 0xb73c <main+0xdc2>
    b73a:	58 c0       	rjmp	.+176    	; 0xb7ec <main+0xe72>
			{
				fprintf(stdout, "Current date %u %u, %u\r\n", UTC_month, UTC_day, UTC_year);
    b73c:	ed b7       	in	r30, 0x3d	; 61
    b73e:	fe b7       	in	r31, 0x3e	; 62
    b740:	3a 97       	sbiw	r30, 0x0a	; 10
    b742:	0f b6       	in	r0, 0x3f	; 63
    b744:	f8 94       	cli
    b746:	fe bf       	out	0x3e, r31	; 62
    b748:	0f be       	out	0x3f, r0	; 63
    b74a:	ed bf       	out	0x3d, r30	; 61
    b74c:	31 96       	adiw	r30, 0x01	; 1
    b74e:	80 91 2f 17 	lds	r24, 0x172F
    b752:	90 91 30 17 	lds	r25, 0x1730
    b756:	ad b7       	in	r26, 0x3d	; 61
    b758:	be b7       	in	r27, 0x3e	; 62
    b75a:	12 96       	adiw	r26, 0x02	; 2
    b75c:	9c 93       	st	X, r25
    b75e:	8e 93       	st	-X, r24
    b760:	11 97       	sbiw	r26, 0x01	; 1
    b762:	2b ee       	ldi	r18, 0xEB	; 235
    b764:	3f e0       	ldi	r19, 0x0F	; 15
    b766:	33 83       	std	Z+3, r19	; 0x03
    b768:	22 83       	std	Z+2, r18	; 0x02
    b76a:	80 91 5b 11 	lds	r24, 0x115B
    b76e:	90 91 5c 11 	lds	r25, 0x115C
    b772:	95 83       	std	Z+5, r25	; 0x05
    b774:	84 83       	std	Z+4, r24	; 0x04
    b776:	80 91 5d 11 	lds	r24, 0x115D
    b77a:	90 91 5e 11 	lds	r25, 0x115E
    b77e:	97 83       	std	Z+7, r25	; 0x07
    b780:	86 83       	std	Z+6, r24	; 0x06
    b782:	80 91 5f 11 	lds	r24, 0x115F
    b786:	90 91 60 11 	lds	r25, 0x1160
    b78a:	91 87       	std	Z+9, r25	; 0x09
    b78c:	80 87       	std	Z+8, r24	; 0x08
    b78e:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
				formatDate();
    b792:	8d b7       	in	r24, 0x3d	; 61
    b794:	9e b7       	in	r25, 0x3e	; 62
    b796:	0a 96       	adiw	r24, 0x0a	; 10
    b798:	0f b6       	in	r0, 0x3f	; 63
    b79a:	f8 94       	cli
    b79c:	9e bf       	out	0x3e, r25	; 62
    b79e:	0f be       	out	0x3f, r0	; 63
    b7a0:	8d bf       	out	0x3d, r24	; 61
    b7a2:	0e 94 0c 50 	call	0xa018	; 0xa018 <formatDate>
				fprintf(stdout, "Formatted date string: %s\r\n", fmtDateString);	
    b7a6:	00 d0       	rcall	.+0      	; 0xb7a8 <main+0xe2e>
    b7a8:	00 d0       	rcall	.+0      	; 0xb7aa <main+0xe30>
    b7aa:	00 d0       	rcall	.+0      	; 0xb7ac <main+0xe32>
    b7ac:	ed b7       	in	r30, 0x3d	; 61
    b7ae:	fe b7       	in	r31, 0x3e	; 62
    b7b0:	31 96       	adiw	r30, 0x01	; 1
    b7b2:	80 91 2f 17 	lds	r24, 0x172F
    b7b6:	90 91 30 17 	lds	r25, 0x1730
    b7ba:	ad b7       	in	r26, 0x3d	; 61
    b7bc:	be b7       	in	r27, 0x3e	; 62
    b7be:	12 96       	adiw	r26, 0x02	; 2
    b7c0:	9c 93       	st	X, r25
    b7c2:	8e 93       	st	-X, r24
    b7c4:	11 97       	sbiw	r26, 0x01	; 1
    b7c6:	24 e0       	ldi	r18, 0x04	; 4
    b7c8:	30 e1       	ldi	r19, 0x10	; 16
    b7ca:	33 83       	std	Z+3, r19	; 0x03
    b7cc:	22 83       	std	Z+2, r18	; 0x02
    b7ce:	82 e2       	ldi	r24, 0x22	; 34
    b7d0:	97 e1       	ldi	r25, 0x17	; 23
    b7d2:	95 83       	std	Z+5, r25	; 0x05
    b7d4:	84 83       	std	Z+4, r24	; 0x04
    b7d6:	0e 94 46 68 	call	0xd08c	; 0xd08c <fprintf>
    b7da:	ad b7       	in	r26, 0x3d	; 61
    b7dc:	be b7       	in	r27, 0x3e	; 62
    b7de:	16 96       	adiw	r26, 0x06	; 6
    b7e0:	0f b6       	in	r0, 0x3f	; 63
    b7e2:	f8 94       	cli
    b7e4:	be bf       	out	0x3e, r27	; 62
    b7e6:	0f be       	out	0x3f, r0	; 63
    b7e8:	ad bf       	out	0x3d, r26	; 61
    b7ea:	b7 c9       	rjmp	.-3218   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"panel") == 0)
    b7ec:	c8 01       	movw	r24, r16
    b7ee:	60 e2       	ldi	r22, 0x20	; 32
    b7f0:	70 e1       	ldi	r23, 0x10	; 16
    b7f2:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b7f6:	00 97       	sbiw	r24, 0x00	; 0
    b7f8:	39 f5       	brne	.+78     	; 0xb848 <main+0xece>
			{
				updatePanel();
    b7fa:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <updatePanel>
				dtostrf(panelVoltage, 6, 3, v_string);
    b7fe:	60 91 cc 16 	lds	r22, 0x16CC
    b802:	70 91 cd 16 	lds	r23, 0x16CD
    b806:	80 91 ce 16 	lds	r24, 0x16CE
    b80a:	90 91 cf 16 	lds	r25, 0x16CF
    b80e:	46 e0       	ldi	r20, 0x06	; 6
    b810:	23 e0       	ldi	r18, 0x03	; 3
    b812:	0c e0       	ldi	r16, 0x0C	; 12
    b814:	17 e1       	ldi	r17, 0x17	; 23
    b816:	0e 94 51 66 	call	0xcca2	; 0xcca2 <dtostrf>
				fprintf(stdout, "panel voltage: %s\r\n", v_string);	
    b81a:	00 d0       	rcall	.+0      	; 0xb81c <main+0xea2>
    b81c:	00 d0       	rcall	.+0      	; 0xb81e <main+0xea4>
    b81e:	00 d0       	rcall	.+0      	; 0xb820 <main+0xea6>
    b820:	ed b7       	in	r30, 0x3d	; 61
    b822:	fe b7       	in	r31, 0x3e	; 62
    b824:	31 96       	adiw	r30, 0x01	; 1
    b826:	80 91 2f 17 	lds	r24, 0x172F
    b82a:	90 91 30 17 	lds	r25, 0x1730
    b82e:	ad b7       	in	r26, 0x3d	; 61
    b830:	be b7       	in	r27, 0x3e	; 62
    b832:	12 96       	adiw	r26, 0x02	; 2
    b834:	9c 93       	st	X, r25
    b836:	8e 93       	st	-X, r24
    b838:	11 97       	sbiw	r26, 0x01	; 1
    b83a:	26 e2       	ldi	r18, 0x26	; 38
    b83c:	30 e1       	ldi	r19, 0x10	; 16
    b83e:	33 83       	std	Z+3, r19	; 0x03
    b840:	22 83       	std	Z+2, r18	; 0x02
    b842:	b5 82       	std	Z+5, r11	; 0x05
    b844:	a4 82       	std	Z+4, r10	; 0x04
    b846:	02 cd       	rjmp	.-1532   	; 0xb24c <main+0x8d2>
			}
			else if (strcmp(cmd,"record") == 0)
    b848:	c8 01       	movw	r24, r16
    b84a:	6a e3       	ldi	r22, 0x3A	; 58
    b84c:	70 e1       	ldi	r23, 0x10	; 16
    b84e:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b852:	00 97       	sbiw	r24, 0x00	; 0
    b854:	19 f4       	brne	.+6      	; 0xb85c <main+0xee2>
			{
				//print line for data logger
				printRecord();
    b856:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <printRecord>
    b85a:	7f c9       	rjmp	.-3330   	; 0xab5a <main+0x1e0>
			}
			//UTC Setter functions
			else if (strcmp(cmd,"sethour") == 0)
    b85c:	c8 01       	movw	r24, r16
    b85e:	61 e4       	ldi	r22, 0x41	; 65
    b860:	70 e1       	ldi	r23, 0x10	; 16
    b862:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b866:	00 97       	sbiw	r24, 0x00	; 0
    b868:	29 f4       	brne	.+10     	; 0xb874 <main+0xefa>
			{
				UTC_hour = valNum;
    b86a:	70 92 56 11 	sts	0x1156, r7
    b86e:	60 92 55 11 	sts	0x1155, r6
    b872:	73 c9       	rjmp	.-3354   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"setmin") == 0)
    b874:	c8 01       	movw	r24, r16
    b876:	69 e4       	ldi	r22, 0x49	; 73
    b878:	70 e1       	ldi	r23, 0x10	; 16
    b87a:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b87e:	00 97       	sbiw	r24, 0x00	; 0
    b880:	29 f4       	brne	.+10     	; 0xb88c <main+0xf12>
			{
				UTC_min = valNum;
    b882:	70 92 5d 13 	sts	0x135D, r7
    b886:	60 92 5c 13 	sts	0x135C, r6
    b88a:	67 c9       	rjmp	.-3378   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"setsec") == 0)
    b88c:	c8 01       	movw	r24, r16
    b88e:	60 e5       	ldi	r22, 0x50	; 80
    b890:	70 e1       	ldi	r23, 0x10	; 16
    b892:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b896:	00 97       	sbiw	r24, 0x00	; 0
    b898:	29 f4       	brne	.+10     	; 0xb8a4 <main+0xf2a>
			{
				UTC_sec = valNum;
    b89a:	70 92 58 11 	sts	0x1158, r7
    b89e:	60 92 57 11 	sts	0x1157, r6
    b8a2:	5b c9       	rjmp	.-3402   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"setday") == 0)
    b8a4:	c8 01       	movw	r24, r16
    b8a6:	67 e5       	ldi	r22, 0x57	; 87
    b8a8:	70 e1       	ldi	r23, 0x10	; 16
    b8aa:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b8ae:	00 97       	sbiw	r24, 0x00	; 0
    b8b0:	29 f4       	brne	.+10     	; 0xb8bc <main+0xf42>
			{
				UTC_day = valNum;
    b8b2:	70 92 5e 11 	sts	0x115E, r7
    b8b6:	60 92 5d 11 	sts	0x115D, r6
    b8ba:	4f c9       	rjmp	.-3426   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"setmonth") == 0)
    b8bc:	c8 01       	movw	r24, r16
    b8be:	6e e5       	ldi	r22, 0x5E	; 94
    b8c0:	70 e1       	ldi	r23, 0x10	; 16
    b8c2:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b8c6:	00 97       	sbiw	r24, 0x00	; 0
    b8c8:	29 f4       	brne	.+10     	; 0xb8d4 <main+0xf5a>
			{
				UTC_month = valNum;
    b8ca:	70 92 5c 11 	sts	0x115C, r7
    b8ce:	60 92 5b 11 	sts	0x115B, r6
    b8d2:	43 c9       	rjmp	.-3450   	; 0xab5a <main+0x1e0>
			}
			else if (strcmp(cmd,"setyear") == 0)
    b8d4:	c8 01       	movw	r24, r16
    b8d6:	67 e6       	ldi	r22, 0x67	; 103
    b8d8:	70 e1       	ldi	r23, 0x10	; 16
    b8da:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b8de:	00 97       	sbiw	r24, 0x00	; 0
    b8e0:	29 f4       	brne	.+10     	; 0xb8ec <main+0xf72>
			{
				UTC_year = valNum;
    b8e2:	70 92 60 11 	sts	0x1160, r7
    b8e6:	60 92 5f 11 	sts	0x115F, r6
    b8ea:	37 c9       	rjmp	.-3474   	; 0xab5a <main+0x1e0>
			}
			//Entering Auto Mode
			else if (strcmp(cmd,"auto") == 0)
    b8ec:	c8 01       	movw	r24, r16
    b8ee:	6f e6       	ldi	r22, 0x6F	; 111
    b8f0:	70 e1       	ldi	r23, 0x10	; 16
    b8f2:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b8f6:	00 97       	sbiw	r24, 0x00	; 0
    b8f8:	09 f0       	breq	.+2      	; 0xb8fc <main+0xf82>
    b8fa:	55 c0       	rjmp	.+170    	; 0xb9a6 <main+0x102c>
			{
				autoMode = 1;
    b8fc:	81 e0       	ldi	r24, 0x01	; 1
    b8fe:	90 e0       	ldi	r25, 0x00	; 0
    b900:	90 93 49 13 	sts	0x1349, r25
    b904:	80 93 48 13 	sts	0x1348, r24
				fprintf(stdout, "entered auto mode\r\n");
    b908:	60 91 2f 17 	lds	r22, 0x172F
    b90c:	70 91 30 17 	lds	r23, 0x1730
    b910:	84 e7       	ldi	r24, 0x74	; 116
    b912:	90 e1       	ldi	r25, 0x10	; 16
    b914:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
				updateGPS();
    b918:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <updateGPS>
				while(1)
				{
					if(autoFlag == 1)
    b91c:	80 91 4a 13 	lds	r24, 0x134A
    b920:	90 91 4b 13 	lds	r25, 0x134B
    b924:	01 97       	sbiw	r24, 0x01	; 1
    b926:	d1 f7       	brne	.-12     	; 0xb91c <main+0xfa2>
					{
						fprintf(stdout, "gonna do stuff automatically\r\n");
    b928:	60 91 2f 17 	lds	r22, 0x172F
    b92c:	70 91 30 17 	lds	r23, 0x1730
    b930:	88 e8       	ldi	r24, 0x88	; 136
    b932:	90 e1       	ldi	r25, 0x10	; 16
    b934:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						updateAccel();
    b938:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
						fprintf(stdout, "updated accel\r\n");
    b93c:	60 91 2f 17 	lds	r22, 0x172F
    b940:	70 91 30 17 	lds	r23, 0x1730
    b944:	87 ea       	ldi	r24, 0xA7	; 167
    b946:	90 e1       	ldi	r25, 0x10	; 16
    b948:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						updatePanel();
    b94c:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <updatePanel>
						fprintf(stdout, "updated panel\r\n");
    b950:	60 91 2f 17 	lds	r22, 0x172F
    b954:	70 91 30 17 	lds	r23, 0x1730
    b958:	87 eb       	ldi	r24, 0xB7	; 183
    b95a:	90 e1       	ldi	r25, 0x10	; 16
    b95c:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						updateQuad();
    b960:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <updateQuad>
						fprintf(stdout, "updated quad\r\n");
    b964:	60 91 2f 17 	lds	r22, 0x172F
    b968:	70 91 30 17 	lds	r23, 0x1730
    b96c:	87 ec       	ldi	r24, 0xC7	; 199
    b96e:	90 e1       	ldi	r25, 0x10	; 16
    b970:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						optimize2();
    b974:	0e 94 58 42 	call	0x84b0	; 0x84b0 <optimize2>
						fprintf(stdout, "optimized\r\n");
    b978:	60 91 2f 17 	lds	r22, 0x172F
    b97c:	70 91 30 17 	lds	r23, 0x1730
    b980:	86 ed       	ldi	r24, 0xD6	; 214
    b982:	90 e1       	ldi	r25, 0x10	; 16
    b984:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						considerMoving();
    b988:	0e 94 1e 4d 	call	0x9a3c	; 0x9a3c <considerMoving>
						fprintf(stdout, "considered moving\r\n");
    b98c:	60 91 2f 17 	lds	r22, 0x172F
    b990:	70 91 30 17 	lds	r23, 0x1730
    b994:	82 ee       	ldi	r24, 0xE2	; 226
    b996:	90 e1       	ldi	r25, 0x10	; 16
    b998:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
						autoFlag = 0;
    b99c:	10 92 4b 13 	sts	0x134B, r1
    b9a0:	10 92 4a 13 	sts	0x134A, r1
    b9a4:	bb cf       	rjmp	.-138    	; 0xb91c <main+0xfa2>
					}
				}
				
			}
			//Enter Data Logger Mode
			else if (strcmp(cmd,"data") == 0)
    b9a6:	c8 01       	movw	r24, r16
    b9a8:	66 ef       	ldi	r22, 0xF6	; 246
    b9aa:	70 e1       	ldi	r23, 0x10	; 16
    b9ac:	0e 94 b9 67 	call	0xcf72	; 0xcf72 <strcmp>
    b9b0:	00 97       	sbiw	r24, 0x00	; 0
    b9b2:	b9 f4       	brne	.+46     	; 0xb9e2 <main+0x1068>
			{
				dataLog = 1; //Set this flag first to avoid confusing Processing
    b9b4:	01 e0       	ldi	r16, 0x01	; 1
    b9b6:	10 e0       	ldi	r17, 0x00	; 0
    b9b8:	10 93 4d 13 	sts	0x134D, r17
    b9bc:	00 93 4c 13 	sts	0x134C, r16
				//Get updated values
				updatePanel();
    b9c0:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <updatePanel>
				updateQuad();
    b9c4:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <updateQuad>
				updateAccel();
    b9c8:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
				printRecord(); //Send a record to acknowledge command
    b9cc:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <printRecord>
				updateGPS();
    b9d0:	0e 94 d8 52 	call	0xa5b0	; 0xa5b0 <updateGPS>
				optimize2();
    b9d4:	0e 94 58 42 	call	0x84b0	; 0x84b0 <optimize2>
				autoMode = 1; //signal to ISR to update autoFlag
    b9d8:	10 93 49 13 	sts	0x1349, r17
    b9dc:	00 93 48 13 	sts	0x1348, r16
    b9e0:	bc c8       	rjmp	.-3720   	; 0xab5a <main+0x1e0>
				
			}
			else
				fprintf(stdout, "What?\r\n");
    b9e2:	60 91 2f 17 	lds	r22, 0x172F
    b9e6:	70 91 30 17 	lds	r23, 0x1730
    b9ea:	8b ef       	ldi	r24, 0xFB	; 251
    b9ec:	90 e1       	ldi	r25, 0x10	; 16
    b9ee:	0e 94 83 68 	call	0xd106	; 0xd106 <fputs>
    b9f2:	b3 c8       	rjmp	.-3738   	; 0xab5a <main+0x1e0>
		}
		else //dataLog == 1
		{	
			//In Data Logger mode.
			if(autoFlag == 1)
    b9f4:	80 91 4a 13 	lds	r24, 0x134A
    b9f8:	90 91 4b 13 	lds	r25, 0x134B
    b9fc:	01 97       	sbiw	r24, 0x01	; 1
    b9fe:	09 f0       	breq	.+2      	; 0xba02 <main+0x1088>
    ba00:	ac c8       	rjmp	.-3752   	; 0xab5a <main+0x1e0>
			{
				updateAccel();
    ba02:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <updateAccel>
				optimize2();
    ba06:	0e 94 58 42 	call	0x84b0	; 0x84b0 <optimize2>
				updatePanel();
    ba0a:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <updatePanel>
				updateQuad();
    ba0e:	0e 94 eb 3d 	call	0x7bd6	; 0x7bd6 <updateQuad>
				printRecord();
    ba12:	0e 94 e0 50 	call	0xa1c0	; 0xa1c0 <printRecord>
				//fprintf(stdout, "so...\r\n");
				considerMoving();
    ba16:	0e 94 1e 4d 	call	0x9a3c	; 0x9a3c <considerMoving>
				autoFlag = 0;
    ba1a:	10 92 4b 13 	sts	0x134B, r1
    ba1e:	10 92 4a 13 	sts	0x134A, r1
    ba22:	9b c8       	rjmp	.-3786   	; 0xab5a <main+0x1e0>

0000ba24 <vfprintf>:
    ba24:	2f 92       	push	r2
    ba26:	3f 92       	push	r3
    ba28:	4f 92       	push	r4
    ba2a:	5f 92       	push	r5
    ba2c:	6f 92       	push	r6
    ba2e:	7f 92       	push	r7
    ba30:	8f 92       	push	r8
    ba32:	9f 92       	push	r9
    ba34:	af 92       	push	r10
    ba36:	bf 92       	push	r11
    ba38:	cf 92       	push	r12
    ba3a:	df 92       	push	r13
    ba3c:	ef 92       	push	r14
    ba3e:	ff 92       	push	r15
    ba40:	0f 93       	push	r16
    ba42:	1f 93       	push	r17
    ba44:	df 93       	push	r29
    ba46:	cf 93       	push	r28
    ba48:	cd b7       	in	r28, 0x3d	; 61
    ba4a:	de b7       	in	r29, 0x3e	; 62
    ba4c:	61 97       	sbiw	r28, 0x11	; 17
    ba4e:	0f b6       	in	r0, 0x3f	; 63
    ba50:	f8 94       	cli
    ba52:	de bf       	out	0x3e, r29	; 62
    ba54:	0f be       	out	0x3f, r0	; 63
    ba56:	cd bf       	out	0x3d, r28	; 61
    ba58:	3c 01       	movw	r6, r24
    ba5a:	7f 87       	std	Y+15, r23	; 0x0f
    ba5c:	6e 87       	std	Y+14, r22	; 0x0e
    ba5e:	6a 01       	movw	r12, r20
    ba60:	fc 01       	movw	r30, r24
    ba62:	17 82       	std	Z+7, r1	; 0x07
    ba64:	16 82       	std	Z+6, r1	; 0x06
    ba66:	83 81       	ldd	r24, Z+3	; 0x03
    ba68:	81 fd       	sbrc	r24, 1
    ba6a:	03 c0       	rjmp	.+6      	; 0xba72 <vfprintf+0x4e>
    ba6c:	6f ef       	ldi	r22, 0xFF	; 255
    ba6e:	7f ef       	ldi	r23, 0xFF	; 255
    ba70:	6f c3       	rjmp	.+1758   	; 0xc150 <vfprintf+0x72c>
    ba72:	9e 01       	movw	r18, r28
    ba74:	2f 5f       	subi	r18, 0xFF	; 255
    ba76:	3f 4f       	sbci	r19, 0xFF	; 255
    ba78:	39 8b       	std	Y+17, r19	; 0x11
    ba7a:	28 8b       	std	Y+16, r18	; 0x10
    ba7c:	f3 01       	movw	r30, r6
    ba7e:	23 81       	ldd	r18, Z+3	; 0x03
    ba80:	ee 85       	ldd	r30, Y+14	; 0x0e
    ba82:	ff 85       	ldd	r31, Y+15	; 0x0f
    ba84:	23 fd       	sbrc	r18, 3
    ba86:	85 91       	lpm	r24, Z+
    ba88:	23 ff       	sbrs	r18, 3
    ba8a:	81 91       	ld	r24, Z+
    ba8c:	ff 87       	std	Y+15, r31	; 0x0f
    ba8e:	ee 87       	std	Y+14, r30	; 0x0e
    ba90:	88 23       	and	r24, r24
    ba92:	09 f4       	brne	.+2      	; 0xba96 <vfprintf+0x72>
    ba94:	5a c3       	rjmp	.+1716   	; 0xc14a <vfprintf+0x726>
    ba96:	85 32       	cpi	r24, 0x25	; 37
    ba98:	51 f4       	brne	.+20     	; 0xbaae <vfprintf+0x8a>
    ba9a:	ee 85       	ldd	r30, Y+14	; 0x0e
    ba9c:	ff 85       	ldd	r31, Y+15	; 0x0f
    ba9e:	23 fd       	sbrc	r18, 3
    baa0:	85 91       	lpm	r24, Z+
    baa2:	23 ff       	sbrs	r18, 3
    baa4:	81 91       	ld	r24, Z+
    baa6:	ff 87       	std	Y+15, r31	; 0x0f
    baa8:	ee 87       	std	Y+14, r30	; 0x0e
    baaa:	85 32       	cpi	r24, 0x25	; 37
    baac:	29 f4       	brne	.+10     	; 0xbab8 <vfprintf+0x94>
    baae:	90 e0       	ldi	r25, 0x00	; 0
    bab0:	b3 01       	movw	r22, r6
    bab2:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bab6:	e2 cf       	rjmp	.-60     	; 0xba7c <vfprintf+0x58>
    bab8:	98 2f       	mov	r25, r24
    baba:	10 e0       	ldi	r17, 0x00	; 0
    babc:	88 24       	eor	r8, r8
    babe:	99 24       	eor	r9, r9
    bac0:	10 32       	cpi	r17, 0x20	; 32
    bac2:	b0 f4       	brcc	.+44     	; 0xbaf0 <vfprintf+0xcc>
    bac4:	9b 32       	cpi	r25, 0x2B	; 43
    bac6:	69 f0       	breq	.+26     	; 0xbae2 <vfprintf+0xbe>
    bac8:	9c 32       	cpi	r25, 0x2C	; 44
    baca:	28 f4       	brcc	.+10     	; 0xbad6 <vfprintf+0xb2>
    bacc:	90 32       	cpi	r25, 0x20	; 32
    bace:	51 f0       	breq	.+20     	; 0xbae4 <vfprintf+0xc0>
    bad0:	93 32       	cpi	r25, 0x23	; 35
    bad2:	71 f4       	brne	.+28     	; 0xbaf0 <vfprintf+0xcc>
    bad4:	0b c0       	rjmp	.+22     	; 0xbaec <vfprintf+0xc8>
    bad6:	9d 32       	cpi	r25, 0x2D	; 45
    bad8:	39 f0       	breq	.+14     	; 0xbae8 <vfprintf+0xc4>
    bada:	90 33       	cpi	r25, 0x30	; 48
    badc:	49 f4       	brne	.+18     	; 0xbaf0 <vfprintf+0xcc>
    bade:	11 60       	ori	r17, 0x01	; 1
    bae0:	28 c0       	rjmp	.+80     	; 0xbb32 <vfprintf+0x10e>
    bae2:	12 60       	ori	r17, 0x02	; 2
    bae4:	14 60       	ori	r17, 0x04	; 4
    bae6:	25 c0       	rjmp	.+74     	; 0xbb32 <vfprintf+0x10e>
    bae8:	18 60       	ori	r17, 0x08	; 8
    baea:	23 c0       	rjmp	.+70     	; 0xbb32 <vfprintf+0x10e>
    baec:	10 61       	ori	r17, 0x10	; 16
    baee:	21 c0       	rjmp	.+66     	; 0xbb32 <vfprintf+0x10e>
    baf0:	17 fd       	sbrc	r17, 7
    baf2:	2a c0       	rjmp	.+84     	; 0xbb48 <vfprintf+0x124>
    baf4:	89 2f       	mov	r24, r25
    baf6:	80 53       	subi	r24, 0x30	; 48
    baf8:	8a 30       	cpi	r24, 0x0A	; 10
    bafa:	78 f4       	brcc	.+30     	; 0xbb1a <vfprintf+0xf6>
    bafc:	16 ff       	sbrs	r17, 6
    bafe:	06 c0       	rjmp	.+12     	; 0xbb0c <vfprintf+0xe8>
    bb00:	fa e0       	ldi	r31, 0x0A	; 10
    bb02:	9f 9e       	mul	r9, r31
    bb04:	90 2c       	mov	r9, r0
    bb06:	11 24       	eor	r1, r1
    bb08:	98 0e       	add	r9, r24
    bb0a:	13 c0       	rjmp	.+38     	; 0xbb32 <vfprintf+0x10e>
    bb0c:	3a e0       	ldi	r19, 0x0A	; 10
    bb0e:	83 9e       	mul	r8, r19
    bb10:	80 2c       	mov	r8, r0
    bb12:	11 24       	eor	r1, r1
    bb14:	88 0e       	add	r8, r24
    bb16:	10 62       	ori	r17, 0x20	; 32
    bb18:	0c c0       	rjmp	.+24     	; 0xbb32 <vfprintf+0x10e>
    bb1a:	9e 32       	cpi	r25, 0x2E	; 46
    bb1c:	21 f4       	brne	.+8      	; 0xbb26 <vfprintf+0x102>
    bb1e:	16 fd       	sbrc	r17, 6
    bb20:	14 c3       	rjmp	.+1576   	; 0xc14a <vfprintf+0x726>
    bb22:	10 64       	ori	r17, 0x40	; 64
    bb24:	06 c0       	rjmp	.+12     	; 0xbb32 <vfprintf+0x10e>
    bb26:	9c 36       	cpi	r25, 0x6C	; 108
    bb28:	11 f4       	brne	.+4      	; 0xbb2e <vfprintf+0x10a>
    bb2a:	10 68       	ori	r17, 0x80	; 128
    bb2c:	02 c0       	rjmp	.+4      	; 0xbb32 <vfprintf+0x10e>
    bb2e:	98 36       	cpi	r25, 0x68	; 104
    bb30:	59 f4       	brne	.+22     	; 0xbb48 <vfprintf+0x124>
    bb32:	ee 85       	ldd	r30, Y+14	; 0x0e
    bb34:	ff 85       	ldd	r31, Y+15	; 0x0f
    bb36:	23 fd       	sbrc	r18, 3
    bb38:	95 91       	lpm	r25, Z+
    bb3a:	23 ff       	sbrs	r18, 3
    bb3c:	91 91       	ld	r25, Z+
    bb3e:	ff 87       	std	Y+15, r31	; 0x0f
    bb40:	ee 87       	std	Y+14, r30	; 0x0e
    bb42:	99 23       	and	r25, r25
    bb44:	09 f0       	breq	.+2      	; 0xbb48 <vfprintf+0x124>
    bb46:	bc cf       	rjmp	.-136    	; 0xbac0 <vfprintf+0x9c>
    bb48:	89 2f       	mov	r24, r25
    bb4a:	85 54       	subi	r24, 0x45	; 69
    bb4c:	83 30       	cpi	r24, 0x03	; 3
    bb4e:	20 f4       	brcc	.+8      	; 0xbb58 <vfprintf+0x134>
    bb50:	81 2f       	mov	r24, r17
    bb52:	80 61       	ori	r24, 0x10	; 16
    bb54:	90 5e       	subi	r25, 0xE0	; 224
    bb56:	07 c0       	rjmp	.+14     	; 0xbb66 <vfprintf+0x142>
    bb58:	89 2f       	mov	r24, r25
    bb5a:	85 56       	subi	r24, 0x65	; 101
    bb5c:	83 30       	cpi	r24, 0x03	; 3
    bb5e:	08 f0       	brcs	.+2      	; 0xbb62 <vfprintf+0x13e>
    bb60:	9f c1       	rjmp	.+830    	; 0xbea0 <vfprintf+0x47c>
    bb62:	81 2f       	mov	r24, r17
    bb64:	8f 7e       	andi	r24, 0xEF	; 239
    bb66:	86 fd       	sbrc	r24, 6
    bb68:	02 c0       	rjmp	.+4      	; 0xbb6e <vfprintf+0x14a>
    bb6a:	76 e0       	ldi	r23, 0x06	; 6
    bb6c:	97 2e       	mov	r9, r23
    bb6e:	6f e3       	ldi	r22, 0x3F	; 63
    bb70:	f6 2e       	mov	r15, r22
    bb72:	f8 22       	and	r15, r24
    bb74:	95 36       	cpi	r25, 0x65	; 101
    bb76:	19 f4       	brne	.+6      	; 0xbb7e <vfprintf+0x15a>
    bb78:	f0 e4       	ldi	r31, 0x40	; 64
    bb7a:	ff 2a       	or	r15, r31
    bb7c:	07 c0       	rjmp	.+14     	; 0xbb8c <vfprintf+0x168>
    bb7e:	96 36       	cpi	r25, 0x66	; 102
    bb80:	19 f4       	brne	.+6      	; 0xbb88 <vfprintf+0x164>
    bb82:	20 e8       	ldi	r18, 0x80	; 128
    bb84:	f2 2a       	or	r15, r18
    bb86:	02 c0       	rjmp	.+4      	; 0xbb8c <vfprintf+0x168>
    bb88:	91 10       	cpse	r9, r1
    bb8a:	9a 94       	dec	r9
    bb8c:	f7 fe       	sbrs	r15, 7
    bb8e:	0a c0       	rjmp	.+20     	; 0xbba4 <vfprintf+0x180>
    bb90:	3b e3       	ldi	r19, 0x3B	; 59
    bb92:	39 15       	cp	r19, r9
    bb94:	18 f4       	brcc	.+6      	; 0xbb9c <vfprintf+0x178>
    bb96:	5c e3       	ldi	r21, 0x3C	; 60
    bb98:	b5 2e       	mov	r11, r21
    bb9a:	02 c0       	rjmp	.+4      	; 0xbba0 <vfprintf+0x17c>
    bb9c:	b9 2c       	mov	r11, r9
    bb9e:	b3 94       	inc	r11
    bba0:	27 e0       	ldi	r18, 0x07	; 7
    bba2:	09 c0       	rjmp	.+18     	; 0xbbb6 <vfprintf+0x192>
    bba4:	47 e0       	ldi	r20, 0x07	; 7
    bba6:	49 15       	cp	r20, r9
    bba8:	20 f4       	brcc	.+8      	; 0xbbb2 <vfprintf+0x18e>
    bbaa:	bb 24       	eor	r11, r11
    bbac:	47 e0       	ldi	r20, 0x07	; 7
    bbae:	94 2e       	mov	r9, r20
    bbb0:	f7 cf       	rjmp	.-18     	; 0xbba0 <vfprintf+0x17c>
    bbb2:	29 2d       	mov	r18, r9
    bbb4:	bb 24       	eor	r11, r11
    bbb6:	c6 01       	movw	r24, r12
    bbb8:	04 96       	adiw	r24, 0x04	; 4
    bbba:	9d 87       	std	Y+13, r25	; 0x0d
    bbbc:	8c 87       	std	Y+12, r24	; 0x0c
    bbbe:	f6 01       	movw	r30, r12
    bbc0:	60 81       	ld	r22, Z
    bbc2:	71 81       	ldd	r23, Z+1	; 0x01
    bbc4:	82 81       	ldd	r24, Z+2	; 0x02
    bbc6:	93 81       	ldd	r25, Z+3	; 0x03
    bbc8:	ae 01       	movw	r20, r28
    bbca:	4f 5f       	subi	r20, 0xFF	; 255
    bbcc:	5f 4f       	sbci	r21, 0xFF	; 255
    bbce:	0b 2d       	mov	r16, r11
    bbd0:	0e 94 99 66 	call	0xcd32	; 0xcd32 <__ftoa_engine>
    bbd4:	6c 01       	movw	r12, r24
    bbd6:	09 81       	ldd	r16, Y+1	; 0x01
    bbd8:	20 2e       	mov	r2, r16
    bbda:	33 24       	eor	r3, r3
    bbdc:	00 ff       	sbrs	r16, 0
    bbde:	04 c0       	rjmp	.+8      	; 0xbbe8 <vfprintf+0x1c4>
    bbe0:	03 fd       	sbrc	r16, 3
    bbe2:	02 c0       	rjmp	.+4      	; 0xbbe8 <vfprintf+0x1c4>
    bbe4:	1d e2       	ldi	r17, 0x2D	; 45
    bbe6:	09 c0       	rjmp	.+18     	; 0xbbfa <vfprintf+0x1d6>
    bbe8:	f1 fe       	sbrs	r15, 1
    bbea:	02 c0       	rjmp	.+4      	; 0xbbf0 <vfprintf+0x1cc>
    bbec:	1b e2       	ldi	r17, 0x2B	; 43
    bbee:	05 c0       	rjmp	.+10     	; 0xbbfa <vfprintf+0x1d6>
    bbf0:	f2 fc       	sbrc	r15, 2
    bbf2:	02 c0       	rjmp	.+4      	; 0xbbf8 <vfprintf+0x1d4>
    bbf4:	10 e0       	ldi	r17, 0x00	; 0
    bbf6:	01 c0       	rjmp	.+2      	; 0xbbfa <vfprintf+0x1d6>
    bbf8:	10 e2       	ldi	r17, 0x20	; 32
    bbfa:	c1 01       	movw	r24, r2
    bbfc:	8c 70       	andi	r24, 0x0C	; 12
    bbfe:	90 70       	andi	r25, 0x00	; 0
    bc00:	89 2b       	or	r24, r25
    bc02:	b9 f1       	breq	.+110    	; 0xbc72 <vfprintf+0x24e>
    bc04:	11 23       	and	r17, r17
    bc06:	11 f4       	brne	.+4      	; 0xbc0c <vfprintf+0x1e8>
    bc08:	83 e0       	ldi	r24, 0x03	; 3
    bc0a:	01 c0       	rjmp	.+2      	; 0xbc0e <vfprintf+0x1ea>
    bc0c:	84 e0       	ldi	r24, 0x04	; 4
    bc0e:	88 15       	cp	r24, r8
    bc10:	10 f0       	brcs	.+4      	; 0xbc16 <vfprintf+0x1f2>
    bc12:	88 24       	eor	r8, r8
    bc14:	0a c0       	rjmp	.+20     	; 0xbc2a <vfprintf+0x206>
    bc16:	88 1a       	sub	r8, r24
    bc18:	f3 fc       	sbrc	r15, 3
    bc1a:	07 c0       	rjmp	.+14     	; 0xbc2a <vfprintf+0x206>
    bc1c:	80 e2       	ldi	r24, 0x20	; 32
    bc1e:	90 e0       	ldi	r25, 0x00	; 0
    bc20:	b3 01       	movw	r22, r6
    bc22:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bc26:	8a 94       	dec	r8
    bc28:	c9 f7       	brne	.-14     	; 0xbc1c <vfprintf+0x1f8>
    bc2a:	11 23       	and	r17, r17
    bc2c:	29 f0       	breq	.+10     	; 0xbc38 <vfprintf+0x214>
    bc2e:	81 2f       	mov	r24, r17
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	b3 01       	movw	r22, r6
    bc34:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bc38:	23 fe       	sbrs	r2, 3
    bc3a:	03 c0       	rjmp	.+6      	; 0xbc42 <vfprintf+0x21e>
    bc3c:	00 e1       	ldi	r16, 0x10	; 16
    bc3e:	12 e0       	ldi	r17, 0x02	; 2
    bc40:	0e c0       	rjmp	.+28     	; 0xbc5e <vfprintf+0x23a>
    bc42:	04 e1       	ldi	r16, 0x14	; 20
    bc44:	12 e0       	ldi	r17, 0x02	; 2
    bc46:	0b c0       	rjmp	.+22     	; 0xbc5e <vfprintf+0x23a>
    bc48:	e1 14       	cp	r14, r1
    bc4a:	f1 04       	cpc	r15, r1
    bc4c:	09 f0       	breq	.+2      	; 0xbc50 <vfprintf+0x22c>
    bc4e:	80 52       	subi	r24, 0x20	; 32
    bc50:	90 e0       	ldi	r25, 0x00	; 0
    bc52:	b3 01       	movw	r22, r6
    bc54:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bc58:	0f 5f       	subi	r16, 0xFF	; 255
    bc5a:	1f 4f       	sbci	r17, 0xFF	; 255
    bc5c:	05 c0       	rjmp	.+10     	; 0xbc68 <vfprintf+0x244>
    bc5e:	ef 2c       	mov	r14, r15
    bc60:	ff 24       	eor	r15, r15
    bc62:	f0 e1       	ldi	r31, 0x10	; 16
    bc64:	ef 22       	and	r14, r31
    bc66:	ff 24       	eor	r15, r15
    bc68:	f8 01       	movw	r30, r16
    bc6a:	84 91       	lpm	r24, Z+
    bc6c:	88 23       	and	r24, r24
    bc6e:	61 f7       	brne	.-40     	; 0xbc48 <vfprintf+0x224>
    bc70:	14 c1       	rjmp	.+552    	; 0xbe9a <vfprintf+0x476>
    bc72:	f7 fe       	sbrs	r15, 7
    bc74:	12 c0       	rjmp	.+36     	; 0xbc9a <vfprintf+0x276>
    bc76:	bc 0c       	add	r11, r12
    bc78:	24 fe       	sbrs	r2, 4
    bc7a:	04 c0       	rjmp	.+8      	; 0xbc84 <vfprintf+0x260>
    bc7c:	8a 81       	ldd	r24, Y+2	; 0x02
    bc7e:	81 33       	cpi	r24, 0x31	; 49
    bc80:	09 f4       	brne	.+2      	; 0xbc84 <vfprintf+0x260>
    bc82:	ba 94       	dec	r11
    bc84:	1b 14       	cp	r1, r11
    bc86:	1c f0       	brlt	.+6      	; 0xbc8e <vfprintf+0x26a>
    bc88:	bb 24       	eor	r11, r11
    bc8a:	b3 94       	inc	r11
    bc8c:	2d c0       	rjmp	.+90     	; 0xbce8 <vfprintf+0x2c4>
    bc8e:	f8 e0       	ldi	r31, 0x08	; 8
    bc90:	fb 15       	cp	r31, r11
    bc92:	50 f5       	brcc	.+84     	; 0xbce8 <vfprintf+0x2c4>
    bc94:	38 e0       	ldi	r19, 0x08	; 8
    bc96:	b3 2e       	mov	r11, r19
    bc98:	27 c0       	rjmp	.+78     	; 0xbce8 <vfprintf+0x2c4>
    bc9a:	f6 fc       	sbrc	r15, 6
    bc9c:	25 c0       	rjmp	.+74     	; 0xbce8 <vfprintf+0x2c4>
    bc9e:	89 2d       	mov	r24, r9
    bca0:	90 e0       	ldi	r25, 0x00	; 0
    bca2:	8c 15       	cp	r24, r12
    bca4:	9d 05       	cpc	r25, r13
    bca6:	4c f0       	brlt	.+18     	; 0xbcba <vfprintf+0x296>
    bca8:	2c ef       	ldi	r18, 0xFC	; 252
    bcaa:	c2 16       	cp	r12, r18
    bcac:	2f ef       	ldi	r18, 0xFF	; 255
    bcae:	d2 06       	cpc	r13, r18
    bcb0:	24 f0       	brlt	.+8      	; 0xbcba <vfprintf+0x296>
    bcb2:	30 e8       	ldi	r19, 0x80	; 128
    bcb4:	f3 2a       	or	r15, r19
    bcb6:	01 c0       	rjmp	.+2      	; 0xbcba <vfprintf+0x296>
    bcb8:	9a 94       	dec	r9
    bcba:	99 20       	and	r9, r9
    bcbc:	49 f0       	breq	.+18     	; 0xbcd0 <vfprintf+0x2ac>
    bcbe:	e2 e0       	ldi	r30, 0x02	; 2
    bcc0:	f0 e0       	ldi	r31, 0x00	; 0
    bcc2:	ec 0f       	add	r30, r28
    bcc4:	fd 1f       	adc	r31, r29
    bcc6:	e9 0d       	add	r30, r9
    bcc8:	f1 1d       	adc	r31, r1
    bcca:	80 81       	ld	r24, Z
    bccc:	80 33       	cpi	r24, 0x30	; 48
    bcce:	a1 f3       	breq	.-24     	; 0xbcb8 <vfprintf+0x294>
    bcd0:	f7 fe       	sbrs	r15, 7
    bcd2:	0a c0       	rjmp	.+20     	; 0xbce8 <vfprintf+0x2c4>
    bcd4:	b9 2c       	mov	r11, r9
    bcd6:	b3 94       	inc	r11
    bcd8:	89 2d       	mov	r24, r9
    bcda:	90 e0       	ldi	r25, 0x00	; 0
    bcdc:	c8 16       	cp	r12, r24
    bcde:	d9 06       	cpc	r13, r25
    bce0:	14 f0       	brlt	.+4      	; 0xbce6 <vfprintf+0x2c2>
    bce2:	99 24       	eor	r9, r9
    bce4:	01 c0       	rjmp	.+2      	; 0xbce8 <vfprintf+0x2c4>
    bce6:	9c 18       	sub	r9, r12
    bce8:	f7 fc       	sbrc	r15, 7
    bcea:	03 c0       	rjmp	.+6      	; 0xbcf2 <vfprintf+0x2ce>
    bcec:	25 e0       	ldi	r18, 0x05	; 5
    bcee:	30 e0       	ldi	r19, 0x00	; 0
    bcf0:	09 c0       	rjmp	.+18     	; 0xbd04 <vfprintf+0x2e0>
    bcf2:	1c 14       	cp	r1, r12
    bcf4:	1d 04       	cpc	r1, r13
    bcf6:	1c f0       	brlt	.+6      	; 0xbcfe <vfprintf+0x2da>
    bcf8:	21 e0       	ldi	r18, 0x01	; 1
    bcfa:	30 e0       	ldi	r19, 0x00	; 0
    bcfc:	03 c0       	rjmp	.+6      	; 0xbd04 <vfprintf+0x2e0>
    bcfe:	96 01       	movw	r18, r12
    bd00:	2f 5f       	subi	r18, 0xFF	; 255
    bd02:	3f 4f       	sbci	r19, 0xFF	; 255
    bd04:	11 23       	and	r17, r17
    bd06:	11 f0       	breq	.+4      	; 0xbd0c <vfprintf+0x2e8>
    bd08:	2f 5f       	subi	r18, 0xFF	; 255
    bd0a:	3f 4f       	sbci	r19, 0xFF	; 255
    bd0c:	99 20       	and	r9, r9
    bd0e:	29 f0       	breq	.+10     	; 0xbd1a <vfprintf+0x2f6>
    bd10:	89 2d       	mov	r24, r9
    bd12:	90 e0       	ldi	r25, 0x00	; 0
    bd14:	01 96       	adiw	r24, 0x01	; 1
    bd16:	28 0f       	add	r18, r24
    bd18:	39 1f       	adc	r19, r25
    bd1a:	88 2d       	mov	r24, r8
    bd1c:	90 e0       	ldi	r25, 0x00	; 0
    bd1e:	28 17       	cp	r18, r24
    bd20:	39 07       	cpc	r19, r25
    bd22:	14 f0       	brlt	.+4      	; 0xbd28 <vfprintf+0x304>
    bd24:	88 24       	eor	r8, r8
    bd26:	01 c0       	rjmp	.+2      	; 0xbd2a <vfprintf+0x306>
    bd28:	82 1a       	sub	r8, r18
    bd2a:	4f 2c       	mov	r4, r15
    bd2c:	55 24       	eor	r5, r5
    bd2e:	c2 01       	movw	r24, r4
    bd30:	89 70       	andi	r24, 0x09	; 9
    bd32:	90 70       	andi	r25, 0x00	; 0
    bd34:	89 2b       	or	r24, r25
    bd36:	39 f0       	breq	.+14     	; 0xbd46 <vfprintf+0x322>
    bd38:	08 c0       	rjmp	.+16     	; 0xbd4a <vfprintf+0x326>
    bd3a:	80 e2       	ldi	r24, 0x20	; 32
    bd3c:	90 e0       	ldi	r25, 0x00	; 0
    bd3e:	b3 01       	movw	r22, r6
    bd40:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bd44:	8a 94       	dec	r8
    bd46:	88 20       	and	r8, r8
    bd48:	c1 f7       	brne	.-16     	; 0xbd3a <vfprintf+0x316>
    bd4a:	11 23       	and	r17, r17
    bd4c:	29 f0       	breq	.+10     	; 0xbd58 <vfprintf+0x334>
    bd4e:	81 2f       	mov	r24, r17
    bd50:	90 e0       	ldi	r25, 0x00	; 0
    bd52:	b3 01       	movw	r22, r6
    bd54:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bd58:	43 fe       	sbrs	r4, 3
    bd5a:	07 c0       	rjmp	.+14     	; 0xbd6a <vfprintf+0x346>
    bd5c:	08 c0       	rjmp	.+16     	; 0xbd6e <vfprintf+0x34a>
    bd5e:	80 e3       	ldi	r24, 0x30	; 48
    bd60:	90 e0       	ldi	r25, 0x00	; 0
    bd62:	b3 01       	movw	r22, r6
    bd64:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bd68:	8a 94       	dec	r8
    bd6a:	88 20       	and	r8, r8
    bd6c:	c1 f7       	brne	.-16     	; 0xbd5e <vfprintf+0x33a>
    bd6e:	f7 fe       	sbrs	r15, 7
    bd70:	46 c0       	rjmp	.+140    	; 0xbdfe <vfprintf+0x3da>
    bd72:	86 01       	movw	r16, r12
    bd74:	d7 fe       	sbrs	r13, 7
    bd76:	02 c0       	rjmp	.+4      	; 0xbd7c <vfprintf+0x358>
    bd78:	00 e0       	ldi	r16, 0x00	; 0
    bd7a:	10 e0       	ldi	r17, 0x00	; 0
    bd7c:	76 01       	movw	r14, r12
    bd7e:	08 94       	sec
    bd80:	e1 1c       	adc	r14, r1
    bd82:	f1 1c       	adc	r15, r1
    bd84:	e0 1a       	sub	r14, r16
    bd86:	f1 0a       	sbc	r15, r17
    bd88:	41 e0       	ldi	r20, 0x01	; 1
    bd8a:	50 e0       	ldi	r21, 0x00	; 0
    bd8c:	4c 0f       	add	r20, r28
    bd8e:	5d 1f       	adc	r21, r29
    bd90:	e4 0e       	add	r14, r20
    bd92:	f5 1e       	adc	r15, r21
    bd94:	26 01       	movw	r4, r12
    bd96:	4b 18       	sub	r4, r11
    bd98:	51 08       	sbc	r5, r1
    bd9a:	89 2d       	mov	r24, r9
    bd9c:	90 e0       	ldi	r25, 0x00	; 0
    bd9e:	aa 24       	eor	r10, r10
    bda0:	bb 24       	eor	r11, r11
    bda2:	a8 1a       	sub	r10, r24
    bda4:	b9 0a       	sbc	r11, r25
    bda6:	5f ef       	ldi	r21, 0xFF	; 255
    bda8:	0f 3f       	cpi	r16, 0xFF	; 255
    bdaa:	15 07       	cpc	r17, r21
    bdac:	29 f4       	brne	.+10     	; 0xbdb8 <vfprintf+0x394>
    bdae:	8e e2       	ldi	r24, 0x2E	; 46
    bdb0:	90 e0       	ldi	r25, 0x00	; 0
    bdb2:	b3 01       	movw	r22, r6
    bdb4:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bdb8:	c0 16       	cp	r12, r16
    bdba:	d1 06       	cpc	r13, r17
    bdbc:	34 f0       	brlt	.+12     	; 0xbdca <vfprintf+0x3a6>
    bdbe:	40 16       	cp	r4, r16
    bdc0:	51 06       	cpc	r5, r17
    bdc2:	1c f4       	brge	.+6      	; 0xbdca <vfprintf+0x3a6>
    bdc4:	f7 01       	movw	r30, r14
    bdc6:	80 81       	ld	r24, Z
    bdc8:	01 c0       	rjmp	.+2      	; 0xbdcc <vfprintf+0x3a8>
    bdca:	80 e3       	ldi	r24, 0x30	; 48
    bdcc:	01 50       	subi	r16, 0x01	; 1
    bdce:	10 40       	sbci	r17, 0x00	; 0
    bdd0:	08 94       	sec
    bdd2:	e1 1c       	adc	r14, r1
    bdd4:	f1 1c       	adc	r15, r1
    bdd6:	0a 15       	cp	r16, r10
    bdd8:	1b 05       	cpc	r17, r11
    bdda:	2c f0       	brlt	.+10     	; 0xbde6 <vfprintf+0x3c2>
    bddc:	90 e0       	ldi	r25, 0x00	; 0
    bdde:	b3 01       	movw	r22, r6
    bde0:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bde4:	e0 cf       	rjmp	.-64     	; 0xbda6 <vfprintf+0x382>
    bde6:	0c 15       	cp	r16, r12
    bde8:	1d 05       	cpc	r17, r13
    bdea:	39 f4       	brne	.+14     	; 0xbdfa <vfprintf+0x3d6>
    bdec:	9a 81       	ldd	r25, Y+2	; 0x02
    bdee:	96 33       	cpi	r25, 0x36	; 54
    bdf0:	18 f4       	brcc	.+6      	; 0xbdf8 <vfprintf+0x3d4>
    bdf2:	95 33       	cpi	r25, 0x35	; 53
    bdf4:	11 f4       	brne	.+4      	; 0xbdfa <vfprintf+0x3d6>
    bdf6:	24 fe       	sbrs	r2, 4
    bdf8:	81 e3       	ldi	r24, 0x31	; 49
    bdfa:	90 e0       	ldi	r25, 0x00	; 0
    bdfc:	4b c0       	rjmp	.+150    	; 0xbe94 <vfprintf+0x470>
    bdfe:	8a 81       	ldd	r24, Y+2	; 0x02
    be00:	81 33       	cpi	r24, 0x31	; 49
    be02:	09 f0       	breq	.+2      	; 0xbe06 <vfprintf+0x3e2>
    be04:	0f 7e       	andi	r16, 0xEF	; 239
    be06:	90 e0       	ldi	r25, 0x00	; 0
    be08:	b3 01       	movw	r22, r6
    be0a:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be0e:	99 20       	and	r9, r9
    be10:	a1 f0       	breq	.+40     	; 0xbe3a <vfprintf+0x416>
    be12:	8e e2       	ldi	r24, 0x2E	; 46
    be14:	90 e0       	ldi	r25, 0x00	; 0
    be16:	b3 01       	movw	r22, r6
    be18:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be1c:	12 e0       	ldi	r17, 0x02	; 2
    be1e:	e1 e0       	ldi	r30, 0x01	; 1
    be20:	f0 e0       	ldi	r31, 0x00	; 0
    be22:	ec 0f       	add	r30, r28
    be24:	fd 1f       	adc	r31, r29
    be26:	e1 0f       	add	r30, r17
    be28:	f1 1d       	adc	r31, r1
    be2a:	1f 5f       	subi	r17, 0xFF	; 255
    be2c:	80 81       	ld	r24, Z
    be2e:	90 e0       	ldi	r25, 0x00	; 0
    be30:	b3 01       	movw	r22, r6
    be32:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be36:	9a 94       	dec	r9
    be38:	91 f7       	brne	.-28     	; 0xbe1e <vfprintf+0x3fa>
    be3a:	44 fc       	sbrc	r4, 4
    be3c:	03 c0       	rjmp	.+6      	; 0xbe44 <vfprintf+0x420>
    be3e:	85 e6       	ldi	r24, 0x65	; 101
    be40:	90 e0       	ldi	r25, 0x00	; 0
    be42:	02 c0       	rjmp	.+4      	; 0xbe48 <vfprintf+0x424>
    be44:	85 e4       	ldi	r24, 0x45	; 69
    be46:	90 e0       	ldi	r25, 0x00	; 0
    be48:	b3 01       	movw	r22, r6
    be4a:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be4e:	d7 fc       	sbrc	r13, 7
    be50:	05 c0       	rjmp	.+10     	; 0xbe5c <vfprintf+0x438>
    be52:	c1 14       	cp	r12, r1
    be54:	d1 04       	cpc	r13, r1
    be56:	41 f4       	brne	.+16     	; 0xbe68 <vfprintf+0x444>
    be58:	04 ff       	sbrs	r16, 4
    be5a:	06 c0       	rjmp	.+12     	; 0xbe68 <vfprintf+0x444>
    be5c:	d0 94       	com	r13
    be5e:	c1 94       	neg	r12
    be60:	d1 08       	sbc	r13, r1
    be62:	d3 94       	inc	r13
    be64:	8d e2       	ldi	r24, 0x2D	; 45
    be66:	01 c0       	rjmp	.+2      	; 0xbe6a <vfprintf+0x446>
    be68:	8b e2       	ldi	r24, 0x2B	; 43
    be6a:	90 e0       	ldi	r25, 0x00	; 0
    be6c:	b3 01       	movw	r22, r6
    be6e:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be72:	80 e3       	ldi	r24, 0x30	; 48
    be74:	05 c0       	rjmp	.+10     	; 0xbe80 <vfprintf+0x45c>
    be76:	8f 5f       	subi	r24, 0xFF	; 255
    be78:	26 ef       	ldi	r18, 0xF6	; 246
    be7a:	3f ef       	ldi	r19, 0xFF	; 255
    be7c:	c2 0e       	add	r12, r18
    be7e:	d3 1e       	adc	r13, r19
    be80:	3a e0       	ldi	r19, 0x0A	; 10
    be82:	c3 16       	cp	r12, r19
    be84:	d1 04       	cpc	r13, r1
    be86:	bc f7       	brge	.-18     	; 0xbe76 <vfprintf+0x452>
    be88:	90 e0       	ldi	r25, 0x00	; 0
    be8a:	b3 01       	movw	r22, r6
    be8c:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be90:	c6 01       	movw	r24, r12
    be92:	c0 96       	adiw	r24, 0x30	; 48
    be94:	b3 01       	movw	r22, r6
    be96:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    be9a:	cc 84       	ldd	r12, Y+12	; 0x0c
    be9c:	dd 84       	ldd	r13, Y+13	; 0x0d
    be9e:	52 c1       	rjmp	.+676    	; 0xc144 <vfprintf+0x720>
    bea0:	93 36       	cpi	r25, 0x63	; 99
    bea2:	31 f0       	breq	.+12     	; 0xbeb0 <vfprintf+0x48c>
    bea4:	93 37       	cpi	r25, 0x73	; 115
    bea6:	99 f0       	breq	.+38     	; 0xbece <vfprintf+0x4aa>
    bea8:	93 35       	cpi	r25, 0x53	; 83
    beaa:	09 f0       	breq	.+2      	; 0xbeae <vfprintf+0x48a>
    beac:	59 c0       	rjmp	.+178    	; 0xbf60 <vfprintf+0x53c>
    beae:	23 c0       	rjmp	.+70     	; 0xbef6 <vfprintf+0x4d2>
    beb0:	f6 01       	movw	r30, r12
    beb2:	80 81       	ld	r24, Z
    beb4:	89 83       	std	Y+1, r24	; 0x01
    beb6:	5e 01       	movw	r10, r28
    beb8:	08 94       	sec
    beba:	a1 1c       	adc	r10, r1
    bebc:	b1 1c       	adc	r11, r1
    bebe:	22 e0       	ldi	r18, 0x02	; 2
    bec0:	30 e0       	ldi	r19, 0x00	; 0
    bec2:	c2 0e       	add	r12, r18
    bec4:	d3 1e       	adc	r13, r19
    bec6:	21 e0       	ldi	r18, 0x01	; 1
    bec8:	e2 2e       	mov	r14, r18
    beca:	f1 2c       	mov	r15, r1
    becc:	12 c0       	rjmp	.+36     	; 0xbef2 <vfprintf+0x4ce>
    bece:	f6 01       	movw	r30, r12
    bed0:	a0 80       	ld	r10, Z
    bed2:	b1 80       	ldd	r11, Z+1	; 0x01
    bed4:	16 fd       	sbrc	r17, 6
    bed6:	03 c0       	rjmp	.+6      	; 0xbede <vfprintf+0x4ba>
    bed8:	6f ef       	ldi	r22, 0xFF	; 255
    beda:	7f ef       	ldi	r23, 0xFF	; 255
    bedc:	02 c0       	rjmp	.+4      	; 0xbee2 <vfprintf+0x4be>
    bede:	69 2d       	mov	r22, r9
    bee0:	70 e0       	ldi	r23, 0x00	; 0
    bee2:	22 e0       	ldi	r18, 0x02	; 2
    bee4:	30 e0       	ldi	r19, 0x00	; 0
    bee6:	c2 0e       	add	r12, r18
    bee8:	d3 1e       	adc	r13, r19
    beea:	c5 01       	movw	r24, r10
    beec:	0e 94 df 67 	call	0xcfbe	; 0xcfbe <strnlen>
    bef0:	7c 01       	movw	r14, r24
    bef2:	1f 77       	andi	r17, 0x7F	; 127
    bef4:	13 c0       	rjmp	.+38     	; 0xbf1c <vfprintf+0x4f8>
    bef6:	f6 01       	movw	r30, r12
    bef8:	a0 80       	ld	r10, Z
    befa:	b1 80       	ldd	r11, Z+1	; 0x01
    befc:	16 fd       	sbrc	r17, 6
    befe:	03 c0       	rjmp	.+6      	; 0xbf06 <vfprintf+0x4e2>
    bf00:	6f ef       	ldi	r22, 0xFF	; 255
    bf02:	7f ef       	ldi	r23, 0xFF	; 255
    bf04:	02 c0       	rjmp	.+4      	; 0xbf0a <vfprintf+0x4e6>
    bf06:	69 2d       	mov	r22, r9
    bf08:	70 e0       	ldi	r23, 0x00	; 0
    bf0a:	22 e0       	ldi	r18, 0x02	; 2
    bf0c:	30 e0       	ldi	r19, 0x00	; 0
    bf0e:	c2 0e       	add	r12, r18
    bf10:	d3 1e       	adc	r13, r19
    bf12:	c5 01       	movw	r24, r10
    bf14:	0e 94 98 67 	call	0xcf30	; 0xcf30 <strnlen_P>
    bf18:	7c 01       	movw	r14, r24
    bf1a:	10 68       	ori	r17, 0x80	; 128
    bf1c:	13 ff       	sbrs	r17, 3
    bf1e:	07 c0       	rjmp	.+14     	; 0xbf2e <vfprintf+0x50a>
    bf20:	1b c0       	rjmp	.+54     	; 0xbf58 <vfprintf+0x534>
    bf22:	80 e2       	ldi	r24, 0x20	; 32
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	b3 01       	movw	r22, r6
    bf28:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bf2c:	8a 94       	dec	r8
    bf2e:	88 2d       	mov	r24, r8
    bf30:	90 e0       	ldi	r25, 0x00	; 0
    bf32:	e8 16       	cp	r14, r24
    bf34:	f9 06       	cpc	r15, r25
    bf36:	a8 f3       	brcs	.-22     	; 0xbf22 <vfprintf+0x4fe>
    bf38:	0f c0       	rjmp	.+30     	; 0xbf58 <vfprintf+0x534>
    bf3a:	f5 01       	movw	r30, r10
    bf3c:	17 fd       	sbrc	r17, 7
    bf3e:	85 91       	lpm	r24, Z+
    bf40:	17 ff       	sbrs	r17, 7
    bf42:	81 91       	ld	r24, Z+
    bf44:	5f 01       	movw	r10, r30
    bf46:	90 e0       	ldi	r25, 0x00	; 0
    bf48:	b3 01       	movw	r22, r6
    bf4a:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    bf4e:	81 10       	cpse	r8, r1
    bf50:	8a 94       	dec	r8
    bf52:	08 94       	sec
    bf54:	e1 08       	sbc	r14, r1
    bf56:	f1 08       	sbc	r15, r1
    bf58:	e1 14       	cp	r14, r1
    bf5a:	f1 04       	cpc	r15, r1
    bf5c:	71 f7       	brne	.-36     	; 0xbf3a <vfprintf+0x516>
    bf5e:	f2 c0       	rjmp	.+484    	; 0xc144 <vfprintf+0x720>
    bf60:	94 36       	cpi	r25, 0x64	; 100
    bf62:	11 f0       	breq	.+4      	; 0xbf68 <vfprintf+0x544>
    bf64:	99 36       	cpi	r25, 0x69	; 105
    bf66:	89 f5       	brne	.+98     	; 0xbfca <vfprintf+0x5a6>
    bf68:	17 ff       	sbrs	r17, 7
    bf6a:	08 c0       	rjmp	.+16     	; 0xbf7c <vfprintf+0x558>
    bf6c:	f6 01       	movw	r30, r12
    bf6e:	20 81       	ld	r18, Z
    bf70:	31 81       	ldd	r19, Z+1	; 0x01
    bf72:	42 81       	ldd	r20, Z+2	; 0x02
    bf74:	53 81       	ldd	r21, Z+3	; 0x03
    bf76:	84 e0       	ldi	r24, 0x04	; 4
    bf78:	90 e0       	ldi	r25, 0x00	; 0
    bf7a:	0a c0       	rjmp	.+20     	; 0xbf90 <vfprintf+0x56c>
    bf7c:	f6 01       	movw	r30, r12
    bf7e:	80 81       	ld	r24, Z
    bf80:	91 81       	ldd	r25, Z+1	; 0x01
    bf82:	9c 01       	movw	r18, r24
    bf84:	44 27       	eor	r20, r20
    bf86:	37 fd       	sbrc	r19, 7
    bf88:	40 95       	com	r20
    bf8a:	54 2f       	mov	r21, r20
    bf8c:	82 e0       	ldi	r24, 0x02	; 2
    bf8e:	90 e0       	ldi	r25, 0x00	; 0
    bf90:	c8 0e       	add	r12, r24
    bf92:	d9 1e       	adc	r13, r25
    bf94:	9f e6       	ldi	r25, 0x6F	; 111
    bf96:	f9 2e       	mov	r15, r25
    bf98:	f1 22       	and	r15, r17
    bf9a:	57 ff       	sbrs	r21, 7
    bf9c:	09 c0       	rjmp	.+18     	; 0xbfb0 <vfprintf+0x58c>
    bf9e:	50 95       	com	r21
    bfa0:	40 95       	com	r20
    bfa2:	30 95       	com	r19
    bfa4:	21 95       	neg	r18
    bfa6:	3f 4f       	sbci	r19, 0xFF	; 255
    bfa8:	4f 4f       	sbci	r20, 0xFF	; 255
    bfaa:	5f 4f       	sbci	r21, 0xFF	; 255
    bfac:	90 e8       	ldi	r25, 0x80	; 128
    bfae:	f9 2a       	or	r15, r25
    bfb0:	ca 01       	movw	r24, r20
    bfb2:	b9 01       	movw	r22, r18
    bfb4:	ae 01       	movw	r20, r28
    bfb6:	4f 5f       	subi	r20, 0xFF	; 255
    bfb8:	5f 4f       	sbci	r21, 0xFF	; 255
    bfba:	2a e0       	ldi	r18, 0x0A	; 10
    bfbc:	30 e0       	ldi	r19, 0x00	; 0
    bfbe:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <__ultoa_invert>
    bfc2:	e8 2e       	mov	r14, r24
    bfc4:	e8 89       	ldd	r30, Y+16	; 0x10
    bfc6:	ee 1a       	sub	r14, r30
    bfc8:	41 c0       	rjmp	.+130    	; 0xc04c <vfprintf+0x628>
    bfca:	95 37       	cpi	r25, 0x75	; 117
    bfcc:	21 f4       	brne	.+8      	; 0xbfd6 <vfprintf+0x5b2>
    bfce:	1f 7e       	andi	r17, 0xEF	; 239
    bfd0:	2a e0       	ldi	r18, 0x0A	; 10
    bfd2:	30 e0       	ldi	r19, 0x00	; 0
    bfd4:	1c c0       	rjmp	.+56     	; 0xc00e <vfprintf+0x5ea>
    bfd6:	19 7f       	andi	r17, 0xF9	; 249
    bfd8:	9f 36       	cpi	r25, 0x6F	; 111
    bfda:	61 f0       	breq	.+24     	; 0xbff4 <vfprintf+0x5d0>
    bfdc:	90 37       	cpi	r25, 0x70	; 112
    bfde:	20 f4       	brcc	.+8      	; 0xbfe8 <vfprintf+0x5c4>
    bfe0:	98 35       	cpi	r25, 0x58	; 88
    bfe2:	09 f0       	breq	.+2      	; 0xbfe6 <vfprintf+0x5c2>
    bfe4:	b2 c0       	rjmp	.+356    	; 0xc14a <vfprintf+0x726>
    bfe6:	0f c0       	rjmp	.+30     	; 0xc006 <vfprintf+0x5e2>
    bfe8:	90 37       	cpi	r25, 0x70	; 112
    bfea:	39 f0       	breq	.+14     	; 0xbffa <vfprintf+0x5d6>
    bfec:	98 37       	cpi	r25, 0x78	; 120
    bfee:	09 f0       	breq	.+2      	; 0xbff2 <vfprintf+0x5ce>
    bff0:	ac c0       	rjmp	.+344    	; 0xc14a <vfprintf+0x726>
    bff2:	04 c0       	rjmp	.+8      	; 0xbffc <vfprintf+0x5d8>
    bff4:	28 e0       	ldi	r18, 0x08	; 8
    bff6:	30 e0       	ldi	r19, 0x00	; 0
    bff8:	0a c0       	rjmp	.+20     	; 0xc00e <vfprintf+0x5ea>
    bffa:	10 61       	ori	r17, 0x10	; 16
    bffc:	14 fd       	sbrc	r17, 4
    bffe:	14 60       	ori	r17, 0x04	; 4
    c000:	20 e1       	ldi	r18, 0x10	; 16
    c002:	30 e0       	ldi	r19, 0x00	; 0
    c004:	04 c0       	rjmp	.+8      	; 0xc00e <vfprintf+0x5ea>
    c006:	14 fd       	sbrc	r17, 4
    c008:	16 60       	ori	r17, 0x06	; 6
    c00a:	20 e1       	ldi	r18, 0x10	; 16
    c00c:	32 e0       	ldi	r19, 0x02	; 2
    c00e:	17 ff       	sbrs	r17, 7
    c010:	08 c0       	rjmp	.+16     	; 0xc022 <vfprintf+0x5fe>
    c012:	f6 01       	movw	r30, r12
    c014:	60 81       	ld	r22, Z
    c016:	71 81       	ldd	r23, Z+1	; 0x01
    c018:	82 81       	ldd	r24, Z+2	; 0x02
    c01a:	93 81       	ldd	r25, Z+3	; 0x03
    c01c:	44 e0       	ldi	r20, 0x04	; 4
    c01e:	50 e0       	ldi	r21, 0x00	; 0
    c020:	08 c0       	rjmp	.+16     	; 0xc032 <vfprintf+0x60e>
    c022:	f6 01       	movw	r30, r12
    c024:	80 81       	ld	r24, Z
    c026:	91 81       	ldd	r25, Z+1	; 0x01
    c028:	bc 01       	movw	r22, r24
    c02a:	80 e0       	ldi	r24, 0x00	; 0
    c02c:	90 e0       	ldi	r25, 0x00	; 0
    c02e:	42 e0       	ldi	r20, 0x02	; 2
    c030:	50 e0       	ldi	r21, 0x00	; 0
    c032:	c4 0e       	add	r12, r20
    c034:	d5 1e       	adc	r13, r21
    c036:	ae 01       	movw	r20, r28
    c038:	4f 5f       	subi	r20, 0xFF	; 255
    c03a:	5f 4f       	sbci	r21, 0xFF	; 255
    c03c:	0e 94 5a 69 	call	0xd2b4	; 0xd2b4 <__ultoa_invert>
    c040:	e8 2e       	mov	r14, r24
    c042:	58 89       	ldd	r21, Y+16	; 0x10
    c044:	e5 1a       	sub	r14, r21
    c046:	8f e7       	ldi	r24, 0x7F	; 127
    c048:	f8 2e       	mov	r15, r24
    c04a:	f1 22       	and	r15, r17
    c04c:	f6 fe       	sbrs	r15, 6
    c04e:	0b c0       	rjmp	.+22     	; 0xc066 <vfprintf+0x642>
    c050:	8e ef       	ldi	r24, 0xFE	; 254
    c052:	f8 22       	and	r15, r24
    c054:	e9 14       	cp	r14, r9
    c056:	38 f4       	brcc	.+14     	; 0xc066 <vfprintf+0x642>
    c058:	f4 fe       	sbrs	r15, 4
    c05a:	07 c0       	rjmp	.+14     	; 0xc06a <vfprintf+0x646>
    c05c:	f2 fc       	sbrc	r15, 2
    c05e:	05 c0       	rjmp	.+10     	; 0xc06a <vfprintf+0x646>
    c060:	9f ee       	ldi	r25, 0xEF	; 239
    c062:	f9 22       	and	r15, r25
    c064:	02 c0       	rjmp	.+4      	; 0xc06a <vfprintf+0x646>
    c066:	1e 2d       	mov	r17, r14
    c068:	01 c0       	rjmp	.+2      	; 0xc06c <vfprintf+0x648>
    c06a:	19 2d       	mov	r17, r9
    c06c:	f4 fe       	sbrs	r15, 4
    c06e:	0d c0       	rjmp	.+26     	; 0xc08a <vfprintf+0x666>
    c070:	fe 01       	movw	r30, r28
    c072:	ee 0d       	add	r30, r14
    c074:	f1 1d       	adc	r31, r1
    c076:	80 81       	ld	r24, Z
    c078:	80 33       	cpi	r24, 0x30	; 48
    c07a:	19 f4       	brne	.+6      	; 0xc082 <vfprintf+0x65e>
    c07c:	e9 ee       	ldi	r30, 0xE9	; 233
    c07e:	fe 22       	and	r15, r30
    c080:	08 c0       	rjmp	.+16     	; 0xc092 <vfprintf+0x66e>
    c082:	1f 5f       	subi	r17, 0xFF	; 255
    c084:	f2 fe       	sbrs	r15, 2
    c086:	05 c0       	rjmp	.+10     	; 0xc092 <vfprintf+0x66e>
    c088:	03 c0       	rjmp	.+6      	; 0xc090 <vfprintf+0x66c>
    c08a:	8f 2d       	mov	r24, r15
    c08c:	86 78       	andi	r24, 0x86	; 134
    c08e:	09 f0       	breq	.+2      	; 0xc092 <vfprintf+0x66e>
    c090:	1f 5f       	subi	r17, 0xFF	; 255
    c092:	0f 2d       	mov	r16, r15
    c094:	f3 fc       	sbrc	r15, 3
    c096:	14 c0       	rjmp	.+40     	; 0xc0c0 <vfprintf+0x69c>
    c098:	f0 fe       	sbrs	r15, 0
    c09a:	0f c0       	rjmp	.+30     	; 0xc0ba <vfprintf+0x696>
    c09c:	18 15       	cp	r17, r8
    c09e:	10 f0       	brcs	.+4      	; 0xc0a4 <vfprintf+0x680>
    c0a0:	9e 2c       	mov	r9, r14
    c0a2:	0b c0       	rjmp	.+22     	; 0xc0ba <vfprintf+0x696>
    c0a4:	9e 2c       	mov	r9, r14
    c0a6:	98 0c       	add	r9, r8
    c0a8:	91 1a       	sub	r9, r17
    c0aa:	18 2d       	mov	r17, r8
    c0ac:	06 c0       	rjmp	.+12     	; 0xc0ba <vfprintf+0x696>
    c0ae:	80 e2       	ldi	r24, 0x20	; 32
    c0b0:	90 e0       	ldi	r25, 0x00	; 0
    c0b2:	b3 01       	movw	r22, r6
    c0b4:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c0b8:	1f 5f       	subi	r17, 0xFF	; 255
    c0ba:	18 15       	cp	r17, r8
    c0bc:	c0 f3       	brcs	.-16     	; 0xc0ae <vfprintf+0x68a>
    c0be:	04 c0       	rjmp	.+8      	; 0xc0c8 <vfprintf+0x6a4>
    c0c0:	18 15       	cp	r17, r8
    c0c2:	10 f4       	brcc	.+4      	; 0xc0c8 <vfprintf+0x6a4>
    c0c4:	81 1a       	sub	r8, r17
    c0c6:	01 c0       	rjmp	.+2      	; 0xc0ca <vfprintf+0x6a6>
    c0c8:	88 24       	eor	r8, r8
    c0ca:	04 ff       	sbrs	r16, 4
    c0cc:	0f c0       	rjmp	.+30     	; 0xc0ec <vfprintf+0x6c8>
    c0ce:	80 e3       	ldi	r24, 0x30	; 48
    c0d0:	90 e0       	ldi	r25, 0x00	; 0
    c0d2:	b3 01       	movw	r22, r6
    c0d4:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c0d8:	02 ff       	sbrs	r16, 2
    c0da:	1d c0       	rjmp	.+58     	; 0xc116 <vfprintf+0x6f2>
    c0dc:	01 fd       	sbrc	r16, 1
    c0de:	03 c0       	rjmp	.+6      	; 0xc0e6 <vfprintf+0x6c2>
    c0e0:	88 e7       	ldi	r24, 0x78	; 120
    c0e2:	90 e0       	ldi	r25, 0x00	; 0
    c0e4:	0e c0       	rjmp	.+28     	; 0xc102 <vfprintf+0x6de>
    c0e6:	88 e5       	ldi	r24, 0x58	; 88
    c0e8:	90 e0       	ldi	r25, 0x00	; 0
    c0ea:	0b c0       	rjmp	.+22     	; 0xc102 <vfprintf+0x6de>
    c0ec:	80 2f       	mov	r24, r16
    c0ee:	86 78       	andi	r24, 0x86	; 134
    c0f0:	91 f0       	breq	.+36     	; 0xc116 <vfprintf+0x6f2>
    c0f2:	01 ff       	sbrs	r16, 1
    c0f4:	02 c0       	rjmp	.+4      	; 0xc0fa <vfprintf+0x6d6>
    c0f6:	8b e2       	ldi	r24, 0x2B	; 43
    c0f8:	01 c0       	rjmp	.+2      	; 0xc0fc <vfprintf+0x6d8>
    c0fa:	80 e2       	ldi	r24, 0x20	; 32
    c0fc:	f7 fc       	sbrc	r15, 7
    c0fe:	8d e2       	ldi	r24, 0x2D	; 45
    c100:	90 e0       	ldi	r25, 0x00	; 0
    c102:	b3 01       	movw	r22, r6
    c104:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c108:	06 c0       	rjmp	.+12     	; 0xc116 <vfprintf+0x6f2>
    c10a:	80 e3       	ldi	r24, 0x30	; 48
    c10c:	90 e0       	ldi	r25, 0x00	; 0
    c10e:	b3 01       	movw	r22, r6
    c110:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c114:	9a 94       	dec	r9
    c116:	e9 14       	cp	r14, r9
    c118:	c0 f3       	brcs	.-16     	; 0xc10a <vfprintf+0x6e6>
    c11a:	ea 94       	dec	r14
    c11c:	e1 e0       	ldi	r30, 0x01	; 1
    c11e:	f0 e0       	ldi	r31, 0x00	; 0
    c120:	ec 0f       	add	r30, r28
    c122:	fd 1f       	adc	r31, r29
    c124:	ee 0d       	add	r30, r14
    c126:	f1 1d       	adc	r31, r1
    c128:	80 81       	ld	r24, Z
    c12a:	90 e0       	ldi	r25, 0x00	; 0
    c12c:	b3 01       	movw	r22, r6
    c12e:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c132:	ee 20       	and	r14, r14
    c134:	91 f7       	brne	.-28     	; 0xc11a <vfprintf+0x6f6>
    c136:	06 c0       	rjmp	.+12     	; 0xc144 <vfprintf+0x720>
    c138:	80 e2       	ldi	r24, 0x20	; 32
    c13a:	90 e0       	ldi	r25, 0x00	; 0
    c13c:	b3 01       	movw	r22, r6
    c13e:	0e 94 57 68 	call	0xd0ae	; 0xd0ae <fputc>
    c142:	8a 94       	dec	r8
    c144:	88 20       	and	r8, r8
    c146:	c1 f7       	brne	.-16     	; 0xc138 <vfprintf+0x714>
    c148:	99 cc       	rjmp	.-1742   	; 0xba7c <vfprintf+0x58>
    c14a:	f3 01       	movw	r30, r6
    c14c:	66 81       	ldd	r22, Z+6	; 0x06
    c14e:	77 81       	ldd	r23, Z+7	; 0x07
    c150:	cb 01       	movw	r24, r22
    c152:	61 96       	adiw	r28, 0x11	; 17
    c154:	0f b6       	in	r0, 0x3f	; 63
    c156:	f8 94       	cli
    c158:	de bf       	out	0x3e, r29	; 62
    c15a:	0f be       	out	0x3f, r0	; 63
    c15c:	cd bf       	out	0x3d, r28	; 61
    c15e:	cf 91       	pop	r28
    c160:	df 91       	pop	r29
    c162:	1f 91       	pop	r17
    c164:	0f 91       	pop	r16
    c166:	ff 90       	pop	r15
    c168:	ef 90       	pop	r14
    c16a:	df 90       	pop	r13
    c16c:	cf 90       	pop	r12
    c16e:	bf 90       	pop	r11
    c170:	af 90       	pop	r10
    c172:	9f 90       	pop	r9
    c174:	8f 90       	pop	r8
    c176:	7f 90       	pop	r7
    c178:	6f 90       	pop	r6
    c17a:	5f 90       	pop	r5
    c17c:	4f 90       	pop	r4
    c17e:	3f 90       	pop	r3
    c180:	2f 90       	pop	r2
    c182:	08 95       	ret

0000c184 <acos>:
    c184:	9f 93       	push	r25
    c186:	9f 77       	andi	r25, 0x7F	; 127
    c188:	d9 d1       	rcall	.+946    	; 0xc53c <__fp_arccos>
    c18a:	0f 90       	pop	r0
    c18c:	00 20       	and	r0, r0
    c18e:	3a f4       	brpl	.+14     	; 0xc19e <acos+0x1a>
    c190:	90 58       	subi	r25, 0x80	; 128
    c192:	a2 ea       	ldi	r26, 0xA2	; 162
    c194:	2a ed       	ldi	r18, 0xDA	; 218
    c196:	3f e0       	ldi	r19, 0x0F	; 15
    c198:	49 e4       	ldi	r20, 0x49	; 73
    c19a:	50 e4       	ldi	r21, 0x40	; 64
    c19c:	13 d0       	rcall	.+38     	; 0xc1c4 <__addsf3x>
    c19e:	ab c2       	rjmp	.+1366   	; 0xc6f6 <__fp_round>

0000c1a0 <__subsf3>:
    c1a0:	50 58       	subi	r21, 0x80	; 128

0000c1a2 <__addsf3>:
    c1a2:	bb 27       	eor	r27, r27
    c1a4:	aa 27       	eor	r26, r26
    c1a6:	0e d0       	rcall	.+28     	; 0xc1c4 <__addsf3x>
    c1a8:	a6 c2       	rjmp	.+1356   	; 0xc6f6 <__fp_round>
    c1aa:	6f d2       	rcall	.+1246   	; 0xc68a <__fp_pscA>
    c1ac:	30 f0       	brcs	.+12     	; 0xc1ba <__addsf3+0x18>
    c1ae:	74 d2       	rcall	.+1256   	; 0xc698 <__fp_pscB>
    c1b0:	20 f0       	brcs	.+8      	; 0xc1ba <__addsf3+0x18>
    c1b2:	31 f4       	brne	.+12     	; 0xc1c0 <__addsf3+0x1e>
    c1b4:	9f 3f       	cpi	r25, 0xFF	; 255
    c1b6:	11 f4       	brne	.+4      	; 0xc1bc <__addsf3+0x1a>
    c1b8:	1e f4       	brtc	.+6      	; 0xc1c0 <__addsf3+0x1e>
    c1ba:	2e c2       	rjmp	.+1116   	; 0xc618 <__fp_nan>
    c1bc:	0e f4       	brtc	.+2      	; 0xc1c0 <__addsf3+0x1e>
    c1be:	e0 95       	com	r30
    c1c0:	e7 fb       	bst	r30, 7
    c1c2:	fb c1       	rjmp	.+1014   	; 0xc5ba <__fp_inf>

0000c1c4 <__addsf3x>:
    c1c4:	e9 2f       	mov	r30, r25
    c1c6:	b9 d2       	rcall	.+1394   	; 0xc73a <__fp_split3>
    c1c8:	80 f3       	brcs	.-32     	; 0xc1aa <__addsf3+0x8>
    c1ca:	ba 17       	cp	r27, r26
    c1cc:	62 07       	cpc	r22, r18
    c1ce:	73 07       	cpc	r23, r19
    c1d0:	84 07       	cpc	r24, r20
    c1d2:	95 07       	cpc	r25, r21
    c1d4:	18 f0       	brcs	.+6      	; 0xc1dc <__addsf3x+0x18>
    c1d6:	71 f4       	brne	.+28     	; 0xc1f4 <__addsf3x+0x30>
    c1d8:	9e f5       	brtc	.+102    	; 0xc240 <__addsf3x+0x7c>
    c1da:	e8 c2       	rjmp	.+1488   	; 0xc7ac <__fp_zero>
    c1dc:	0e f4       	brtc	.+2      	; 0xc1e0 <__addsf3x+0x1c>
    c1de:	e0 95       	com	r30
    c1e0:	0b 2e       	mov	r0, r27
    c1e2:	ba 2f       	mov	r27, r26
    c1e4:	a0 2d       	mov	r26, r0
    c1e6:	0b 01       	movw	r0, r22
    c1e8:	b9 01       	movw	r22, r18
    c1ea:	90 01       	movw	r18, r0
    c1ec:	0c 01       	movw	r0, r24
    c1ee:	ca 01       	movw	r24, r20
    c1f0:	a0 01       	movw	r20, r0
    c1f2:	11 24       	eor	r1, r1
    c1f4:	ff 27       	eor	r31, r31
    c1f6:	59 1b       	sub	r21, r25
    c1f8:	99 f0       	breq	.+38     	; 0xc220 <__addsf3x+0x5c>
    c1fa:	59 3f       	cpi	r21, 0xF9	; 249
    c1fc:	50 f4       	brcc	.+20     	; 0xc212 <__addsf3x+0x4e>
    c1fe:	50 3e       	cpi	r21, 0xE0	; 224
    c200:	68 f1       	brcs	.+90     	; 0xc25c <__addsf3x+0x98>
    c202:	1a 16       	cp	r1, r26
    c204:	f0 40       	sbci	r31, 0x00	; 0
    c206:	a2 2f       	mov	r26, r18
    c208:	23 2f       	mov	r18, r19
    c20a:	34 2f       	mov	r19, r20
    c20c:	44 27       	eor	r20, r20
    c20e:	58 5f       	subi	r21, 0xF8	; 248
    c210:	f3 cf       	rjmp	.-26     	; 0xc1f8 <__addsf3x+0x34>
    c212:	46 95       	lsr	r20
    c214:	37 95       	ror	r19
    c216:	27 95       	ror	r18
    c218:	a7 95       	ror	r26
    c21a:	f0 40       	sbci	r31, 0x00	; 0
    c21c:	53 95       	inc	r21
    c21e:	c9 f7       	brne	.-14     	; 0xc212 <__addsf3x+0x4e>
    c220:	7e f4       	brtc	.+30     	; 0xc240 <__addsf3x+0x7c>
    c222:	1f 16       	cp	r1, r31
    c224:	ba 0b       	sbc	r27, r26
    c226:	62 0b       	sbc	r22, r18
    c228:	73 0b       	sbc	r23, r19
    c22a:	84 0b       	sbc	r24, r20
    c22c:	ba f0       	brmi	.+46     	; 0xc25c <__addsf3x+0x98>
    c22e:	91 50       	subi	r25, 0x01	; 1
    c230:	a1 f0       	breq	.+40     	; 0xc25a <__addsf3x+0x96>
    c232:	ff 0f       	add	r31, r31
    c234:	bb 1f       	adc	r27, r27
    c236:	66 1f       	adc	r22, r22
    c238:	77 1f       	adc	r23, r23
    c23a:	88 1f       	adc	r24, r24
    c23c:	c2 f7       	brpl	.-16     	; 0xc22e <__addsf3x+0x6a>
    c23e:	0e c0       	rjmp	.+28     	; 0xc25c <__addsf3x+0x98>
    c240:	ba 0f       	add	r27, r26
    c242:	62 1f       	adc	r22, r18
    c244:	73 1f       	adc	r23, r19
    c246:	84 1f       	adc	r24, r20
    c248:	48 f4       	brcc	.+18     	; 0xc25c <__addsf3x+0x98>
    c24a:	87 95       	ror	r24
    c24c:	77 95       	ror	r23
    c24e:	67 95       	ror	r22
    c250:	b7 95       	ror	r27
    c252:	f7 95       	ror	r31
    c254:	9e 3f       	cpi	r25, 0xFE	; 254
    c256:	08 f0       	brcs	.+2      	; 0xc25a <__addsf3x+0x96>
    c258:	b3 cf       	rjmp	.-154    	; 0xc1c0 <__addsf3+0x1e>
    c25a:	93 95       	inc	r25
    c25c:	88 0f       	add	r24, r24
    c25e:	08 f0       	brcs	.+2      	; 0xc262 <__addsf3x+0x9e>
    c260:	99 27       	eor	r25, r25
    c262:	ee 0f       	add	r30, r30
    c264:	97 95       	ror	r25
    c266:	87 95       	ror	r24
    c268:	08 95       	ret

0000c26a <asin>:
    c26a:	9f 93       	push	r25
    c26c:	9f 77       	andi	r25, 0x7F	; 127
    c26e:	ee e3       	ldi	r30, 0x3E	; 62
    c270:	89 37       	cpi	r24, 0x79	; 121
    c272:	9e 07       	cpc	r25, r30
    c274:	20 f4       	brcc	.+8      	; 0xc27e <asin+0x14>
    c276:	e4 ee       	ldi	r30, 0xE4	; 228
    c278:	f0 e0       	ldi	r31, 0x00	; 0
    c27a:	f6 d1       	rcall	.+1004   	; 0xc668 <__fp_powsodd>
    c27c:	09 c0       	rjmp	.+18     	; 0xc290 <asin+0x26>
    c27e:	5e d1       	rcall	.+700    	; 0xc53c <__fp_arccos>
    c280:	90 58       	subi	r25, 0x80	; 128
    c282:	a2 ea       	ldi	r26, 0xA2	; 162
    c284:	2a ed       	ldi	r18, 0xDA	; 218
    c286:	3f e0       	ldi	r19, 0x0F	; 15
    c288:	49 ec       	ldi	r20, 0xC9	; 201
    c28a:	5f e3       	ldi	r21, 0x3F	; 63
    c28c:	9b df       	rcall	.-202    	; 0xc1c4 <__addsf3x>
    c28e:	33 d2       	rcall	.+1126   	; 0xc6f6 <__fp_round>
    c290:	0f 90       	pop	r0
    c292:	07 fc       	sbrc	r0, 7
    c294:	90 58       	subi	r25, 0x80	; 128
    c296:	08 95       	ret
    c298:	f8 d1       	rcall	.+1008   	; 0xc68a <__fp_pscA>
    c29a:	58 f0       	brcs	.+22     	; 0xc2b2 <asin+0x48>
    c29c:	80 e8       	ldi	r24, 0x80	; 128
    c29e:	91 e0       	ldi	r25, 0x01	; 1
    c2a0:	09 f4       	brne	.+2      	; 0xc2a4 <asin+0x3a>
    c2a2:	9e ef       	ldi	r25, 0xFE	; 254
    c2a4:	f9 d1       	rcall	.+1010   	; 0xc698 <__fp_pscB>
    c2a6:	28 f0       	brcs	.+10     	; 0xc2b2 <asin+0x48>
    c2a8:	40 e8       	ldi	r20, 0x80	; 128
    c2aa:	51 e0       	ldi	r21, 0x01	; 1
    c2ac:	59 f4       	brne	.+22     	; 0xc2c4 <atan2+0xe>
    c2ae:	5e ef       	ldi	r21, 0xFE	; 254
    c2b0:	09 c0       	rjmp	.+18     	; 0xc2c4 <atan2+0xe>
    c2b2:	b2 c1       	rjmp	.+868    	; 0xc618 <__fp_nan>
    c2b4:	7b c2       	rjmp	.+1270   	; 0xc7ac <__fp_zero>

0000c2b6 <atan2>:
    c2b6:	e9 2f       	mov	r30, r25
    c2b8:	e0 78       	andi	r30, 0x80	; 128
    c2ba:	3f d2       	rcall	.+1150   	; 0xc73a <__fp_split3>
    c2bc:	68 f3       	brcs	.-38     	; 0xc298 <asin+0x2e>
    c2be:	09 2e       	mov	r0, r25
    c2c0:	05 2a       	or	r0, r21
    c2c2:	c1 f3       	breq	.-16     	; 0xc2b4 <asin+0x4a>
    c2c4:	26 17       	cp	r18, r22
    c2c6:	37 07       	cpc	r19, r23
    c2c8:	48 07       	cpc	r20, r24
    c2ca:	59 07       	cpc	r21, r25
    c2cc:	38 f0       	brcs	.+14     	; 0xc2dc <atan2+0x26>
    c2ce:	0e 2e       	mov	r0, r30
    c2d0:	07 f8       	bld	r0, 7
    c2d2:	e0 25       	eor	r30, r0
    c2d4:	69 f0       	breq	.+26     	; 0xc2f0 <atan2+0x3a>
    c2d6:	e0 25       	eor	r30, r0
    c2d8:	e0 64       	ori	r30, 0x40	; 64
    c2da:	0a c0       	rjmp	.+20     	; 0xc2f0 <atan2+0x3a>
    c2dc:	ef 63       	ori	r30, 0x3F	; 63
    c2de:	07 f8       	bld	r0, 7
    c2e0:	00 94       	com	r0
    c2e2:	07 fa       	bst	r0, 7
    c2e4:	db 01       	movw	r26, r22
    c2e6:	b9 01       	movw	r22, r18
    c2e8:	9d 01       	movw	r18, r26
    c2ea:	dc 01       	movw	r26, r24
    c2ec:	ca 01       	movw	r24, r20
    c2ee:	ad 01       	movw	r20, r26
    c2f0:	ef 93       	push	r30
    c2f2:	4a d0       	rcall	.+148    	; 0xc388 <__divsf3_pse>
    c2f4:	00 d2       	rcall	.+1024   	; 0xc6f6 <__fp_round>
    c2f6:	0a d0       	rcall	.+20     	; 0xc30c <atan>
    c2f8:	5f 91       	pop	r21
    c2fa:	55 23       	and	r21, r21
    c2fc:	31 f0       	breq	.+12     	; 0xc30a <atan2+0x54>
    c2fe:	2b ed       	ldi	r18, 0xDB	; 219
    c300:	3f e0       	ldi	r19, 0x0F	; 15
    c302:	49 e4       	ldi	r20, 0x49	; 73
    c304:	50 fd       	sbrc	r21, 0
    c306:	49 ec       	ldi	r20, 0xC9	; 201
    c308:	4c cf       	rjmp	.-360    	; 0xc1a2 <__addsf3>
    c30a:	08 95       	ret

0000c30c <atan>:
    c30c:	df 93       	push	r29
    c30e:	dd 27       	eor	r29, r29
    c310:	b9 2f       	mov	r27, r25
    c312:	bf 77       	andi	r27, 0x7F	; 127
    c314:	40 e8       	ldi	r20, 0x80	; 128
    c316:	5f e3       	ldi	r21, 0x3F	; 63
    c318:	16 16       	cp	r1, r22
    c31a:	17 06       	cpc	r1, r23
    c31c:	48 07       	cpc	r20, r24
    c31e:	5b 07       	cpc	r21, r27
    c320:	10 f4       	brcc	.+4      	; 0xc326 <atan+0x1a>
    c322:	d9 2f       	mov	r29, r25
    c324:	4e d2       	rcall	.+1180   	; 0xc7c2 <inverse>
    c326:	9f 93       	push	r25
    c328:	8f 93       	push	r24
    c32a:	7f 93       	push	r23
    c32c:	6f 93       	push	r22
    c32e:	67 d3       	rcall	.+1742   	; 0xc9fe <square>
    c330:	e8 ef       	ldi	r30, 0xF8	; 248
    c332:	f0 e0       	ldi	r31, 0x00	; 0
    c334:	74 d1       	rcall	.+744    	; 0xc61e <__fp_powser>
    c336:	df d1       	rcall	.+958    	; 0xc6f6 <__fp_round>
    c338:	2f 91       	pop	r18
    c33a:	3f 91       	pop	r19
    c33c:	4f 91       	pop	r20
    c33e:	5f 91       	pop	r21
    c340:	53 d2       	rcall	.+1190   	; 0xc7e8 <__mulsf3x>
    c342:	dd 23       	and	r29, r29
    c344:	49 f0       	breq	.+18     	; 0xc358 <atan+0x4c>
    c346:	90 58       	subi	r25, 0x80	; 128
    c348:	a2 ea       	ldi	r26, 0xA2	; 162
    c34a:	2a ed       	ldi	r18, 0xDA	; 218
    c34c:	3f e0       	ldi	r19, 0x0F	; 15
    c34e:	49 ec       	ldi	r20, 0xC9	; 201
    c350:	5f e3       	ldi	r21, 0x3F	; 63
    c352:	d0 78       	andi	r29, 0x80	; 128
    c354:	5d 27       	eor	r21, r29
    c356:	36 df       	rcall	.-404    	; 0xc1c4 <__addsf3x>
    c358:	df 91       	pop	r29
    c35a:	cd c1       	rjmp	.+922    	; 0xc6f6 <__fp_round>

0000c35c <__cmpsf2>:
    c35c:	0a d1       	rcall	.+532    	; 0xc572 <__fp_cmp>
    c35e:	08 f4       	brcc	.+2      	; 0xc362 <__cmpsf2+0x6>
    c360:	81 e0       	ldi	r24, 0x01	; 1
    c362:	08 95       	ret

0000c364 <cos>:
    c364:	a1 d1       	rcall	.+834    	; 0xc6a8 <__fp_rempio2>
    c366:	e3 95       	inc	r30
    c368:	d7 c1       	rjmp	.+942    	; 0xc718 <__fp_sinus>

0000c36a <__divsf3>:
    c36a:	0c d0       	rcall	.+24     	; 0xc384 <__divsf3x>
    c36c:	c4 c1       	rjmp	.+904    	; 0xc6f6 <__fp_round>
    c36e:	94 d1       	rcall	.+808    	; 0xc698 <__fp_pscB>
    c370:	40 f0       	brcs	.+16     	; 0xc382 <__divsf3+0x18>
    c372:	8b d1       	rcall	.+790    	; 0xc68a <__fp_pscA>
    c374:	30 f0       	brcs	.+12     	; 0xc382 <__divsf3+0x18>
    c376:	21 f4       	brne	.+8      	; 0xc380 <__divsf3+0x16>
    c378:	5f 3f       	cpi	r21, 0xFF	; 255
    c37a:	19 f0       	breq	.+6      	; 0xc382 <__divsf3+0x18>
    c37c:	1e c1       	rjmp	.+572    	; 0xc5ba <__fp_inf>
    c37e:	51 11       	cpse	r21, r1
    c380:	16 c2       	rjmp	.+1068   	; 0xc7ae <__fp_szero>
    c382:	4a c1       	rjmp	.+660    	; 0xc618 <__fp_nan>

0000c384 <__divsf3x>:
    c384:	da d1       	rcall	.+948    	; 0xc73a <__fp_split3>
    c386:	98 f3       	brcs	.-26     	; 0xc36e <__divsf3+0x4>

0000c388 <__divsf3_pse>:
    c388:	99 23       	and	r25, r25
    c38a:	c9 f3       	breq	.-14     	; 0xc37e <__divsf3+0x14>
    c38c:	55 23       	and	r21, r21
    c38e:	b1 f3       	breq	.-20     	; 0xc37c <__divsf3+0x12>
    c390:	95 1b       	sub	r25, r21
    c392:	55 0b       	sbc	r21, r21
    c394:	bb 27       	eor	r27, r27
    c396:	aa 27       	eor	r26, r26
    c398:	62 17       	cp	r22, r18
    c39a:	73 07       	cpc	r23, r19
    c39c:	84 07       	cpc	r24, r20
    c39e:	38 f0       	brcs	.+14     	; 0xc3ae <__divsf3_pse+0x26>
    c3a0:	9f 5f       	subi	r25, 0xFF	; 255
    c3a2:	5f 4f       	sbci	r21, 0xFF	; 255
    c3a4:	22 0f       	add	r18, r18
    c3a6:	33 1f       	adc	r19, r19
    c3a8:	44 1f       	adc	r20, r20
    c3aa:	aa 1f       	adc	r26, r26
    c3ac:	a9 f3       	breq	.-22     	; 0xc398 <__divsf3_pse+0x10>
    c3ae:	33 d0       	rcall	.+102    	; 0xc416 <__divsf3_pse+0x8e>
    c3b0:	0e 2e       	mov	r0, r30
    c3b2:	3a f0       	brmi	.+14     	; 0xc3c2 <__divsf3_pse+0x3a>
    c3b4:	e0 e8       	ldi	r30, 0x80	; 128
    c3b6:	30 d0       	rcall	.+96     	; 0xc418 <__divsf3_pse+0x90>
    c3b8:	91 50       	subi	r25, 0x01	; 1
    c3ba:	50 40       	sbci	r21, 0x00	; 0
    c3bc:	e6 95       	lsr	r30
    c3be:	00 1c       	adc	r0, r0
    c3c0:	ca f7       	brpl	.-14     	; 0xc3b4 <__divsf3_pse+0x2c>
    c3c2:	29 d0       	rcall	.+82     	; 0xc416 <__divsf3_pse+0x8e>
    c3c4:	fe 2f       	mov	r31, r30
    c3c6:	27 d0       	rcall	.+78     	; 0xc416 <__divsf3_pse+0x8e>
    c3c8:	66 0f       	add	r22, r22
    c3ca:	77 1f       	adc	r23, r23
    c3cc:	88 1f       	adc	r24, r24
    c3ce:	bb 1f       	adc	r27, r27
    c3d0:	26 17       	cp	r18, r22
    c3d2:	37 07       	cpc	r19, r23
    c3d4:	48 07       	cpc	r20, r24
    c3d6:	ab 07       	cpc	r26, r27
    c3d8:	b0 e8       	ldi	r27, 0x80	; 128
    c3da:	09 f0       	breq	.+2      	; 0xc3de <__divsf3_pse+0x56>
    c3dc:	bb 0b       	sbc	r27, r27
    c3de:	80 2d       	mov	r24, r0
    c3e0:	bf 01       	movw	r22, r30
    c3e2:	ff 27       	eor	r31, r31
    c3e4:	93 58       	subi	r25, 0x83	; 131
    c3e6:	5f 4f       	sbci	r21, 0xFF	; 255
    c3e8:	2a f0       	brmi	.+10     	; 0xc3f4 <__divsf3_pse+0x6c>
    c3ea:	9e 3f       	cpi	r25, 0xFE	; 254
    c3ec:	51 05       	cpc	r21, r1
    c3ee:	68 f0       	brcs	.+26     	; 0xc40a <__divsf3_pse+0x82>
    c3f0:	e4 c0       	rjmp	.+456    	; 0xc5ba <__fp_inf>
    c3f2:	dd c1       	rjmp	.+954    	; 0xc7ae <__fp_szero>
    c3f4:	5f 3f       	cpi	r21, 0xFF	; 255
    c3f6:	ec f3       	brlt	.-6      	; 0xc3f2 <__divsf3_pse+0x6a>
    c3f8:	98 3e       	cpi	r25, 0xE8	; 232
    c3fa:	dc f3       	brlt	.-10     	; 0xc3f2 <__divsf3_pse+0x6a>
    c3fc:	86 95       	lsr	r24
    c3fe:	77 95       	ror	r23
    c400:	67 95       	ror	r22
    c402:	b7 95       	ror	r27
    c404:	f7 95       	ror	r31
    c406:	9f 5f       	subi	r25, 0xFF	; 255
    c408:	c9 f7       	brne	.-14     	; 0xc3fc <__divsf3_pse+0x74>
    c40a:	88 0f       	add	r24, r24
    c40c:	91 1d       	adc	r25, r1
    c40e:	96 95       	lsr	r25
    c410:	87 95       	ror	r24
    c412:	97 f9       	bld	r25, 7
    c414:	08 95       	ret
    c416:	e1 e0       	ldi	r30, 0x01	; 1
    c418:	66 0f       	add	r22, r22
    c41a:	77 1f       	adc	r23, r23
    c41c:	88 1f       	adc	r24, r24
    c41e:	bb 1f       	adc	r27, r27
    c420:	62 17       	cp	r22, r18
    c422:	73 07       	cpc	r23, r19
    c424:	84 07       	cpc	r24, r20
    c426:	ba 07       	cpc	r27, r26
    c428:	20 f0       	brcs	.+8      	; 0xc432 <__divsf3_pse+0xaa>
    c42a:	62 1b       	sub	r22, r18
    c42c:	73 0b       	sbc	r23, r19
    c42e:	84 0b       	sbc	r24, r20
    c430:	ba 0b       	sbc	r27, r26
    c432:	ee 1f       	adc	r30, r30
    c434:	88 f7       	brcc	.-30     	; 0xc418 <__divsf3_pse+0x90>
    c436:	e0 95       	com	r30
    c438:	08 95       	ret

0000c43a <__fixsfsi>:
    c43a:	04 d0       	rcall	.+8      	; 0xc444 <__fixunssfsi>
    c43c:	68 94       	set
    c43e:	b1 11       	cpse	r27, r1
    c440:	b6 c1       	rjmp	.+876    	; 0xc7ae <__fp_szero>
    c442:	08 95       	ret

0000c444 <__fixunssfsi>:
    c444:	82 d1       	rcall	.+772    	; 0xc74a <__fp_splitA>
    c446:	88 f0       	brcs	.+34     	; 0xc46a <__fixunssfsi+0x26>
    c448:	9f 57       	subi	r25, 0x7F	; 127
    c44a:	90 f0       	brcs	.+36     	; 0xc470 <__fixunssfsi+0x2c>
    c44c:	b9 2f       	mov	r27, r25
    c44e:	99 27       	eor	r25, r25
    c450:	b7 51       	subi	r27, 0x17	; 23
    c452:	a0 f0       	brcs	.+40     	; 0xc47c <__fixunssfsi+0x38>
    c454:	d1 f0       	breq	.+52     	; 0xc48a <__fixunssfsi+0x46>
    c456:	66 0f       	add	r22, r22
    c458:	77 1f       	adc	r23, r23
    c45a:	88 1f       	adc	r24, r24
    c45c:	99 1f       	adc	r25, r25
    c45e:	1a f0       	brmi	.+6      	; 0xc466 <__fixunssfsi+0x22>
    c460:	ba 95       	dec	r27
    c462:	c9 f7       	brne	.-14     	; 0xc456 <__fixunssfsi+0x12>
    c464:	12 c0       	rjmp	.+36     	; 0xc48a <__fixunssfsi+0x46>
    c466:	b1 30       	cpi	r27, 0x01	; 1
    c468:	81 f0       	breq	.+32     	; 0xc48a <__fixunssfsi+0x46>
    c46a:	a0 d1       	rcall	.+832    	; 0xc7ac <__fp_zero>
    c46c:	b1 e0       	ldi	r27, 0x01	; 1
    c46e:	08 95       	ret
    c470:	9d c1       	rjmp	.+826    	; 0xc7ac <__fp_zero>
    c472:	67 2f       	mov	r22, r23
    c474:	78 2f       	mov	r23, r24
    c476:	88 27       	eor	r24, r24
    c478:	b8 5f       	subi	r27, 0xF8	; 248
    c47a:	39 f0       	breq	.+14     	; 0xc48a <__fixunssfsi+0x46>
    c47c:	b9 3f       	cpi	r27, 0xF9	; 249
    c47e:	cc f3       	brlt	.-14     	; 0xc472 <__fixunssfsi+0x2e>
    c480:	86 95       	lsr	r24
    c482:	77 95       	ror	r23
    c484:	67 95       	ror	r22
    c486:	b3 95       	inc	r27
    c488:	d9 f7       	brne	.-10     	; 0xc480 <__fixunssfsi+0x3c>
    c48a:	3e f4       	brtc	.+14     	; 0xc49a <__fixunssfsi+0x56>
    c48c:	90 95       	com	r25
    c48e:	80 95       	com	r24
    c490:	70 95       	com	r23
    c492:	61 95       	neg	r22
    c494:	7f 4f       	sbci	r23, 0xFF	; 255
    c496:	8f 4f       	sbci	r24, 0xFF	; 255
    c498:	9f 4f       	sbci	r25, 0xFF	; 255
    c49a:	08 95       	ret

0000c49c <__floatunsisf>:
    c49c:	e8 94       	clt
    c49e:	09 c0       	rjmp	.+18     	; 0xc4b2 <__floatsisf+0x12>

0000c4a0 <__floatsisf>:
    c4a0:	97 fb       	bst	r25, 7
    c4a2:	3e f4       	brtc	.+14     	; 0xc4b2 <__floatsisf+0x12>
    c4a4:	90 95       	com	r25
    c4a6:	80 95       	com	r24
    c4a8:	70 95       	com	r23
    c4aa:	61 95       	neg	r22
    c4ac:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ae:	8f 4f       	sbci	r24, 0xFF	; 255
    c4b0:	9f 4f       	sbci	r25, 0xFF	; 255
    c4b2:	99 23       	and	r25, r25
    c4b4:	a9 f0       	breq	.+42     	; 0xc4e0 <__floatsisf+0x40>
    c4b6:	f9 2f       	mov	r31, r25
    c4b8:	96 e9       	ldi	r25, 0x96	; 150
    c4ba:	bb 27       	eor	r27, r27
    c4bc:	93 95       	inc	r25
    c4be:	f6 95       	lsr	r31
    c4c0:	87 95       	ror	r24
    c4c2:	77 95       	ror	r23
    c4c4:	67 95       	ror	r22
    c4c6:	b7 95       	ror	r27
    c4c8:	f1 11       	cpse	r31, r1
    c4ca:	f8 cf       	rjmp	.-16     	; 0xc4bc <__floatsisf+0x1c>
    c4cc:	fa f4       	brpl	.+62     	; 0xc50c <__floatsisf+0x6c>
    c4ce:	bb 0f       	add	r27, r27
    c4d0:	11 f4       	brne	.+4      	; 0xc4d6 <__floatsisf+0x36>
    c4d2:	60 ff       	sbrs	r22, 0
    c4d4:	1b c0       	rjmp	.+54     	; 0xc50c <__floatsisf+0x6c>
    c4d6:	6f 5f       	subi	r22, 0xFF	; 255
    c4d8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4da:	8f 4f       	sbci	r24, 0xFF	; 255
    c4dc:	9f 4f       	sbci	r25, 0xFF	; 255
    c4de:	16 c0       	rjmp	.+44     	; 0xc50c <__floatsisf+0x6c>
    c4e0:	88 23       	and	r24, r24
    c4e2:	11 f0       	breq	.+4      	; 0xc4e8 <__floatsisf+0x48>
    c4e4:	96 e9       	ldi	r25, 0x96	; 150
    c4e6:	11 c0       	rjmp	.+34     	; 0xc50a <__floatsisf+0x6a>
    c4e8:	77 23       	and	r23, r23
    c4ea:	21 f0       	breq	.+8      	; 0xc4f4 <__floatsisf+0x54>
    c4ec:	9e e8       	ldi	r25, 0x8E	; 142
    c4ee:	87 2f       	mov	r24, r23
    c4f0:	76 2f       	mov	r23, r22
    c4f2:	05 c0       	rjmp	.+10     	; 0xc4fe <__floatsisf+0x5e>
    c4f4:	66 23       	and	r22, r22
    c4f6:	71 f0       	breq	.+28     	; 0xc514 <__floatsisf+0x74>
    c4f8:	96 e8       	ldi	r25, 0x86	; 134
    c4fa:	86 2f       	mov	r24, r22
    c4fc:	70 e0       	ldi	r23, 0x00	; 0
    c4fe:	60 e0       	ldi	r22, 0x00	; 0
    c500:	2a f0       	brmi	.+10     	; 0xc50c <__floatsisf+0x6c>
    c502:	9a 95       	dec	r25
    c504:	66 0f       	add	r22, r22
    c506:	77 1f       	adc	r23, r23
    c508:	88 1f       	adc	r24, r24
    c50a:	da f7       	brpl	.-10     	; 0xc502 <__floatsisf+0x62>
    c50c:	88 0f       	add	r24, r24
    c50e:	96 95       	lsr	r25
    c510:	87 95       	ror	r24
    c512:	97 f9       	bld	r25, 7
    c514:	08 95       	ret

0000c516 <floor>:
    c516:	33 d1       	rcall	.+614    	; 0xc77e <__fp_trunc>
    c518:	80 f0       	brcs	.+32     	; 0xc53a <floor+0x24>
    c51a:	9f 37       	cpi	r25, 0x7F	; 127
    c51c:	40 f4       	brcc	.+16     	; 0xc52e <floor+0x18>
    c51e:	91 11       	cpse	r25, r1
    c520:	0e f0       	brts	.+2      	; 0xc524 <floor+0xe>
    c522:	45 c1       	rjmp	.+650    	; 0xc7ae <__fp_szero>
    c524:	60 e0       	ldi	r22, 0x00	; 0
    c526:	70 e0       	ldi	r23, 0x00	; 0
    c528:	80 e8       	ldi	r24, 0x80	; 128
    c52a:	9f eb       	ldi	r25, 0xBF	; 191
    c52c:	08 95       	ret
    c52e:	26 f4       	brtc	.+8      	; 0xc538 <floor+0x22>
    c530:	1b 16       	cp	r1, r27
    c532:	61 1d       	adc	r22, r1
    c534:	71 1d       	adc	r23, r1
    c536:	81 1d       	adc	r24, r1
    c538:	46 c0       	rjmp	.+140    	; 0xc5c6 <__fp_mintl>
    c53a:	60 c0       	rjmp	.+192    	; 0xc5fc <__fp_mpack>

0000c53c <__fp_arccos>:
    c53c:	df 93       	push	r29
    c53e:	cf 93       	push	r28
    c540:	1f 93       	push	r17
    c542:	0f 93       	push	r16
    c544:	8b 01       	movw	r16, r22
    c546:	ec 01       	movw	r28, r24
    c548:	e5 e2       	ldi	r30, 0x25	; 37
    c54a:	f1 e0       	ldi	r31, 0x01	; 1
    c54c:	68 d0       	rcall	.+208    	; 0xc61e <__fp_powser>
    c54e:	d3 d0       	rcall	.+422    	; 0xc6f6 <__fp_round>
    c550:	98 01       	movw	r18, r16
    c552:	ae 01       	movw	r20, r28
    c554:	8b 01       	movw	r16, r22
    c556:	ec 01       	movw	r28, r24
    c558:	60 e0       	ldi	r22, 0x00	; 0
    c55a:	70 e0       	ldi	r23, 0x00	; 0
    c55c:	80 e8       	ldi	r24, 0x80	; 128
    c55e:	9f e3       	ldi	r25, 0x3F	; 63
    c560:	1f de       	rcall	.-962    	; 0xc1a0 <__subsf3>
    c562:	0f d2       	rcall	.+1054   	; 0xc982 <sqrt>
    c564:	98 01       	movw	r18, r16
    c566:	ae 01       	movw	r20, r28
    c568:	0f 91       	pop	r16
    c56a:	1f 91       	pop	r17
    c56c:	cf 91       	pop	r28
    c56e:	df 91       	pop	r29
    c570:	3b c1       	rjmp	.+630    	; 0xc7e8 <__mulsf3x>

0000c572 <__fp_cmp>:
    c572:	99 0f       	add	r25, r25
    c574:	00 08       	sbc	r0, r0
    c576:	55 0f       	add	r21, r21
    c578:	aa 0b       	sbc	r26, r26
    c57a:	e0 e8       	ldi	r30, 0x80	; 128
    c57c:	fe ef       	ldi	r31, 0xFE	; 254
    c57e:	16 16       	cp	r1, r22
    c580:	17 06       	cpc	r1, r23
    c582:	e8 07       	cpc	r30, r24
    c584:	f9 07       	cpc	r31, r25
    c586:	c0 f0       	brcs	.+48     	; 0xc5b8 <__fp_cmp+0x46>
    c588:	12 16       	cp	r1, r18
    c58a:	13 06       	cpc	r1, r19
    c58c:	e4 07       	cpc	r30, r20
    c58e:	f5 07       	cpc	r31, r21
    c590:	98 f0       	brcs	.+38     	; 0xc5b8 <__fp_cmp+0x46>
    c592:	62 1b       	sub	r22, r18
    c594:	73 0b       	sbc	r23, r19
    c596:	84 0b       	sbc	r24, r20
    c598:	95 0b       	sbc	r25, r21
    c59a:	39 f4       	brne	.+14     	; 0xc5aa <__fp_cmp+0x38>
    c59c:	0a 26       	eor	r0, r26
    c59e:	61 f0       	breq	.+24     	; 0xc5b8 <__fp_cmp+0x46>
    c5a0:	23 2b       	or	r18, r19
    c5a2:	24 2b       	or	r18, r20
    c5a4:	25 2b       	or	r18, r21
    c5a6:	21 f4       	brne	.+8      	; 0xc5b0 <__fp_cmp+0x3e>
    c5a8:	08 95       	ret
    c5aa:	0a 26       	eor	r0, r26
    c5ac:	09 f4       	brne	.+2      	; 0xc5b0 <__fp_cmp+0x3e>
    c5ae:	a1 40       	sbci	r26, 0x01	; 1
    c5b0:	a6 95       	lsr	r26
    c5b2:	8f ef       	ldi	r24, 0xFF	; 255
    c5b4:	81 1d       	adc	r24, r1
    c5b6:	81 1d       	adc	r24, r1
    c5b8:	08 95       	ret

0000c5ba <__fp_inf>:
    c5ba:	97 f9       	bld	r25, 7
    c5bc:	9f 67       	ori	r25, 0x7F	; 127
    c5be:	80 e8       	ldi	r24, 0x80	; 128
    c5c0:	70 e0       	ldi	r23, 0x00	; 0
    c5c2:	60 e0       	ldi	r22, 0x00	; 0
    c5c4:	08 95       	ret

0000c5c6 <__fp_mintl>:
    c5c6:	88 23       	and	r24, r24
    c5c8:	71 f4       	brne	.+28     	; 0xc5e6 <__fp_mintl+0x20>
    c5ca:	77 23       	and	r23, r23
    c5cc:	21 f0       	breq	.+8      	; 0xc5d6 <__fp_mintl+0x10>
    c5ce:	98 50       	subi	r25, 0x08	; 8
    c5d0:	87 2b       	or	r24, r23
    c5d2:	76 2f       	mov	r23, r22
    c5d4:	07 c0       	rjmp	.+14     	; 0xc5e4 <__fp_mintl+0x1e>
    c5d6:	66 23       	and	r22, r22
    c5d8:	11 f4       	brne	.+4      	; 0xc5de <__fp_mintl+0x18>
    c5da:	99 27       	eor	r25, r25
    c5dc:	0d c0       	rjmp	.+26     	; 0xc5f8 <__fp_mintl+0x32>
    c5de:	90 51       	subi	r25, 0x10	; 16
    c5e0:	86 2b       	or	r24, r22
    c5e2:	70 e0       	ldi	r23, 0x00	; 0
    c5e4:	60 e0       	ldi	r22, 0x00	; 0
    c5e6:	2a f0       	brmi	.+10     	; 0xc5f2 <__fp_mintl+0x2c>
    c5e8:	9a 95       	dec	r25
    c5ea:	66 0f       	add	r22, r22
    c5ec:	77 1f       	adc	r23, r23
    c5ee:	88 1f       	adc	r24, r24
    c5f0:	da f7       	brpl	.-10     	; 0xc5e8 <__fp_mintl+0x22>
    c5f2:	88 0f       	add	r24, r24
    c5f4:	96 95       	lsr	r25
    c5f6:	87 95       	ror	r24
    c5f8:	97 f9       	bld	r25, 7
    c5fa:	08 95       	ret

0000c5fc <__fp_mpack>:
    c5fc:	9f 3f       	cpi	r25, 0xFF	; 255
    c5fe:	31 f0       	breq	.+12     	; 0xc60c <__fp_mpack_finite+0xc>

0000c600 <__fp_mpack_finite>:
    c600:	91 50       	subi	r25, 0x01	; 1
    c602:	20 f4       	brcc	.+8      	; 0xc60c <__fp_mpack_finite+0xc>
    c604:	87 95       	ror	r24
    c606:	77 95       	ror	r23
    c608:	67 95       	ror	r22
    c60a:	b7 95       	ror	r27
    c60c:	88 0f       	add	r24, r24
    c60e:	91 1d       	adc	r25, r1
    c610:	96 95       	lsr	r25
    c612:	87 95       	ror	r24
    c614:	97 f9       	bld	r25, 7
    c616:	08 95       	ret

0000c618 <__fp_nan>:
    c618:	9f ef       	ldi	r25, 0xFF	; 255
    c61a:	80 ec       	ldi	r24, 0xC0	; 192
    c61c:	08 95       	ret

0000c61e <__fp_powser>:
    c61e:	df 93       	push	r29
    c620:	cf 93       	push	r28
    c622:	1f 93       	push	r17
    c624:	0f 93       	push	r16
    c626:	ff 92       	push	r15
    c628:	ef 92       	push	r14
    c62a:	df 92       	push	r13
    c62c:	7b 01       	movw	r14, r22
    c62e:	8c 01       	movw	r16, r24
    c630:	68 94       	set
    c632:	05 c0       	rjmp	.+10     	; 0xc63e <__fp_powser+0x20>
    c634:	da 2e       	mov	r13, r26
    c636:	ef 01       	movw	r28, r30
    c638:	d7 d0       	rcall	.+430    	; 0xc7e8 <__mulsf3x>
    c63a:	fe 01       	movw	r30, r28
    c63c:	e8 94       	clt
    c63e:	a5 91       	lpm	r26, Z+
    c640:	25 91       	lpm	r18, Z+
    c642:	35 91       	lpm	r19, Z+
    c644:	45 91       	lpm	r20, Z+
    c646:	55 91       	lpm	r21, Z+
    c648:	ae f3       	brts	.-22     	; 0xc634 <__fp_powser+0x16>
    c64a:	ef 01       	movw	r28, r30
    c64c:	bb dd       	rcall	.-1162   	; 0xc1c4 <__addsf3x>
    c64e:	fe 01       	movw	r30, r28
    c650:	97 01       	movw	r18, r14
    c652:	a8 01       	movw	r20, r16
    c654:	da 94       	dec	r13
    c656:	79 f7       	brne	.-34     	; 0xc636 <__fp_powser+0x18>
    c658:	df 90       	pop	r13
    c65a:	ef 90       	pop	r14
    c65c:	ff 90       	pop	r15
    c65e:	0f 91       	pop	r16
    c660:	1f 91       	pop	r17
    c662:	cf 91       	pop	r28
    c664:	df 91       	pop	r29
    c666:	08 95       	ret

0000c668 <__fp_powsodd>:
    c668:	9f 93       	push	r25
    c66a:	8f 93       	push	r24
    c66c:	7f 93       	push	r23
    c66e:	6f 93       	push	r22
    c670:	ff 93       	push	r31
    c672:	ef 93       	push	r30
    c674:	9b 01       	movw	r18, r22
    c676:	ac 01       	movw	r20, r24
    c678:	ab d0       	rcall	.+342    	; 0xc7d0 <__mulsf3>
    c67a:	ef 91       	pop	r30
    c67c:	ff 91       	pop	r31
    c67e:	cf df       	rcall	.-98     	; 0xc61e <__fp_powser>
    c680:	2f 91       	pop	r18
    c682:	3f 91       	pop	r19
    c684:	4f 91       	pop	r20
    c686:	5f 91       	pop	r21
    c688:	a3 c0       	rjmp	.+326    	; 0xc7d0 <__mulsf3>

0000c68a <__fp_pscA>:
    c68a:	00 24       	eor	r0, r0
    c68c:	0a 94       	dec	r0
    c68e:	16 16       	cp	r1, r22
    c690:	17 06       	cpc	r1, r23
    c692:	18 06       	cpc	r1, r24
    c694:	09 06       	cpc	r0, r25
    c696:	08 95       	ret

0000c698 <__fp_pscB>:
    c698:	00 24       	eor	r0, r0
    c69a:	0a 94       	dec	r0
    c69c:	12 16       	cp	r1, r18
    c69e:	13 06       	cpc	r1, r19
    c6a0:	14 06       	cpc	r1, r20
    c6a2:	05 06       	cpc	r0, r21
    c6a4:	08 95       	ret
    c6a6:	b8 cf       	rjmp	.-144    	; 0xc618 <__fp_nan>

0000c6a8 <__fp_rempio2>:
    c6a8:	50 d0       	rcall	.+160    	; 0xc74a <__fp_splitA>
    c6aa:	e8 f3       	brcs	.-6      	; 0xc6a6 <__fp_pscB+0xe>
    c6ac:	e8 94       	clt
    c6ae:	e0 e0       	ldi	r30, 0x00	; 0
    c6b0:	bb 27       	eor	r27, r27
    c6b2:	9f 57       	subi	r25, 0x7F	; 127
    c6b4:	f0 f0       	brcs	.+60     	; 0xc6f2 <__fp_rempio2+0x4a>
    c6b6:	2a ed       	ldi	r18, 0xDA	; 218
    c6b8:	3f e0       	ldi	r19, 0x0F	; 15
    c6ba:	49 ec       	ldi	r20, 0xC9	; 201
    c6bc:	06 c0       	rjmp	.+12     	; 0xc6ca <__fp_rempio2+0x22>
    c6be:	ee 0f       	add	r30, r30
    c6c0:	bb 0f       	add	r27, r27
    c6c2:	66 1f       	adc	r22, r22
    c6c4:	77 1f       	adc	r23, r23
    c6c6:	88 1f       	adc	r24, r24
    c6c8:	28 f0       	brcs	.+10     	; 0xc6d4 <__fp_rempio2+0x2c>
    c6ca:	b2 3a       	cpi	r27, 0xA2	; 162
    c6cc:	62 07       	cpc	r22, r18
    c6ce:	73 07       	cpc	r23, r19
    c6d0:	84 07       	cpc	r24, r20
    c6d2:	28 f0       	brcs	.+10     	; 0xc6de <__fp_rempio2+0x36>
    c6d4:	b2 5a       	subi	r27, 0xA2	; 162
    c6d6:	62 0b       	sbc	r22, r18
    c6d8:	73 0b       	sbc	r23, r19
    c6da:	84 0b       	sbc	r24, r20
    c6dc:	e3 95       	inc	r30
    c6de:	9a 95       	dec	r25
    c6e0:	72 f7       	brpl	.-36     	; 0xc6be <__fp_rempio2+0x16>
    c6e2:	80 38       	cpi	r24, 0x80	; 128
    c6e4:	30 f4       	brcc	.+12     	; 0xc6f2 <__fp_rempio2+0x4a>
    c6e6:	9a 95       	dec	r25
    c6e8:	bb 0f       	add	r27, r27
    c6ea:	66 1f       	adc	r22, r22
    c6ec:	77 1f       	adc	r23, r23
    c6ee:	88 1f       	adc	r24, r24
    c6f0:	d2 f7       	brpl	.-12     	; 0xc6e6 <__fp_rempio2+0x3e>
    c6f2:	90 48       	sbci	r25, 0x80	; 128
    c6f4:	85 cf       	rjmp	.-246    	; 0xc600 <__fp_mpack_finite>

0000c6f6 <__fp_round>:
    c6f6:	09 2e       	mov	r0, r25
    c6f8:	03 94       	inc	r0
    c6fa:	00 0c       	add	r0, r0
    c6fc:	11 f4       	brne	.+4      	; 0xc702 <__fp_round+0xc>
    c6fe:	88 23       	and	r24, r24
    c700:	52 f0       	brmi	.+20     	; 0xc716 <__fp_round+0x20>
    c702:	bb 0f       	add	r27, r27
    c704:	40 f4       	brcc	.+16     	; 0xc716 <__fp_round+0x20>
    c706:	bf 2b       	or	r27, r31
    c708:	11 f4       	brne	.+4      	; 0xc70e <__fp_round+0x18>
    c70a:	60 ff       	sbrs	r22, 0
    c70c:	04 c0       	rjmp	.+8      	; 0xc716 <__fp_round+0x20>
    c70e:	6f 5f       	subi	r22, 0xFF	; 255
    c710:	7f 4f       	sbci	r23, 0xFF	; 255
    c712:	8f 4f       	sbci	r24, 0xFF	; 255
    c714:	9f 4f       	sbci	r25, 0xFF	; 255
    c716:	08 95       	ret

0000c718 <__fp_sinus>:
    c718:	ef 93       	push	r30
    c71a:	e0 ff       	sbrs	r30, 0
    c71c:	06 c0       	rjmp	.+12     	; 0xc72a <__fp_sinus+0x12>
    c71e:	a2 ea       	ldi	r26, 0xA2	; 162
    c720:	2a ed       	ldi	r18, 0xDA	; 218
    c722:	3f e0       	ldi	r19, 0x0F	; 15
    c724:	49 ec       	ldi	r20, 0xC9	; 201
    c726:	5f eb       	ldi	r21, 0xBF	; 191
    c728:	4d dd       	rcall	.-1382   	; 0xc1c4 <__addsf3x>
    c72a:	e5 df       	rcall	.-54     	; 0xc6f6 <__fp_round>
    c72c:	0f 90       	pop	r0
    c72e:	03 94       	inc	r0
    c730:	01 fc       	sbrc	r0, 1
    c732:	90 58       	subi	r25, 0x80	; 128
    c734:	ed e4       	ldi	r30, 0x4D	; 77
    c736:	f1 e0       	ldi	r31, 0x01	; 1
    c738:	97 cf       	rjmp	.-210    	; 0xc668 <__fp_powsodd>

0000c73a <__fp_split3>:
    c73a:	57 fd       	sbrc	r21, 7
    c73c:	90 58       	subi	r25, 0x80	; 128
    c73e:	44 0f       	add	r20, r20
    c740:	55 1f       	adc	r21, r21
    c742:	59 f0       	breq	.+22     	; 0xc75a <__fp_splitA+0x10>
    c744:	5f 3f       	cpi	r21, 0xFF	; 255
    c746:	71 f0       	breq	.+28     	; 0xc764 <__fp_splitA+0x1a>
    c748:	47 95       	ror	r20

0000c74a <__fp_splitA>:
    c74a:	88 0f       	add	r24, r24
    c74c:	97 fb       	bst	r25, 7
    c74e:	99 1f       	adc	r25, r25
    c750:	61 f0       	breq	.+24     	; 0xc76a <__fp_splitA+0x20>
    c752:	9f 3f       	cpi	r25, 0xFF	; 255
    c754:	79 f0       	breq	.+30     	; 0xc774 <__fp_splitA+0x2a>
    c756:	87 95       	ror	r24
    c758:	08 95       	ret
    c75a:	12 16       	cp	r1, r18
    c75c:	13 06       	cpc	r1, r19
    c75e:	14 06       	cpc	r1, r20
    c760:	55 1f       	adc	r21, r21
    c762:	f2 cf       	rjmp	.-28     	; 0xc748 <__fp_split3+0xe>
    c764:	46 95       	lsr	r20
    c766:	f1 df       	rcall	.-30     	; 0xc74a <__fp_splitA>
    c768:	08 c0       	rjmp	.+16     	; 0xc77a <__fp_splitA+0x30>
    c76a:	16 16       	cp	r1, r22
    c76c:	17 06       	cpc	r1, r23
    c76e:	18 06       	cpc	r1, r24
    c770:	99 1f       	adc	r25, r25
    c772:	f1 cf       	rjmp	.-30     	; 0xc756 <__fp_splitA+0xc>
    c774:	86 95       	lsr	r24
    c776:	71 05       	cpc	r23, r1
    c778:	61 05       	cpc	r22, r1
    c77a:	08 94       	sec
    c77c:	08 95       	ret

0000c77e <__fp_trunc>:
    c77e:	e5 df       	rcall	.-54     	; 0xc74a <__fp_splitA>
    c780:	a0 f0       	brcs	.+40     	; 0xc7aa <__fp_trunc+0x2c>
    c782:	be e7       	ldi	r27, 0x7E	; 126
    c784:	b9 17       	cp	r27, r25
    c786:	88 f4       	brcc	.+34     	; 0xc7aa <__fp_trunc+0x2c>
    c788:	bb 27       	eor	r27, r27
    c78a:	9f 38       	cpi	r25, 0x8F	; 143
    c78c:	60 f4       	brcc	.+24     	; 0xc7a6 <__fp_trunc+0x28>
    c78e:	16 16       	cp	r1, r22
    c790:	b1 1d       	adc	r27, r1
    c792:	67 2f       	mov	r22, r23
    c794:	78 2f       	mov	r23, r24
    c796:	88 27       	eor	r24, r24
    c798:	98 5f       	subi	r25, 0xF8	; 248
    c79a:	f7 cf       	rjmp	.-18     	; 0xc78a <__fp_trunc+0xc>
    c79c:	86 95       	lsr	r24
    c79e:	77 95       	ror	r23
    c7a0:	67 95       	ror	r22
    c7a2:	b1 1d       	adc	r27, r1
    c7a4:	93 95       	inc	r25
    c7a6:	96 39       	cpi	r25, 0x96	; 150
    c7a8:	c8 f3       	brcs	.-14     	; 0xc79c <__fp_trunc+0x1e>
    c7aa:	08 95       	ret

0000c7ac <__fp_zero>:
    c7ac:	e8 94       	clt

0000c7ae <__fp_szero>:
    c7ae:	bb 27       	eor	r27, r27
    c7b0:	66 27       	eor	r22, r22
    c7b2:	77 27       	eor	r23, r23
    c7b4:	cb 01       	movw	r24, r22
    c7b6:	97 f9       	bld	r25, 7
    c7b8:	08 95       	ret

0000c7ba <__gesf2>:
    c7ba:	db de       	rcall	.-586    	; 0xc572 <__fp_cmp>
    c7bc:	08 f4       	brcc	.+2      	; 0xc7c0 <__gesf2+0x6>
    c7be:	8f ef       	ldi	r24, 0xFF	; 255
    c7c0:	08 95       	ret

0000c7c2 <inverse>:
    c7c2:	9b 01       	movw	r18, r22
    c7c4:	ac 01       	movw	r20, r24
    c7c6:	60 e0       	ldi	r22, 0x00	; 0
    c7c8:	70 e0       	ldi	r23, 0x00	; 0
    c7ca:	80 e8       	ldi	r24, 0x80	; 128
    c7cc:	9f e3       	ldi	r25, 0x3F	; 63
    c7ce:	cd cd       	rjmp	.-1126   	; 0xc36a <__divsf3>

0000c7d0 <__mulsf3>:
    c7d0:	0b d0       	rcall	.+22     	; 0xc7e8 <__mulsf3x>
    c7d2:	91 cf       	rjmp	.-222    	; 0xc6f6 <__fp_round>
    c7d4:	5a df       	rcall	.-332    	; 0xc68a <__fp_pscA>
    c7d6:	28 f0       	brcs	.+10     	; 0xc7e2 <__mulsf3+0x12>
    c7d8:	5f df       	rcall	.-322    	; 0xc698 <__fp_pscB>
    c7da:	18 f0       	brcs	.+6      	; 0xc7e2 <__mulsf3+0x12>
    c7dc:	95 23       	and	r25, r21
    c7de:	09 f0       	breq	.+2      	; 0xc7e2 <__mulsf3+0x12>
    c7e0:	ec ce       	rjmp	.-552    	; 0xc5ba <__fp_inf>
    c7e2:	1a cf       	rjmp	.-460    	; 0xc618 <__fp_nan>
    c7e4:	11 24       	eor	r1, r1
    c7e6:	e3 cf       	rjmp	.-58     	; 0xc7ae <__fp_szero>

0000c7e8 <__mulsf3x>:
    c7e8:	a8 df       	rcall	.-176    	; 0xc73a <__fp_split3>
    c7ea:	a0 f3       	brcs	.-24     	; 0xc7d4 <__mulsf3+0x4>

0000c7ec <__mulsf3_pse>:
    c7ec:	95 9f       	mul	r25, r21
    c7ee:	d1 f3       	breq	.-12     	; 0xc7e4 <__mulsf3+0x14>
    c7f0:	95 0f       	add	r25, r21
    c7f2:	50 e0       	ldi	r21, 0x00	; 0
    c7f4:	55 1f       	adc	r21, r21
    c7f6:	62 9f       	mul	r22, r18
    c7f8:	f0 01       	movw	r30, r0
    c7fa:	72 9f       	mul	r23, r18
    c7fc:	bb 27       	eor	r27, r27
    c7fe:	f0 0d       	add	r31, r0
    c800:	b1 1d       	adc	r27, r1
    c802:	63 9f       	mul	r22, r19
    c804:	aa 27       	eor	r26, r26
    c806:	f0 0d       	add	r31, r0
    c808:	b1 1d       	adc	r27, r1
    c80a:	aa 1f       	adc	r26, r26
    c80c:	64 9f       	mul	r22, r20
    c80e:	66 27       	eor	r22, r22
    c810:	b0 0d       	add	r27, r0
    c812:	a1 1d       	adc	r26, r1
    c814:	66 1f       	adc	r22, r22
    c816:	82 9f       	mul	r24, r18
    c818:	22 27       	eor	r18, r18
    c81a:	b0 0d       	add	r27, r0
    c81c:	a1 1d       	adc	r26, r1
    c81e:	62 1f       	adc	r22, r18
    c820:	73 9f       	mul	r23, r19
    c822:	b0 0d       	add	r27, r0
    c824:	a1 1d       	adc	r26, r1
    c826:	62 1f       	adc	r22, r18
    c828:	83 9f       	mul	r24, r19
    c82a:	a0 0d       	add	r26, r0
    c82c:	61 1d       	adc	r22, r1
    c82e:	22 1f       	adc	r18, r18
    c830:	74 9f       	mul	r23, r20
    c832:	33 27       	eor	r19, r19
    c834:	a0 0d       	add	r26, r0
    c836:	61 1d       	adc	r22, r1
    c838:	23 1f       	adc	r18, r19
    c83a:	84 9f       	mul	r24, r20
    c83c:	60 0d       	add	r22, r0
    c83e:	21 1d       	adc	r18, r1
    c840:	82 2f       	mov	r24, r18
    c842:	76 2f       	mov	r23, r22
    c844:	6a 2f       	mov	r22, r26
    c846:	11 24       	eor	r1, r1
    c848:	9f 57       	subi	r25, 0x7F	; 127
    c84a:	50 40       	sbci	r21, 0x00	; 0
    c84c:	8a f0       	brmi	.+34     	; 0xc870 <__mulsf3_pse+0x84>
    c84e:	e1 f0       	breq	.+56     	; 0xc888 <__mulsf3_pse+0x9c>
    c850:	88 23       	and	r24, r24
    c852:	4a f0       	brmi	.+18     	; 0xc866 <__mulsf3_pse+0x7a>
    c854:	ee 0f       	add	r30, r30
    c856:	ff 1f       	adc	r31, r31
    c858:	bb 1f       	adc	r27, r27
    c85a:	66 1f       	adc	r22, r22
    c85c:	77 1f       	adc	r23, r23
    c85e:	88 1f       	adc	r24, r24
    c860:	91 50       	subi	r25, 0x01	; 1
    c862:	50 40       	sbci	r21, 0x00	; 0
    c864:	a9 f7       	brne	.-22     	; 0xc850 <__mulsf3_pse+0x64>
    c866:	9e 3f       	cpi	r25, 0xFE	; 254
    c868:	51 05       	cpc	r21, r1
    c86a:	70 f0       	brcs	.+28     	; 0xc888 <__mulsf3_pse+0x9c>
    c86c:	a6 ce       	rjmp	.-692    	; 0xc5ba <__fp_inf>
    c86e:	9f cf       	rjmp	.-194    	; 0xc7ae <__fp_szero>
    c870:	5f 3f       	cpi	r21, 0xFF	; 255
    c872:	ec f3       	brlt	.-6      	; 0xc86e <__mulsf3_pse+0x82>
    c874:	98 3e       	cpi	r25, 0xE8	; 232
    c876:	dc f3       	brlt	.-10     	; 0xc86e <__mulsf3_pse+0x82>
    c878:	86 95       	lsr	r24
    c87a:	77 95       	ror	r23
    c87c:	67 95       	ror	r22
    c87e:	b7 95       	ror	r27
    c880:	f7 95       	ror	r31
    c882:	e7 95       	ror	r30
    c884:	9f 5f       	subi	r25, 0xFF	; 255
    c886:	c1 f7       	brne	.-16     	; 0xc878 <__mulsf3_pse+0x8c>
    c888:	fe 2b       	or	r31, r30
    c88a:	88 0f       	add	r24, r24
    c88c:	91 1d       	adc	r25, r1
    c88e:	96 95       	lsr	r25
    c890:	87 95       	ror	r24
    c892:	97 f9       	bld	r25, 7
    c894:	08 95       	ret

0000c896 <pow>:
    c896:	fa 01       	movw	r30, r20
    c898:	ee 0f       	add	r30, r30
    c89a:	ff 1f       	adc	r31, r31
    c89c:	30 96       	adiw	r30, 0x00	; 0
    c89e:	21 05       	cpc	r18, r1
    c8a0:	31 05       	cpc	r19, r1
    c8a2:	99 f1       	breq	.+102    	; 0xc90a <pow+0x74>
    c8a4:	61 15       	cp	r22, r1
    c8a6:	71 05       	cpc	r23, r1
    c8a8:	61 f4       	brne	.+24     	; 0xc8c2 <pow+0x2c>
    c8aa:	80 38       	cpi	r24, 0x80	; 128
    c8ac:	bf e3       	ldi	r27, 0x3F	; 63
    c8ae:	9b 07       	cpc	r25, r27
    c8b0:	49 f1       	breq	.+82     	; 0xc904 <pow+0x6e>
    c8b2:	68 94       	set
    c8b4:	90 38       	cpi	r25, 0x80	; 128
    c8b6:	81 05       	cpc	r24, r1
    c8b8:	61 f0       	breq	.+24     	; 0xc8d2 <pow+0x3c>
    c8ba:	80 38       	cpi	r24, 0x80	; 128
    c8bc:	bf ef       	ldi	r27, 0xFF	; 255
    c8be:	9b 07       	cpc	r25, r27
    c8c0:	41 f0       	breq	.+16     	; 0xc8d2 <pow+0x3c>
    c8c2:	99 23       	and	r25, r25
    c8c4:	42 f5       	brpl	.+80     	; 0xc916 <pow+0x80>
    c8c6:	ff 3f       	cpi	r31, 0xFF	; 255
    c8c8:	e1 05       	cpc	r30, r1
    c8ca:	31 05       	cpc	r19, r1
    c8cc:	21 05       	cpc	r18, r1
    c8ce:	11 f1       	breq	.+68     	; 0xc914 <pow+0x7e>
    c8d0:	e8 94       	clt
    c8d2:	08 94       	sec
    c8d4:	e7 95       	ror	r30
    c8d6:	d9 01       	movw	r26, r18
    c8d8:	aa 23       	and	r26, r26
    c8da:	29 f4       	brne	.+10     	; 0xc8e6 <pow+0x50>
    c8dc:	ab 2f       	mov	r26, r27
    c8de:	be 2f       	mov	r27, r30
    c8e0:	f8 5f       	subi	r31, 0xF8	; 248
    c8e2:	d0 f3       	brcs	.-12     	; 0xc8d8 <pow+0x42>
    c8e4:	10 c0       	rjmp	.+32     	; 0xc906 <pow+0x70>
    c8e6:	ff 5f       	subi	r31, 0xFF	; 255
    c8e8:	70 f4       	brcc	.+28     	; 0xc906 <pow+0x70>
    c8ea:	a6 95       	lsr	r26
    c8ec:	e0 f7       	brcc	.-8      	; 0xc8e6 <pow+0x50>
    c8ee:	f7 39       	cpi	r31, 0x97	; 151
    c8f0:	50 f0       	brcs	.+20     	; 0xc906 <pow+0x70>
    c8f2:	19 f0       	breq	.+6      	; 0xc8fa <pow+0x64>
    c8f4:	ff 3a       	cpi	r31, 0xAF	; 175
    c8f6:	38 f4       	brcc	.+14     	; 0xc906 <pow+0x70>
    c8f8:	9f 77       	andi	r25, 0x7F	; 127
    c8fa:	9f 93       	push	r25
    c8fc:	0c d0       	rcall	.+24     	; 0xc916 <pow+0x80>
    c8fe:	0f 90       	pop	r0
    c900:	07 fc       	sbrc	r0, 7
    c902:	90 58       	subi	r25, 0x80	; 128
    c904:	08 95       	ret
    c906:	3e f0       	brts	.+14     	; 0xc916 <pow+0x80>
    c908:	87 ce       	rjmp	.-754    	; 0xc618 <__fp_nan>
    c90a:	60 e0       	ldi	r22, 0x00	; 0
    c90c:	70 e0       	ldi	r23, 0x00	; 0
    c90e:	80 e8       	ldi	r24, 0x80	; 128
    c910:	9f e3       	ldi	r25, 0x3F	; 63
    c912:	08 95       	ret
    c914:	4f e7       	ldi	r20, 0x7F	; 127
    c916:	9f 77       	andi	r25, 0x7F	; 127
    c918:	5f 93       	push	r21
    c91a:	4f 93       	push	r20
    c91c:	3f 93       	push	r19
    c91e:	2f 93       	push	r18
    c920:	04 d1       	rcall	.+520    	; 0xcb2a <log>
    c922:	2f 91       	pop	r18
    c924:	3f 91       	pop	r19
    c926:	4f 91       	pop	r20
    c928:	5f 91       	pop	r21
    c92a:	52 df       	rcall	.-348    	; 0xc7d0 <__mulsf3>
    c92c:	90 c0       	rjmp	.+288    	; 0xca4e <exp>

0000c92e <round>:
    c92e:	0d df       	rcall	.-486    	; 0xc74a <__fp_splitA>
    c930:	e0 f0       	brcs	.+56     	; 0xc96a <round+0x3c>
    c932:	9e 37       	cpi	r25, 0x7E	; 126
    c934:	d8 f0       	brcs	.+54     	; 0xc96c <round+0x3e>
    c936:	96 39       	cpi	r25, 0x96	; 150
    c938:	b8 f4       	brcc	.+46     	; 0xc968 <round+0x3a>
    c93a:	9e 38       	cpi	r25, 0x8E	; 142
    c93c:	48 f4       	brcc	.+18     	; 0xc950 <round+0x22>
    c93e:	67 2f       	mov	r22, r23
    c940:	78 2f       	mov	r23, r24
    c942:	88 27       	eor	r24, r24
    c944:	98 5f       	subi	r25, 0xF8	; 248
    c946:	f9 cf       	rjmp	.-14     	; 0xc93a <round+0xc>
    c948:	86 95       	lsr	r24
    c94a:	77 95       	ror	r23
    c94c:	67 95       	ror	r22
    c94e:	93 95       	inc	r25
    c950:	95 39       	cpi	r25, 0x95	; 149
    c952:	d0 f3       	brcs	.-12     	; 0xc948 <round+0x1a>
    c954:	b6 2f       	mov	r27, r22
    c956:	b1 70       	andi	r27, 0x01	; 1
    c958:	6b 0f       	add	r22, r27
    c95a:	71 1d       	adc	r23, r1
    c95c:	81 1d       	adc	r24, r1
    c95e:	20 f4       	brcc	.+8      	; 0xc968 <round+0x3a>
    c960:	87 95       	ror	r24
    c962:	77 95       	ror	r23
    c964:	67 95       	ror	r22
    c966:	93 95       	inc	r25
    c968:	2e ce       	rjmp	.-932    	; 0xc5c6 <__fp_mintl>
    c96a:	48 ce       	rjmp	.-880    	; 0xc5fc <__fp_mpack>
    c96c:	20 cf       	rjmp	.-448    	; 0xc7ae <__fp_szero>

0000c96e <sin>:
    c96e:	9f 93       	push	r25
    c970:	9b de       	rcall	.-714    	; 0xc6a8 <__fp_rempio2>
    c972:	0f 90       	pop	r0
    c974:	07 fc       	sbrc	r0, 7
    c976:	ee 5f       	subi	r30, 0xFE	; 254
    c978:	cf ce       	rjmp	.-610    	; 0xc718 <__fp_sinus>
    c97a:	11 f4       	brne	.+4      	; 0xc980 <sin+0x12>
    c97c:	0e f4       	brtc	.+2      	; 0xc980 <sin+0x12>
    c97e:	4c ce       	rjmp	.-872    	; 0xc618 <__fp_nan>
    c980:	3d ce       	rjmp	.-902    	; 0xc5fc <__fp_mpack>

0000c982 <sqrt>:
    c982:	e3 de       	rcall	.-570    	; 0xc74a <__fp_splitA>
    c984:	d0 f3       	brcs	.-12     	; 0xc97a <sin+0xc>
    c986:	99 23       	and	r25, r25
    c988:	d9 f3       	breq	.-10     	; 0xc980 <sin+0x12>
    c98a:	ce f3       	brts	.-14     	; 0xc97e <sin+0x10>
    c98c:	9f 57       	subi	r25, 0x7F	; 127
    c98e:	55 0b       	sbc	r21, r21
    c990:	87 ff       	sbrs	r24, 7
    c992:	89 d0       	rcall	.+274    	; 0xcaa6 <__fp_norm2>
    c994:	00 24       	eor	r0, r0
    c996:	a0 e6       	ldi	r26, 0x60	; 96
    c998:	40 ea       	ldi	r20, 0xA0	; 160
    c99a:	90 01       	movw	r18, r0
    c99c:	80 58       	subi	r24, 0x80	; 128
    c99e:	56 95       	lsr	r21
    c9a0:	97 95       	ror	r25
    c9a2:	28 f4       	brcc	.+10     	; 0xc9ae <sqrt+0x2c>
    c9a4:	80 5c       	subi	r24, 0xC0	; 192
    c9a6:	66 0f       	add	r22, r22
    c9a8:	77 1f       	adc	r23, r23
    c9aa:	88 1f       	adc	r24, r24
    c9ac:	20 f0       	brcs	.+8      	; 0xc9b6 <sqrt+0x34>
    c9ae:	26 17       	cp	r18, r22
    c9b0:	37 07       	cpc	r19, r23
    c9b2:	48 07       	cpc	r20, r24
    c9b4:	30 f4       	brcc	.+12     	; 0xc9c2 <sqrt+0x40>
    c9b6:	62 1b       	sub	r22, r18
    c9b8:	73 0b       	sbc	r23, r19
    c9ba:	84 0b       	sbc	r24, r20
    c9bc:	20 29       	or	r18, r0
    c9be:	31 29       	or	r19, r1
    c9c0:	4a 2b       	or	r20, r26
    c9c2:	a6 95       	lsr	r26
    c9c4:	17 94       	ror	r1
    c9c6:	07 94       	ror	r0
    c9c8:	20 25       	eor	r18, r0
    c9ca:	31 25       	eor	r19, r1
    c9cc:	4a 27       	eor	r20, r26
    c9ce:	58 f7       	brcc	.-42     	; 0xc9a6 <sqrt+0x24>
    c9d0:	66 0f       	add	r22, r22
    c9d2:	77 1f       	adc	r23, r23
    c9d4:	88 1f       	adc	r24, r24
    c9d6:	20 f0       	brcs	.+8      	; 0xc9e0 <sqrt+0x5e>
    c9d8:	26 17       	cp	r18, r22
    c9da:	37 07       	cpc	r19, r23
    c9dc:	48 07       	cpc	r20, r24
    c9de:	30 f4       	brcc	.+12     	; 0xc9ec <sqrt+0x6a>
    c9e0:	62 0b       	sbc	r22, r18
    c9e2:	73 0b       	sbc	r23, r19
    c9e4:	84 0b       	sbc	r24, r20
    c9e6:	20 0d       	add	r18, r0
    c9e8:	31 1d       	adc	r19, r1
    c9ea:	41 1d       	adc	r20, r1
    c9ec:	a0 95       	com	r26
    c9ee:	81 f7       	brne	.-32     	; 0xc9d0 <sqrt+0x4e>
    c9f0:	b9 01       	movw	r22, r18
    c9f2:	84 2f       	mov	r24, r20
    c9f4:	91 58       	subi	r25, 0x81	; 129
    c9f6:	88 0f       	add	r24, r24
    c9f8:	96 95       	lsr	r25
    c9fa:	87 95       	ror	r24
    c9fc:	08 95       	ret

0000c9fe <square>:
    c9fe:	9b 01       	movw	r18, r22
    ca00:	ac 01       	movw	r20, r24
    ca02:	e6 ce       	rjmp	.-564    	; 0xc7d0 <__mulsf3>

0000ca04 <tan>:
    ca04:	df 93       	push	r29
    ca06:	d9 2f       	mov	r29, r25
    ca08:	4f de       	rcall	.-866    	; 0xc6a8 <__fp_rempio2>
    ca0a:	e6 95       	lsr	r30
    ca0c:	d7 95       	ror	r29
    ca0e:	2a ed       	ldi	r18, 0xDA	; 218
    ca10:	3f e0       	ldi	r19, 0x0F	; 15
    ca12:	49 e4       	ldi	r20, 0x49	; 73
    ca14:	5f e3       	ldi	r21, 0x3F	; 63
    ca16:	b3 3a       	cpi	r27, 0xA3	; 163
    ca18:	62 07       	cpc	r22, r18
    ca1a:	73 07       	cpc	r23, r19
    ca1c:	84 07       	cpc	r24, r20
    ca1e:	95 07       	cpc	r25, r21
    ca20:	d7 95       	ror	r29
    ca22:	2a f0       	brmi	.+10     	; 0xca2e <tan+0x2a>
    ca24:	a2 ea       	ldi	r26, 0xA2	; 162
    ca26:	49 ec       	ldi	r20, 0xC9	; 201
    ca28:	90 68       	ori	r25, 0x80	; 128
    ca2a:	cc db       	rcall	.-2152   	; 0xc1c4 <__addsf3x>
    ca2c:	64 de       	rcall	.-824    	; 0xc6f6 <__fp_round>
    ca2e:	eb e6       	ldi	r30, 0x6B	; 107
    ca30:	f1 e0       	ldi	r31, 0x01	; 1
    ca32:	1a de       	rcall	.-972    	; 0xc668 <__fp_powsodd>
    ca34:	dd 0f       	add	r29, r29
    ca36:	0b f0       	brvs	.+2      	; 0xca3a <tan+0x36>
    ca38:	c4 de       	rcall	.-632    	; 0xc7c2 <inverse>
    ca3a:	dd 0f       	add	r29, r29
    ca3c:	0b f4       	brvc	.+2      	; 0xca40 <tan+0x3c>
    ca3e:	90 58       	subi	r25, 0x80	; 128
    ca40:	df 91       	pop	r29
    ca42:	08 95       	ret
    ca44:	19 f4       	brne	.+6      	; 0xca4c <tan+0x48>
    ca46:	0e f0       	brts	.+2      	; 0xca4a <tan+0x46>
    ca48:	b8 cd       	rjmp	.-1168   	; 0xc5ba <__fp_inf>
    ca4a:	b0 ce       	rjmp	.-672    	; 0xc7ac <__fp_zero>
    ca4c:	e5 cd       	rjmp	.-1078   	; 0xc618 <__fp_nan>

0000ca4e <exp>:
    ca4e:	7d de       	rcall	.-774    	; 0xc74a <__fp_splitA>
    ca50:	c8 f3       	brcs	.-14     	; 0xca44 <tan+0x40>
    ca52:	96 38       	cpi	r25, 0x86	; 134
    ca54:	c0 f7       	brcc	.-16     	; 0xca46 <tan+0x42>
    ca56:	07 f8       	bld	r0, 7
    ca58:	0f 92       	push	r0
    ca5a:	e8 94       	clt
    ca5c:	2b e3       	ldi	r18, 0x3B	; 59
    ca5e:	3a ea       	ldi	r19, 0xAA	; 170
    ca60:	48 eb       	ldi	r20, 0xB8	; 184
    ca62:	5f e7       	ldi	r21, 0x7F	; 127
    ca64:	c3 de       	rcall	.-634    	; 0xc7ec <__mulsf3_pse>
    ca66:	0f 92       	push	r0
    ca68:	0f 92       	push	r0
    ca6a:	0f 92       	push	r0
    ca6c:	4d b7       	in	r20, 0x3d	; 61
    ca6e:	5e b7       	in	r21, 0x3e	; 62
    ca70:	0f 92       	push	r0
    ca72:	9b d0       	rcall	.+310    	; 0xcbaa <modf>
    ca74:	ee e8       	ldi	r30, 0x8E	; 142
    ca76:	f1 e0       	ldi	r31, 0x01	; 1
    ca78:	d2 dd       	rcall	.-1116   	; 0xc61e <__fp_powser>
    ca7a:	4f 91       	pop	r20
    ca7c:	5f 91       	pop	r21
    ca7e:	ef 91       	pop	r30
    ca80:	ff 91       	pop	r31
    ca82:	e5 95       	asr	r30
    ca84:	ee 1f       	adc	r30, r30
    ca86:	ff 1f       	adc	r31, r31
    ca88:	49 f0       	breq	.+18     	; 0xca9c <exp+0x4e>
    ca8a:	fe 57       	subi	r31, 0x7E	; 126
    ca8c:	e0 68       	ori	r30, 0x80	; 128
    ca8e:	44 27       	eor	r20, r20
    ca90:	ee 0f       	add	r30, r30
    ca92:	44 1f       	adc	r20, r20
    ca94:	fa 95       	dec	r31
    ca96:	e1 f7       	brne	.-8      	; 0xca90 <exp+0x42>
    ca98:	41 95       	neg	r20
    ca9a:	55 0b       	sbc	r21, r21
    ca9c:	0d d0       	rcall	.+26     	; 0xcab8 <ldexp>
    ca9e:	0f 90       	pop	r0
    caa0:	07 fe       	sbrs	r0, 7
    caa2:	8f ce       	rjmp	.-738    	; 0xc7c2 <inverse>
    caa4:	08 95       	ret

0000caa6 <__fp_norm2>:
    caa6:	91 50       	subi	r25, 0x01	; 1
    caa8:	50 40       	sbci	r21, 0x00	; 0
    caaa:	66 0f       	add	r22, r22
    caac:	77 1f       	adc	r23, r23
    caae:	88 1f       	adc	r24, r24
    cab0:	d2 f7       	brpl	.-12     	; 0xcaa6 <__fp_norm2>
    cab2:	08 95       	ret
    cab4:	82 cd       	rjmp	.-1276   	; 0xc5ba <__fp_inf>
    cab6:	a2 cd       	rjmp	.-1212   	; 0xc5fc <__fp_mpack>

0000cab8 <ldexp>:
    cab8:	48 de       	rcall	.-880    	; 0xc74a <__fp_splitA>
    caba:	e8 f3       	brcs	.-6      	; 0xcab6 <__fp_norm2+0x10>
    cabc:	99 23       	and	r25, r25
    cabe:	d9 f3       	breq	.-10     	; 0xcab6 <__fp_norm2+0x10>
    cac0:	94 0f       	add	r25, r20
    cac2:	51 1d       	adc	r21, r1
    cac4:	bb f3       	brvs	.-18     	; 0xcab4 <__fp_norm2+0xe>
    cac6:	91 50       	subi	r25, 0x01	; 1
    cac8:	50 40       	sbci	r21, 0x00	; 0
    caca:	94 f0       	brlt	.+36     	; 0xcaf0 <ldexp+0x38>
    cacc:	59 f0       	breq	.+22     	; 0xcae4 <ldexp+0x2c>
    cace:	88 23       	and	r24, r24
    cad0:	32 f0       	brmi	.+12     	; 0xcade <ldexp+0x26>
    cad2:	66 0f       	add	r22, r22
    cad4:	77 1f       	adc	r23, r23
    cad6:	88 1f       	adc	r24, r24
    cad8:	91 50       	subi	r25, 0x01	; 1
    cada:	50 40       	sbci	r21, 0x00	; 0
    cadc:	c1 f7       	brne	.-16     	; 0xcace <ldexp+0x16>
    cade:	9e 3f       	cpi	r25, 0xFE	; 254
    cae0:	51 05       	cpc	r21, r1
    cae2:	44 f7       	brge	.-48     	; 0xcab4 <__fp_norm2+0xe>
    cae4:	88 0f       	add	r24, r24
    cae6:	91 1d       	adc	r25, r1
    cae8:	96 95       	lsr	r25
    caea:	87 95       	ror	r24
    caec:	97 f9       	bld	r25, 7
    caee:	08 95       	ret
    caf0:	5f 3f       	cpi	r21, 0xFF	; 255
    caf2:	ac f0       	brlt	.+42     	; 0xcb1e <ldexp+0x66>
    caf4:	98 3e       	cpi	r25, 0xE8	; 232
    caf6:	9c f0       	brlt	.+38     	; 0xcb1e <ldexp+0x66>
    caf8:	bb 27       	eor	r27, r27
    cafa:	86 95       	lsr	r24
    cafc:	77 95       	ror	r23
    cafe:	67 95       	ror	r22
    cb00:	b7 95       	ror	r27
    cb02:	08 f4       	brcc	.+2      	; 0xcb06 <ldexp+0x4e>
    cb04:	b1 60       	ori	r27, 0x01	; 1
    cb06:	93 95       	inc	r25
    cb08:	c1 f7       	brne	.-16     	; 0xcafa <ldexp+0x42>
    cb0a:	bb 0f       	add	r27, r27
    cb0c:	58 f7       	brcc	.-42     	; 0xcae4 <ldexp+0x2c>
    cb0e:	11 f4       	brne	.+4      	; 0xcb14 <ldexp+0x5c>
    cb10:	60 ff       	sbrs	r22, 0
    cb12:	e8 cf       	rjmp	.-48     	; 0xcae4 <ldexp+0x2c>
    cb14:	6f 5f       	subi	r22, 0xFF	; 255
    cb16:	7f 4f       	sbci	r23, 0xFF	; 255
    cb18:	8f 4f       	sbci	r24, 0xFF	; 255
    cb1a:	9f 4f       	sbci	r25, 0xFF	; 255
    cb1c:	e3 cf       	rjmp	.-58     	; 0xcae4 <ldexp+0x2c>
    cb1e:	47 ce       	rjmp	.-882    	; 0xc7ae <__fp_szero>
    cb20:	0e f0       	brts	.+2      	; 0xcb24 <ldexp+0x6c>
    cb22:	6c cd       	rjmp	.-1320   	; 0xc5fc <__fp_mpack>
    cb24:	79 cd       	rjmp	.-1294   	; 0xc618 <__fp_nan>
    cb26:	68 94       	set
    cb28:	48 cd       	rjmp	.-1392   	; 0xc5ba <__fp_inf>

0000cb2a <log>:
    cb2a:	0f de       	rcall	.-994    	; 0xc74a <__fp_splitA>
    cb2c:	c8 f3       	brcs	.-14     	; 0xcb20 <ldexp+0x68>
    cb2e:	99 23       	and	r25, r25
    cb30:	d1 f3       	breq	.-12     	; 0xcb26 <ldexp+0x6e>
    cb32:	c6 f3       	brts	.-16     	; 0xcb24 <ldexp+0x6c>
    cb34:	df 93       	push	r29
    cb36:	cf 93       	push	r28
    cb38:	1f 93       	push	r17
    cb3a:	0f 93       	push	r16
    cb3c:	ff 92       	push	r15
    cb3e:	c9 2f       	mov	r28, r25
    cb40:	dd 27       	eor	r29, r29
    cb42:	88 23       	and	r24, r24
    cb44:	2a f0       	brmi	.+10     	; 0xcb50 <log+0x26>
    cb46:	21 97       	sbiw	r28, 0x01	; 1
    cb48:	66 0f       	add	r22, r22
    cb4a:	77 1f       	adc	r23, r23
    cb4c:	88 1f       	adc	r24, r24
    cb4e:	da f7       	brpl	.-10     	; 0xcb46 <log+0x1c>
    cb50:	20 e0       	ldi	r18, 0x00	; 0
    cb52:	30 e0       	ldi	r19, 0x00	; 0
    cb54:	40 e8       	ldi	r20, 0x80	; 128
    cb56:	5f eb       	ldi	r21, 0xBF	; 191
    cb58:	9f e3       	ldi	r25, 0x3F	; 63
    cb5a:	88 39       	cpi	r24, 0x98	; 152
    cb5c:	20 f0       	brcs	.+8      	; 0xcb66 <log+0x3c>
    cb5e:	80 3e       	cpi	r24, 0xE0	; 224
    cb60:	30 f0       	brcs	.+12     	; 0xcb6e <log+0x44>
    cb62:	21 96       	adiw	r28, 0x01	; 1
    cb64:	8f 77       	andi	r24, 0x7F	; 127
    cb66:	1d db       	rcall	.-2502   	; 0xc1a2 <__addsf3>
    cb68:	e6 eb       	ldi	r30, 0xB6	; 182
    cb6a:	f1 e0       	ldi	r31, 0x01	; 1
    cb6c:	03 c0       	rjmp	.+6      	; 0xcb74 <log+0x4a>
    cb6e:	19 db       	rcall	.-2510   	; 0xc1a2 <__addsf3>
    cb70:	e3 ee       	ldi	r30, 0xE3	; 227
    cb72:	f1 e0       	ldi	r31, 0x01	; 1
    cb74:	54 dd       	rcall	.-1368   	; 0xc61e <__fp_powser>
    cb76:	8b 01       	movw	r16, r22
    cb78:	be 01       	movw	r22, r28
    cb7a:	ec 01       	movw	r28, r24
    cb7c:	fb 2e       	mov	r15, r27
    cb7e:	6f 57       	subi	r22, 0x7F	; 127
    cb80:	71 09       	sbc	r23, r1
    cb82:	75 95       	asr	r23
    cb84:	77 1f       	adc	r23, r23
    cb86:	88 0b       	sbc	r24, r24
    cb88:	99 0b       	sbc	r25, r25
    cb8a:	8a dc       	rcall	.-1772   	; 0xc4a0 <__floatsisf>
    cb8c:	28 e1       	ldi	r18, 0x18	; 24
    cb8e:	32 e7       	ldi	r19, 0x72	; 114
    cb90:	41 e3       	ldi	r20, 0x31	; 49
    cb92:	5f e3       	ldi	r21, 0x3F	; 63
    cb94:	29 de       	rcall	.-942    	; 0xc7e8 <__mulsf3x>
    cb96:	af 2d       	mov	r26, r15
    cb98:	98 01       	movw	r18, r16
    cb9a:	ae 01       	movw	r20, r28
    cb9c:	ff 90       	pop	r15
    cb9e:	0f 91       	pop	r16
    cba0:	1f 91       	pop	r17
    cba2:	cf 91       	pop	r28
    cba4:	df 91       	pop	r29
    cba6:	0e db       	rcall	.-2532   	; 0xc1c4 <__addsf3x>
    cba8:	a6 cd       	rjmp	.-1204   	; 0xc6f6 <__fp_round>

0000cbaa <modf>:
    cbaa:	fa 01       	movw	r30, r20
    cbac:	dc 01       	movw	r26, r24
    cbae:	aa 0f       	add	r26, r26
    cbb0:	bb 1f       	adc	r27, r27
    cbb2:	9b 01       	movw	r18, r22
    cbb4:	ac 01       	movw	r20, r24
    cbb6:	bf 57       	subi	r27, 0x7F	; 127
    cbb8:	28 f4       	brcc	.+10     	; 0xcbc4 <modf+0x1a>
    cbba:	22 27       	eor	r18, r18
    cbbc:	33 27       	eor	r19, r19
    cbbe:	44 27       	eor	r20, r20
    cbc0:	50 78       	andi	r21, 0x80	; 128
    cbc2:	1f c0       	rjmp	.+62     	; 0xcc02 <modf+0x58>
    cbc4:	b7 51       	subi	r27, 0x17	; 23
    cbc6:	88 f4       	brcc	.+34     	; 0xcbea <modf+0x40>
    cbc8:	ab 2f       	mov	r26, r27
    cbca:	00 24       	eor	r0, r0
    cbcc:	46 95       	lsr	r20
    cbce:	37 95       	ror	r19
    cbd0:	27 95       	ror	r18
    cbd2:	01 1c       	adc	r0, r1
    cbd4:	a3 95       	inc	r26
    cbd6:	d2 f3       	brmi	.-12     	; 0xcbcc <modf+0x22>
    cbd8:	00 20       	and	r0, r0
    cbda:	69 f0       	breq	.+26     	; 0xcbf6 <modf+0x4c>
    cbdc:	22 0f       	add	r18, r18
    cbde:	33 1f       	adc	r19, r19
    cbe0:	44 1f       	adc	r20, r20
    cbe2:	b3 95       	inc	r27
    cbe4:	da f3       	brmi	.-10     	; 0xcbdc <modf+0x32>
    cbe6:	0d d0       	rcall	.+26     	; 0xcc02 <modf+0x58>
    cbe8:	db ca       	rjmp	.-2634   	; 0xc1a0 <__subsf3>
    cbea:	61 30       	cpi	r22, 0x01	; 1
    cbec:	71 05       	cpc	r23, r1
    cbee:	a0 e8       	ldi	r26, 0x80	; 128
    cbf0:	8a 07       	cpc	r24, r26
    cbf2:	b9 46       	sbci	r27, 0x69	; 105
    cbf4:	30 f4       	brcc	.+12     	; 0xcc02 <modf+0x58>
    cbf6:	9b 01       	movw	r18, r22
    cbf8:	ac 01       	movw	r20, r24
    cbfa:	66 27       	eor	r22, r22
    cbfc:	77 27       	eor	r23, r23
    cbfe:	88 27       	eor	r24, r24
    cc00:	90 78       	andi	r25, 0x80	; 128
    cc02:	30 96       	adiw	r30, 0x00	; 0
    cc04:	21 f0       	breq	.+8      	; 0xcc0e <modf+0x64>
    cc06:	20 83       	st	Z, r18
    cc08:	31 83       	std	Z+1, r19	; 0x01
    cc0a:	42 83       	std	Z+2, r20	; 0x02
    cc0c:	53 83       	std	Z+3, r21	; 0x03
    cc0e:	08 95       	ret

0000cc10 <__udivmodhi4>:
    cc10:	aa 1b       	sub	r26, r26
    cc12:	bb 1b       	sub	r27, r27
    cc14:	51 e1       	ldi	r21, 0x11	; 17
    cc16:	07 c0       	rjmp	.+14     	; 0xcc26 <__udivmodhi4_ep>

0000cc18 <__udivmodhi4_loop>:
    cc18:	aa 1f       	adc	r26, r26
    cc1a:	bb 1f       	adc	r27, r27
    cc1c:	a6 17       	cp	r26, r22
    cc1e:	b7 07       	cpc	r27, r23
    cc20:	10 f0       	brcs	.+4      	; 0xcc26 <__udivmodhi4_ep>
    cc22:	a6 1b       	sub	r26, r22
    cc24:	b7 0b       	sbc	r27, r23

0000cc26 <__udivmodhi4_ep>:
    cc26:	88 1f       	adc	r24, r24
    cc28:	99 1f       	adc	r25, r25
    cc2a:	5a 95       	dec	r21
    cc2c:	a9 f7       	brne	.-22     	; 0xcc18 <__udivmodhi4_loop>
    cc2e:	80 95       	com	r24
    cc30:	90 95       	com	r25
    cc32:	bc 01       	movw	r22, r24
    cc34:	cd 01       	movw	r24, r26
    cc36:	08 95       	ret

0000cc38 <__divmodhi4>:
    cc38:	97 fb       	bst	r25, 7
    cc3a:	09 2e       	mov	r0, r25
    cc3c:	07 26       	eor	r0, r23
    cc3e:	0a d0       	rcall	.+20     	; 0xcc54 <__divmodhi4_neg1>
    cc40:	77 fd       	sbrc	r23, 7
    cc42:	04 d0       	rcall	.+8      	; 0xcc4c <__divmodhi4_neg2>
    cc44:	e5 df       	rcall	.-54     	; 0xcc10 <__udivmodhi4>
    cc46:	06 d0       	rcall	.+12     	; 0xcc54 <__divmodhi4_neg1>
    cc48:	00 20       	and	r0, r0
    cc4a:	1a f4       	brpl	.+6      	; 0xcc52 <__divmodhi4_exit>

0000cc4c <__divmodhi4_neg2>:
    cc4c:	70 95       	com	r23
    cc4e:	61 95       	neg	r22
    cc50:	7f 4f       	sbci	r23, 0xFF	; 255

0000cc52 <__divmodhi4_exit>:
    cc52:	08 95       	ret

0000cc54 <__divmodhi4_neg1>:
    cc54:	f6 f7       	brtc	.-4      	; 0xcc52 <__divmodhi4_exit>
    cc56:	90 95       	com	r25
    cc58:	81 95       	neg	r24
    cc5a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc5c:	08 95       	ret

0000cc5e <__udivmodsi4>:
    cc5e:	a1 e2       	ldi	r26, 0x21	; 33
    cc60:	1a 2e       	mov	r1, r26
    cc62:	aa 1b       	sub	r26, r26
    cc64:	bb 1b       	sub	r27, r27
    cc66:	fd 01       	movw	r30, r26
    cc68:	0d c0       	rjmp	.+26     	; 0xcc84 <__udivmodsi4_ep>

0000cc6a <__udivmodsi4_loop>:
    cc6a:	aa 1f       	adc	r26, r26
    cc6c:	bb 1f       	adc	r27, r27
    cc6e:	ee 1f       	adc	r30, r30
    cc70:	ff 1f       	adc	r31, r31
    cc72:	a2 17       	cp	r26, r18
    cc74:	b3 07       	cpc	r27, r19
    cc76:	e4 07       	cpc	r30, r20
    cc78:	f5 07       	cpc	r31, r21
    cc7a:	20 f0       	brcs	.+8      	; 0xcc84 <__udivmodsi4_ep>
    cc7c:	a2 1b       	sub	r26, r18
    cc7e:	b3 0b       	sbc	r27, r19
    cc80:	e4 0b       	sbc	r30, r20
    cc82:	f5 0b       	sbc	r31, r21

0000cc84 <__udivmodsi4_ep>:
    cc84:	66 1f       	adc	r22, r22
    cc86:	77 1f       	adc	r23, r23
    cc88:	88 1f       	adc	r24, r24
    cc8a:	99 1f       	adc	r25, r25
    cc8c:	1a 94       	dec	r1
    cc8e:	69 f7       	brne	.-38     	; 0xcc6a <__udivmodsi4_loop>
    cc90:	60 95       	com	r22
    cc92:	70 95       	com	r23
    cc94:	80 95       	com	r24
    cc96:	90 95       	com	r25
    cc98:	9b 01       	movw	r18, r22
    cc9a:	ac 01       	movw	r20, r24
    cc9c:	bd 01       	movw	r22, r26
    cc9e:	cf 01       	movw	r24, r30
    cca0:	08 95       	ret

0000cca2 <dtostrf>:
    cca2:	ef 92       	push	r14
    cca4:	ff 92       	push	r15
    cca6:	0f 93       	push	r16
    cca8:	1f 93       	push	r17
    ccaa:	f2 2f       	mov	r31, r18
    ccac:	f0 2e       	mov	r15, r16
    ccae:	47 fd       	sbrc	r20, 7
    ccb0:	02 c0       	rjmp	.+4      	; 0xccb6 <dtostrf+0x14>
    ccb2:	e4 e0       	ldi	r30, 0x04	; 4
    ccb4:	01 c0       	rjmp	.+2      	; 0xccb8 <dtostrf+0x16>
    ccb6:	e4 e1       	ldi	r30, 0x14	; 20
    ccb8:	24 2f       	mov	r18, r20
    ccba:	33 27       	eor	r19, r19
    ccbc:	27 fd       	sbrc	r18, 7
    ccbe:	30 95       	com	r19
    ccc0:	37 ff       	sbrs	r19, 7
    ccc2:	03 c0       	rjmp	.+6      	; 0xccca <dtostrf+0x28>
    ccc4:	30 95       	com	r19
    ccc6:	21 95       	neg	r18
    ccc8:	3f 4f       	sbci	r19, 0xFF	; 255
    ccca:	4f 2d       	mov	r20, r15
    cccc:	51 2f       	mov	r21, r17
    ccce:	0f 2f       	mov	r16, r31
    ccd0:	ee 2e       	mov	r14, r30
    ccd2:	0e 94 8a 6c 	call	0xd914	; 0xd914 <dtoa_prf>
    ccd6:	8f 2d       	mov	r24, r15
    ccd8:	91 2f       	mov	r25, r17
    ccda:	1f 91       	pop	r17
    ccdc:	0f 91       	pop	r16
    ccde:	ff 90       	pop	r15
    cce0:	ef 90       	pop	r14
    cce2:	08 95       	ret

0000cce4 <abort>:
    cce4:	81 e0       	ldi	r24, 0x01	; 1
    cce6:	90 e0       	ldi	r25, 0x00	; 0
    cce8:	f8 94       	cli
    ccea:	0c 94 09 70 	jmp	0xe012	; 0xe012 <_exit>

0000ccee <atof>:
    ccee:	66 27       	eor	r22, r22
    ccf0:	77 27       	eor	r23, r23
    ccf2:	0c 94 0c 6e 	jmp	0xdc18	; 0xdc18 <strtod>

0000ccf6 <atoi>:
    ccf6:	fc 01       	movw	r30, r24
    ccf8:	88 27       	eor	r24, r24
    ccfa:	99 27       	eor	r25, r25
    ccfc:	e8 94       	clt
    ccfe:	21 91       	ld	r18, Z+
    cd00:	20 32       	cpi	r18, 0x20	; 32
    cd02:	e9 f3       	breq	.-6      	; 0xccfe <atoi+0x8>
    cd04:	29 30       	cpi	r18, 0x09	; 9
    cd06:	10 f0       	brcs	.+4      	; 0xcd0c <atoi+0x16>
    cd08:	2e 30       	cpi	r18, 0x0E	; 14
    cd0a:	c8 f3       	brcs	.-14     	; 0xccfe <atoi+0x8>
    cd0c:	2b 32       	cpi	r18, 0x2B	; 43
    cd0e:	41 f0       	breq	.+16     	; 0xcd20 <atoi+0x2a>
    cd10:	2d 32       	cpi	r18, 0x2D	; 45
    cd12:	39 f4       	brne	.+14     	; 0xcd22 <atoi+0x2c>
    cd14:	68 94       	set
    cd16:	04 c0       	rjmp	.+8      	; 0xcd20 <atoi+0x2a>
    cd18:	0e 94 0b 68 	call	0xd016	; 0xd016 <__mulhi_const_10>
    cd1c:	82 0f       	add	r24, r18
    cd1e:	91 1d       	adc	r25, r1
    cd20:	21 91       	ld	r18, Z+
    cd22:	20 53       	subi	r18, 0x30	; 48
    cd24:	2a 30       	cpi	r18, 0x0A	; 10
    cd26:	c0 f3       	brcs	.-16     	; 0xcd18 <atoi+0x22>
    cd28:	1e f4       	brtc	.+6      	; 0xcd30 <atoi+0x3a>
    cd2a:	90 95       	com	r25
    cd2c:	81 95       	neg	r24
    cd2e:	9f 4f       	sbci	r25, 0xFF	; 255
    cd30:	08 95       	ret

0000cd32 <__ftoa_engine>:
    cd32:	28 30       	cpi	r18, 0x08	; 8
    cd34:	08 f0       	brcs	.+2      	; 0xcd38 <__ftoa_engine+0x6>
    cd36:	27 e0       	ldi	r18, 0x07	; 7
    cd38:	33 27       	eor	r19, r19
    cd3a:	da 01       	movw	r26, r20
    cd3c:	99 0f       	add	r25, r25
    cd3e:	31 1d       	adc	r19, r1
    cd40:	87 fd       	sbrc	r24, 7
    cd42:	91 60       	ori	r25, 0x01	; 1
    cd44:	00 96       	adiw	r24, 0x00	; 0
    cd46:	61 05       	cpc	r22, r1
    cd48:	71 05       	cpc	r23, r1
    cd4a:	39 f4       	brne	.+14     	; 0xcd5a <__ftoa_engine+0x28>
    cd4c:	32 60       	ori	r19, 0x02	; 2
    cd4e:	2e 5f       	subi	r18, 0xFE	; 254
    cd50:	3d 93       	st	X+, r19
    cd52:	30 e3       	ldi	r19, 0x30	; 48
    cd54:	2a 95       	dec	r18
    cd56:	e1 f7       	brne	.-8      	; 0xcd50 <__ftoa_engine+0x1e>
    cd58:	08 95       	ret
    cd5a:	9f 3f       	cpi	r25, 0xFF	; 255
    cd5c:	30 f0       	brcs	.+12     	; 0xcd6a <__ftoa_engine+0x38>
    cd5e:	80 38       	cpi	r24, 0x80	; 128
    cd60:	71 05       	cpc	r23, r1
    cd62:	61 05       	cpc	r22, r1
    cd64:	09 f0       	breq	.+2      	; 0xcd68 <__ftoa_engine+0x36>
    cd66:	3c 5f       	subi	r19, 0xFC	; 252
    cd68:	3c 5f       	subi	r19, 0xFC	; 252
    cd6a:	3d 93       	st	X+, r19
    cd6c:	91 30       	cpi	r25, 0x01	; 1
    cd6e:	08 f0       	brcs	.+2      	; 0xcd72 <__ftoa_engine+0x40>
    cd70:	80 68       	ori	r24, 0x80	; 128
    cd72:	91 1d       	adc	r25, r1
    cd74:	df 93       	push	r29
    cd76:	cf 93       	push	r28
    cd78:	1f 93       	push	r17
    cd7a:	0f 93       	push	r16
    cd7c:	ff 92       	push	r15
    cd7e:	ef 92       	push	r14
    cd80:	19 2f       	mov	r17, r25
    cd82:	98 7f       	andi	r25, 0xF8	; 248
    cd84:	96 95       	lsr	r25
    cd86:	e9 2f       	mov	r30, r25
    cd88:	96 95       	lsr	r25
    cd8a:	96 95       	lsr	r25
    cd8c:	e9 0f       	add	r30, r25
    cd8e:	ff 27       	eor	r31, r31
    cd90:	e4 58       	subi	r30, 0x84	; 132
    cd92:	fa 4d       	sbci	r31, 0xDA	; 218
    cd94:	99 27       	eor	r25, r25
    cd96:	33 27       	eor	r19, r19
    cd98:	ee 24       	eor	r14, r14
    cd9a:	ff 24       	eor	r15, r15
    cd9c:	a7 01       	movw	r20, r14
    cd9e:	e7 01       	movw	r28, r14
    cda0:	05 90       	lpm	r0, Z+
    cda2:	08 94       	sec
    cda4:	07 94       	ror	r0
    cda6:	28 f4       	brcc	.+10     	; 0xcdb2 <__ftoa_engine+0x80>
    cda8:	36 0f       	add	r19, r22
    cdaa:	e7 1e       	adc	r14, r23
    cdac:	f8 1e       	adc	r15, r24
    cdae:	49 1f       	adc	r20, r25
    cdb0:	51 1d       	adc	r21, r1
    cdb2:	66 0f       	add	r22, r22
    cdb4:	77 1f       	adc	r23, r23
    cdb6:	88 1f       	adc	r24, r24
    cdb8:	99 1f       	adc	r25, r25
    cdba:	06 94       	lsr	r0
    cdbc:	a1 f7       	brne	.-24     	; 0xcda6 <__ftoa_engine+0x74>
    cdbe:	05 90       	lpm	r0, Z+
    cdc0:	07 94       	ror	r0
    cdc2:	28 f4       	brcc	.+10     	; 0xcdce <__ftoa_engine+0x9c>
    cdc4:	e7 0e       	add	r14, r23
    cdc6:	f8 1e       	adc	r15, r24
    cdc8:	49 1f       	adc	r20, r25
    cdca:	56 1f       	adc	r21, r22
    cdcc:	c1 1d       	adc	r28, r1
    cdce:	77 0f       	add	r23, r23
    cdd0:	88 1f       	adc	r24, r24
    cdd2:	99 1f       	adc	r25, r25
    cdd4:	66 1f       	adc	r22, r22
    cdd6:	06 94       	lsr	r0
    cdd8:	a1 f7       	brne	.-24     	; 0xcdc2 <__ftoa_engine+0x90>
    cdda:	05 90       	lpm	r0, Z+
    cddc:	07 94       	ror	r0
    cdde:	28 f4       	brcc	.+10     	; 0xcdea <__ftoa_engine+0xb8>
    cde0:	f8 0e       	add	r15, r24
    cde2:	49 1f       	adc	r20, r25
    cde4:	56 1f       	adc	r21, r22
    cde6:	c7 1f       	adc	r28, r23
    cde8:	d1 1d       	adc	r29, r1
    cdea:	88 0f       	add	r24, r24
    cdec:	99 1f       	adc	r25, r25
    cdee:	66 1f       	adc	r22, r22
    cdf0:	77 1f       	adc	r23, r23
    cdf2:	06 94       	lsr	r0
    cdf4:	a1 f7       	brne	.-24     	; 0xcdde <__ftoa_engine+0xac>
    cdf6:	05 90       	lpm	r0, Z+
    cdf8:	07 94       	ror	r0
    cdfa:	20 f4       	brcc	.+8      	; 0xce04 <__ftoa_engine+0xd2>
    cdfc:	49 0f       	add	r20, r25
    cdfe:	56 1f       	adc	r21, r22
    ce00:	c7 1f       	adc	r28, r23
    ce02:	d8 1f       	adc	r29, r24
    ce04:	99 0f       	add	r25, r25
    ce06:	66 1f       	adc	r22, r22
    ce08:	77 1f       	adc	r23, r23
    ce0a:	88 1f       	adc	r24, r24
    ce0c:	06 94       	lsr	r0
    ce0e:	a9 f7       	brne	.-22     	; 0xcdfa <__ftoa_engine+0xc8>
    ce10:	84 91       	lpm	r24, Z+
    ce12:	10 95       	com	r17
    ce14:	17 70       	andi	r17, 0x07	; 7
    ce16:	41 f0       	breq	.+16     	; 0xce28 <__ftoa_engine+0xf6>
    ce18:	d6 95       	lsr	r29
    ce1a:	c7 95       	ror	r28
    ce1c:	57 95       	ror	r21
    ce1e:	47 95       	ror	r20
    ce20:	f7 94       	ror	r15
    ce22:	e7 94       	ror	r14
    ce24:	1a 95       	dec	r17
    ce26:	c1 f7       	brne	.-16     	; 0xce18 <__ftoa_engine+0xe6>
    ce28:	e2 e2       	ldi	r30, 0x22	; 34
    ce2a:	f5 e2       	ldi	r31, 0x25	; 37
    ce2c:	68 94       	set
    ce2e:	15 90       	lpm	r1, Z+
    ce30:	15 91       	lpm	r17, Z+
    ce32:	35 91       	lpm	r19, Z+
    ce34:	65 91       	lpm	r22, Z+
    ce36:	95 91       	lpm	r25, Z+
    ce38:	05 90       	lpm	r0, Z+
    ce3a:	7f e2       	ldi	r23, 0x2F	; 47
    ce3c:	73 95       	inc	r23
    ce3e:	e1 18       	sub	r14, r1
    ce40:	f1 0a       	sbc	r15, r17
    ce42:	43 0b       	sbc	r20, r19
    ce44:	56 0b       	sbc	r21, r22
    ce46:	c9 0b       	sbc	r28, r25
    ce48:	d0 09       	sbc	r29, r0
    ce4a:	c0 f7       	brcc	.-16     	; 0xce3c <__ftoa_engine+0x10a>
    ce4c:	e1 0c       	add	r14, r1
    ce4e:	f1 1e       	adc	r15, r17
    ce50:	43 1f       	adc	r20, r19
    ce52:	56 1f       	adc	r21, r22
    ce54:	c9 1f       	adc	r28, r25
    ce56:	d0 1d       	adc	r29, r0
    ce58:	7e f4       	brtc	.+30     	; 0xce78 <__ftoa_engine+0x146>
    ce5a:	70 33       	cpi	r23, 0x30	; 48
    ce5c:	11 f4       	brne	.+4      	; 0xce62 <__ftoa_engine+0x130>
    ce5e:	8a 95       	dec	r24
    ce60:	e6 cf       	rjmp	.-52     	; 0xce2e <__ftoa_engine+0xfc>
    ce62:	e8 94       	clt
    ce64:	01 50       	subi	r16, 0x01	; 1
    ce66:	30 f0       	brcs	.+12     	; 0xce74 <__ftoa_engine+0x142>
    ce68:	08 0f       	add	r16, r24
    ce6a:	0a f4       	brpl	.+2      	; 0xce6e <__ftoa_engine+0x13c>
    ce6c:	00 27       	eor	r16, r16
    ce6e:	02 17       	cp	r16, r18
    ce70:	08 f4       	brcc	.+2      	; 0xce74 <__ftoa_engine+0x142>
    ce72:	20 2f       	mov	r18, r16
    ce74:	23 95       	inc	r18
    ce76:	02 2f       	mov	r16, r18
    ce78:	7a 33       	cpi	r23, 0x3A	; 58
    ce7a:	28 f0       	brcs	.+10     	; 0xce86 <__ftoa_engine+0x154>
    ce7c:	79 e3       	ldi	r23, 0x39	; 57
    ce7e:	7d 93       	st	X+, r23
    ce80:	2a 95       	dec	r18
    ce82:	e9 f7       	brne	.-6      	; 0xce7e <__ftoa_engine+0x14c>
    ce84:	10 c0       	rjmp	.+32     	; 0xcea6 <__ftoa_engine+0x174>
    ce86:	7d 93       	st	X+, r23
    ce88:	2a 95       	dec	r18
    ce8a:	89 f6       	brne	.-94     	; 0xce2e <__ftoa_engine+0xfc>
    ce8c:	06 94       	lsr	r0
    ce8e:	97 95       	ror	r25
    ce90:	67 95       	ror	r22
    ce92:	37 95       	ror	r19
    ce94:	17 95       	ror	r17
    ce96:	17 94       	ror	r1
    ce98:	e1 18       	sub	r14, r1
    ce9a:	f1 0a       	sbc	r15, r17
    ce9c:	43 0b       	sbc	r20, r19
    ce9e:	56 0b       	sbc	r21, r22
    cea0:	c9 0b       	sbc	r28, r25
    cea2:	d0 09       	sbc	r29, r0
    cea4:	98 f0       	brcs	.+38     	; 0xcecc <__ftoa_engine+0x19a>
    cea6:	23 95       	inc	r18
    cea8:	7e 91       	ld	r23, -X
    ceaa:	73 95       	inc	r23
    ceac:	7a 33       	cpi	r23, 0x3A	; 58
    ceae:	08 f0       	brcs	.+2      	; 0xceb2 <__ftoa_engine+0x180>
    ceb0:	70 e3       	ldi	r23, 0x30	; 48
    ceb2:	7c 93       	st	X, r23
    ceb4:	20 13       	cpse	r18, r16
    ceb6:	b8 f7       	brcc	.-18     	; 0xcea6 <__ftoa_engine+0x174>
    ceb8:	7e 91       	ld	r23, -X
    ceba:	70 61       	ori	r23, 0x10	; 16
    cebc:	7d 93       	st	X+, r23
    cebe:	30 f0       	brcs	.+12     	; 0xcecc <__ftoa_engine+0x19a>
    cec0:	83 95       	inc	r24
    cec2:	71 e3       	ldi	r23, 0x31	; 49
    cec4:	7d 93       	st	X+, r23
    cec6:	70 e3       	ldi	r23, 0x30	; 48
    cec8:	2a 95       	dec	r18
    ceca:	e1 f7       	brne	.-8      	; 0xcec4 <__ftoa_engine+0x192>
    cecc:	11 24       	eor	r1, r1
    cece:	ef 90       	pop	r14
    ced0:	ff 90       	pop	r15
    ced2:	0f 91       	pop	r16
    ced4:	1f 91       	pop	r17
    ced6:	cf 91       	pop	r28
    ced8:	df 91       	pop	r29
    ceda:	99 27       	eor	r25, r25
    cedc:	87 fd       	sbrc	r24, 7
    cede:	90 95       	com	r25
    cee0:	08 95       	ret

0000cee2 <isalnum>:
    cee2:	91 11       	cpse	r25, r1
    cee4:	06 c0       	rjmp	.+12     	; 0xcef2 <__ctype_isfalse>
    cee6:	80 53       	subi	r24, 0x30	; 48
    cee8:	8a 50       	subi	r24, 0x0A	; 10
    ceea:	10 f0       	brcs	.+4      	; 0xcef0 <isalnum+0xe>
    ceec:	86 5c       	subi	r24, 0xC6	; 198
    ceee:	06 c0       	rjmp	.+12     	; 0xcefc <isalpha>
    cef0:	08 95       	ret

0000cef2 <__ctype_isfalse>:
    cef2:	99 27       	eor	r25, r25
    cef4:	88 27       	eor	r24, r24

0000cef6 <__ctype_istrue>:
    cef6:	08 95       	ret

0000cef8 <isupper>:
    cef8:	85 fd       	sbrc	r24, 5
    cefa:	fb cf       	rjmp	.-10     	; 0xcef2 <__ctype_isfalse>

0000cefc <isalpha>:
    cefc:	80 62       	ori	r24, 0x20	; 32

0000cefe <islower>:
    cefe:	91 11       	cpse	r25, r1
    cf00:	f8 cf       	rjmp	.-16     	; 0xcef2 <__ctype_isfalse>
    cf02:	81 56       	subi	r24, 0x61	; 97
    cf04:	8a 51       	subi	r24, 0x1A	; 26
    cf06:	e0 f7       	brcc	.-8      	; 0xcf00 <islower+0x2>
    cf08:	08 95       	ret

0000cf0a <isxdigit>:
    cf0a:	91 11       	cpse	r25, r1
    cf0c:	f2 cf       	rjmp	.-28     	; 0xcef2 <__ctype_isfalse>
    cf0e:	80 53       	subi	r24, 0x30	; 48
    cf10:	8a 50       	subi	r24, 0x0A	; 10
    cf12:	28 f0       	brcs	.+10     	; 0xcf1e <isxdigit+0x14>
    cf14:	86 5c       	subi	r24, 0xC6	; 198
    cf16:	80 62       	ori	r24, 0x20	; 32
    cf18:	81 56       	subi	r24, 0x61	; 97
    cf1a:	86 50       	subi	r24, 0x06	; 6
    cf1c:	b8 f7       	brcc	.-18     	; 0xcf0c <isxdigit+0x2>
    cf1e:	08 95       	ret

0000cf20 <isspace>:
    cf20:	91 11       	cpse	r25, r1
    cf22:	e7 cf       	rjmp	.-50     	; 0xcef2 <__ctype_isfalse>
    cf24:	80 32       	cpi	r24, 0x20	; 32
    cf26:	19 f0       	breq	.+6      	; 0xcf2e <isspace+0xe>
    cf28:	89 50       	subi	r24, 0x09	; 9
    cf2a:	85 50       	subi	r24, 0x05	; 5
    cf2c:	d0 f7       	brcc	.-12     	; 0xcf22 <isspace+0x2>
    cf2e:	08 95       	ret

0000cf30 <strnlen_P>:
    cf30:	fc 01       	movw	r30, r24
    cf32:	05 90       	lpm	r0, Z+
    cf34:	61 50       	subi	r22, 0x01	; 1
    cf36:	70 40       	sbci	r23, 0x00	; 0
    cf38:	01 10       	cpse	r0, r1
    cf3a:	d8 f7       	brcc	.-10     	; 0xcf32 <strnlen_P+0x2>
    cf3c:	80 95       	com	r24
    cf3e:	90 95       	com	r25
    cf40:	8e 0f       	add	r24, r30
    cf42:	9f 1f       	adc	r25, r31
    cf44:	08 95       	ret

0000cf46 <strcat>:
    cf46:	fb 01       	movw	r30, r22
    cf48:	dc 01       	movw	r26, r24
    cf4a:	0d 90       	ld	r0, X+
    cf4c:	00 20       	and	r0, r0
    cf4e:	e9 f7       	brne	.-6      	; 0xcf4a <strcat+0x4>
    cf50:	11 97       	sbiw	r26, 0x01	; 1
    cf52:	01 90       	ld	r0, Z+
    cf54:	0d 92       	st	X+, r0
    cf56:	00 20       	and	r0, r0
    cf58:	e1 f7       	brne	.-8      	; 0xcf52 <strcat+0xc>
    cf5a:	08 95       	ret

0000cf5c <strchr>:
    cf5c:	fc 01       	movw	r30, r24
    cf5e:	81 91       	ld	r24, Z+
    cf60:	86 17       	cp	r24, r22
    cf62:	21 f0       	breq	.+8      	; 0xcf6c <strchr+0x10>
    cf64:	88 23       	and	r24, r24
    cf66:	d9 f7       	brne	.-10     	; 0xcf5e <strchr+0x2>
    cf68:	99 27       	eor	r25, r25
    cf6a:	08 95       	ret
    cf6c:	31 97       	sbiw	r30, 0x01	; 1
    cf6e:	cf 01       	movw	r24, r30
    cf70:	08 95       	ret

0000cf72 <strcmp>:
    cf72:	fb 01       	movw	r30, r22
    cf74:	dc 01       	movw	r26, r24
    cf76:	8d 91       	ld	r24, X+
    cf78:	01 90       	ld	r0, Z+
    cf7a:	80 19       	sub	r24, r0
    cf7c:	01 10       	cpse	r0, r1
    cf7e:	d9 f3       	breq	.-10     	; 0xcf76 <strcmp+0x4>
    cf80:	99 0b       	sbc	r25, r25
    cf82:	08 95       	ret

0000cf84 <strncmp>:
    cf84:	fb 01       	movw	r30, r22
    cf86:	dc 01       	movw	r26, r24
    cf88:	41 50       	subi	r20, 0x01	; 1
    cf8a:	50 40       	sbci	r21, 0x00	; 0
    cf8c:	30 f0       	brcs	.+12     	; 0xcf9a <strncmp+0x16>
    cf8e:	8d 91       	ld	r24, X+
    cf90:	01 90       	ld	r0, Z+
    cf92:	80 19       	sub	r24, r0
    cf94:	19 f4       	brne	.+6      	; 0xcf9c <strncmp+0x18>
    cf96:	00 20       	and	r0, r0
    cf98:	b9 f7       	brne	.-18     	; 0xcf88 <strncmp+0x4>
    cf9a:	88 1b       	sub	r24, r24
    cf9c:	99 0b       	sbc	r25, r25
    cf9e:	08 95       	ret

0000cfa0 <strncpy>:
    cfa0:	fb 01       	movw	r30, r22
    cfa2:	dc 01       	movw	r26, r24
    cfa4:	41 50       	subi	r20, 0x01	; 1
    cfa6:	50 40       	sbci	r21, 0x00	; 0
    cfa8:	48 f0       	brcs	.+18     	; 0xcfbc <strncpy+0x1c>
    cfaa:	01 90       	ld	r0, Z+
    cfac:	0d 92       	st	X+, r0
    cfae:	00 20       	and	r0, r0
    cfb0:	c9 f7       	brne	.-14     	; 0xcfa4 <strncpy+0x4>
    cfb2:	01 c0       	rjmp	.+2      	; 0xcfb6 <strncpy+0x16>
    cfb4:	1d 92       	st	X+, r1
    cfb6:	41 50       	subi	r20, 0x01	; 1
    cfb8:	50 40       	sbci	r21, 0x00	; 0
    cfba:	e0 f7       	brcc	.-8      	; 0xcfb4 <strncpy+0x14>
    cfbc:	08 95       	ret

0000cfbe <strnlen>:
    cfbe:	fc 01       	movw	r30, r24
    cfc0:	61 50       	subi	r22, 0x01	; 1
    cfc2:	70 40       	sbci	r23, 0x00	; 0
    cfc4:	01 90       	ld	r0, Z+
    cfc6:	01 10       	cpse	r0, r1
    cfc8:	d8 f7       	brcc	.-10     	; 0xcfc0 <strnlen+0x2>
    cfca:	80 95       	com	r24
    cfcc:	90 95       	com	r25
    cfce:	8e 0f       	add	r24, r30
    cfd0:	9f 1f       	adc	r25, r31
    cfd2:	08 95       	ret

0000cfd4 <itoa>:
    cfd4:	fb 01       	movw	r30, r22
    cfd6:	9f 01       	movw	r18, r30
    cfd8:	e8 94       	clt
    cfda:	42 30       	cpi	r20, 0x02	; 2
    cfdc:	c4 f0       	brlt	.+48     	; 0xd00e <itoa+0x3a>
    cfde:	45 32       	cpi	r20, 0x25	; 37
    cfe0:	b4 f4       	brge	.+44     	; 0xd00e <itoa+0x3a>
    cfe2:	4a 30       	cpi	r20, 0x0A	; 10
    cfe4:	29 f4       	brne	.+10     	; 0xcff0 <itoa+0x1c>
    cfe6:	97 fb       	bst	r25, 7
    cfe8:	1e f4       	brtc	.+6      	; 0xcff0 <itoa+0x1c>
    cfea:	90 95       	com	r25
    cfec:	81 95       	neg	r24
    cfee:	9f 4f       	sbci	r25, 0xFF	; 255
    cff0:	64 2f       	mov	r22, r20
    cff2:	77 27       	eor	r23, r23
    cff4:	0e 94 08 66 	call	0xcc10	; 0xcc10 <__udivmodhi4>
    cff8:	80 5d       	subi	r24, 0xD0	; 208
    cffa:	8a 33       	cpi	r24, 0x3A	; 58
    cffc:	0c f0       	brlt	.+2      	; 0xd000 <itoa+0x2c>
    cffe:	89 5d       	subi	r24, 0xD9	; 217
    d000:	81 93       	st	Z+, r24
    d002:	cb 01       	movw	r24, r22
    d004:	00 97       	sbiw	r24, 0x00	; 0
    d006:	a1 f7       	brne	.-24     	; 0xcff0 <itoa+0x1c>
    d008:	16 f4       	brtc	.+4      	; 0xd00e <itoa+0x3a>
    d00a:	5d e2       	ldi	r21, 0x2D	; 45
    d00c:	51 93       	st	Z+, r21
    d00e:	10 82       	st	Z, r1
    d010:	c9 01       	movw	r24, r18
    d012:	0c 94 9d 6f 	jmp	0xdf3a	; 0xdf3a <strrev>

0000d016 <__mulhi_const_10>:
    d016:	7a e0       	ldi	r23, 0x0A	; 10
    d018:	97 9f       	mul	r25, r23
    d01a:	90 2d       	mov	r25, r0
    d01c:	87 9f       	mul	r24, r23
    d01e:	80 2d       	mov	r24, r0
    d020:	91 0d       	add	r25, r1
    d022:	11 24       	eor	r1, r1
    d024:	08 95       	ret

0000d026 <fgets>:
    d026:	cf 92       	push	r12
    d028:	df 92       	push	r13
    d02a:	ef 92       	push	r14
    d02c:	ff 92       	push	r15
    d02e:	0f 93       	push	r16
    d030:	1f 93       	push	r17
    d032:	cf 93       	push	r28
    d034:	df 93       	push	r29
    d036:	7c 01       	movw	r14, r24
    d038:	6a 01       	movw	r12, r20
    d03a:	fa 01       	movw	r30, r20
    d03c:	83 81       	ldd	r24, Z+3	; 0x03
    d03e:	80 ff       	sbrs	r24, 0
    d040:	19 c0       	rjmp	.+50     	; 0xd074 <fgets+0x4e>
    d042:	16 16       	cp	r1, r22
    d044:	17 06       	cpc	r1, r23
    d046:	b4 f4       	brge	.+44     	; 0xd074 <fgets+0x4e>
    d048:	eb 01       	movw	r28, r22
    d04a:	21 97       	sbiw	r28, 0x01	; 1
    d04c:	87 01       	movw	r16, r14
    d04e:	0d c0       	rjmp	.+26     	; 0xd06a <fgets+0x44>
    d050:	c6 01       	movw	r24, r12
    d052:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d056:	ff ef       	ldi	r31, 0xFF	; 255
    d058:	8f 3f       	cpi	r24, 0xFF	; 255
    d05a:	9f 07       	cpc	r25, r31
    d05c:	59 f0       	breq	.+22     	; 0xd074 <fgets+0x4e>
    d05e:	f8 01       	movw	r30, r16
    d060:	81 93       	st	Z+, r24
    d062:	8f 01       	movw	r16, r30
    d064:	0a 97       	sbiw	r24, 0x0a	; 10
    d066:	19 f0       	breq	.+6      	; 0xd06e <fgets+0x48>
    d068:	21 97       	sbiw	r28, 0x01	; 1
    d06a:	20 97       	sbiw	r28, 0x00	; 0
    d06c:	89 f7       	brne	.-30     	; 0xd050 <fgets+0x2a>
    d06e:	f8 01       	movw	r30, r16
    d070:	10 82       	st	Z, r1
    d072:	02 c0       	rjmp	.+4      	; 0xd078 <fgets+0x52>
    d074:	ee 24       	eor	r14, r14
    d076:	ff 24       	eor	r15, r15
    d078:	c7 01       	movw	r24, r14
    d07a:	df 91       	pop	r29
    d07c:	cf 91       	pop	r28
    d07e:	1f 91       	pop	r17
    d080:	0f 91       	pop	r16
    d082:	ff 90       	pop	r15
    d084:	ef 90       	pop	r14
    d086:	df 90       	pop	r13
    d088:	cf 90       	pop	r12
    d08a:	08 95       	ret

0000d08c <fprintf>:
    d08c:	df 93       	push	r29
    d08e:	cf 93       	push	r28
    d090:	cd b7       	in	r28, 0x3d	; 61
    d092:	de b7       	in	r29, 0x3e	; 62
    d094:	9e 01       	movw	r18, r28
    d096:	27 5f       	subi	r18, 0xF7	; 247
    d098:	3f 4f       	sbci	r19, 0xFF	; 255
    d09a:	8d 81       	ldd	r24, Y+5	; 0x05
    d09c:	9e 81       	ldd	r25, Y+6	; 0x06
    d09e:	6f 81       	ldd	r22, Y+7	; 0x07
    d0a0:	78 85       	ldd	r23, Y+8	; 0x08
    d0a2:	a9 01       	movw	r20, r18
    d0a4:	0e 94 12 5d 	call	0xba24	; 0xba24 <vfprintf>
    d0a8:	cf 91       	pop	r28
    d0aa:	df 91       	pop	r29
    d0ac:	08 95       	ret

0000d0ae <fputc>:
    d0ae:	0f 93       	push	r16
    d0b0:	1f 93       	push	r17
    d0b2:	cf 93       	push	r28
    d0b4:	df 93       	push	r29
    d0b6:	8c 01       	movw	r16, r24
    d0b8:	eb 01       	movw	r28, r22
    d0ba:	8b 81       	ldd	r24, Y+3	; 0x03
    d0bc:	81 ff       	sbrs	r24, 1
    d0be:	1b c0       	rjmp	.+54     	; 0xd0f6 <fputc+0x48>
    d0c0:	82 ff       	sbrs	r24, 2
    d0c2:	0d c0       	rjmp	.+26     	; 0xd0de <fputc+0x30>
    d0c4:	2e 81       	ldd	r18, Y+6	; 0x06
    d0c6:	3f 81       	ldd	r19, Y+7	; 0x07
    d0c8:	8c 81       	ldd	r24, Y+4	; 0x04
    d0ca:	9d 81       	ldd	r25, Y+5	; 0x05
    d0cc:	28 17       	cp	r18, r24
    d0ce:	39 07       	cpc	r19, r25
    d0d0:	64 f4       	brge	.+24     	; 0xd0ea <fputc+0x3c>
    d0d2:	e8 81       	ld	r30, Y
    d0d4:	f9 81       	ldd	r31, Y+1	; 0x01
    d0d6:	01 93       	st	Z+, r16
    d0d8:	f9 83       	std	Y+1, r31	; 0x01
    d0da:	e8 83       	st	Y, r30
    d0dc:	06 c0       	rjmp	.+12     	; 0xd0ea <fputc+0x3c>
    d0de:	e8 85       	ldd	r30, Y+8	; 0x08
    d0e0:	f9 85       	ldd	r31, Y+9	; 0x09
    d0e2:	80 2f       	mov	r24, r16
    d0e4:	09 95       	icall
    d0e6:	89 2b       	or	r24, r25
    d0e8:	31 f4       	brne	.+12     	; 0xd0f6 <fputc+0x48>
    d0ea:	8e 81       	ldd	r24, Y+6	; 0x06
    d0ec:	9f 81       	ldd	r25, Y+7	; 0x07
    d0ee:	01 96       	adiw	r24, 0x01	; 1
    d0f0:	9f 83       	std	Y+7, r25	; 0x07
    d0f2:	8e 83       	std	Y+6, r24	; 0x06
    d0f4:	02 c0       	rjmp	.+4      	; 0xd0fa <fputc+0x4c>
    d0f6:	0f ef       	ldi	r16, 0xFF	; 255
    d0f8:	1f ef       	ldi	r17, 0xFF	; 255
    d0fa:	c8 01       	movw	r24, r16
    d0fc:	df 91       	pop	r29
    d0fe:	cf 91       	pop	r28
    d100:	1f 91       	pop	r17
    d102:	0f 91       	pop	r16
    d104:	08 95       	ret

0000d106 <fputs>:
    d106:	ef 92       	push	r14
    d108:	ff 92       	push	r15
    d10a:	0f 93       	push	r16
    d10c:	1f 93       	push	r17
    d10e:	cf 93       	push	r28
    d110:	df 93       	push	r29
    d112:	7c 01       	movw	r14, r24
    d114:	8b 01       	movw	r16, r22
    d116:	db 01       	movw	r26, r22
    d118:	13 96       	adiw	r26, 0x03	; 3
    d11a:	8c 91       	ld	r24, X
    d11c:	81 fd       	sbrc	r24, 1
    d11e:	03 c0       	rjmp	.+6      	; 0xd126 <fputs+0x20>
    d120:	cf ef       	ldi	r28, 0xFF	; 255
    d122:	df ef       	ldi	r29, 0xFF	; 255
    d124:	13 c0       	rjmp	.+38     	; 0xd14c <fputs+0x46>
    d126:	c0 e0       	ldi	r28, 0x00	; 0
    d128:	d0 e0       	ldi	r29, 0x00	; 0
    d12a:	0b c0       	rjmp	.+22     	; 0xd142 <fputs+0x3c>
    d12c:	d8 01       	movw	r26, r16
    d12e:	18 96       	adiw	r26, 0x08	; 8
    d130:	ed 91       	ld	r30, X+
    d132:	fc 91       	ld	r31, X
    d134:	19 97       	sbiw	r26, 0x09	; 9
    d136:	b8 01       	movw	r22, r16
    d138:	09 95       	icall
    d13a:	89 2b       	or	r24, r25
    d13c:	11 f0       	breq	.+4      	; 0xd142 <fputs+0x3c>
    d13e:	cf ef       	ldi	r28, 0xFF	; 255
    d140:	df ef       	ldi	r29, 0xFF	; 255
    d142:	f7 01       	movw	r30, r14
    d144:	81 91       	ld	r24, Z+
    d146:	7f 01       	movw	r14, r30
    d148:	88 23       	and	r24, r24
    d14a:	81 f7       	brne	.-32     	; 0xd12c <fputs+0x26>
    d14c:	ce 01       	movw	r24, r28
    d14e:	df 91       	pop	r29
    d150:	cf 91       	pop	r28
    d152:	1f 91       	pop	r17
    d154:	0f 91       	pop	r16
    d156:	ff 90       	pop	r15
    d158:	ef 90       	pop	r14
    d15a:	08 95       	ret

0000d15c <fscanf>:
    d15c:	df 93       	push	r29
    d15e:	cf 93       	push	r28
    d160:	cd b7       	in	r28, 0x3d	; 61
    d162:	de b7       	in	r29, 0x3e	; 62
    d164:	9e 01       	movw	r18, r28
    d166:	27 5f       	subi	r18, 0xF7	; 247
    d168:	3f 4f       	sbci	r19, 0xFF	; 255
    d16a:	8d 81       	ldd	r24, Y+5	; 0x05
    d16c:	9e 81       	ldd	r25, Y+6	; 0x06
    d16e:	6f 81       	ldd	r22, Y+7	; 0x07
    d170:	78 85       	ldd	r23, Y+8	; 0x08
    d172:	a9 01       	movw	r20, r18
    d174:	0e 94 67 6b 	call	0xd6ce	; 0xd6ce <vfscanf>
    d178:	cf 91       	pop	r28
    d17a:	df 91       	pop	r29
    d17c:	08 95       	ret

0000d17e <printf>:
    d17e:	df 93       	push	r29
    d180:	cf 93       	push	r28
    d182:	cd b7       	in	r28, 0x3d	; 61
    d184:	de b7       	in	r29, 0x3e	; 62
    d186:	fe 01       	movw	r30, r28
    d188:	35 96       	adiw	r30, 0x05	; 5
    d18a:	61 91       	ld	r22, Z+
    d18c:	71 91       	ld	r23, Z+
    d18e:	80 91 2f 17 	lds	r24, 0x172F
    d192:	90 91 30 17 	lds	r25, 0x1730
    d196:	af 01       	movw	r20, r30
    d198:	0e 94 12 5d 	call	0xba24	; 0xba24 <vfprintf>
    d19c:	cf 91       	pop	r28
    d19e:	df 91       	pop	r29
    d1a0:	08 95       	ret

0000d1a2 <puts>:
    d1a2:	0f 93       	push	r16
    d1a4:	1f 93       	push	r17
    d1a6:	cf 93       	push	r28
    d1a8:	df 93       	push	r29
    d1aa:	8c 01       	movw	r16, r24
    d1ac:	e0 91 2f 17 	lds	r30, 0x172F
    d1b0:	f0 91 30 17 	lds	r31, 0x1730
    d1b4:	83 81       	ldd	r24, Z+3	; 0x03
    d1b6:	81 ff       	sbrs	r24, 1
    d1b8:	21 c0       	rjmp	.+66     	; 0xd1fc <puts+0x5a>
    d1ba:	c0 e0       	ldi	r28, 0x00	; 0
    d1bc:	d0 e0       	ldi	r29, 0x00	; 0
    d1be:	0d c0       	rjmp	.+26     	; 0xd1da <puts+0x38>
    d1c0:	e0 91 2f 17 	lds	r30, 0x172F
    d1c4:	f0 91 30 17 	lds	r31, 0x1730
    d1c8:	20 85       	ldd	r18, Z+8	; 0x08
    d1ca:	31 85       	ldd	r19, Z+9	; 0x09
    d1cc:	bf 01       	movw	r22, r30
    d1ce:	f9 01       	movw	r30, r18
    d1d0:	09 95       	icall
    d1d2:	89 2b       	or	r24, r25
    d1d4:	11 f0       	breq	.+4      	; 0xd1da <puts+0x38>
    d1d6:	cf ef       	ldi	r28, 0xFF	; 255
    d1d8:	df ef       	ldi	r29, 0xFF	; 255
    d1da:	f8 01       	movw	r30, r16
    d1dc:	81 91       	ld	r24, Z+
    d1de:	8f 01       	movw	r16, r30
    d1e0:	88 23       	and	r24, r24
    d1e2:	71 f7       	brne	.-36     	; 0xd1c0 <puts+0x1e>
    d1e4:	e0 91 2f 17 	lds	r30, 0x172F
    d1e8:	f0 91 30 17 	lds	r31, 0x1730
    d1ec:	20 85       	ldd	r18, Z+8	; 0x08
    d1ee:	31 85       	ldd	r19, Z+9	; 0x09
    d1f0:	8a e0       	ldi	r24, 0x0A	; 10
    d1f2:	bf 01       	movw	r22, r30
    d1f4:	f9 01       	movw	r30, r18
    d1f6:	09 95       	icall
    d1f8:	89 2b       	or	r24, r25
    d1fa:	11 f0       	breq	.+4      	; 0xd200 <puts+0x5e>
    d1fc:	cf ef       	ldi	r28, 0xFF	; 255
    d1fe:	df ef       	ldi	r29, 0xFF	; 255
    d200:	ce 01       	movw	r24, r28
    d202:	df 91       	pop	r29
    d204:	cf 91       	pop	r28
    d206:	1f 91       	pop	r17
    d208:	0f 91       	pop	r16
    d20a:	08 95       	ret

0000d20c <sprintf>:
    d20c:	0f 93       	push	r16
    d20e:	1f 93       	push	r17
    d210:	df 93       	push	r29
    d212:	cf 93       	push	r28
    d214:	cd b7       	in	r28, 0x3d	; 61
    d216:	de b7       	in	r29, 0x3e	; 62
    d218:	2e 97       	sbiw	r28, 0x0e	; 14
    d21a:	0f b6       	in	r0, 0x3f	; 63
    d21c:	f8 94       	cli
    d21e:	de bf       	out	0x3e, r29	; 62
    d220:	0f be       	out	0x3f, r0	; 63
    d222:	cd bf       	out	0x3d, r28	; 61
    d224:	0d 89       	ldd	r16, Y+21	; 0x15
    d226:	1e 89       	ldd	r17, Y+22	; 0x16
    d228:	86 e0       	ldi	r24, 0x06	; 6
    d22a:	8c 83       	std	Y+4, r24	; 0x04
    d22c:	1a 83       	std	Y+2, r17	; 0x02
    d22e:	09 83       	std	Y+1, r16	; 0x01
    d230:	8f ef       	ldi	r24, 0xFF	; 255
    d232:	9f e7       	ldi	r25, 0x7F	; 127
    d234:	9e 83       	std	Y+6, r25	; 0x06
    d236:	8d 83       	std	Y+5, r24	; 0x05
    d238:	9e 01       	movw	r18, r28
    d23a:	27 5e       	subi	r18, 0xE7	; 231
    d23c:	3f 4f       	sbci	r19, 0xFF	; 255
    d23e:	ce 01       	movw	r24, r28
    d240:	01 96       	adiw	r24, 0x01	; 1
    d242:	6f 89       	ldd	r22, Y+23	; 0x17
    d244:	78 8d       	ldd	r23, Y+24	; 0x18
    d246:	a9 01       	movw	r20, r18
    d248:	0e 94 12 5d 	call	0xba24	; 0xba24 <vfprintf>
    d24c:	2f 81       	ldd	r18, Y+7	; 0x07
    d24e:	38 85       	ldd	r19, Y+8	; 0x08
    d250:	02 0f       	add	r16, r18
    d252:	13 1f       	adc	r17, r19
    d254:	f8 01       	movw	r30, r16
    d256:	10 82       	st	Z, r1
    d258:	2e 96       	adiw	r28, 0x0e	; 14
    d25a:	0f b6       	in	r0, 0x3f	; 63
    d25c:	f8 94       	cli
    d25e:	de bf       	out	0x3e, r29	; 62
    d260:	0f be       	out	0x3f, r0	; 63
    d262:	cd bf       	out	0x3d, r28	; 61
    d264:	cf 91       	pop	r28
    d266:	df 91       	pop	r29
    d268:	1f 91       	pop	r17
    d26a:	0f 91       	pop	r16
    d26c:	08 95       	ret

0000d26e <sscanf>:
    d26e:	df 93       	push	r29
    d270:	cf 93       	push	r28
    d272:	cd b7       	in	r28, 0x3d	; 61
    d274:	de b7       	in	r29, 0x3e	; 62
    d276:	2e 97       	sbiw	r28, 0x0e	; 14
    d278:	0f b6       	in	r0, 0x3f	; 63
    d27a:	f8 94       	cli
    d27c:	de bf       	out	0x3e, r29	; 62
    d27e:	0f be       	out	0x3f, r0	; 63
    d280:	cd bf       	out	0x3d, r28	; 61
    d282:	85 e0       	ldi	r24, 0x05	; 5
    d284:	8c 83       	std	Y+4, r24	; 0x04
    d286:	8b 89       	ldd	r24, Y+19	; 0x13
    d288:	9c 89       	ldd	r25, Y+20	; 0x14
    d28a:	9a 83       	std	Y+2, r25	; 0x02
    d28c:	89 83       	std	Y+1, r24	; 0x01
    d28e:	9e 01       	movw	r18, r28
    d290:	29 5e       	subi	r18, 0xE9	; 233
    d292:	3f 4f       	sbci	r19, 0xFF	; 255
    d294:	ce 01       	movw	r24, r28
    d296:	01 96       	adiw	r24, 0x01	; 1
    d298:	6d 89       	ldd	r22, Y+21	; 0x15
    d29a:	7e 89       	ldd	r23, Y+22	; 0x16
    d29c:	a9 01       	movw	r20, r18
    d29e:	0e 94 67 6b 	call	0xd6ce	; 0xd6ce <vfscanf>
    d2a2:	2e 96       	adiw	r28, 0x0e	; 14
    d2a4:	0f b6       	in	r0, 0x3f	; 63
    d2a6:	f8 94       	cli
    d2a8:	de bf       	out	0x3e, r29	; 62
    d2aa:	0f be       	out	0x3f, r0	; 63
    d2ac:	cd bf       	out	0x3d, r28	; 61
    d2ae:	cf 91       	pop	r28
    d2b0:	df 91       	pop	r29
    d2b2:	08 95       	ret

0000d2b4 <__ultoa_invert>:
    d2b4:	fa 01       	movw	r30, r20
    d2b6:	aa 27       	eor	r26, r26
    d2b8:	28 30       	cpi	r18, 0x08	; 8
    d2ba:	51 f1       	breq	.+84     	; 0xd310 <__ultoa_invert+0x5c>
    d2bc:	20 31       	cpi	r18, 0x10	; 16
    d2be:	81 f1       	breq	.+96     	; 0xd320 <__ultoa_invert+0x6c>
    d2c0:	e8 94       	clt
    d2c2:	6f 93       	push	r22
    d2c4:	6e 7f       	andi	r22, 0xFE	; 254
    d2c6:	6e 5f       	subi	r22, 0xFE	; 254
    d2c8:	7f 4f       	sbci	r23, 0xFF	; 255
    d2ca:	8f 4f       	sbci	r24, 0xFF	; 255
    d2cc:	9f 4f       	sbci	r25, 0xFF	; 255
    d2ce:	af 4f       	sbci	r26, 0xFF	; 255
    d2d0:	b1 e0       	ldi	r27, 0x01	; 1
    d2d2:	3e d0       	rcall	.+124    	; 0xd350 <__ultoa_invert+0x9c>
    d2d4:	b4 e0       	ldi	r27, 0x04	; 4
    d2d6:	3c d0       	rcall	.+120    	; 0xd350 <__ultoa_invert+0x9c>
    d2d8:	67 0f       	add	r22, r23
    d2da:	78 1f       	adc	r23, r24
    d2dc:	89 1f       	adc	r24, r25
    d2de:	9a 1f       	adc	r25, r26
    d2e0:	a1 1d       	adc	r26, r1
    d2e2:	68 0f       	add	r22, r24
    d2e4:	79 1f       	adc	r23, r25
    d2e6:	8a 1f       	adc	r24, r26
    d2e8:	91 1d       	adc	r25, r1
    d2ea:	a1 1d       	adc	r26, r1
    d2ec:	6a 0f       	add	r22, r26
    d2ee:	71 1d       	adc	r23, r1
    d2f0:	81 1d       	adc	r24, r1
    d2f2:	91 1d       	adc	r25, r1
    d2f4:	a1 1d       	adc	r26, r1
    d2f6:	20 d0       	rcall	.+64     	; 0xd338 <__ultoa_invert+0x84>
    d2f8:	09 f4       	brne	.+2      	; 0xd2fc <__ultoa_invert+0x48>
    d2fa:	68 94       	set
    d2fc:	3f 91       	pop	r19
    d2fe:	2a e0       	ldi	r18, 0x0A	; 10
    d300:	26 9f       	mul	r18, r22
    d302:	11 24       	eor	r1, r1
    d304:	30 19       	sub	r19, r0
    d306:	30 5d       	subi	r19, 0xD0	; 208
    d308:	31 93       	st	Z+, r19
    d30a:	de f6       	brtc	.-74     	; 0xd2c2 <__ultoa_invert+0xe>
    d30c:	cf 01       	movw	r24, r30
    d30e:	08 95       	ret
    d310:	46 2f       	mov	r20, r22
    d312:	47 70       	andi	r20, 0x07	; 7
    d314:	40 5d       	subi	r20, 0xD0	; 208
    d316:	41 93       	st	Z+, r20
    d318:	b3 e0       	ldi	r27, 0x03	; 3
    d31a:	0f d0       	rcall	.+30     	; 0xd33a <__ultoa_invert+0x86>
    d31c:	c9 f7       	brne	.-14     	; 0xd310 <__ultoa_invert+0x5c>
    d31e:	f6 cf       	rjmp	.-20     	; 0xd30c <__ultoa_invert+0x58>
    d320:	46 2f       	mov	r20, r22
    d322:	4f 70       	andi	r20, 0x0F	; 15
    d324:	40 5d       	subi	r20, 0xD0	; 208
    d326:	4a 33       	cpi	r20, 0x3A	; 58
    d328:	18 f0       	brcs	.+6      	; 0xd330 <__ultoa_invert+0x7c>
    d32a:	49 5d       	subi	r20, 0xD9	; 217
    d32c:	31 fd       	sbrc	r19, 1
    d32e:	40 52       	subi	r20, 0x20	; 32
    d330:	41 93       	st	Z+, r20
    d332:	02 d0       	rcall	.+4      	; 0xd338 <__ultoa_invert+0x84>
    d334:	a9 f7       	brne	.-22     	; 0xd320 <__ultoa_invert+0x6c>
    d336:	ea cf       	rjmp	.-44     	; 0xd30c <__ultoa_invert+0x58>
    d338:	b4 e0       	ldi	r27, 0x04	; 4
    d33a:	a6 95       	lsr	r26
    d33c:	97 95       	ror	r25
    d33e:	87 95       	ror	r24
    d340:	77 95       	ror	r23
    d342:	67 95       	ror	r22
    d344:	ba 95       	dec	r27
    d346:	c9 f7       	brne	.-14     	; 0xd33a <__ultoa_invert+0x86>
    d348:	00 97       	sbiw	r24, 0x00	; 0
    d34a:	61 05       	cpc	r22, r1
    d34c:	71 05       	cpc	r23, r1
    d34e:	08 95       	ret
    d350:	9b 01       	movw	r18, r22
    d352:	ac 01       	movw	r20, r24
    d354:	0a 2e       	mov	r0, r26
    d356:	06 94       	lsr	r0
    d358:	57 95       	ror	r21
    d35a:	47 95       	ror	r20
    d35c:	37 95       	ror	r19
    d35e:	27 95       	ror	r18
    d360:	ba 95       	dec	r27
    d362:	c9 f7       	brne	.-14     	; 0xd356 <__ultoa_invert+0xa2>
    d364:	62 0f       	add	r22, r18
    d366:	73 1f       	adc	r23, r19
    d368:	84 1f       	adc	r24, r20
    d36a:	95 1f       	adc	r25, r21
    d36c:	a0 1d       	adc	r26, r0
    d36e:	08 95       	ret

0000d370 <putval>:
    d370:	fc 01       	movw	r30, r24
    d372:	20 fd       	sbrc	r18, 0
    d374:	08 c0       	rjmp	.+16     	; 0xd386 <putval+0x16>
    d376:	23 fd       	sbrc	r18, 3
    d378:	05 c0       	rjmp	.+10     	; 0xd384 <putval+0x14>
    d37a:	22 ff       	sbrs	r18, 2
    d37c:	02 c0       	rjmp	.+4      	; 0xd382 <putval+0x12>
    d37e:	73 83       	std	Z+3, r23	; 0x03
    d380:	62 83       	std	Z+2, r22	; 0x02
    d382:	51 83       	std	Z+1, r21	; 0x01
    d384:	40 83       	st	Z, r20
    d386:	08 95       	ret

0000d388 <mulacc>:
    d388:	ef 92       	push	r14
    d38a:	ff 92       	push	r15
    d38c:	0f 93       	push	r16
    d38e:	1f 93       	push	r17
    d390:	44 ff       	sbrs	r20, 4
    d392:	02 c0       	rjmp	.+4      	; 0xd398 <mulacc+0x10>
    d394:	33 e0       	ldi	r19, 0x03	; 3
    d396:	11 c0       	rjmp	.+34     	; 0xd3ba <mulacc+0x32>
    d398:	46 ff       	sbrs	r20, 6
    d39a:	02 c0       	rjmp	.+4      	; 0xd3a0 <mulacc+0x18>
    d39c:	34 e0       	ldi	r19, 0x04	; 4
    d39e:	0d c0       	rjmp	.+26     	; 0xd3ba <mulacc+0x32>
    d3a0:	db 01       	movw	r26, r22
    d3a2:	fc 01       	movw	r30, r24
    d3a4:	aa 0f       	add	r26, r26
    d3a6:	bb 1f       	adc	r27, r27
    d3a8:	ee 1f       	adc	r30, r30
    d3aa:	ff 1f       	adc	r31, r31
    d3ac:	10 94       	com	r1
    d3ae:	d1 f7       	brne	.-12     	; 0xd3a4 <mulacc+0x1c>
    d3b0:	6a 0f       	add	r22, r26
    d3b2:	7b 1f       	adc	r23, r27
    d3b4:	8e 1f       	adc	r24, r30
    d3b6:	9f 1f       	adc	r25, r31
    d3b8:	31 e0       	ldi	r19, 0x01	; 1
    d3ba:	66 0f       	add	r22, r22
    d3bc:	77 1f       	adc	r23, r23
    d3be:	88 1f       	adc	r24, r24
    d3c0:	99 1f       	adc	r25, r25
    d3c2:	31 50       	subi	r19, 0x01	; 1
    d3c4:	d1 f7       	brne	.-12     	; 0xd3ba <mulacc+0x32>
    d3c6:	7b 01       	movw	r14, r22
    d3c8:	8c 01       	movw	r16, r24
    d3ca:	e2 0e       	add	r14, r18
    d3cc:	f1 1c       	adc	r15, r1
    d3ce:	01 1d       	adc	r16, r1
    d3d0:	11 1d       	adc	r17, r1
    d3d2:	a8 01       	movw	r20, r16
    d3d4:	97 01       	movw	r18, r14
    d3d6:	b7 01       	movw	r22, r14
    d3d8:	ca 01       	movw	r24, r20
    d3da:	1f 91       	pop	r17
    d3dc:	0f 91       	pop	r16
    d3de:	ff 90       	pop	r15
    d3e0:	ef 90       	pop	r14
    d3e2:	08 95       	ret

0000d3e4 <skip_spaces>:
    d3e4:	0f 93       	push	r16
    d3e6:	1f 93       	push	r17
    d3e8:	cf 93       	push	r28
    d3ea:	df 93       	push	r29
    d3ec:	8c 01       	movw	r16, r24
    d3ee:	c8 01       	movw	r24, r16
    d3f0:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d3f4:	ec 01       	movw	r28, r24
    d3f6:	97 fd       	sbrc	r25, 7
    d3f8:	08 c0       	rjmp	.+16     	; 0xd40a <skip_spaces+0x26>
    d3fa:	0e 94 90 67 	call	0xcf20	; 0xcf20 <isspace>
    d3fe:	89 2b       	or	r24, r25
    d400:	b1 f7       	brne	.-20     	; 0xd3ee <skip_spaces+0xa>
    d402:	ce 01       	movw	r24, r28
    d404:	b8 01       	movw	r22, r16
    d406:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <ungetc>
    d40a:	ce 01       	movw	r24, r28
    d40c:	df 91       	pop	r29
    d40e:	cf 91       	pop	r28
    d410:	1f 91       	pop	r17
    d412:	0f 91       	pop	r16
    d414:	08 95       	ret

0000d416 <conv_int>:
    d416:	af 92       	push	r10
    d418:	bf 92       	push	r11
    d41a:	cf 92       	push	r12
    d41c:	df 92       	push	r13
    d41e:	ef 92       	push	r14
    d420:	ff 92       	push	r15
    d422:	0f 93       	push	r16
    d424:	1f 93       	push	r17
    d426:	cf 93       	push	r28
    d428:	df 93       	push	r29
    d42a:	ec 01       	movw	r28, r24
    d42c:	c6 2e       	mov	r12, r22
    d42e:	5a 01       	movw	r10, r20
    d430:	12 2f       	mov	r17, r18
    d432:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d436:	ac 01       	movw	r20, r24
    d438:	8b 32       	cpi	r24, 0x2B	; 43
    d43a:	19 f0       	breq	.+6      	; 0xd442 <conv_int+0x2c>
    d43c:	8d 32       	cpi	r24, 0x2D	; 45
    d43e:	51 f4       	brne	.+20     	; 0xd454 <conv_int+0x3e>
    d440:	10 68       	ori	r17, 0x80	; 128
    d442:	ca 94       	dec	r12
    d444:	09 f4       	brne	.+2      	; 0xd448 <conv_int+0x32>
    d446:	6d c0       	rjmp	.+218    	; 0xd522 <conv_int+0x10c>
    d448:	ce 01       	movw	r24, r28
    d44a:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d44e:	ac 01       	movw	r20, r24
    d450:	97 fd       	sbrc	r25, 7
    d452:	67 c0       	rjmp	.+206    	; 0xd522 <conv_int+0x10c>
    d454:	6d ef       	ldi	r22, 0xFD	; 253
    d456:	d6 2e       	mov	r13, r22
    d458:	d1 22       	and	r13, r17
    d45a:	8d 2d       	mov	r24, r13
    d45c:	80 73       	andi	r24, 0x30	; 48
    d45e:	01 f5       	brne	.+64     	; 0xd4a0 <conv_int+0x8a>
    d460:	40 33       	cpi	r20, 0x30	; 48
    d462:	f1 f4       	brne	.+60     	; 0xd4a0 <conv_int+0x8a>
    d464:	ca 94       	dec	r12
    d466:	09 f4       	brne	.+2      	; 0xd46a <conv_int+0x54>
    d468:	47 c0       	rjmp	.+142    	; 0xd4f8 <conv_int+0xe2>
    d46a:	ce 01       	movw	r24, r28
    d46c:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d470:	ac 01       	movw	r20, r24
    d472:	97 fd       	sbrc	r25, 7
    d474:	41 c0       	rjmp	.+130    	; 0xd4f8 <conv_int+0xe2>
    d476:	82 e0       	ldi	r24, 0x02	; 2
    d478:	d8 2a       	or	r13, r24
    d47a:	48 37       	cpi	r20, 0x78	; 120
    d47c:	11 f0       	breq	.+4      	; 0xd482 <conv_int+0x6c>
    d47e:	48 35       	cpi	r20, 0x58	; 88
    d480:	59 f4       	brne	.+22     	; 0xd498 <conv_int+0x82>
    d482:	80 e4       	ldi	r24, 0x40	; 64
    d484:	d8 2a       	or	r13, r24
    d486:	ca 94       	dec	r12
    d488:	b9 f1       	breq	.+110    	; 0xd4f8 <conv_int+0xe2>
    d48a:	ce 01       	movw	r24, r28
    d48c:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d490:	ac 01       	movw	r20, r24
    d492:	99 23       	and	r25, r25
    d494:	2c f4       	brge	.+10     	; 0xd4a0 <conv_int+0x8a>
    d496:	30 c0       	rjmp	.+96     	; 0xd4f8 <conv_int+0xe2>
    d498:	d6 fc       	sbrc	r13, 6
    d49a:	02 c0       	rjmp	.+4      	; 0xd4a0 <conv_int+0x8a>
    d49c:	80 e1       	ldi	r24, 0x10	; 16
    d49e:	d8 2a       	or	r13, r24
    d4a0:	ee 24       	eor	r14, r14
    d4a2:	ff 24       	eor	r15, r15
    d4a4:	87 01       	movw	r16, r14
    d4a6:	24 2f       	mov	r18, r20
    d4a8:	20 53       	subi	r18, 0x30	; 48
    d4aa:	28 30       	cpi	r18, 0x08	; 8
    d4ac:	88 f0       	brcs	.+34     	; 0xd4d0 <conv_int+0xba>
    d4ae:	d4 fc       	sbrc	r13, 4
    d4b0:	09 c0       	rjmp	.+18     	; 0xd4c4 <conv_int+0xae>
    d4b2:	2a 30       	cpi	r18, 0x0A	; 10
    d4b4:	68 f0       	brcs	.+26     	; 0xd4d0 <conv_int+0xba>
    d4b6:	d6 fe       	sbrs	r13, 6
    d4b8:	05 c0       	rjmp	.+10     	; 0xd4c4 <conv_int+0xae>
    d4ba:	2f 7d       	andi	r18, 0xDF	; 223
    d4bc:	82 2f       	mov	r24, r18
    d4be:	81 51       	subi	r24, 0x11	; 17
    d4c0:	86 30       	cpi	r24, 0x06	; 6
    d4c2:	28 f0       	brcs	.+10     	; 0xd4ce <conv_int+0xb8>
    d4c4:	ca 01       	movw	r24, r20
    d4c6:	be 01       	movw	r22, r28
    d4c8:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <ungetc>
    d4cc:	12 c0       	rjmp	.+36     	; 0xd4f2 <conv_int+0xdc>
    d4ce:	27 50       	subi	r18, 0x07	; 7
    d4d0:	c8 01       	movw	r24, r16
    d4d2:	b7 01       	movw	r22, r14
    d4d4:	4d 2d       	mov	r20, r13
    d4d6:	0e 94 c4 69 	call	0xd388	; 0xd388 <mulacc>
    d4da:	7b 01       	movw	r14, r22
    d4dc:	8c 01       	movw	r16, r24
    d4de:	82 e0       	ldi	r24, 0x02	; 2
    d4e0:	d8 2a       	or	r13, r24
    d4e2:	ca 94       	dec	r12
    d4e4:	61 f0       	breq	.+24     	; 0xd4fe <conv_int+0xe8>
    d4e6:	ce 01       	movw	r24, r28
    d4e8:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d4ec:	ac 01       	movw	r20, r24
    d4ee:	97 ff       	sbrs	r25, 7
    d4f0:	da cf       	rjmp	.-76     	; 0xd4a6 <conv_int+0x90>
    d4f2:	d1 fc       	sbrc	r13, 1
    d4f4:	04 c0       	rjmp	.+8      	; 0xd4fe <conv_int+0xe8>
    d4f6:	15 c0       	rjmp	.+42     	; 0xd522 <conv_int+0x10c>
    d4f8:	ee 24       	eor	r14, r14
    d4fa:	ff 24       	eor	r15, r15
    d4fc:	87 01       	movw	r16, r14
    d4fe:	d7 fe       	sbrs	r13, 7
    d500:	08 c0       	rjmp	.+16     	; 0xd512 <conv_int+0xfc>
    d502:	10 95       	com	r17
    d504:	00 95       	com	r16
    d506:	f0 94       	com	r15
    d508:	e0 94       	com	r14
    d50a:	e1 1c       	adc	r14, r1
    d50c:	f1 1c       	adc	r15, r1
    d50e:	01 1d       	adc	r16, r1
    d510:	11 1d       	adc	r17, r1
    d512:	c5 01       	movw	r24, r10
    d514:	b8 01       	movw	r22, r16
    d516:	a7 01       	movw	r20, r14
    d518:	2d 2d       	mov	r18, r13
    d51a:	0e 94 b8 69 	call	0xd370	; 0xd370 <putval>
    d51e:	81 e0       	ldi	r24, 0x01	; 1
    d520:	01 c0       	rjmp	.+2      	; 0xd524 <conv_int+0x10e>
    d522:	80 e0       	ldi	r24, 0x00	; 0
    d524:	df 91       	pop	r29
    d526:	cf 91       	pop	r28
    d528:	1f 91       	pop	r17
    d52a:	0f 91       	pop	r16
    d52c:	ff 90       	pop	r15
    d52e:	ef 90       	pop	r14
    d530:	df 90       	pop	r13
    d532:	cf 90       	pop	r12
    d534:	bf 90       	pop	r11
    d536:	af 90       	pop	r10
    d538:	08 95       	ret

0000d53a <conv_brk>:
    d53a:	6f 92       	push	r6
    d53c:	7f 92       	push	r7
    d53e:	8f 92       	push	r8
    d540:	9f 92       	push	r9
    d542:	af 92       	push	r10
    d544:	bf 92       	push	r11
    d546:	cf 92       	push	r12
    d548:	df 92       	push	r13
    d54a:	ef 92       	push	r14
    d54c:	ff 92       	push	r15
    d54e:	0f 93       	push	r16
    d550:	1f 93       	push	r17
    d552:	df 93       	push	r29
    d554:	cf 93       	push	r28
    d556:	cd b7       	in	r28, 0x3d	; 61
    d558:	de b7       	in	r29, 0x3e	; 62
    d55a:	a0 97       	sbiw	r28, 0x20	; 32
    d55c:	0f b6       	in	r0, 0x3f	; 63
    d55e:	f8 94       	cli
    d560:	de bf       	out	0x3e, r29	; 62
    d562:	0f be       	out	0x3f, r0	; 63
    d564:	cd bf       	out	0x3d, r28	; 61
    d566:	6c 01       	movw	r12, r24
    d568:	a6 2e       	mov	r10, r22
    d56a:	8a 01       	movw	r16, r20
    d56c:	79 01       	movw	r14, r18
    d56e:	fe 01       	movw	r30, r28
    d570:	31 96       	adiw	r30, 0x01	; 1
    d572:	80 e2       	ldi	r24, 0x20	; 32
    d574:	df 01       	movw	r26, r30
    d576:	1d 92       	st	X+, r1
    d578:	8a 95       	dec	r24
    d57a:	e9 f7       	brne	.-6      	; 0xd576 <conv_brk+0x3c>
    d57c:	70 e0       	ldi	r23, 0x00	; 0
    d57e:	30 e0       	ldi	r19, 0x00	; 0
    d580:	60 e0       	ldi	r22, 0x00	; 0
    d582:	40 e0       	ldi	r20, 0x00	; 0
    d584:	50 e0       	ldi	r21, 0x00	; 0
    d586:	4f 01       	movw	r8, r30
    d588:	a1 e0       	ldi	r26, 0x01	; 1
    d58a:	b0 e0       	ldi	r27, 0x00	; 0
    d58c:	f6 01       	movw	r30, r12
    d58e:	83 81       	ldd	r24, Z+3	; 0x03
    d590:	f7 01       	movw	r30, r14
    d592:	83 fd       	sbrc	r24, 3
    d594:	25 91       	lpm	r18, Z+
    d596:	83 ff       	sbrs	r24, 3
    d598:	21 91       	ld	r18, Z+
    d59a:	7f 01       	movw	r14, r30
    d59c:	22 23       	and	r18, r18
    d59e:	09 f4       	brne	.+2      	; 0xd5a2 <conv_brk+0x68>
    d5a0:	7e c0       	rjmp	.+252    	; 0xd69e <conv_brk+0x164>
    d5a2:	2e 35       	cpi	r18, 0x5E	; 94
    d5a4:	19 f4       	brne	.+6      	; 0xd5ac <conv_brk+0x72>
    d5a6:	41 15       	cp	r20, r1
    d5a8:	51 05       	cpc	r21, r1
    d5aa:	69 f1       	breq	.+90     	; 0xd606 <conv_brk+0xcc>
    d5ac:	87 2f       	mov	r24, r23
    d5ae:	90 e0       	ldi	r25, 0x00	; 0
    d5b0:	84 17       	cp	r24, r20
    d5b2:	95 07       	cpc	r25, r21
    d5b4:	44 f4       	brge	.+16     	; 0xd5c6 <conv_brk+0x8c>
    d5b6:	2d 35       	cpi	r18, 0x5D	; 93
    d5b8:	51 f1       	breq	.+84     	; 0xd60e <conv_brk+0xd4>
    d5ba:	2d 32       	cpi	r18, 0x2D	; 45
    d5bc:	21 f4       	brne	.+8      	; 0xd5c6 <conv_brk+0x8c>
    d5be:	33 23       	and	r19, r19
    d5c0:	29 f4       	brne	.+10     	; 0xd5cc <conv_brk+0x92>
    d5c2:	31 e0       	ldi	r19, 0x01	; 1
    d5c4:	21 c0       	rjmp	.+66     	; 0xd608 <conv_brk+0xce>
    d5c6:	33 23       	and	r19, r19
    d5c8:	09 f4       	brne	.+2      	; 0xd5cc <conv_brk+0x92>
    d5ca:	62 2f       	mov	r22, r18
    d5cc:	32 2f       	mov	r19, r18
    d5ce:	83 2f       	mov	r24, r19
    d5d0:	86 95       	lsr	r24
    d5d2:	86 95       	lsr	r24
    d5d4:	86 95       	lsr	r24
    d5d6:	f4 01       	movw	r30, r8
    d5d8:	e8 0f       	add	r30, r24
    d5da:	f1 1d       	adc	r31, r1
    d5dc:	83 2f       	mov	r24, r19
    d5de:	87 70       	andi	r24, 0x07	; 7
    d5e0:	3d 01       	movw	r6, r26
    d5e2:	02 c0       	rjmp	.+4      	; 0xd5e8 <conv_brk+0xae>
    d5e4:	66 0c       	add	r6, r6
    d5e6:	77 1c       	adc	r7, r7
    d5e8:	8a 95       	dec	r24
    d5ea:	e2 f7       	brpl	.-8      	; 0xd5e4 <conv_brk+0xaa>
    d5ec:	20 81       	ld	r18, Z
    d5ee:	26 29       	or	r18, r6
    d5f0:	20 83       	st	Z, r18
    d5f2:	36 17       	cp	r19, r22
    d5f4:	11 f4       	brne	.+4      	; 0xd5fa <conv_brk+0xc0>
    d5f6:	30 e0       	ldi	r19, 0x00	; 0
    d5f8:	07 c0       	rjmp	.+14     	; 0xd608 <conv_brk+0xce>
    d5fa:	36 17       	cp	r19, r22
    d5fc:	10 f4       	brcc	.+4      	; 0xd602 <conv_brk+0xc8>
    d5fe:	3f 5f       	subi	r19, 0xFF	; 255
    d600:	e6 cf       	rjmp	.-52     	; 0xd5ce <conv_brk+0x94>
    d602:	31 50       	subi	r19, 0x01	; 1
    d604:	e4 cf       	rjmp	.-56     	; 0xd5ce <conv_brk+0x94>
    d606:	71 e0       	ldi	r23, 0x01	; 1
    d608:	4f 5f       	subi	r20, 0xFF	; 255
    d60a:	5f 4f       	sbci	r21, 0xFF	; 255
    d60c:	bf cf       	rjmp	.-130    	; 0xd58c <conv_brk+0x52>
    d60e:	33 23       	and	r19, r19
    d610:	19 f0       	breq	.+6      	; 0xd618 <conv_brk+0xde>
    d612:	8e 81       	ldd	r24, Y+6	; 0x06
    d614:	80 62       	ori	r24, 0x20	; 32
    d616:	8e 83       	std	Y+6, r24	; 0x06
    d618:	77 23       	and	r23, r23
    d61a:	59 f0       	breq	.+22     	; 0xd632 <conv_brk+0xf8>
    d61c:	fe 01       	movw	r30, r28
    d61e:	31 96       	adiw	r30, 0x01	; 1
    d620:	9e 01       	movw	r18, r28
    d622:	2f 5d       	subi	r18, 0xDF	; 223
    d624:	3f 4f       	sbci	r19, 0xFF	; 255
    d626:	80 81       	ld	r24, Z
    d628:	80 95       	com	r24
    d62a:	81 93       	st	Z+, r24
    d62c:	e2 17       	cp	r30, r18
    d62e:	f3 07       	cpc	r31, r19
    d630:	d1 f7       	brne	.-12     	; 0xd626 <conv_brk+0xec>
    d632:	bb 24       	eor	r11, r11
    d634:	b3 94       	inc	r11
    d636:	4e 01       	movw	r8, r28
    d638:	08 94       	sec
    d63a:	81 1c       	adc	r8, r1
    d63c:	91 1c       	adc	r9, r1
    d63e:	c6 01       	movw	r24, r12
    d640:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d644:	ac 01       	movw	r20, r24
    d646:	97 fd       	sbrc	r25, 7
    d648:	22 c0       	rjmp	.+68     	; 0xd68e <conv_brk+0x154>
    d64a:	86 95       	lsr	r24
    d64c:	86 95       	lsr	r24
    d64e:	86 95       	lsr	r24
    d650:	f4 01       	movw	r30, r8
    d652:	e8 0f       	add	r30, r24
    d654:	f1 1d       	adc	r31, r1
    d656:	80 81       	ld	r24, Z
    d658:	90 e0       	ldi	r25, 0x00	; 0
    d65a:	9a 01       	movw	r18, r20
    d65c:	27 70       	andi	r18, 0x07	; 7
    d65e:	30 70       	andi	r19, 0x00	; 0
    d660:	02 c0       	rjmp	.+4      	; 0xd666 <conv_brk+0x12c>
    d662:	95 95       	asr	r25
    d664:	87 95       	ror	r24
    d666:	2a 95       	dec	r18
    d668:	e2 f7       	brpl	.-8      	; 0xd662 <conv_brk+0x128>
    d66a:	80 fd       	sbrc	r24, 0
    d66c:	05 c0       	rjmp	.+10     	; 0xd678 <conv_brk+0x13e>
    d66e:	ca 01       	movw	r24, r20
    d670:	b6 01       	movw	r22, r12
    d672:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <ungetc>
    d676:	0b c0       	rjmp	.+22     	; 0xd68e <conv_brk+0x154>
    d678:	01 15       	cp	r16, r1
    d67a:	11 05       	cpc	r17, r1
    d67c:	19 f0       	breq	.+6      	; 0xd684 <conv_brk+0x14a>
    d67e:	d8 01       	movw	r26, r16
    d680:	4d 93       	st	X+, r20
    d682:	8d 01       	movw	r16, r26
    d684:	aa 94       	dec	r10
    d686:	bb 24       	eor	r11, r11
    d688:	aa 20       	and	r10, r10
    d68a:	c9 f6       	brne	.-78     	; 0xd63e <conv_brk+0x104>
    d68c:	02 c0       	rjmp	.+4      	; 0xd692 <conv_brk+0x158>
    d68e:	bb 20       	and	r11, r11
    d690:	31 f4       	brne	.+12     	; 0xd69e <conv_brk+0x164>
    d692:	01 15       	cp	r16, r1
    d694:	11 05       	cpc	r17, r1
    d696:	29 f0       	breq	.+10     	; 0xd6a2 <conv_brk+0x168>
    d698:	f8 01       	movw	r30, r16
    d69a:	10 82       	st	Z, r1
    d69c:	02 c0       	rjmp	.+4      	; 0xd6a2 <conv_brk+0x168>
    d69e:	ee 24       	eor	r14, r14
    d6a0:	ff 24       	eor	r15, r15
    d6a2:	c7 01       	movw	r24, r14
    d6a4:	a0 96       	adiw	r28, 0x20	; 32
    d6a6:	0f b6       	in	r0, 0x3f	; 63
    d6a8:	f8 94       	cli
    d6aa:	de bf       	out	0x3e, r29	; 62
    d6ac:	0f be       	out	0x3f, r0	; 63
    d6ae:	cd bf       	out	0x3d, r28	; 61
    d6b0:	cf 91       	pop	r28
    d6b2:	df 91       	pop	r29
    d6b4:	1f 91       	pop	r17
    d6b6:	0f 91       	pop	r16
    d6b8:	ff 90       	pop	r15
    d6ba:	ef 90       	pop	r14
    d6bc:	df 90       	pop	r13
    d6be:	cf 90       	pop	r12
    d6c0:	bf 90       	pop	r11
    d6c2:	af 90       	pop	r10
    d6c4:	9f 90       	pop	r9
    d6c6:	8f 90       	pop	r8
    d6c8:	7f 90       	pop	r7
    d6ca:	6f 90       	pop	r6
    d6cc:	08 95       	ret

0000d6ce <vfscanf>:
    d6ce:	6f 92       	push	r6
    d6d0:	7f 92       	push	r7
    d6d2:	8f 92       	push	r8
    d6d4:	9f 92       	push	r9
    d6d6:	af 92       	push	r10
    d6d8:	bf 92       	push	r11
    d6da:	cf 92       	push	r12
    d6dc:	df 92       	push	r13
    d6de:	ef 92       	push	r14
    d6e0:	ff 92       	push	r15
    d6e2:	0f 93       	push	r16
    d6e4:	1f 93       	push	r17
    d6e6:	cf 93       	push	r28
    d6e8:	df 93       	push	r29
    d6ea:	5c 01       	movw	r10, r24
    d6ec:	6b 01       	movw	r12, r22
    d6ee:	3a 01       	movw	r6, r20
    d6f0:	fc 01       	movw	r30, r24
    d6f2:	17 82       	std	Z+7, r1	; 0x07
    d6f4:	16 82       	std	Z+6, r1	; 0x06
    d6f6:	88 24       	eor	r8, r8
    d6f8:	ea c0       	rjmp	.+468    	; 0xd8ce <vfscanf+0x200>
    d6fa:	81 2f       	mov	r24, r17
    d6fc:	90 e0       	ldi	r25, 0x00	; 0
    d6fe:	0e 94 90 67 	call	0xcf20	; 0xcf20 <isspace>
    d702:	89 2b       	or	r24, r25
    d704:	21 f0       	breq	.+8      	; 0xd70e <vfscanf+0x40>
    d706:	c5 01       	movw	r24, r10
    d708:	0e 94 f2 69 	call	0xd3e4	; 0xd3e4 <skip_spaces>
    d70c:	e0 c0       	rjmp	.+448    	; 0xd8ce <vfscanf+0x200>
    d70e:	15 32       	cpi	r17, 0x25	; 37
    d710:	49 f4       	brne	.+18     	; 0xd724 <vfscanf+0x56>
    d712:	f6 01       	movw	r30, r12
    d714:	f3 fc       	sbrc	r15, 3
    d716:	65 91       	lpm	r22, Z+
    d718:	f3 fe       	sbrs	r15, 3
    d71a:	61 91       	ld	r22, Z+
    d71c:	6f 01       	movw	r12, r30
    d71e:	65 32       	cpi	r22, 0x25	; 37
    d720:	69 f4       	brne	.+26     	; 0xd73c <vfscanf+0x6e>
    d722:	15 e2       	ldi	r17, 0x25	; 37
    d724:	c5 01       	movw	r24, r10
    d726:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d72a:	97 fd       	sbrc	r25, 7
    d72c:	dc c0       	rjmp	.+440    	; 0xd8e6 <vfscanf+0x218>
    d72e:	18 17       	cp	r17, r24
    d730:	09 f4       	brne	.+2      	; 0xd734 <vfscanf+0x66>
    d732:	cd c0       	rjmp	.+410    	; 0xd8ce <vfscanf+0x200>
    d734:	b5 01       	movw	r22, r10
    d736:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <ungetc>
    d73a:	da c0       	rjmp	.+436    	; 0xd8f0 <vfscanf+0x222>
    d73c:	6a 32       	cpi	r22, 0x2A	; 42
    d73e:	19 f0       	breq	.+6      	; 0xd746 <vfscanf+0x78>
    d740:	16 2f       	mov	r17, r22
    d742:	00 e0       	ldi	r16, 0x00	; 0
    d744:	06 c0       	rjmp	.+12     	; 0xd752 <vfscanf+0x84>
    d746:	f3 fc       	sbrc	r15, 3
    d748:	15 91       	lpm	r17, Z+
    d74a:	f3 fe       	sbrs	r15, 3
    d74c:	11 91       	ld	r17, Z+
    d74e:	6f 01       	movw	r12, r30
    d750:	01 e0       	ldi	r16, 0x01	; 1
    d752:	99 24       	eor	r9, r9
    d754:	0f c0       	rjmp	.+30     	; 0xd774 <vfscanf+0xa6>
    d756:	02 60       	ori	r16, 0x02	; 2
    d758:	69 2d       	mov	r22, r9
    d75a:	70 e0       	ldi	r23, 0x00	; 0
    d75c:	80 e0       	ldi	r24, 0x00	; 0
    d75e:	90 e0       	ldi	r25, 0x00	; 0
    d760:	40 e2       	ldi	r20, 0x20	; 32
    d762:	0e 94 c4 69 	call	0xd388	; 0xd388 <mulacc>
    d766:	96 2e       	mov	r9, r22
    d768:	f6 01       	movw	r30, r12
    d76a:	f3 fc       	sbrc	r15, 3
    d76c:	15 91       	lpm	r17, Z+
    d76e:	f3 fe       	sbrs	r15, 3
    d770:	11 91       	ld	r17, Z+
    d772:	6f 01       	movw	r12, r30
    d774:	21 2f       	mov	r18, r17
    d776:	20 53       	subi	r18, 0x30	; 48
    d778:	2a 30       	cpi	r18, 0x0A	; 10
    d77a:	68 f3       	brcs	.-38     	; 0xd756 <vfscanf+0x88>
    d77c:	01 fd       	sbrc	r16, 1
    d77e:	03 c0       	rjmp	.+6      	; 0xd786 <vfscanf+0xb8>
    d780:	99 24       	eor	r9, r9
    d782:	9a 94       	dec	r9
    d784:	03 c0       	rjmp	.+6      	; 0xd78c <vfscanf+0xbe>
    d786:	99 20       	and	r9, r9
    d788:	09 f4       	brne	.+2      	; 0xd78c <vfscanf+0xbe>
    d78a:	b2 c0       	rjmp	.+356    	; 0xd8f0 <vfscanf+0x222>
    d78c:	18 36       	cpi	r17, 0x68	; 104
    d78e:	21 f0       	breq	.+8      	; 0xd798 <vfscanf+0xca>
    d790:	1c 36       	cpi	r17, 0x6C	; 108
    d792:	99 f4       	brne	.+38     	; 0xd7ba <vfscanf+0xec>
    d794:	f6 01       	movw	r30, r12
    d796:	0b c0       	rjmp	.+22     	; 0xd7ae <vfscanf+0xe0>
    d798:	f6 01       	movw	r30, r12
    d79a:	f3 fc       	sbrc	r15, 3
    d79c:	65 91       	lpm	r22, Z+
    d79e:	f3 fe       	sbrs	r15, 3
    d7a0:	61 91       	ld	r22, Z+
    d7a2:	68 36       	cpi	r22, 0x68	; 104
    d7a4:	19 f0       	breq	.+6      	; 0xd7ac <vfscanf+0xde>
    d7a6:	6f 01       	movw	r12, r30
    d7a8:	16 2f       	mov	r17, r22
    d7aa:	07 c0       	rjmp	.+14     	; 0xd7ba <vfscanf+0xec>
    d7ac:	08 60       	ori	r16, 0x08	; 8
    d7ae:	04 60       	ori	r16, 0x04	; 4
    d7b0:	f3 fc       	sbrc	r15, 3
    d7b2:	15 91       	lpm	r17, Z+
    d7b4:	f3 fe       	sbrs	r15, 3
    d7b6:	11 91       	ld	r17, Z+
    d7b8:	6f 01       	movw	r12, r30
    d7ba:	11 23       	and	r17, r17
    d7bc:	09 f4       	brne	.+2      	; 0xd7c0 <vfscanf+0xf2>
    d7be:	98 c0       	rjmp	.+304    	; 0xd8f0 <vfscanf+0x222>
    d7c0:	8c e1       	ldi	r24, 0x1C	; 28
    d7c2:	96 e2       	ldi	r25, 0x26	; 38
    d7c4:	61 2f       	mov	r22, r17
    d7c6:	70 e0       	ldi	r23, 0x00	; 0
    d7c8:	0e 94 7a 6f 	call	0xdef4	; 0xdef4 <strchr_P>
    d7cc:	89 2b       	or	r24, r25
    d7ce:	09 f4       	brne	.+2      	; 0xd7d2 <vfscanf+0x104>
    d7d0:	8f c0       	rjmp	.+286    	; 0xd8f0 <vfscanf+0x222>
    d7d2:	80 2f       	mov	r24, r16
    d7d4:	00 ff       	sbrs	r16, 0
    d7d6:	03 c0       	rjmp	.+6      	; 0xd7de <vfscanf+0x110>
    d7d8:	ee 24       	eor	r14, r14
    d7da:	ff 24       	eor	r15, r15
    d7dc:	07 c0       	rjmp	.+14     	; 0xd7ec <vfscanf+0x11e>
    d7de:	f3 01       	movw	r30, r6
    d7e0:	e0 80       	ld	r14, Z
    d7e2:	f1 80       	ldd	r15, Z+1	; 0x01
    d7e4:	22 e0       	ldi	r18, 0x02	; 2
    d7e6:	30 e0       	ldi	r19, 0x00	; 0
    d7e8:	62 0e       	add	r6, r18
    d7ea:	73 1e       	adc	r7, r19
    d7ec:	1e 36       	cpi	r17, 0x6E	; 110
    d7ee:	51 f4       	brne	.+20     	; 0xd804 <vfscanf+0x136>
    d7f0:	f5 01       	movw	r30, r10
    d7f2:	46 81       	ldd	r20, Z+6	; 0x06
    d7f4:	57 81       	ldd	r21, Z+7	; 0x07
    d7f6:	60 e0       	ldi	r22, 0x00	; 0
    d7f8:	70 e0       	ldi	r23, 0x00	; 0
    d7fa:	c7 01       	movw	r24, r14
    d7fc:	20 2f       	mov	r18, r16
    d7fe:	0e 94 b8 69 	call	0xd370	; 0xd370 <putval>
    d802:	65 c0       	rjmp	.+202    	; 0xd8ce <vfscanf+0x200>
    d804:	13 36       	cpi	r17, 0x63	; 99
    d806:	91 f4       	brne	.+36     	; 0xd82c <vfscanf+0x15e>
    d808:	81 fd       	sbrc	r24, 1
    d80a:	02 c0       	rjmp	.+4      	; 0xd810 <vfscanf+0x142>
    d80c:	99 24       	eor	r9, r9
    d80e:	93 94       	inc	r9
    d810:	c5 01       	movw	r24, r10
    d812:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d816:	97 fd       	sbrc	r25, 7
    d818:	66 c0       	rjmp	.+204    	; 0xd8e6 <vfscanf+0x218>
    d81a:	e1 14       	cp	r14, r1
    d81c:	f1 04       	cpc	r15, r1
    d81e:	19 f0       	breq	.+6      	; 0xd826 <vfscanf+0x158>
    d820:	f7 01       	movw	r30, r14
    d822:	81 93       	st	Z+, r24
    d824:	7f 01       	movw	r14, r30
    d826:	9a 94       	dec	r9
    d828:	99 f7       	brne	.-26     	; 0xd810 <vfscanf+0x142>
    d82a:	4f c0       	rjmp	.+158    	; 0xd8ca <vfscanf+0x1fc>
    d82c:	1b 35       	cpi	r17, 0x5B	; 91
    d82e:	59 f4       	brne	.+22     	; 0xd846 <vfscanf+0x178>
    d830:	c5 01       	movw	r24, r10
    d832:	69 2d       	mov	r22, r9
    d834:	a7 01       	movw	r20, r14
    d836:	96 01       	movw	r18, r12
    d838:	0e 94 9d 6a 	call	0xd53a	; 0xd53a <conv_brk>
    d83c:	6c 01       	movw	r12, r24
    d83e:	00 97       	sbiw	r24, 0x00	; 0
    d840:	09 f0       	breq	.+2      	; 0xd844 <vfscanf+0x176>
    d842:	43 c0       	rjmp	.+134    	; 0xd8ca <vfscanf+0x1fc>
    d844:	3d c0       	rjmp	.+122    	; 0xd8c0 <vfscanf+0x1f2>
    d846:	c5 01       	movw	r24, r10
    d848:	0e 94 f2 69 	call	0xd3e4	; 0xd3e4 <skip_spaces>
    d84c:	97 fd       	sbrc	r25, 7
    d84e:	4b c0       	rjmp	.+150    	; 0xd8e6 <vfscanf+0x218>
    d850:	1f 36       	cpi	r17, 0x6F	; 111
    d852:	59 f1       	breq	.+86     	; 0xd8aa <vfscanf+0x1dc>
    d854:	10 37       	cpi	r17, 0x70	; 112
    d856:	28 f4       	brcc	.+10     	; 0xd862 <vfscanf+0x194>
    d858:	14 36       	cpi	r17, 0x64	; 100
    d85a:	29 f1       	breq	.+74     	; 0xd8a6 <vfscanf+0x1d8>
    d85c:	19 36       	cpi	r17, 0x69	; 105
    d85e:	39 f5       	brne	.+78     	; 0xd8ae <vfscanf+0x1e0>
    d860:	27 c0       	rjmp	.+78     	; 0xd8b0 <vfscanf+0x1e2>
    d862:	13 37       	cpi	r17, 0x73	; 115
    d864:	19 f0       	breq	.+6      	; 0xd86c <vfscanf+0x19e>
    d866:	15 37       	cpi	r17, 0x75	; 117
    d868:	11 f5       	brne	.+68     	; 0xd8ae <vfscanf+0x1e0>
    d86a:	1d c0       	rjmp	.+58     	; 0xd8a6 <vfscanf+0x1d8>
    d86c:	c5 01       	movw	r24, r10
    d86e:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <fgetc>
    d872:	ec 01       	movw	r28, r24
    d874:	97 fd       	sbrc	r25, 7
    d876:	11 c0       	rjmp	.+34     	; 0xd89a <vfscanf+0x1cc>
    d878:	0e 94 90 67 	call	0xcf20	; 0xcf20 <isspace>
    d87c:	89 2b       	or	r24, r25
    d87e:	29 f0       	breq	.+10     	; 0xd88a <vfscanf+0x1bc>
    d880:	ce 01       	movw	r24, r28
    d882:	b5 01       	movw	r22, r10
    d884:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <ungetc>
    d888:	08 c0       	rjmp	.+16     	; 0xd89a <vfscanf+0x1cc>
    d88a:	e1 14       	cp	r14, r1
    d88c:	f1 04       	cpc	r15, r1
    d88e:	19 f0       	breq	.+6      	; 0xd896 <vfscanf+0x1c8>
    d890:	f7 01       	movw	r30, r14
    d892:	c1 93       	st	Z+, r28
    d894:	7f 01       	movw	r14, r30
    d896:	9a 94       	dec	r9
    d898:	49 f7       	brne	.-46     	; 0xd86c <vfscanf+0x19e>
    d89a:	e1 14       	cp	r14, r1
    d89c:	f1 04       	cpc	r15, r1
    d89e:	a9 f0       	breq	.+42     	; 0xd8ca <vfscanf+0x1fc>
    d8a0:	f7 01       	movw	r30, r14
    d8a2:	10 82       	st	Z, r1
    d8a4:	12 c0       	rjmp	.+36     	; 0xd8ca <vfscanf+0x1fc>
    d8a6:	00 62       	ori	r16, 0x20	; 32
    d8a8:	03 c0       	rjmp	.+6      	; 0xd8b0 <vfscanf+0x1e2>
    d8aa:	00 61       	ori	r16, 0x10	; 16
    d8ac:	01 c0       	rjmp	.+2      	; 0xd8b0 <vfscanf+0x1e2>
    d8ae:	00 64       	ori	r16, 0x40	; 64
    d8b0:	c5 01       	movw	r24, r10
    d8b2:	69 2d       	mov	r22, r9
    d8b4:	a7 01       	movw	r20, r14
    d8b6:	20 2f       	mov	r18, r16
    d8b8:	0e 94 0b 6a 	call	0xd416	; 0xd416 <conv_int>
    d8bc:	88 23       	and	r24, r24
    d8be:	29 f4       	brne	.+10     	; 0xd8ca <vfscanf+0x1fc>
    d8c0:	f5 01       	movw	r30, r10
    d8c2:	83 81       	ldd	r24, Z+3	; 0x03
    d8c4:	80 73       	andi	r24, 0x30	; 48
    d8c6:	79 f4       	brne	.+30     	; 0xd8e6 <vfscanf+0x218>
    d8c8:	13 c0       	rjmp	.+38     	; 0xd8f0 <vfscanf+0x222>
    d8ca:	00 ff       	sbrs	r16, 0
    d8cc:	83 94       	inc	r8
    d8ce:	f5 01       	movw	r30, r10
    d8d0:	f3 80       	ldd	r15, Z+3	; 0x03
    d8d2:	f6 01       	movw	r30, r12
    d8d4:	f3 fc       	sbrc	r15, 3
    d8d6:	15 91       	lpm	r17, Z+
    d8d8:	f3 fe       	sbrs	r15, 3
    d8da:	11 91       	ld	r17, Z+
    d8dc:	6f 01       	movw	r12, r30
    d8de:	11 23       	and	r17, r17
    d8e0:	09 f0       	breq	.+2      	; 0xd8e4 <vfscanf+0x216>
    d8e2:	0b cf       	rjmp	.-490    	; 0xd6fa <vfscanf+0x2c>
    d8e4:	05 c0       	rjmp	.+10     	; 0xd8f0 <vfscanf+0x222>
    d8e6:	88 20       	and	r8, r8
    d8e8:	19 f4       	brne	.+6      	; 0xd8f0 <vfscanf+0x222>
    d8ea:	2f ef       	ldi	r18, 0xFF	; 255
    d8ec:	3f ef       	ldi	r19, 0xFF	; 255
    d8ee:	02 c0       	rjmp	.+4      	; 0xd8f4 <vfscanf+0x226>
    d8f0:	28 2d       	mov	r18, r8
    d8f2:	30 e0       	ldi	r19, 0x00	; 0
    d8f4:	c9 01       	movw	r24, r18
    d8f6:	df 91       	pop	r29
    d8f8:	cf 91       	pop	r28
    d8fa:	1f 91       	pop	r17
    d8fc:	0f 91       	pop	r16
    d8fe:	ff 90       	pop	r15
    d900:	ef 90       	pop	r14
    d902:	df 90       	pop	r13
    d904:	cf 90       	pop	r12
    d906:	bf 90       	pop	r11
    d908:	af 90       	pop	r10
    d90a:	9f 90       	pop	r9
    d90c:	8f 90       	pop	r8
    d90e:	7f 90       	pop	r7
    d910:	6f 90       	pop	r6
    d912:	08 95       	ret

0000d914 <dtoa_prf>:
    d914:	6f 92       	push	r6
    d916:	7f 92       	push	r7
    d918:	8f 92       	push	r8
    d91a:	9f 92       	push	r9
    d91c:	af 92       	push	r10
    d91e:	bf 92       	push	r11
    d920:	cf 92       	push	r12
    d922:	df 92       	push	r13
    d924:	ef 92       	push	r14
    d926:	ff 92       	push	r15
    d928:	0f 93       	push	r16
    d92a:	1f 93       	push	r17
    d92c:	df 93       	push	r29
    d92e:	cf 93       	push	r28
    d930:	cd b7       	in	r28, 0x3d	; 61
    d932:	de b7       	in	r29, 0x3e	; 62
    d934:	29 97       	sbiw	r28, 0x09	; 9
    d936:	0f b6       	in	r0, 0x3f	; 63
    d938:	f8 94       	cli
    d93a:	de bf       	out	0x3e, r29	; 62
    d93c:	0f be       	out	0x3f, r0	; 63
    d93e:	cd bf       	out	0x3d, r28	; 61
    d940:	6a 01       	movw	r12, r20
    d942:	12 2f       	mov	r17, r18
    d944:	a0 2e       	mov	r10, r16
    d946:	be 2c       	mov	r11, r14
    d948:	2b e3       	ldi	r18, 0x3B	; 59
    d94a:	20 17       	cp	r18, r16
    d94c:	18 f4       	brcc	.+6      	; 0xd954 <dtoa_prf+0x40>
    d94e:	2c e3       	ldi	r18, 0x3C	; 60
    d950:	92 2e       	mov	r9, r18
    d952:	02 c0       	rjmp	.+4      	; 0xd958 <dtoa_prf+0x44>
    d954:	90 2e       	mov	r9, r16
    d956:	93 94       	inc	r9
    d958:	ae 01       	movw	r20, r28
    d95a:	4f 5f       	subi	r20, 0xFF	; 255
    d95c:	5f 4f       	sbci	r21, 0xFF	; 255
    d95e:	27 e0       	ldi	r18, 0x07	; 7
    d960:	09 2d       	mov	r16, r9
    d962:	0e 94 99 66 	call	0xcd32	; 0xcd32 <__ftoa_engine>
    d966:	bc 01       	movw	r22, r24
    d968:	89 81       	ldd	r24, Y+1	; 0x01
    d96a:	e8 2e       	mov	r14, r24
    d96c:	ff 24       	eor	r15, r15
    d96e:	c7 01       	movw	r24, r14
    d970:	89 70       	andi	r24, 0x09	; 9
    d972:	90 70       	andi	r25, 0x00	; 0
    d974:	01 97       	sbiw	r24, 0x01	; 1
    d976:	11 f4       	brne	.+4      	; 0xd97c <dtoa_prf+0x68>
    d978:	ad e2       	ldi	r26, 0x2D	; 45
    d97a:	09 c0       	rjmp	.+18     	; 0xd98e <dtoa_prf+0x7a>
    d97c:	b1 fe       	sbrs	r11, 1
    d97e:	02 c0       	rjmp	.+4      	; 0xd984 <dtoa_prf+0x70>
    d980:	ab e2       	ldi	r26, 0x2B	; 43
    d982:	05 c0       	rjmp	.+10     	; 0xd98e <dtoa_prf+0x7a>
    d984:	b0 fc       	sbrc	r11, 0
    d986:	02 c0       	rjmp	.+4      	; 0xd98c <dtoa_prf+0x78>
    d988:	a0 e0       	ldi	r26, 0x00	; 0
    d98a:	01 c0       	rjmp	.+2      	; 0xd98e <dtoa_prf+0x7a>
    d98c:	a0 e2       	ldi	r26, 0x20	; 32
    d98e:	e3 fe       	sbrs	r14, 3
    d990:	3b c0       	rjmp	.+118    	; 0xda08 <dtoa_prf+0xf4>
    d992:	aa 23       	and	r26, r26
    d994:	11 f4       	brne	.+4      	; 0xd99a <dtoa_prf+0x86>
    d996:	23 e0       	ldi	r18, 0x03	; 3
    d998:	01 c0       	rjmp	.+2      	; 0xd99c <dtoa_prf+0x88>
    d99a:	24 e0       	ldi	r18, 0x04	; 4
    d99c:	21 17       	cp	r18, r17
    d99e:	10 f0       	brcs	.+4      	; 0xd9a4 <dtoa_prf+0x90>
    d9a0:	20 e0       	ldi	r18, 0x00	; 0
    d9a2:	02 c0       	rjmp	.+4      	; 0xd9a8 <dtoa_prf+0x94>
    d9a4:	12 1b       	sub	r17, r18
    d9a6:	21 2f       	mov	r18, r17
    d9a8:	eb 2c       	mov	r14, r11
    d9aa:	b4 fe       	sbrs	r11, 4
    d9ac:	02 c0       	rjmp	.+4      	; 0xd9b2 <dtoa_prf+0x9e>
    d9ae:	32 2f       	mov	r19, r18
    d9b0:	0a c0       	rjmp	.+20     	; 0xd9c6 <dtoa_prf+0xb2>
    d9b2:	f6 01       	movw	r30, r12
    d9b4:	32 2f       	mov	r19, r18
    d9b6:	80 e2       	ldi	r24, 0x20	; 32
    d9b8:	02 c0       	rjmp	.+4      	; 0xd9be <dtoa_prf+0xaa>
    d9ba:	81 93       	st	Z+, r24
    d9bc:	31 50       	subi	r19, 0x01	; 1
    d9be:	33 23       	and	r19, r19
    d9c0:	e1 f7       	brne	.-8      	; 0xd9ba <dtoa_prf+0xa6>
    d9c2:	c2 0e       	add	r12, r18
    d9c4:	d1 1c       	adc	r13, r1
    d9c6:	aa 23       	and	r26, r26
    d9c8:	19 f0       	breq	.+6      	; 0xd9d0 <dtoa_prf+0xbc>
    d9ca:	f6 01       	movw	r30, r12
    d9cc:	a1 93       	st	Z+, r26
    d9ce:	6f 01       	movw	r12, r30
    d9d0:	f6 01       	movw	r30, r12
    d9d2:	31 96       	adiw	r30, 0x01	; 1
    d9d4:	e2 fe       	sbrs	r14, 2
    d9d6:	05 c0       	rjmp	.+10     	; 0xd9e2 <dtoa_prf+0xce>
    d9d8:	9e e4       	ldi	r25, 0x4E	; 78
    d9da:	d6 01       	movw	r26, r12
    d9dc:	9c 93       	st	X, r25
    d9de:	81 e4       	ldi	r24, 0x41	; 65
    d9e0:	04 c0       	rjmp	.+8      	; 0xd9ea <dtoa_prf+0xd6>
    d9e2:	9e e6       	ldi	r25, 0x6E	; 110
    d9e4:	d6 01       	movw	r26, r12
    d9e6:	9c 93       	st	X, r25
    d9e8:	81 e6       	ldi	r24, 0x61	; 97
    d9ea:	11 96       	adiw	r26, 0x01	; 1
    d9ec:	8c 93       	st	X, r24
    d9ee:	91 83       	std	Z+1, r25	; 0x01
    d9f0:	32 96       	adiw	r30, 0x02	; 2
    d9f2:	df 01       	movw	r26, r30
    d9f4:	83 2f       	mov	r24, r19
    d9f6:	90 e2       	ldi	r25, 0x20	; 32
    d9f8:	02 c0       	rjmp	.+4      	; 0xd9fe <dtoa_prf+0xea>
    d9fa:	9d 93       	st	X+, r25
    d9fc:	81 50       	subi	r24, 0x01	; 1
    d9fe:	88 23       	and	r24, r24
    da00:	e1 f7       	brne	.-8      	; 0xd9fa <dtoa_prf+0xe6>
    da02:	e3 0f       	add	r30, r19
    da04:	f1 1d       	adc	r31, r1
    da06:	40 c0       	rjmp	.+128    	; 0xda88 <dtoa_prf+0x174>
    da08:	e2 fe       	sbrs	r14, 2
    da0a:	42 c0       	rjmp	.+132    	; 0xda90 <dtoa_prf+0x17c>
    da0c:	aa 23       	and	r26, r26
    da0e:	11 f4       	brne	.+4      	; 0xda14 <dtoa_prf+0x100>
    da10:	23 e0       	ldi	r18, 0x03	; 3
    da12:	01 c0       	rjmp	.+2      	; 0xda16 <dtoa_prf+0x102>
    da14:	24 e0       	ldi	r18, 0x04	; 4
    da16:	21 17       	cp	r18, r17
    da18:	10 f0       	brcs	.+4      	; 0xda1e <dtoa_prf+0x10a>
    da1a:	20 e0       	ldi	r18, 0x00	; 0
    da1c:	02 c0       	rjmp	.+4      	; 0xda22 <dtoa_prf+0x10e>
    da1e:	12 1b       	sub	r17, r18
    da20:	21 2f       	mov	r18, r17
    da22:	eb 2c       	mov	r14, r11
    da24:	b4 fe       	sbrs	r11, 4
    da26:	02 c0       	rjmp	.+4      	; 0xda2c <dtoa_prf+0x118>
    da28:	92 2f       	mov	r25, r18
    da2a:	0a c0       	rjmp	.+20     	; 0xda40 <dtoa_prf+0x12c>
    da2c:	f6 01       	movw	r30, r12
    da2e:	92 2f       	mov	r25, r18
    da30:	80 e2       	ldi	r24, 0x20	; 32
    da32:	02 c0       	rjmp	.+4      	; 0xda38 <dtoa_prf+0x124>
    da34:	81 93       	st	Z+, r24
    da36:	91 50       	subi	r25, 0x01	; 1
    da38:	99 23       	and	r25, r25
    da3a:	e1 f7       	brne	.-8      	; 0xda34 <dtoa_prf+0x120>
    da3c:	c2 0e       	add	r12, r18
    da3e:	d1 1c       	adc	r13, r1
    da40:	aa 23       	and	r26, r26
    da42:	19 f0       	breq	.+6      	; 0xda4a <dtoa_prf+0x136>
    da44:	f6 01       	movw	r30, r12
    da46:	a1 93       	st	Z+, r26
    da48:	6f 01       	movw	r12, r30
    da4a:	f6 01       	movw	r30, r12
    da4c:	31 96       	adiw	r30, 0x01	; 1
    da4e:	e2 fe       	sbrs	r14, 2
    da50:	08 c0       	rjmp	.+16     	; 0xda62 <dtoa_prf+0x14e>
    da52:	89 e4       	ldi	r24, 0x49	; 73
    da54:	d6 01       	movw	r26, r12
    da56:	8c 93       	st	X, r24
    da58:	8e e4       	ldi	r24, 0x4E	; 78
    da5a:	11 96       	adiw	r26, 0x01	; 1
    da5c:	8c 93       	st	X, r24
    da5e:	86 e4       	ldi	r24, 0x46	; 70
    da60:	07 c0       	rjmp	.+14     	; 0xda70 <dtoa_prf+0x15c>
    da62:	89 e6       	ldi	r24, 0x69	; 105
    da64:	d6 01       	movw	r26, r12
    da66:	8c 93       	st	X, r24
    da68:	8e e6       	ldi	r24, 0x6E	; 110
    da6a:	11 96       	adiw	r26, 0x01	; 1
    da6c:	8c 93       	st	X, r24
    da6e:	86 e6       	ldi	r24, 0x66	; 102
    da70:	81 83       	std	Z+1, r24	; 0x01
    da72:	32 96       	adiw	r30, 0x02	; 2
    da74:	df 01       	movw	r26, r30
    da76:	89 2f       	mov	r24, r25
    da78:	20 e2       	ldi	r18, 0x20	; 32
    da7a:	02 c0       	rjmp	.+4      	; 0xda80 <dtoa_prf+0x16c>
    da7c:	2d 93       	st	X+, r18
    da7e:	81 50       	subi	r24, 0x01	; 1
    da80:	88 23       	and	r24, r24
    da82:	e1 f7       	brne	.-8      	; 0xda7c <dtoa_prf+0x168>
    da84:	e9 0f       	add	r30, r25
    da86:	f1 1d       	adc	r31, r1
    da88:	10 82       	st	Z, r1
    da8a:	2e ef       	ldi	r18, 0xFE	; 254
    da8c:	3f ef       	ldi	r19, 0xFF	; 255
    da8e:	ae c0       	rjmp	.+348    	; 0xdbec <dtoa_prf+0x2d8>
    da90:	16 16       	cp	r1, r22
    da92:	17 06       	cpc	r1, r23
    da94:	1c f0       	brlt	.+6      	; 0xda9c <dtoa_prf+0x188>
    da96:	41 e0       	ldi	r20, 0x01	; 1
    da98:	50 e0       	ldi	r21, 0x00	; 0
    da9a:	03 c0       	rjmp	.+6      	; 0xdaa2 <dtoa_prf+0x18e>
    da9c:	ab 01       	movw	r20, r22
    da9e:	4f 5f       	subi	r20, 0xFF	; 255
    daa0:	5f 4f       	sbci	r21, 0xFF	; 255
    daa2:	aa 20       	and	r10, r10
    daa4:	19 f4       	brne	.+6      	; 0xdaac <dtoa_prf+0x198>
    daa6:	80 e0       	ldi	r24, 0x00	; 0
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	03 c0       	rjmp	.+6      	; 0xdab2 <dtoa_prf+0x19e>
    daac:	8a 2d       	mov	r24, r10
    daae:	90 e0       	ldi	r25, 0x00	; 0
    dab0:	01 96       	adiw	r24, 0x01	; 1
    dab2:	20 e0       	ldi	r18, 0x00	; 0
    dab4:	30 e0       	ldi	r19, 0x00	; 0
    dab6:	aa 23       	and	r26, r26
    dab8:	11 f0       	breq	.+4      	; 0xdabe <dtoa_prf+0x1aa>
    daba:	21 e0       	ldi	r18, 0x01	; 1
    dabc:	30 e0       	ldi	r19, 0x00	; 0
    dabe:	24 0f       	add	r18, r20
    dac0:	35 1f       	adc	r19, r21
    dac2:	28 0f       	add	r18, r24
    dac4:	39 1f       	adc	r19, r25
    dac6:	81 2f       	mov	r24, r17
    dac8:	90 e0       	ldi	r25, 0x00	; 0
    daca:	28 17       	cp	r18, r24
    dacc:	39 07       	cpc	r19, r25
    dace:	14 f0       	brlt	.+4      	; 0xdad4 <dtoa_prf+0x1c0>
    dad0:	20 e0       	ldi	r18, 0x00	; 0
    dad2:	02 c0       	rjmp	.+4      	; 0xdad8 <dtoa_prf+0x1c4>
    dad4:	12 1b       	sub	r17, r18
    dad6:	21 2f       	mov	r18, r17
    dad8:	4b 2d       	mov	r20, r11
    dada:	50 e0       	ldi	r21, 0x00	; 0
    dadc:	ca 01       	movw	r24, r20
    dade:	80 71       	andi	r24, 0x10	; 16
    dae0:	90 70       	andi	r25, 0x00	; 0
    dae2:	b4 fc       	sbrc	r11, 4
    dae4:	0d c0       	rjmp	.+26     	; 0xdb00 <dtoa_prf+0x1ec>
    dae6:	b3 fc       	sbrc	r11, 3
    dae8:	0b c0       	rjmp	.+22     	; 0xdb00 <dtoa_prf+0x1ec>
    daea:	f6 01       	movw	r30, r12
    daec:	32 2f       	mov	r19, r18
    daee:	40 e2       	ldi	r20, 0x20	; 32
    daf0:	02 c0       	rjmp	.+4      	; 0xdaf6 <dtoa_prf+0x1e2>
    daf2:	41 93       	st	Z+, r20
    daf4:	31 50       	subi	r19, 0x01	; 1
    daf6:	33 23       	and	r19, r19
    daf8:	e1 f7       	brne	.-8      	; 0xdaf2 <dtoa_prf+0x1de>
    dafa:	c2 0e       	add	r12, r18
    dafc:	d1 1c       	adc	r13, r1
    dafe:	01 c0       	rjmp	.+2      	; 0xdb02 <dtoa_prf+0x1ee>
    db00:	32 2f       	mov	r19, r18
    db02:	aa 23       	and	r26, r26
    db04:	19 f0       	breq	.+6      	; 0xdb0c <dtoa_prf+0x1f8>
    db06:	f6 01       	movw	r30, r12
    db08:	a1 93       	st	Z+, r26
    db0a:	6f 01       	movw	r12, r30
    db0c:	89 2b       	or	r24, r25
    db0e:	11 f0       	breq	.+4      	; 0xdb14 <dtoa_prf+0x200>
    db10:	13 2f       	mov	r17, r19
    db12:	0a c0       	rjmp	.+20     	; 0xdb28 <dtoa_prf+0x214>
    db14:	f6 01       	movw	r30, r12
    db16:	13 2f       	mov	r17, r19
    db18:	80 e3       	ldi	r24, 0x30	; 48
    db1a:	02 c0       	rjmp	.+4      	; 0xdb20 <dtoa_prf+0x20c>
    db1c:	81 93       	st	Z+, r24
    db1e:	11 50       	subi	r17, 0x01	; 1
    db20:	11 23       	and	r17, r17
    db22:	e1 f7       	brne	.-8      	; 0xdb1c <dtoa_prf+0x208>
    db24:	c3 0e       	add	r12, r19
    db26:	d1 1c       	adc	r13, r1
    db28:	09 2d       	mov	r16, r9
    db2a:	06 0f       	add	r16, r22
    db2c:	ba 80       	ldd	r11, Y+2	; 0x02
    db2e:	90 e1       	ldi	r25, 0x10	; 16
    db30:	89 2e       	mov	r8, r25
    db32:	91 2c       	mov	r9, r1
    db34:	8e 20       	and	r8, r14
    db36:	9f 20       	and	r9, r15
    db38:	e4 fe       	sbrs	r14, 4
    db3a:	04 c0       	rjmp	.+8      	; 0xdb44 <dtoa_prf+0x230>
    db3c:	f1 e3       	ldi	r31, 0x31	; 49
    db3e:	bf 16       	cp	r11, r31
    db40:	09 f4       	brne	.+2      	; 0xdb44 <dtoa_prf+0x230>
    db42:	01 50       	subi	r16, 0x01	; 1
    db44:	10 16       	cp	r1, r16
    db46:	14 f0       	brlt	.+4      	; 0xdb4c <dtoa_prf+0x238>
    db48:	01 e0       	ldi	r16, 0x01	; 1
    db4a:	03 c0       	rjmp	.+6      	; 0xdb52 <dtoa_prf+0x23e>
    db4c:	09 30       	cpi	r16, 0x09	; 9
    db4e:	08 f0       	brcs	.+2      	; 0xdb52 <dtoa_prf+0x23e>
    db50:	08 e0       	ldi	r16, 0x08	; 8
    db52:	9b 01       	movw	r18, r22
    db54:	77 ff       	sbrs	r23, 7
    db56:	02 c0       	rjmp	.+4      	; 0xdb5c <dtoa_prf+0x248>
    db58:	20 e0       	ldi	r18, 0x00	; 0
    db5a:	30 e0       	ldi	r19, 0x00	; 0
    db5c:	cb 01       	movw	r24, r22
    db5e:	01 96       	adiw	r24, 0x01	; 1
    db60:	82 1b       	sub	r24, r18
    db62:	93 0b       	sbc	r25, r19
    db64:	fe 01       	movw	r30, r28
    db66:	31 96       	adiw	r30, 0x01	; 1
    db68:	e8 0f       	add	r30, r24
    db6a:	f9 1f       	adc	r31, r25
    db6c:	8e e2       	ldi	r24, 0x2E	; 46
    db6e:	f8 2e       	mov	r15, r24
    db70:	3b 01       	movw	r6, r22
    db72:	60 1a       	sub	r6, r16
    db74:	71 08       	sbc	r7, r1
    db76:	8a 2d       	mov	r24, r10
    db78:	90 e0       	ldi	r25, 0x00	; 0
    db7a:	44 27       	eor	r20, r20
    db7c:	55 27       	eor	r21, r21
    db7e:	48 1b       	sub	r20, r24
    db80:	59 0b       	sbc	r21, r25
    db82:	8f ef       	ldi	r24, 0xFF	; 255
    db84:	2f 3f       	cpi	r18, 0xFF	; 255
    db86:	38 07       	cpc	r19, r24
    db88:	19 f4       	brne	.+6      	; 0xdb90 <dtoa_prf+0x27c>
    db8a:	d6 01       	movw	r26, r12
    db8c:	fd 92       	st	X+, r15
    db8e:	6d 01       	movw	r12, r26
    db90:	62 17       	cp	r22, r18
    db92:	73 07       	cpc	r23, r19
    db94:	2c f0       	brlt	.+10     	; 0xdba0 <dtoa_prf+0x28c>
    db96:	62 16       	cp	r6, r18
    db98:	73 06       	cpc	r7, r19
    db9a:	14 f4       	brge	.+4      	; 0xdba0 <dtoa_prf+0x28c>
    db9c:	80 81       	ld	r24, Z
    db9e:	01 c0       	rjmp	.+2      	; 0xdba2 <dtoa_prf+0x28e>
    dba0:	80 e3       	ldi	r24, 0x30	; 48
    dba2:	21 50       	subi	r18, 0x01	; 1
    dba4:	30 40       	sbci	r19, 0x00	; 0
    dba6:	31 96       	adiw	r30, 0x01	; 1
    dba8:	24 17       	cp	r18, r20
    dbaa:	35 07       	cpc	r19, r21
    dbac:	24 f0       	brlt	.+8      	; 0xdbb6 <dtoa_prf+0x2a2>
    dbae:	d6 01       	movw	r26, r12
    dbb0:	8d 93       	st	X+, r24
    dbb2:	6d 01       	movw	r12, r26
    dbb4:	e6 cf       	rjmp	.-52     	; 0xdb82 <dtoa_prf+0x26e>
    dbb6:	26 17       	cp	r18, r22
    dbb8:	37 07       	cpc	r19, r23
    dbba:	41 f4       	brne	.+16     	; 0xdbcc <dtoa_prf+0x2b8>
    dbbc:	b5 e3       	ldi	r27, 0x35	; 53
    dbbe:	bb 15       	cp	r27, r11
    dbc0:	20 f0       	brcs	.+8      	; 0xdbca <dtoa_prf+0x2b6>
    dbc2:	bb 16       	cp	r11, r27
    dbc4:	19 f4       	brne	.+6      	; 0xdbcc <dtoa_prf+0x2b8>
    dbc6:	89 28       	or	r8, r9
    dbc8:	09 f4       	brne	.+2      	; 0xdbcc <dtoa_prf+0x2b8>
    dbca:	81 e3       	ldi	r24, 0x31	; 49
    dbcc:	f6 01       	movw	r30, r12
    dbce:	81 93       	st	Z+, r24
    dbd0:	d6 01       	movw	r26, r12
    dbd2:	81 2f       	mov	r24, r17
    dbd4:	90 e2       	ldi	r25, 0x20	; 32
    dbd6:	02 c0       	rjmp	.+4      	; 0xdbdc <dtoa_prf+0x2c8>
    dbd8:	9c 93       	st	X, r25
    dbda:	81 50       	subi	r24, 0x01	; 1
    dbdc:	11 96       	adiw	r26, 0x01	; 1
    dbde:	88 23       	and	r24, r24
    dbe0:	d9 f7       	brne	.-10     	; 0xdbd8 <dtoa_prf+0x2c4>
    dbe2:	e1 0f       	add	r30, r17
    dbe4:	f1 1d       	adc	r31, r1
    dbe6:	10 82       	st	Z, r1
    dbe8:	20 e0       	ldi	r18, 0x00	; 0
    dbea:	30 e0       	ldi	r19, 0x00	; 0
    dbec:	c9 01       	movw	r24, r18
    dbee:	29 96       	adiw	r28, 0x09	; 9
    dbf0:	0f b6       	in	r0, 0x3f	; 63
    dbf2:	f8 94       	cli
    dbf4:	de bf       	out	0x3e, r29	; 62
    dbf6:	0f be       	out	0x3f, r0	; 63
    dbf8:	cd bf       	out	0x3d, r28	; 61
    dbfa:	cf 91       	pop	r28
    dbfc:	df 91       	pop	r29
    dbfe:	1f 91       	pop	r17
    dc00:	0f 91       	pop	r16
    dc02:	ff 90       	pop	r15
    dc04:	ef 90       	pop	r14
    dc06:	df 90       	pop	r13
    dc08:	cf 90       	pop	r12
    dc0a:	bf 90       	pop	r11
    dc0c:	af 90       	pop	r10
    dc0e:	9f 90       	pop	r9
    dc10:	8f 90       	pop	r8
    dc12:	7f 90       	pop	r7
    dc14:	6f 90       	pop	r6
    dc16:	08 95       	ret

0000dc18 <strtod>:
    dc18:	8f 92       	push	r8
    dc1a:	9f 92       	push	r9
    dc1c:	af 92       	push	r10
    dc1e:	bf 92       	push	r11
    dc20:	cf 92       	push	r12
    dc22:	df 92       	push	r13
    dc24:	ef 92       	push	r14
    dc26:	ff 92       	push	r15
    dc28:	0f 93       	push	r16
    dc2a:	1f 93       	push	r17
    dc2c:	cf 93       	push	r28
    dc2e:	df 93       	push	r29
    dc30:	ec 01       	movw	r28, r24
    dc32:	5b 01       	movw	r10, r22
    dc34:	61 15       	cp	r22, r1
    dc36:	71 05       	cpc	r23, r1
    dc38:	19 f0       	breq	.+6      	; 0xdc40 <strtod+0x28>
    dc3a:	fb 01       	movw	r30, r22
    dc3c:	91 83       	std	Z+1, r25	; 0x01
    dc3e:	80 83       	st	Z, r24
    dc40:	f9 90       	ld	r15, Y+
    dc42:	8f 2d       	mov	r24, r15
    dc44:	90 e0       	ldi	r25, 0x00	; 0
    dc46:	0e 94 90 67 	call	0xcf20	; 0xcf20 <isspace>
    dc4a:	89 2b       	or	r24, r25
    dc4c:	c9 f7       	brne	.-14     	; 0xdc40 <strtod+0x28>
    dc4e:	fd e2       	ldi	r31, 0x2D	; 45
    dc50:	ff 16       	cp	r15, r31
    dc52:	21 f4       	brne	.+8      	; 0xdc5c <strtod+0x44>
    dc54:	f9 90       	ld	r15, Y+
    dc56:	ee 24       	eor	r14, r14
    dc58:	e3 94       	inc	r14
    dc5a:	05 c0       	rjmp	.+10     	; 0xdc66 <strtod+0x4e>
    dc5c:	2b e2       	ldi	r18, 0x2B	; 43
    dc5e:	f2 16       	cp	r15, r18
    dc60:	09 f4       	brne	.+2      	; 0xdc64 <strtod+0x4c>
    dc62:	f9 90       	ld	r15, Y+
    dc64:	ee 24       	eor	r14, r14
    dc66:	8e 01       	movw	r16, r28
    dc68:	01 50       	subi	r16, 0x01	; 1
    dc6a:	10 40       	sbci	r17, 0x00	; 0
    dc6c:	c8 01       	movw	r24, r16
    dc6e:	68 e2       	ldi	r22, 0x28	; 40
    dc70:	76 e2       	ldi	r23, 0x26	; 38
    dc72:	43 e0       	ldi	r20, 0x03	; 3
    dc74:	50 e0       	ldi	r21, 0x00	; 0
    dc76:	0e 94 85 6f 	call	0xdf0a	; 0xdf0a <strncasecmp_P>
    dc7a:	89 2b       	or	r24, r25
    dc7c:	01 f5       	brne	.+64     	; 0xdcbe <strtod+0xa6>
    dc7e:	8e 01       	movw	r16, r28
    dc80:	0e 5f       	subi	r16, 0xFE	; 254
    dc82:	1f 4f       	sbci	r17, 0xFF	; 255
    dc84:	c8 01       	movw	r24, r16
    dc86:	6b e2       	ldi	r22, 0x2B	; 43
    dc88:	76 e2       	ldi	r23, 0x26	; 38
    dc8a:	45 e0       	ldi	r20, 0x05	; 5
    dc8c:	50 e0       	ldi	r21, 0x00	; 0
    dc8e:	0e 94 85 6f 	call	0xdf0a	; 0xdf0a <strncasecmp_P>
    dc92:	89 2b       	or	r24, r25
    dc94:	19 f4       	brne	.+6      	; 0xdc9c <strtod+0x84>
    dc96:	8e 01       	movw	r16, r28
    dc98:	09 5f       	subi	r16, 0xF9	; 249
    dc9a:	1f 4f       	sbci	r17, 0xFF	; 255
    dc9c:	a1 14       	cp	r10, r1
    dc9e:	b1 04       	cpc	r11, r1
    dca0:	19 f0       	breq	.+6      	; 0xdca8 <strtod+0x90>
    dca2:	f5 01       	movw	r30, r10
    dca4:	11 83       	std	Z+1, r17	; 0x01
    dca6:	00 83       	st	Z, r16
    dca8:	e0 fc       	sbrc	r14, 0
    dcaa:	04 c0       	rjmp	.+8      	; 0xdcb4 <strtod+0x9c>
    dcac:	70 e0       	ldi	r23, 0x00	; 0
    dcae:	90 e0       	ldi	r25, 0x00	; 0
    dcb0:	80 e8       	ldi	r24, 0x80	; 128
    dcb2:	14 c0       	rjmp	.+40     	; 0xdcdc <strtod+0xc4>
    dcb4:	70 e0       	ldi	r23, 0x00	; 0
    dcb6:	90 e0       	ldi	r25, 0x00	; 0
    dcb8:	80 e8       	ldi	r24, 0x80	; 128
    dcba:	6f ef       	ldi	r22, 0xFF	; 255
    dcbc:	08 c1       	rjmp	.+528    	; 0xdece <strtod+0x2b6>
    dcbe:	c8 01       	movw	r24, r16
    dcc0:	60 e3       	ldi	r22, 0x30	; 48
    dcc2:	76 e2       	ldi	r23, 0x26	; 38
    dcc4:	43 e0       	ldi	r20, 0x03	; 3
    dcc6:	50 e0       	ldi	r21, 0x00	; 0
    dcc8:	0e 94 85 6f 	call	0xdf0a	; 0xdf0a <strncasecmp_P>
    dccc:	89 2b       	or	r24, r25
    dcce:	69 f4       	brne	.+26     	; 0xdcea <strtod+0xd2>
    dcd0:	a1 14       	cp	r10, r1
    dcd2:	b1 04       	cpc	r11, r1
    dcd4:	29 f4       	brne	.+10     	; 0xdce0 <strtod+0xc8>
    dcd6:	70 e0       	ldi	r23, 0x00	; 0
    dcd8:	90 e0       	ldi	r25, 0x00	; 0
    dcda:	80 ec       	ldi	r24, 0xC0	; 192
    dcdc:	6f e7       	ldi	r22, 0x7F	; 127
    dcde:	f7 c0       	rjmp	.+494    	; 0xdece <strtod+0x2b6>
    dce0:	22 96       	adiw	r28, 0x02	; 2
    dce2:	f5 01       	movw	r30, r10
    dce4:	d1 83       	std	Z+1, r29	; 0x01
    dce6:	c0 83       	st	Z, r28
    dce8:	f6 cf       	rjmp	.-20     	; 0xdcd6 <strtod+0xbe>
    dcea:	88 24       	eor	r8, r8
    dcec:	99 24       	eor	r9, r9
    dcee:	40 e0       	ldi	r20, 0x00	; 0
    dcf0:	50 e0       	ldi	r21, 0x00	; 0
    dcf2:	60 e0       	ldi	r22, 0x00	; 0
    dcf4:	70 e0       	ldi	r23, 0x00	; 0
    dcf6:	ef 2d       	mov	r30, r15
    dcf8:	e0 53       	subi	r30, 0x30	; 48
    dcfa:	ea 30       	cpi	r30, 0x0A	; 10
    dcfc:	a0 f5       	brcc	.+104    	; 0xdd66 <strtod+0x14e>
    dcfe:	f2 e0       	ldi	r31, 0x02	; 2
    dd00:	ef 2a       	or	r14, r31
    dd02:	8e 2d       	mov	r24, r14
    dd04:	90 e0       	ldi	r25, 0x00	; 0
    dd06:	9c 01       	movw	r18, r24
    dd08:	28 70       	andi	r18, 0x08	; 8
    dd0a:	30 70       	andi	r19, 0x00	; 0
    dd0c:	e2 fe       	sbrs	r14, 2
    dd0e:	06 c0       	rjmp	.+12     	; 0xdd1c <strtod+0x104>
    dd10:	23 2b       	or	r18, r19
    dd12:	79 f5       	brne	.+94     	; 0xdd72 <strtod+0x15a>
    dd14:	08 94       	sec
    dd16:	81 1c       	adc	r8, r1
    dd18:	91 1c       	adc	r9, r1
    dd1a:	2b c0       	rjmp	.+86     	; 0xdd72 <strtod+0x15a>
    dd1c:	23 2b       	or	r18, r19
    dd1e:	19 f0       	breq	.+6      	; 0xdd26 <strtod+0x10e>
    dd20:	08 94       	sec
    dd22:	81 08       	sbc	r8, r1
    dd24:	91 08       	sbc	r9, r1
    dd26:	db 01       	movw	r26, r22
    dd28:	ca 01       	movw	r24, r20
    dd2a:	12 e0       	ldi	r17, 0x02	; 2
    dd2c:	88 0f       	add	r24, r24
    dd2e:	99 1f       	adc	r25, r25
    dd30:	aa 1f       	adc	r26, r26
    dd32:	bb 1f       	adc	r27, r27
    dd34:	1a 95       	dec	r17
    dd36:	d1 f7       	brne	.-12     	; 0xdd2c <strtod+0x114>
    dd38:	48 0f       	add	r20, r24
    dd3a:	59 1f       	adc	r21, r25
    dd3c:	6a 1f       	adc	r22, r26
    dd3e:	7b 1f       	adc	r23, r27
    dd40:	44 0f       	add	r20, r20
    dd42:	55 1f       	adc	r21, r21
    dd44:	66 1f       	adc	r22, r22
    dd46:	77 1f       	adc	r23, r23
    dd48:	4e 0f       	add	r20, r30
    dd4a:	51 1d       	adc	r21, r1
    dd4c:	61 1d       	adc	r22, r1
    dd4e:	71 1d       	adc	r23, r1
    dd50:	48 39       	cpi	r20, 0x98	; 152
    dd52:	29 e9       	ldi	r18, 0x99	; 153
    dd54:	52 07       	cpc	r21, r18
    dd56:	29 e9       	ldi	r18, 0x99	; 153
    dd58:	62 07       	cpc	r22, r18
    dd5a:	29 e1       	ldi	r18, 0x19	; 25
    dd5c:	72 07       	cpc	r23, r18
    dd5e:	48 f0       	brcs	.+18     	; 0xdd72 <strtod+0x15a>
    dd60:	84 e0       	ldi	r24, 0x04	; 4
    dd62:	e8 2a       	or	r14, r24
    dd64:	06 c0       	rjmp	.+12     	; 0xdd72 <strtod+0x15a>
    dd66:	ee 3f       	cpi	r30, 0xFE	; 254
    dd68:	31 f4       	brne	.+12     	; 0xdd76 <strtod+0x15e>
    dd6a:	e3 fc       	sbrc	r14, 3
    dd6c:	39 c0       	rjmp	.+114    	; 0xdde0 <strtod+0x1c8>
    dd6e:	98 e0       	ldi	r25, 0x08	; 8
    dd70:	e9 2a       	or	r14, r25
    dd72:	f9 90       	ld	r15, Y+
    dd74:	c0 cf       	rjmp	.-128    	; 0xdcf6 <strtod+0xde>
    dd76:	e5 33       	cpi	r30, 0x35	; 53
    dd78:	11 f0       	breq	.+4      	; 0xdd7e <strtod+0x166>
    dd7a:	e5 31       	cpi	r30, 0x15	; 21
    dd7c:	89 f5       	brne	.+98     	; 0xdde0 <strtod+0x1c8>
    dd7e:	29 91       	ld	r18, Y+
    dd80:	2d 32       	cpi	r18, 0x2D	; 45
    dd82:	19 f4       	brne	.+6      	; 0xdd8a <strtod+0x172>
    dd84:	e0 e1       	ldi	r30, 0x10	; 16
    dd86:	ee 2a       	or	r14, r30
    dd88:	05 c0       	rjmp	.+10     	; 0xdd94 <strtod+0x17c>
    dd8a:	2b 32       	cpi	r18, 0x2B	; 43
    dd8c:	19 f0       	breq	.+6      	; 0xdd94 <strtod+0x17c>
    dd8e:	81 e0       	ldi	r24, 0x01	; 1
    dd90:	90 e0       	ldi	r25, 0x00	; 0
    dd92:	03 c0       	rjmp	.+6      	; 0xdd9a <strtod+0x182>
    dd94:	29 91       	ld	r18, Y+
    dd96:	82 e0       	ldi	r24, 0x02	; 2
    dd98:	90 e0       	ldi	r25, 0x00	; 0
    dd9a:	e2 2f       	mov	r30, r18
    dd9c:	e0 53       	subi	r30, 0x30	; 48
    dd9e:	ea 30       	cpi	r30, 0x0A	; 10
    dda0:	18 f0       	brcs	.+6      	; 0xdda8 <strtod+0x190>
    dda2:	c8 1b       	sub	r28, r24
    dda4:	d9 0b       	sbc	r29, r25
    dda6:	1c c0       	rjmp	.+56     	; 0xdde0 <strtod+0x1c8>
    dda8:	20 e0       	ldi	r18, 0x00	; 0
    ddaa:	30 e0       	ldi	r19, 0x00	; 0
    ddac:	fc e0       	ldi	r31, 0x0C	; 12
    ddae:	20 38       	cpi	r18, 0x80	; 128
    ddb0:	3f 07       	cpc	r19, r31
    ddb2:	5c f4       	brge	.+22     	; 0xddca <strtod+0x1b2>
    ddb4:	c9 01       	movw	r24, r18
    ddb6:	88 0f       	add	r24, r24
    ddb8:	99 1f       	adc	r25, r25
    ddba:	88 0f       	add	r24, r24
    ddbc:	99 1f       	adc	r25, r25
    ddbe:	28 0f       	add	r18, r24
    ddc0:	39 1f       	adc	r19, r25
    ddc2:	22 0f       	add	r18, r18
    ddc4:	33 1f       	adc	r19, r19
    ddc6:	2e 0f       	add	r18, r30
    ddc8:	31 1d       	adc	r19, r1
    ddca:	e9 91       	ld	r30, Y+
    ddcc:	e0 53       	subi	r30, 0x30	; 48
    ddce:	ea 30       	cpi	r30, 0x0A	; 10
    ddd0:	68 f3       	brcs	.-38     	; 0xddac <strtod+0x194>
    ddd2:	e4 fe       	sbrs	r14, 4
    ddd4:	03 c0       	rjmp	.+6      	; 0xdddc <strtod+0x1c4>
    ddd6:	30 95       	com	r19
    ddd8:	21 95       	neg	r18
    ddda:	3f 4f       	sbci	r19, 0xFF	; 255
    dddc:	82 0e       	add	r8, r18
    ddde:	93 1e       	adc	r9, r19
    dde0:	ce 2c       	mov	r12, r14
    dde2:	dd 24       	eor	r13, r13
    dde4:	e1 fe       	sbrs	r14, 1
    dde6:	07 c0       	rjmp	.+14     	; 0xddf6 <strtod+0x1de>
    dde8:	a1 14       	cp	r10, r1
    ddea:	b1 04       	cpc	r11, r1
    ddec:	21 f0       	breq	.+8      	; 0xddf6 <strtod+0x1de>
    ddee:	21 97       	sbiw	r28, 0x01	; 1
    ddf0:	f5 01       	movw	r30, r10
    ddf2:	d1 83       	std	Z+1, r29	; 0x01
    ddf4:	c0 83       	st	Z, r28
    ddf6:	cb 01       	movw	r24, r22
    ddf8:	ba 01       	movw	r22, r20
    ddfa:	0e 94 4e 62 	call	0xc49c	; 0xc49c <__floatunsisf>
    ddfe:	7b 01       	movw	r14, r22
    de00:	8c 01       	movw	r16, r24
    de02:	f3 e0       	ldi	r31, 0x03	; 3
    de04:	cf 22       	and	r12, r31
    de06:	dd 24       	eor	r13, r13
    de08:	23 e0       	ldi	r18, 0x03	; 3
    de0a:	c2 16       	cp	r12, r18
    de0c:	d1 04       	cpc	r13, r1
    de0e:	21 f4       	brne	.+8      	; 0xde18 <strtod+0x200>
    de10:	17 fb       	bst	r17, 7
    de12:	10 95       	com	r17
    de14:	17 f9       	bld	r17, 7
    de16:	10 95       	com	r17
    de18:	57 01       	movw	r10, r14
    de1a:	68 01       	movw	r12, r16
    de1c:	c8 01       	movw	r24, r16
    de1e:	b7 01       	movw	r22, r14
    de20:	20 e0       	ldi	r18, 0x00	; 0
    de22:	30 e0       	ldi	r19, 0x00	; 0
    de24:	40 e0       	ldi	r20, 0x00	; 0
    de26:	50 e0       	ldi	r21, 0x00	; 0
    de28:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    de2c:	88 23       	and	r24, r24
    de2e:	09 f4       	brne	.+2      	; 0xde32 <strtod+0x21a>
    de30:	4a c0       	rjmp	.+148    	; 0xdec6 <strtod+0x2ae>
    de32:	97 fe       	sbrs	r9, 7
    de34:	0d c0       	rjmp	.+26     	; 0xde50 <strtod+0x238>
    de36:	27 e4       	ldi	r18, 0x47	; 71
    de38:	e2 2e       	mov	r14, r18
    de3a:	26 e2       	ldi	r18, 0x26	; 38
    de3c:	f2 2e       	mov	r15, r18
    de3e:	90 94       	com	r9
    de40:	81 94       	neg	r8
    de42:	91 08       	sbc	r9, r1
    de44:	93 94       	inc	r9
    de46:	c0 e2       	ldi	r28, 0x20	; 32
    de48:	d0 e0       	ldi	r29, 0x00	; 0
    de4a:	00 e0       	ldi	r16, 0x00	; 0
    de4c:	10 e0       	ldi	r17, 0x00	; 0
    de4e:	12 c0       	rjmp	.+36     	; 0xde74 <strtod+0x25c>
    de50:	9f e5       	ldi	r25, 0x5F	; 95
    de52:	e9 2e       	mov	r14, r25
    de54:	96 e2       	ldi	r25, 0x26	; 38
    de56:	f9 2e       	mov	r15, r25
    de58:	f6 cf       	rjmp	.-20     	; 0xde46 <strtod+0x22e>
    de5a:	f7 01       	movw	r30, r14
    de5c:	25 91       	lpm	r18, Z+
    de5e:	35 91       	lpm	r19, Z+
    de60:	45 91       	lpm	r20, Z+
    de62:	54 91       	lpm	r21, Z+
    de64:	c6 01       	movw	r24, r12
    de66:	b5 01       	movw	r22, r10
    de68:	0e 94 e8 63 	call	0xc7d0	; 0xc7d0 <__mulsf3>
    de6c:	5b 01       	movw	r10, r22
    de6e:	6c 01       	movw	r12, r24
    de70:	8c 1a       	sub	r8, r28
    de72:	9d 0a       	sbc	r9, r29
    de74:	8c 16       	cp	r8, r28
    de76:	9d 06       	cpc	r9, r29
    de78:	84 f7       	brge	.-32     	; 0xde5a <strtod+0x242>
    de7a:	d5 95       	asr	r29
    de7c:	c7 95       	ror	r28
    de7e:	0f 5f       	subi	r16, 0xFF	; 255
    de80:	1f 4f       	sbci	r17, 0xFF	; 255
    de82:	06 30       	cpi	r16, 0x06	; 6
    de84:	11 05       	cpc	r17, r1
    de86:	29 f0       	breq	.+10     	; 0xde92 <strtod+0x27a>
    de88:	8c ef       	ldi	r24, 0xFC	; 252
    de8a:	9f ef       	ldi	r25, 0xFF	; 255
    de8c:	e8 0e       	add	r14, r24
    de8e:	f9 1e       	adc	r15, r25
    de90:	f1 cf       	rjmp	.-30     	; 0xde74 <strtod+0x25c>
    de92:	c5 01       	movw	r24, r10
    de94:	d6 01       	movw	r26, r12
    de96:	7c 01       	movw	r14, r24
    de98:	8d 01       	movw	r16, r26
    de9a:	8c 2d       	mov	r24, r12
    de9c:	88 0f       	add	r24, r24
    de9e:	8d 2d       	mov	r24, r13
    dea0:	88 1f       	adc	r24, r24
    dea2:	8f 3f       	cpi	r24, 0xFF	; 255
    dea4:	51 f0       	breq	.+20     	; 0xdeba <strtod+0x2a2>
    dea6:	c6 01       	movw	r24, r12
    dea8:	b5 01       	movw	r22, r10
    deaa:	20 e0       	ldi	r18, 0x00	; 0
    deac:	30 e0       	ldi	r19, 0x00	; 0
    deae:	40 e0       	ldi	r20, 0x00	; 0
    deb0:	50 e0       	ldi	r21, 0x00	; 0
    deb2:	0e 94 ae 61 	call	0xc35c	; 0xc35c <__cmpsf2>
    deb6:	88 23       	and	r24, r24
    deb8:	31 f4       	brne	.+12     	; 0xdec6 <strtod+0x2ae>
    deba:	82 e2       	ldi	r24, 0x22	; 34
    debc:	90 e0       	ldi	r25, 0x00	; 0
    debe:	90 93 34 17 	sts	0x1734, r25
    dec2:	80 93 33 17 	sts	0x1733, r24
    dec6:	7e 2d       	mov	r23, r14
    dec8:	9f 2d       	mov	r25, r15
    deca:	80 2f       	mov	r24, r16
    decc:	61 2f       	mov	r22, r17
    dece:	27 2f       	mov	r18, r23
    ded0:	39 2f       	mov	r19, r25
    ded2:	48 2f       	mov	r20, r24
    ded4:	56 2f       	mov	r21, r22
    ded6:	b9 01       	movw	r22, r18
    ded8:	ca 01       	movw	r24, r20
    deda:	df 91       	pop	r29
    dedc:	cf 91       	pop	r28
    dede:	1f 91       	pop	r17
    dee0:	0f 91       	pop	r16
    dee2:	ff 90       	pop	r15
    dee4:	ef 90       	pop	r14
    dee6:	df 90       	pop	r13
    dee8:	cf 90       	pop	r12
    deea:	bf 90       	pop	r11
    deec:	af 90       	pop	r10
    deee:	9f 90       	pop	r9
    def0:	8f 90       	pop	r8
    def2:	08 95       	ret

0000def4 <strchr_P>:
    def4:	fc 01       	movw	r30, r24
    def6:	05 90       	lpm	r0, Z+
    def8:	06 16       	cp	r0, r22
    defa:	21 f0       	breq	.+8      	; 0xdf04 <strchr_P+0x10>
    defc:	00 20       	and	r0, r0
    defe:	d9 f7       	brne	.-10     	; 0xdef6 <strchr_P+0x2>
    df00:	c0 01       	movw	r24, r0
    df02:	08 95       	ret
    df04:	31 97       	sbiw	r30, 0x01	; 1
    df06:	cf 01       	movw	r24, r30
    df08:	08 95       	ret

0000df0a <strncasecmp_P>:
    df0a:	fb 01       	movw	r30, r22
    df0c:	dc 01       	movw	r26, r24
    df0e:	41 50       	subi	r20, 0x01	; 1
    df10:	50 40       	sbci	r21, 0x00	; 0
    df12:	88 f0       	brcs	.+34     	; 0xdf36 <strncasecmp_P+0x2c>
    df14:	8d 91       	ld	r24, X+
    df16:	81 34       	cpi	r24, 0x41	; 65
    df18:	1c f0       	brlt	.+6      	; 0xdf20 <strncasecmp_P+0x16>
    df1a:	8b 35       	cpi	r24, 0x5B	; 91
    df1c:	0c f4       	brge	.+2      	; 0xdf20 <strncasecmp_P+0x16>
    df1e:	80 5e       	subi	r24, 0xE0	; 224
    df20:	65 91       	lpm	r22, Z+
    df22:	61 34       	cpi	r22, 0x41	; 65
    df24:	1c f0       	brlt	.+6      	; 0xdf2c <strncasecmp_P+0x22>
    df26:	6b 35       	cpi	r22, 0x5B	; 91
    df28:	0c f4       	brge	.+2      	; 0xdf2c <strncasecmp_P+0x22>
    df2a:	60 5e       	subi	r22, 0xE0	; 224
    df2c:	86 1b       	sub	r24, r22
    df2e:	61 11       	cpse	r22, r1
    df30:	71 f3       	breq	.-36     	; 0xdf0e <strncasecmp_P+0x4>
    df32:	99 0b       	sbc	r25, r25
    df34:	08 95       	ret
    df36:	88 1b       	sub	r24, r24
    df38:	fc cf       	rjmp	.-8      	; 0xdf32 <strncasecmp_P+0x28>

0000df3a <strrev>:
    df3a:	dc 01       	movw	r26, r24
    df3c:	fc 01       	movw	r30, r24
    df3e:	67 2f       	mov	r22, r23
    df40:	71 91       	ld	r23, Z+
    df42:	77 23       	and	r23, r23
    df44:	e1 f7       	brne	.-8      	; 0xdf3e <strrev+0x4>
    df46:	32 97       	sbiw	r30, 0x02	; 2
    df48:	04 c0       	rjmp	.+8      	; 0xdf52 <strrev+0x18>
    df4a:	7c 91       	ld	r23, X
    df4c:	6d 93       	st	X+, r22
    df4e:	70 83       	st	Z, r23
    df50:	62 91       	ld	r22, -Z
    df52:	ae 17       	cp	r26, r30
    df54:	bf 07       	cpc	r27, r31
    df56:	c8 f3       	brcs	.-14     	; 0xdf4a <strrev+0x10>
    df58:	08 95       	ret

0000df5a <fgetc>:
    df5a:	cf 93       	push	r28
    df5c:	df 93       	push	r29
    df5e:	ec 01       	movw	r28, r24
    df60:	4b 81       	ldd	r20, Y+3	; 0x03
    df62:	40 ff       	sbrs	r20, 0
    df64:	1a c0       	rjmp	.+52     	; 0xdf9a <fgetc+0x40>
    df66:	46 ff       	sbrs	r20, 6
    df68:	0a c0       	rjmp	.+20     	; 0xdf7e <fgetc+0x24>
    df6a:	4f 7b       	andi	r20, 0xBF	; 191
    df6c:	4b 83       	std	Y+3, r20	; 0x03
    df6e:	8e 81       	ldd	r24, Y+6	; 0x06
    df70:	9f 81       	ldd	r25, Y+7	; 0x07
    df72:	01 96       	adiw	r24, 0x01	; 1
    df74:	9f 83       	std	Y+7, r25	; 0x07
    df76:	8e 83       	std	Y+6, r24	; 0x06
    df78:	8a 81       	ldd	r24, Y+2	; 0x02
    df7a:	28 2f       	mov	r18, r24
    df7c:	2b c0       	rjmp	.+86     	; 0xdfd4 <fgetc+0x7a>
    df7e:	42 ff       	sbrs	r20, 2
    df80:	13 c0       	rjmp	.+38     	; 0xdfa8 <fgetc+0x4e>
    df82:	e8 81       	ld	r30, Y
    df84:	f9 81       	ldd	r31, Y+1	; 0x01
    df86:	80 81       	ld	r24, Z
    df88:	28 2f       	mov	r18, r24
    df8a:	33 27       	eor	r19, r19
    df8c:	27 fd       	sbrc	r18, 7
    df8e:	30 95       	com	r19
    df90:	21 15       	cp	r18, r1
    df92:	31 05       	cpc	r19, r1
    df94:	29 f4       	brne	.+10     	; 0xdfa0 <fgetc+0x46>
    df96:	40 62       	ori	r20, 0x20	; 32
    df98:	4b 83       	std	Y+3, r20	; 0x03
    df9a:	2f ef       	ldi	r18, 0xFF	; 255
    df9c:	3f ef       	ldi	r19, 0xFF	; 255
    df9e:	1b c0       	rjmp	.+54     	; 0xdfd6 <fgetc+0x7c>
    dfa0:	31 96       	adiw	r30, 0x01	; 1
    dfa2:	f9 83       	std	Y+1, r31	; 0x01
    dfa4:	e8 83       	st	Y, r30
    dfa6:	11 c0       	rjmp	.+34     	; 0xdfca <fgetc+0x70>
    dfa8:	ea 85       	ldd	r30, Y+10	; 0x0a
    dfaa:	fb 85       	ldd	r31, Y+11	; 0x0b
    dfac:	ce 01       	movw	r24, r28
    dfae:	09 95       	icall
    dfb0:	9c 01       	movw	r18, r24
    dfb2:	97 ff       	sbrs	r25, 7
    dfb4:	0a c0       	rjmp	.+20     	; 0xdfca <fgetc+0x70>
    dfb6:	9b 81       	ldd	r25, Y+3	; 0x03
    dfb8:	2f 5f       	subi	r18, 0xFF	; 255
    dfba:	3f 4f       	sbci	r19, 0xFF	; 255
    dfbc:	11 f0       	breq	.+4      	; 0xdfc2 <fgetc+0x68>
    dfbe:	80 e2       	ldi	r24, 0x20	; 32
    dfc0:	01 c0       	rjmp	.+2      	; 0xdfc4 <fgetc+0x6a>
    dfc2:	80 e1       	ldi	r24, 0x10	; 16
    dfc4:	89 2b       	or	r24, r25
    dfc6:	8b 83       	std	Y+3, r24	; 0x03
    dfc8:	e8 cf       	rjmp	.-48     	; 0xdf9a <fgetc+0x40>
    dfca:	8e 81       	ldd	r24, Y+6	; 0x06
    dfcc:	9f 81       	ldd	r25, Y+7	; 0x07
    dfce:	01 96       	adiw	r24, 0x01	; 1
    dfd0:	9f 83       	std	Y+7, r25	; 0x07
    dfd2:	8e 83       	std	Y+6, r24	; 0x06
    dfd4:	30 e0       	ldi	r19, 0x00	; 0
    dfd6:	c9 01       	movw	r24, r18
    dfd8:	df 91       	pop	r29
    dfda:	cf 91       	pop	r28
    dfdc:	08 95       	ret

0000dfde <ungetc>:
    dfde:	9c 01       	movw	r18, r24
    dfe0:	fb 01       	movw	r30, r22
    dfe2:	83 81       	ldd	r24, Z+3	; 0x03
    dfe4:	80 ff       	sbrs	r24, 0
    dfe6:	11 c0       	rjmp	.+34     	; 0xe00a <ungetc+0x2c>
    dfe8:	86 fd       	sbrc	r24, 6
    dfea:	0f c0       	rjmp	.+30     	; 0xe00a <ungetc+0x2c>
    dfec:	9f ef       	ldi	r25, 0xFF	; 255
    dfee:	2f 3f       	cpi	r18, 0xFF	; 255
    dff0:	39 07       	cpc	r19, r25
    dff2:	59 f0       	breq	.+22     	; 0xe00a <ungetc+0x2c>
    dff4:	22 83       	std	Z+2, r18	; 0x02
    dff6:	80 64       	ori	r24, 0x40	; 64
    dff8:	8f 7d       	andi	r24, 0xDF	; 223
    dffa:	83 83       	std	Z+3, r24	; 0x03
    dffc:	86 81       	ldd	r24, Z+6	; 0x06
    dffe:	97 81       	ldd	r25, Z+7	; 0x07
    e000:	01 97       	sbiw	r24, 0x01	; 1
    e002:	97 83       	std	Z+7, r25	; 0x07
    e004:	86 83       	std	Z+6, r24	; 0x06
    e006:	30 e0       	ldi	r19, 0x00	; 0
    e008:	02 c0       	rjmp	.+4      	; 0xe00e <ungetc+0x30>
    e00a:	2f ef       	ldi	r18, 0xFF	; 255
    e00c:	3f ef       	ldi	r19, 0xFF	; 255
    e00e:	c9 01       	movw	r24, r18
    e010:	08 95       	ret

0000e012 <_exit>:
    e012:	f8 94       	cli

0000e014 <__stop_program>:
    e014:	ff cf       	rjmp	.-2      	; 0xe014 <__stop_program>
